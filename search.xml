<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Shellcode编写</title>
    <url>/2024/02/14/Re/Shellcode%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<p>本文主要是记录一下自己编写shellcode的过程，实现利用MessageBox弹窗。shellcode是一串与地址无关的二进制代码，因而对于一些地址写定的代码需要做调整，最为突出的就是<strong>函数调用和字符串调用</strong>。</p>
<p>首先是字符串的调用，来看两种不同写法的汇编就明白了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arry1[] = &#123; <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    00111855  mov         byte ptr [arry1],68h  </span></span><br><span class="line"><span class="comment">    00111859  mov         byte ptr [ebp-0Bh],65h  </span></span><br><span class="line"><span class="comment">    0011185D  mov         byte ptr [ebp-0Ah],6Ch  </span></span><br><span class="line"><span class="comment">    00111861  mov         byte ptr [ebp-9],6Ch  </span></span><br><span class="line"><span class="comment">    00111865  mov         byte ptr [ebp-8],6Fh  </span></span><br><span class="line"><span class="comment">    00111869  mov         byte ptr [ebp-7],0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> arry2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    0011186D  mov         eax,dword ptr [string &quot;hello&quot; (0117B30h)]  </span></span><br><span class="line"><span class="comment">    00111872  mov         dword ptr [arry2],eax  </span></span><br><span class="line"><span class="comment">    00111875  mov         cx,word ptr ds:[117B34h]  </span></span><br><span class="line"><span class="comment">    0011187C  mov         word ptr [ebp-18h],cx</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到第一种写法是将字符串的十六进制写到栈上，与地址是无关的；而第二种写法是从<strong>0117B30h</strong>该地址取字符串，我在x32dbg中调试发现该地址是位于.rodata段上的，因而写到shellcode里面就会出错。</p>
<span id="more"></span>

<p>接着就是大头了，如何实现函数的调用。我们可以使用<strong>LoadLibraryA</strong>和<strong>GetProcAddress</strong>函数实现任意函数的调用，如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span></span><br><span class="line"><span class="params">(WINAPI* MyMessageBoxA)</span><span class="params">(</span></span><br><span class="line"><span class="params">	_In_opt_ HWND hWnd,</span></span><br><span class="line"><span class="params">	_In_opt_ LPCSTR lpText,</span></span><br><span class="line"><span class="params">	_In_opt_ LPCSTR lpCaption,</span></span><br><span class="line"><span class="params">	_In_ UINT uType)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	HMODULE hModule = LoadLibraryA(<span class="string">&quot;user32.dll&quot;</span>);</span><br><span class="line">	MyMessageBoxA myMessageBoxA = (MyMessageBoxA)GetProcAddress(hModule, <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line"></span><br><span class="line">	myMessageBoxA(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题是<strong>LoadLibraryA</strong>和<strong>GetProcAddress</strong>函数该怎么做到与地址无关？这两个函数是存放在<strong>kernel32.dll</strong>中的，理论上我们只需要获取到该dll的地址，然后自实现一个简易的GetProcAddress获取到这两个关键函数的地址就可以。如何找到kernel32.dll的地址，需要运用到PEB（进程环境块）或者是TEB（线程环境块）来实现。PEB的地址存放在fs:[0x30]中；而TEB的地址存放在fs:[0x18]中，TEB偏移为0x30的地方存放着PEB的地址。所以就有两种方式拿到PEB。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> peb;</span><br><span class="line"></span><br><span class="line">    __asm &#123;</span><br><span class="line">        mov eax, fs: [<span class="number">0x30</span>] ;</span><br><span class="line">        mov peb, eax;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __asm &#123;</span><br><span class="line">        mov eax, fs: [<span class="number">0x18</span>] ;</span><br><span class="line">        mov eax, [eax + <span class="number">0x30</span>];</span><br><span class="line">        mov peb, eax;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来分析PEB的相关结构体。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span> &#123;</span></span><br><span class="line">    BYTE                          Reserved1[<span class="number">2</span>];</span><br><span class="line">    BYTE                          BeingDebugged;</span><br><span class="line">    BYTE                          Reserved2[<span class="number">1</span>];</span><br><span class="line">    PVOID                         Reserved3[<span class="number">2</span>];</span><br><span class="line">    PPEB_LDR_DATA                 Ldr;</span><br><span class="line">    PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;</span><br><span class="line">    PVOID                         Reserved4[<span class="number">3</span>];</span><br><span class="line">    PVOID                         AtlThunkSListPtr;</span><br><span class="line">    PVOID                         Reserved5;</span><br><span class="line">    ULONG                         Reserved6;</span><br><span class="line">    PVOID                         Reserved7;</span><br><span class="line">    ULONG                         Reserved8;</span><br><span class="line">    ULONG                         AtlThunkSListPtr32;</span><br><span class="line">    PVOID                         Reserved9[<span class="number">45</span>];</span><br><span class="line">    BYTE                          Reserved10[<span class="number">96</span>];</span><br><span class="line">    PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;</span><br><span class="line">    BYTE                          Reserved11[<span class="number">128</span>];</span><br><span class="line">    PVOID                         Reserved12[<span class="number">1</span>];</span><br><span class="line">    ULONG                         SessionId;</span><br><span class="line">&#125; PEB, *PPEB;</span><br></pre></td></tr></table></figure>

<p>在这个结构体中，我们需要的是<strong>Ldr</strong>成员，它指向<strong>PPEB_LDR_DATA</strong>结构体，其中包含了有关进程已加载模块的信息。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span> &#123;</span></span><br><span class="line">    ULONG Length;                                                           <span class="comment">//0x0</span></span><br><span class="line">    UCHAR Initialized;                                                      <span class="comment">//0x4</span></span><br><span class="line">    VOID* SsHandle;                                                         <span class="comment">//0x8</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InLoadOrderModuleList</span>;</span>                               <span class="comment">//0xc</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InMemoryOrderModuleList</span>;</span>                             <span class="comment">//0x14</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InInitializationOrderModuleList</span>;</span>                     <span class="comment">//0x1c</span></span><br><span class="line">    VOID* EntryInProgress;                                                  <span class="comment">//0x24</span></span><br><span class="line">    UCHAR ShutdownInProgress;                                               <span class="comment">//0x28</span></span><br><span class="line">    VOID* ShutdownThreadId;                                                 <span class="comment">//0x2c</span></span><br><span class="line">&#125; PEB_LDR_DATA, *PPEB_LDR_DATA;</span><br></pre></td></tr></table></figure>

<p>这个结构体提供了三个和模块信息相关的链表，只不过链接的顺序不一样，就拿<strong>InLoadOrderModuleList</strong>链表做分析，继续跟进<strong>LIST_ENTRY</strong>结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Flink</span>;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Blink</span>;</span></span><br><span class="line">&#125; LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</span><br></pre></td></tr></table></figure>

<p>发现是双链表结构体，根据微软官方的解释，结构体中成员实际指向的是<strong>LDR_DATA_TABLE_ENTRY</strong>，这才是我们真正需要的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//0xa8 bytes (sizeof)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InLoadOrderLinks</span>;</span>                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InMemoryOrderLinks</span>;</span>                                  <span class="comment">//0x8</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InInitializationOrderLinks</span>;</span>                          <span class="comment">//0x10</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x18</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x1c</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x20</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">FullDllName</span>;</span>                                     <span class="comment">//0x24</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">BaseDllName</span>;</span>                                     <span class="comment">//0x2c</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure>

<p>其中<strong>FullDllName</strong>和<strong>BaseDllName</strong>记录了模块的名字，<strong>DllBase</strong>记录了模块的加载地址，正是我们需要的。</p>
<p>可能这样理解会比较困难，不妨看看流程图：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20240213215357651.png" alt="image-20240213215357651"></p>
<p>这样就可以获取kernel32.dll的加载地址，然后使用我们自实现的GetProcAddress（具体可以看本人博客PE结构学习中导出表的部分），就可以获取到LoadLibraryA和GetProcAddress函数了。</p>
<p>Myshellcode.cpp：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyConfig.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">getPebAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span>* peb;</span><br><span class="line"></span><br><span class="line">	__asm &#123;</span><br><span class="line">		mov eax, fs: [<span class="number">0x18</span>] ;</span><br><span class="line">		mov eax, [eax + <span class="number">0x30</span>];</span><br><span class="line">		mov peb, eax;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> peb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">wclen</span><span class="params">(<span class="type">wchar_t</span>* str)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++) &#123;</span><br><span class="line">		len++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">wccmp</span><span class="params">(<span class="type">wchar_t</span>* str1, <span class="type">wchar_t</span>* str2)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> len1 = <span class="built_in">wclen</span>(str1);</span><br><span class="line">	<span class="type">int</span> len2 = <span class="built_in">wclen</span>(str2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (len1 == len2) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (str1[i] != str2[i]) &#123;</span><br><span class="line">				<span class="keyword">return</span> FALSE;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> TRUE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HMODULE <span class="title">getDllAddress</span><span class="params">(<span class="type">wchar_t</span>* dllname)</span> </span>&#123;</span><br><span class="line">	PPEB ppeb = (PPEB)<span class="built_in">getPebAddress</span>();</span><br><span class="line">	PPEB_LDR_DATA pldr = ppeb-&gt;Ldr;</span><br><span class="line"></span><br><span class="line">	PLDR_DATA_TABLE_ENTRY ppldr = (PLDR_DATA_TABLE_ENTRY)pldr-&gt;InLoadOrderModuleList.Flink;</span><br><span class="line">	<span class="keyword">while</span> (ppldr-&gt;InLoadOrderLinks.Flink != pldr-&gt;InLoadOrderModuleList.Flink) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">wccmp</span>(ppldr-&gt;BaseDllName.Buffer, dllname)) &#123;</span><br><span class="line">			<span class="keyword">return</span> (HMODULE)ppldr-&gt;DllBase;</span><br><span class="line">		&#125;</span><br><span class="line">		ppldr = (PLDR_DATA_TABLE_ENTRY)ppldr-&gt;InLoadOrderLinks.Flink;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FARPROC</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">MyNameGetProcAddress</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ LPCSTR lpProcName</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pIMAGE_DOS_HEADER = (PIMAGE_DOS_HEADER)hModule;</span><br><span class="line">	PIMAGE_NT_HEADERS pIMAGE_NT_HEADERS = (PIMAGE_NT_HEADERS)(pIMAGE_DOS_HEADER-&gt;e_lfanew + (DWORD)hModule);</span><br><span class="line">	PIMAGE_EXPORT_DIRECTORY pIMAGE_EXPORT_DIRECTORY = (PIMAGE_EXPORT_DIRECTORY)(pIMAGE_NT_HEADERS-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress + (DWORD)hModule);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 对比函数名称</span></span><br><span class="line">	DWORD* NameAddress = (DWORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfNames + (DWORD)hModule);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pIMAGE_EXPORT_DIRECTORY-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">		<span class="type">char</span>* FuncName = (<span class="type">char</span>*)(NameAddress[i] + (DWORD)hModule);</span><br><span class="line">		<span class="comment">// printf(&quot;%s\n&quot;, FuncName);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果对比成功</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(FuncName, lpProcName)) &#123;</span><br><span class="line">			<span class="comment">// 找到对应名称序号表中的内容</span></span><br><span class="line">			WORD* NameOrdinalAddress = (WORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfNameOrdinals + (DWORD)hModule);</span><br><span class="line">			WORD NameOrdinal = NameOrdinalAddress[i];</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 找到函数地址表中对应的内容</span></span><br><span class="line">			DWORD* FuncAddress = (DWORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfFunctions + (DWORD)hModule);</span><br><span class="line">			DWORD Func = FuncAddress[NameOrdinal] + (DWORD)hModule;</span><br><span class="line">			<span class="keyword">return</span> (FARPROC)Func;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">wchar_t</span> kernel32Str[] = &#123; <span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span> loadLibraryAStr[] = &#123; <span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;A&#x27;</span>, <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span> getProcAddressStr[] = &#123; <span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span> user32dllStr[] = &#123; <span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span> messageBoxStr[] = &#123; <span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">	HMODULE kernel32dll = <span class="built_in">getDllAddress</span>(kernel32Str);</span><br><span class="line">	pLoadLibraryA myLoadLibraryA = (pLoadLibraryA)<span class="built_in">MyNameGetProcAddress</span>(kernel32dll, loadLibraryAStr);</span><br><span class="line">	pGetProcAddress myGetProcAddress = (pGetProcAddress)<span class="built_in">MyNameGetProcAddress</span>(kernel32dll, getProcAddressStr);</span><br><span class="line"></span><br><span class="line">	HMODULE user32dll = <span class="built_in">myLoadLibraryA</span>(user32dllStr);</span><br><span class="line">	pMessageBoxA myMessageBoxA = (pMessageBoxA)<span class="built_in">myGetProcAddress</span>(user32dll, messageBoxStr);</span><br><span class="line">	<span class="built_in">myMessageBoxA</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Myconfig.h：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> </span></span><br><span class="line"><span class="function"><span class="params">(WINAPI *pMessageBoxA)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_opt_ HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_opt_ LPCSTR lpText,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_opt_ LPCSTR lpCaption,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ UINT uType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HMODULE</span></span></span><br><span class="line"><span class="function"><span class="params">(WINAPI *pLoadLibraryA)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPCSTR lpLibFileName</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">FARPROC</span></span></span><br><span class="line"><span class="function"><span class="params">(WINAPI *pGetProcAddress)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPCSTR lpProcName</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PEB_LDR_DATA</span> &#123;</span><br><span class="line">    ULONG Length;                                                           <span class="comment">//0x0</span></span><br><span class="line">    UCHAR Initialized;                                                      <span class="comment">//0x4</span></span><br><span class="line">    VOID* SsHandle;                                                         <span class="comment">//0x8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InLoadOrderModuleList;                               <span class="comment">//0xc</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InMemoryOrderModuleList;                             <span class="comment">//0x14</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InInitializationOrderModuleList;                     <span class="comment">//0x1c</span></span><br><span class="line">    VOID* EntryInProgress;                                                  <span class="comment">//0x24</span></span><br><span class="line">    UCHAR ShutdownInProgress;                                               <span class="comment">//0x28</span></span><br><span class="line">    VOID* ShutdownThreadId;                                                 <span class="comment">//0x2c</span></span><br><span class="line">&#125; PEB_LDR_DATA, * PPEB_LDR_DATA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PEB</span> &#123;</span><br><span class="line">    BYTE Reserved1[<span class="number">2</span>];</span><br><span class="line">    BYTE BeingDebugged;</span><br><span class="line">    BYTE Reserved2[<span class="number">1</span>];</span><br><span class="line">    PVOID Reserved3[<span class="number">2</span>];</span><br><span class="line">    PPEB_LDR_DATA Ldr;</span><br><span class="line">&#125; PEB, * PPEB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> &#123;</span><br><span class="line">    USHORT Length;</span><br><span class="line">    USHORT MaximumLength;</span><br><span class="line">    PWSTR  Buffer;</span><br><span class="line">&#125; UNICODE_STRING;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LDR_DATA_TABLE_ENTRY</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InMemoryOrderLinks;                                  <span class="comment">//0x8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InInitializationOrderLinks;                          <span class="comment">//0x10</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x18</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x1c</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x20</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> FullDllName;                                     <span class="comment">//0x24</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> BaseDllName;                                     <span class="comment">//0x2c</span></span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, * PLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure>

<p>成功弹窗！接下来就是将我们的C代码导出为shellcode，总结做的工作有以下几点：</p>
<ul>
<li>修改程序的入口</li>
<li>调整编译版本为Release</li>
<li>运行库改为静态（多线程&#x2F;MT）</li>
<li>关闭安全检查（&#x2F;GS-）</li>
<li>方便调试可以关闭编译优化</li>
<li>将程序入口函数放到文件开头，并声明其他函数防止找不到标识符</li>
</ul>
<p>最后写一个加载器对shellcode进行加载：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*func)</span><span class="params">()</span></span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> hexData[<span class="number">4096</span>] = &#123;</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x68</span>, <span class="number">0xB8</span>, <span class="number">0x4B</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0x98</span>, <span class="number">0xB9</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x52</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0x9C</span>, <span class="number">0xB8</span>, <span class="number">0x4E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0x9E</span>, <span class="number">0xB9</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xA0</span>, <span class="number">0xBA</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x55</span>, <span class="number">0xA2</span>, <span class="number">0xB8</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xA4</span>, <span class="number">0xB9</span>, <span class="number">0x32</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xA6</span>, <span class="number">0xBA</span>, <span class="number">0x2E</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x55</span>, <span class="number">0xA8</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xAA</span>,</span><br><span class="line">    <span class="number">0xB9</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0xAC</span>, <span class="number">0xBA</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xAE</span>, <span class="number">0x33</span>, <span class="number">0xC0</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xB0</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC4</span>, <span class="number">0x4C</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC5</span>, <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC6</span>, <span class="number">0x61</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC7</span>, <span class="number">0x64</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC8</span>, <span class="number">0x4C</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC9</span>, <span class="number">0x69</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCA</span>, <span class="number">0x62</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCB</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCC</span>, <span class="number">0x61</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCD</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCE</span>, <span class="number">0x79</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCF</span>, <span class="number">0x41</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB4</span>, <span class="number">0x47</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB5</span>, <span class="number">0x65</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB6</span>, <span class="number">0x74</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB7</span>, <span class="number">0x50</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB8</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB9</span>, <span class="number">0x6F</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBA</span>, <span class="number">0x63</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBB</span>, <span class="number">0x41</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBC</span>, <span class="number">0x64</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBD</span>, <span class="number">0x64</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBE</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBF</span>, <span class="number">0x65</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC0</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC1</span>, <span class="number">0x73</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC2</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE0</span>, <span class="number">0x75</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE1</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE2</span>, <span class="number">0x65</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE3</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE4</span>, <span class="number">0x33</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE5</span>, <span class="number">0x32</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE6</span>, <span class="number">0x2E</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE7</span>, <span class="number">0x64</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE8</span>, <span class="number">0x6C</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE9</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xEA</span>, <span class="number">0x00</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD4</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD5</span>, <span class="number">0x65</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD6</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD7</span>, <span class="number">0x73</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD8</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD9</span>, <span class="number">0x67</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDA</span>, <span class="number">0x65</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDB</span>, <span class="number">0x42</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDC</span>, <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDD</span>, <span class="number">0x78</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0x57</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDF</span>, <span class="number">0x00</span>, <span class="number">0x8D</span>, <span class="number">0x4D</span>, <span class="number">0x98</span>, <span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0x23</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x83</span>, <span class="number">0xC4</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x8D</span>, <span class="number">0x55</span>, <span class="number">0xC4</span>, <span class="number">0x52</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x50</span>, <span class="number">0xE8</span>, <span class="number">0x70</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF8</span>, <span class="number">0x8D</span>, <span class="number">0x4D</span>, <span class="number">0xB4</span>, <span class="number">0x51</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xFC</span>, <span class="number">0x52</span>, <span class="number">0xE8</span>, <span class="number">0x60</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF0</span>, <span class="number">0x8D</span>, <span class="number">0x45</span>, <span class="number">0xE0</span>, <span class="number">0x50</span>, <span class="number">0xFF</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xF8</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8D</span>, <span class="number">0x4D</span>, <span class="number">0xD4</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0x52</span>, <span class="number">0xFF</span>, <span class="number">0x55</span>, <span class="number">0xF0</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xEC</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x55</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0xE5</span>,</span><br><span class="line">    <span class="number">0x5D</span>, <span class="number">0xC3</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x51</span>, <span class="number">0x64</span>, <span class="number">0xA1</span>, <span class="number">0x18</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8B</span>, <span class="number">0x40</span>, <span class="number">0x30</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0xE5</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x08</span>, <span class="number">0xC7</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC7</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xEB</span>, <span class="number">0x09</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xFC</span>, <span class="number">0x83</span>, <span class="number">0xC0</span>, <span class="number">0x01</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x4D</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0xB7</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x4A</span>, <span class="number">0x85</span>, <span class="number">0xC0</span>, <span class="number">0x74</span>, <span class="number">0x0B</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0xC1</span>, <span class="number">0x01</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0xDE</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xF8</span>, <span class="number">0x8B</span>, <span class="number">0xE5</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x0C</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x50</span>, <span class="number">0xE8</span>, <span class="number">0xB1</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x83</span>,</span><br><span class="line">    <span class="number">0xC4</span>, <span class="number">0x04</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF8</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0x0C</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xE8</span>, <span class="number">0xA2</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x83</span>, <span class="number">0xC4</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xF8</span>, <span class="number">0x3B</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0x75</span>, <span class="number">0x3E</span>, <span class="number">0xC7</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xEB</span>, <span class="number">0x09</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0xC0</span>, <span class="number">0x01</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0xFC</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xF8</span>, <span class="number">0x7D</span>, <span class="number">0x1E</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0xB7</span>, <span class="number">0x0C</span>, <span class="number">0x50</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x0C</span>, <span class="number">0x0F</span>, <span class="number">0xB7</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x50</span>, <span class="number">0x3B</span>, <span class="number">0xCA</span>, <span class="number">0x74</span>, <span class="number">0x04</span>, <span class="number">0x32</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xEB</span>, <span class="number">0x0A</span>, <span class="number">0xEB</span>, <span class="number">0xD1</span>, <span class="number">0xB0</span>, <span class="number">0x01</span>, <span class="number">0xEB</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0xEB</span>, <span class="number">0x02</span>, <span class="number">0x32</span>, <span class="number">0xC0</span>, <span class="number">0x8B</span>, <span class="number">0xE5</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x0C</span>, <span class="number">0xE8</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x48</span>, <span class="number">0x0C</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xF8</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xF8</span>, <span class="number">0x8B</span>, <span class="number">0x42</span>, <span class="number">0x0C</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xF8</span>, <span class="number">0x8B</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x3B</span>, <span class="number">0x42</span>, <span class="number">0x0C</span>, <span class="number">0x74</span>, <span class="number">0x2C</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x42</span>, <span class="number">0x30</span>, <span class="number">0x50</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0x53</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x83</span>, <span class="number">0xC4</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0xC8</span>, <span class="number">0x85</span>, <span class="number">0xC9</span>, <span class="number">0x74</span>, <span class="number">0x08</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x42</span>, <span class="number">0x18</span>, <span class="number">0xEB</span>, <span class="number">0x0C</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xFC</span>, <span class="number">0xEB</span>,</span><br><span class="line">    <span class="number">0xC7</span>, <span class="number">0x33</span>, <span class="number">0xC0</span>, <span class="number">0x8B</span>, <span class="number">0xE5</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x3C</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xE0</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xE0</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0x3C</span>, <span class="number">0x03</span>, <span class="number">0x55</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x55</span>, <span class="number">0xDC</span>,</span><br><span class="line">    <span class="number">0xB8</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6B</span>, <span class="number">0xC8</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xDC</span>, <span class="number">0x8B</span>, <span class="number">0x44</span>, <span class="number">0x0A</span>, <span class="number">0x78</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xE8</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xE8</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x51</span>, <span class="number">0x20</span>, <span class="number">0x03</span>, <span class="number">0x55</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0xD8</span>, <span class="number">0xC7</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xEB</span>, <span class="number">0x09</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x83</span>, <span class="number">0xC0</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xE8</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0xF4</span>, <span class="number">0x3B</span>, <span class="number">0x51</span>, <span class="number">0x18</span>, <span class="number">0x0F</span>, <span class="number">0x83</span>, <span class="number">0xAC</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x14</span>, <span class="number">0x81</span>, <span class="number">0x03</span>, <span class="number">0x55</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x0C</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x4D</span>, <span class="number">0xD4</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xF0</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xF0</span>,</span><br><span class="line">    <span class="number">0x8A</span>, <span class="number">0x02</span>, <span class="number">0x88</span>, <span class="number">0x45</span>, <span class="number">0xFF</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xEC</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0x01</span>, <span class="number">0x75</span>, <span class="number">0x2E</span>, <span class="number">0x80</span>, <span class="number">0x7D</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xF0</span>, <span class="number">0x8A</span>, <span class="number">0x42</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x88</span>, <span class="number">0x45</span>, <span class="number">0xFE</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0x41</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x75</span>, <span class="number">0x17</span>, <span class="number">0x83</span>, <span class="number">0x45</span>, <span class="number">0xF0</span>, <span class="number">0x02</span>, <span class="number">0x83</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0xEC</span>, <span class="number">0x02</span>, <span class="number">0x80</span>, <span class="number">0x7D</span>, <span class="number">0xFE</span>, <span class="number">0x00</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0xCC</span>, <span class="number">0xC7</span>, <span class="number">0x45</span>, <span class="number">0xE4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xEB</span>, <span class="number">0x08</span>, <span class="number">0x1B</span>, <span class="number">0xD2</span>, <span class="number">0x83</span>, <span class="number">0xCA</span>, <span class="number">0x01</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xE4</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xE4</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xD0</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0x7D</span>, <span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0x75</span>, <span class="number">0x3B</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0x8B</span>, <span class="number">0x51</span>, <span class="number">0x24</span>, <span class="number">0x03</span>, <span class="number">0x55</span>, <span class="number">0x08</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xCC</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x8B</span>, <span class="number">0x14</span>, <span class="number">0x41</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x55</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xE8</span>, <span class="number">0x8B</span>, <span class="number">0x48</span>, <span class="number">0x1C</span>, <span class="number">0x03</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xC8</span>, <span class="number">0x0F</span>, <span class="number">0xB7</span>, <span class="number">0x55</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xC8</span>, <span class="number">0x8B</span>, <span class="number">0x0C</span>, <span class="number">0x90</span>, <span class="number">0x03</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xC4</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xC4</span>, <span class="number">0xEB</span>,</span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0xE9</span>, <span class="number">0x3C</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x33</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0xE5</span>, <span class="number">0x5D</span>, <span class="number">0xC2</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LPVOID addressPointer = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="built_in">sizeof</span>(hexData), <span class="number">4096</span>, <span class="number">0x40</span>);</span><br><span class="line">    <span class="built_in">RtlMoveMemory</span>(addressPointer, hexData, <span class="built_in">sizeof</span>(hexData));</span><br><span class="line"></span><br><span class="line">    ((func)addressPointer)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Re</category>
      </categories>
      <tags>
        <tag>Shellcode</tag>
      </tags>
  </entry>
  <entry>
    <title>PE结构学习</title>
    <url>/2024/02/12/Re/PE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20240211154051266.png" alt="image-20240211154051266"></p>
<p>PE文件的结构体都定义在<strong>winnt.h</strong>中，包含使用即可。</p>
<span id="more"></span>

<h2 id="DOS部分"><a href="#DOS部分" class="headerlink" title="DOS部分"></a>DOS部分</h2><p>涉及到DOS头，主要是为了16位程序定义的，我们关心的部分不多，主要是<strong>e_magic</strong>和<strong>e_lfanew</strong>两个结构体成员，其他的基本都可以瞎改。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span>      <span class="comment">// DOS .EXE header</span></span><br><span class="line">    WORD   e_magic;                     <span class="comment">// Magic number 一般都是字符串MZ</span></span><br><span class="line">    WORD   e_cblp;                      <span class="comment">// Bytes on last page of file</span></span><br><span class="line">    WORD   e_cp;                        <span class="comment">// Pages in file</span></span><br><span class="line">    WORD   e_crlc;                      <span class="comment">// Relocations</span></span><br><span class="line">    WORD   e_cparhdr;                   <span class="comment">// Size of header in paragraphs</span></span><br><span class="line">    WORD   e_minalloc;                  <span class="comment">// Minimum extra paragraphs needed</span></span><br><span class="line">    WORD   e_maxalloc;                  <span class="comment">// Maximum extra paragraphs needed</span></span><br><span class="line">    WORD   e_ss;                        <span class="comment">// Initial (relative) SS value</span></span><br><span class="line">    WORD   e_sp;                        <span class="comment">// Initial SP value</span></span><br><span class="line">    WORD   e_csum;                      <span class="comment">// Checksum</span></span><br><span class="line">    WORD   e_ip;                        <span class="comment">// Initial IP value</span></span><br><span class="line">    WORD   e_cs;                        <span class="comment">// Initial (relative) CS value</span></span><br><span class="line">    WORD   e_lfarlc;                    <span class="comment">// File address of relocation table</span></span><br><span class="line">    WORD   e_ovno;                      <span class="comment">// Overlay number</span></span><br><span class="line">    WORD   e_res[<span class="number">4</span>];                    <span class="comment">// Reserved words</span></span><br><span class="line">    WORD   e_oemid;                     <span class="comment">// OEM identifier (for e_oeminfo)</span></span><br><span class="line">    WORD   e_oeminfo;                   <span class="comment">// OEM information; e_oemid specific</span></span><br><span class="line">    WORD   e_res2[<span class="number">10</span>];                  <span class="comment">// Reserved words</span></span><br><span class="line">    LONG   e_lfanew;                    <span class="comment">// 标明NT头的偏移</span></span><br><span class="line">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure>



<h2 id="PE文件头"><a href="#PE文件头" class="headerlink" title="PE文件头"></a>PE文件头</h2><p>也就是常说的NT头部分：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span></span><br><span class="line">    DWORD Signature;                         <span class="comment">// 一般都是字符串PE</span></span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;            <span class="comment">// 标明标准PE头的偏移</span></span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;  <span class="comment">// 标明扩展PE头的偏移</span></span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure>

<p>下面是标准PE头的注解：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Machine;                        <span class="comment">// 当前程序的平台架构</span></span><br><span class="line">    WORD    NumberOfSections;               <span class="comment">// 节的数量</span></span><br><span class="line">    DWORD   TimeDateStamp;                  <span class="comment">// 时间戳（无关紧要）</span></span><br><span class="line">    DWORD   PointerToSymbolTable;           <span class="comment">// 符号表指向（无关紧要）</span></span><br><span class="line">    DWORD   NumberOfSymbols;                <span class="comment">// 符号数量（无关紧要）</span></span><br><span class="line">    WORD    SizeOfOptionalHeader;           <span class="comment">// 扩展PE头的大小</span></span><br><span class="line">    WORD    Characteristics;                <span class="comment">// 文件属性（EXE、DLL等等）</span></span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure>

<p>下面是扩展PE头主要结构体成员的注解：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Standard fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    WORD    Magic;                          <span class="comment">// x64-0x20b x86-0x10b</span></span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    DWORD   SizeOfCode;</span><br><span class="line">    DWORD   SizeOfInitializedData;</span><br><span class="line">    DWORD   SizeOfUninitializedData;</span><br><span class="line">    DWORD   AddressOfEntryPoint;            <span class="comment">// 程序的入口地址</span></span><br><span class="line">    DWORD   BaseOfCode;</span><br><span class="line">    DWORD   BaseOfData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// NT additional fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   ImageBase;                      <span class="comment">// 内存镜像基地址</span></span><br><span class="line">    DWORD   SectionAlignment;               <span class="comment">// 内存对齐大小</span></span><br><span class="line">    DWORD   FileAlignment;                  <span class="comment">// 文件对齐大小</span></span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    WORD    MajorSubsystemVersion;          <span class="comment">// 不可篡改</span></span><br><span class="line">    WORD    MinorSubsystemVersion;          <span class="comment">// 不可篡改</span></span><br><span class="line">    DWORD   Win32VersionValue;</span><br><span class="line">    DWORD   SizeOfImage;                    <span class="comment">// PE文件映射到内存中的大小，注意内存对齐</span></span><br><span class="line">    DWORD   SizeOfHeaders;                  <span class="comment">// PE文件头和节表整体的大小</span></span><br><span class="line">    DWORD   CheckSum;                       <span class="comment">// 校验和，判断文件是否被修改</span></span><br><span class="line">    WORD    Subsystem;                      <span class="comment">// 子系统</span></span><br><span class="line">    WORD    DllCharacteristics;             <span class="comment">// 可用于设定是否随机基地址</span></span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   Size;</span><br><span class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br></pre></td></tr></table></figure>



<h2 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_SIZEOF_SHORT_NAME              8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];      <span class="comment">// 节表的名称</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">            DWORD   PhysicalAddress;</span><br><span class="line">            DWORD   VirtualSize;                <span class="comment">// 节原始大小</span></span><br><span class="line">    &#125; Misc;</span><br><span class="line">    DWORD   VirtualAddress;                     <span class="comment">// 内存中的偏移，注意内存对齐</span></span><br><span class="line">    DWORD   SizeOfRawData;                      <span class="comment">// 文件对齐后的节大小</span></span><br><span class="line">    DWORD   PointerToRawData;                   <span class="comment">// 文件中的偏移，注意文件对齐</span></span><br><span class="line">    DWORD   PointerToRelocations;</span><br><span class="line">    DWORD   PointerToLinenumbers;</span><br><span class="line">    WORD    NumberOfRelocations;</span><br><span class="line">    WORD    NumberOfLinenumbers;</span><br><span class="line">    DWORD   Characteristics;                    <span class="comment">// 节属性（可读、可写、可执行等等）</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>

<p>写一个Demo，利用C语言实现在exe文件的最后一个节中添加一个文件，那么需要修改的值为：</p>
<ul>
<li>节表最后一项的节原始大小 VirtualSize</li>
<li>节表最后一项的文件对齐后的节大小 SizeOfRawData</li>
<li>PE扩展头的 SizeOfImage</li>
</ul>
<p><strong>注意的是文件对齐和内存对齐的处理。</strong>Demo如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winnt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">FileToMemory</span><span class="params">(<span class="type">char</span> filepath[], <span class="type">char</span>** buf)</span> &#123;</span><br><span class="line">	FILE* file = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">int</span> filelen = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">errno_t</span> err = fopen_s(&amp;file, filepath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">	filelen = ftell(file);</span><br><span class="line">	fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">	*buf = (<span class="type">char</span> *)VirtualAlloc(<span class="literal">NULL</span>, filelen, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	fread(*buf, <span class="number">1</span>, filelen, file);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> filelen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> addfilepath[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="type">char</span> exefilepath[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="type">char</span> mergefilepath[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> addfilelen = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> exefilelen = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span>* addfilebuf = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">char</span>* exefilebuf = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将文件加载到内存中去</span></span><br><span class="line">	addfilelen = FileToMemory(addfilepath, &amp;addfilebuf);</span><br><span class="line">	exefilelen = FileToMemory(exefilepath, &amp;exefilebuf);</span><br><span class="line">	<span class="keyword">if</span> (addfilelen &lt; <span class="number">0</span> || exefilelen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;File is not exsiting!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取结构体</span></span><br><span class="line">	PIMAGE_DOS_HEADER pIMAGE_DOS_HEADER = (PIMAGE_DOS_HEADER)exefilebuf;</span><br><span class="line">	PIMAGE_NT_HEADERS pIMAGE_NT_HEADERS = (PIMAGE_NT_HEADERS)(exefilebuf + pIMAGE_DOS_HEADER-&gt;e_lfanew);</span><br><span class="line">	PIMAGE_FILE_HEADER pIMAGE_FILE_HEADER = (PIMAGE_FILE_HEADER)(&amp;pIMAGE_NT_HEADERS-&gt;FileHeader);</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER pIMAGE_OPTIONAL_HEADER = (PIMAGE_OPTIONAL_HEADER)(&amp;pIMAGE_NT_HEADERS-&gt;OptionalHeader);</span><br><span class="line">	PIMAGE_SECTION_HEADER pIMAGE_SECTION_HEADER = (PIMAGE_SECTION_HEADER)(pIMAGE_NT_HEADERS + <span class="number">1</span>);</span><br><span class="line">	PIMAGE_SECTION_HEADER pIMAGE_SECTION_HEADER_LAST = (PIMAGE_SECTION_HEADER)(pIMAGE_SECTION_HEADER + pIMAGE_FILE_HEADER-&gt;NumberOfSections - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据FileAlignment计算添加文件对齐后的大小</span></span><br><span class="line">	<span class="type">int</span> addfilealignmentlen = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (addfilelen % pIMAGE_OPTIONAL_HEADER-&gt;FileAlignment != <span class="number">0</span>) &#123;</span><br><span class="line">		addfilealignmentlen = (((addfilelen / pIMAGE_OPTIONAL_HEADER-&gt;FileAlignment) + <span class="number">1</span>) * pIMAGE_OPTIONAL_HEADER-&gt;FileAlignment);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		addfilealignmentlen = addfilelen;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据SectionAlignment计算添加内存对齐后的大小</span></span><br><span class="line">	<span class="type">int</span> addvirtualsize = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> rawsize = pIMAGE_SECTION_HEADER_LAST-&gt;SizeOfRawData + addfilealignmentlen;</span><br><span class="line">	<span class="keyword">if</span> (rawsize &gt; pIMAGE_OPTIONAL_HEADER-&gt;SectionAlignment) &#123;</span><br><span class="line">		<span class="keyword">if</span> (rawsize % pIMAGE_OPTIONAL_HEADER-&gt;SectionAlignment != <span class="number">0</span>) &#123;</span><br><span class="line">			addvirtualsize = ((rawsize / pIMAGE_OPTIONAL_HEADER-&gt;SectionAlignment) * pIMAGE_OPTIONAL_HEADER-&gt;SectionAlignment);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			addvirtualsize = rawsize - pIMAGE_OPTIONAL_HEADER-&gt;SectionAlignment;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 新内存用于合并exe和文件</span></span><br><span class="line">	<span class="type">char</span>* copybuf = (<span class="type">char</span>*)VirtualAlloc(<span class="literal">NULL</span>, addfilealignmentlen, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	<span class="built_in">memset</span>(copybuf, <span class="number">0</span>, addfilealignmentlen);</span><br><span class="line">	<span class="built_in">memcpy</span>(copybuf, addfilebuf, addfilelen);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* mergefilebuf = (<span class="type">char</span>*)VirtualAlloc(<span class="literal">NULL</span>, exefilelen + addfilealignmentlen, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	<span class="built_in">memcpy</span>(mergefilebuf, exefilebuf, exefilelen);</span><br><span class="line">	<span class="built_in">memcpy</span>(mergefilebuf + exefilelen, copybuf, addfilealignmentlen);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 修改新文件的PE结构</span></span><br><span class="line">	*(<span class="type">unsigned</span> <span class="type">int</span>*)(mergefilebuf + ((<span class="type">char</span>*)pIMAGE_SECTION_HEADER_LAST - exefilebuf) + IMAGE_SIZEOF_SHORT_NAME) = </span><br><span class="line">		pIMAGE_SECTION_HEADER_LAST-&gt;SizeOfRawData + addfilelen;</span><br><span class="line">	*(<span class="type">unsigned</span> <span class="type">int</span>*)(mergefilebuf + ((<span class="type">char</span>*)pIMAGE_SECTION_HEADER_LAST - exefilebuf) + IMAGE_SIZEOF_SHORT_NAME + <span class="number">8</span>) =</span><br><span class="line">		pIMAGE_SECTION_HEADER_LAST-&gt;SizeOfRawData + addfilealignmentlen;</span><br><span class="line">	*(<span class="type">unsigned</span> <span class="type">int</span>*)(mergefilebuf + ((<span class="type">char</span>*)&amp;pIMAGE_OPTIONAL_HEADER-&gt;SizeOfImage - exefilebuf)) =</span><br><span class="line">		pIMAGE_OPTIONAL_HEADER-&gt;SizeOfImage + addvirtualsize;</span><br><span class="line"></span><br><span class="line">	FILE* mergefile = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">errno_t</span> err = fopen_s(&amp;mergefile, mergefilepath, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	fwrite(mergefilebuf, <span class="number">1</span>, exefilelen + addfilealignmentlen, mergefile);</span><br><span class="line">	fclose(mergefile);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;~Success~&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h2><p>首先要清楚导出表的内存偏移地址（RVA）和大小是在PE扩展头的数据目录第一个项目中记录的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMAGE_OPTIONAL_HEADER32.DataDirectory[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如何将内存偏移地址RVA转化为文件偏移地址FA（也叫做FOA），就需要利用到节表。因为节表中同时记录了RVA和FOA，通过比较RVA可以确定导出表在哪个节中，再通过其与该节内存中的相差距离和该节的FOA相加即可得到导出表的FOA。</p>
</blockquote>
<p>接下来看导出表的结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;                   <span class="comment">// 指向该导出表文件名字符串</span></span><br><span class="line">    DWORD   Base;                   <span class="comment">// 导出函数的起始编号</span></span><br><span class="line">    DWORD   NumberOfFunctions;      <span class="comment">// 导出函数的数量</span></span><br><span class="line">    DWORD   NumberOfNames;          <span class="comment">// 以函数名字导出的函数个数</span></span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">// 导出函数地址表</span></span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">// 导出函数名称表</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">// 导出函数名称序号表</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure>

<p>其中最重要的就是最后三个结构体成员，<strong>AddressOfFunctions</strong>标明了每一个导出函数的地址，<strong>AddressOfNames</strong>标明了每一个以函数名字导出的函数名，<strong>AddressOfNameOrdinals</strong>标明了每一个以函数名字导出的函数序号，它是和<strong>AddressOfNames</strong>表中每一项一一对应的。这样理解起来会有些困难，再记录一下引用导出表函数的两种方式。</p>
<ol>
<li><p>利用导出函数名字引用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*myfunc)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    HMODULE myModule = LoadLibraryA(<span class="string">&quot;path to dll&quot;</span>);</span><br><span class="line">    myfunc func = (myfunc)GetProcAddress(myModule, <span class="string">&quot;函数名&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, func(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GetProcAddress的工作流程如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20240211163011006.png" alt="image-20240211163011006"></p>
</li>
<li><p>利用导出函数序号引用</p>
<blockquote>
<p>结构体中的Base起始编号是系统处理的，目的是为了保证索引缩小化，防止空间的浪费，根据用户定义的函数编号进行调整，比如我们定义三个函数的导出编号是230、231、232，那么Base就应该为230，这样AddressOfFunctions只需要三个表项，而不是233个，大大节省了空间。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*myfunc)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    HMODULE myModule = LoadLibraryA(<span class="string">&quot;path to dll&quot;</span>);</span><br><span class="line">    myfunc func = (myfunc)GetProcAddress(myModule, (LPCSTR)<span class="number">20</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, func(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GetProcAddress的工作流程如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20240211163628315.png" alt="image-20240211163628315"></p>
</li>
</ol>
<p>除上述两种情况之外，有的dll中导出的一些函数没有具体的实现，而是转发到了其他的dll中去。比如我在<strong>kernel32.dll</strong>的导出表中找到<strong>RemoveVectoredExceptionHandler</strong>符号，然而该符号在AddressOfFunctions中并未指向该函数的地址，而是指向了一串字符串<strong>NTDLL.RtlRemoveVectoredExceptionHandler</strong>，可以理解为需要再做一层GetProcAddress，到<strong>ntdll.dll</strong>中寻找<strong>RemoveVectoredExceptionHandler</strong>函数。</p>
<p>下面是自实现RVA转RAW的Demo：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winnt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">FileToMemory</span><span class="params">(<span class="type">char</span> filepath[], <span class="type">char</span>** buf)</span> &#123;</span><br><span class="line">    FILE* file = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> filelen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">errno_t</span> err = fopen_s(&amp;file, filepath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    filelen = ftell(file);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">    *buf = (<span class="type">char</span>*)VirtualAlloc(<span class="literal">NULL</span>, filelen, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    fread(*buf, <span class="number">1</span>, filelen, file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filelen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> exefilepath[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> exefilelen = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* exefilebuf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> rva = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> raw = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将文件加载到内存中去</span></span><br><span class="line">    exefilelen = FileToMemory(exefilepath, &amp;exefilebuf);</span><br><span class="line">    <span class="keyword">if</span> (exefilelen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;File is not exsiting!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取结构体</span></span><br><span class="line">    PIMAGE_DOS_HEADER pIMAGE_DOS_HEADER = (PIMAGE_DOS_HEADER)exefilebuf;</span><br><span class="line">    PIMAGE_NT_HEADERS pIMAGE_NT_HEADERS = (PIMAGE_NT_HEADERS)(exefilebuf + pIMAGE_DOS_HEADER-&gt;e_lfanew);</span><br><span class="line">    PIMAGE_FILE_HEADER pIMAGE_FILE_HEADER = (PIMAGE_FILE_HEADER)(&amp;pIMAGE_NT_HEADERS-&gt;FileHeader);</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER pIMAGE_OPTIONAL_HEADER = (PIMAGE_OPTIONAL_HEADER)(&amp;pIMAGE_NT_HEADERS-&gt;OptionalHeader);</span><br><span class="line">    PIMAGE_SECTION_HEADER pIMAGE_SECTION_HEADER = (PIMAGE_SECTION_HEADER)(pIMAGE_NT_HEADERS + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        raw = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Input your RVA address: &quot;</span>);</span><br><span class="line">        scanf_s(<span class="string">&quot;%llx&quot;</span>, &amp;rva, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 寻找在哪个节中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pIMAGE_FILE_HEADER-&gt;NumberOfSections; i++) &#123;</span><br><span class="line">            <span class="comment">// 排除.bss节</span></span><br><span class="line">            <span class="keyword">if</span> (pIMAGE_SECTION_HEADER[i].SizeOfRawData != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rva &gt;= pIMAGE_SECTION_HEADER[i].VirtualAddress &amp;&amp; rva &lt;= pIMAGE_SECTION_HEADER[i].VirtualAddress + pIMAGE_SECTION_HEADER[i].SizeOfRawData) &#123;</span><br><span class="line">                    raw = rva - pIMAGE_SECTION_HEADER[i].VirtualAddress + pIMAGE_SECTION_HEADER[i].PointerToRawData;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (raw == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Failed\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Raw: 0x%llx\n&quot;</span>, raw);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后尝试自实现GetProcAddress，只适用于32位程序的一般情况，没有考虑到转发，如果64位程序那么需要修改类型大小：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winnt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// __declspec(dllimport)</span></span><br><span class="line">FARPROC</span><br><span class="line">WINAPI</span><br><span class="line"><span class="title function_">MyNameGetProcAddress</span><span class="params">(</span></span><br><span class="line"><span class="params">	_In_ HMODULE hModule,</span></span><br><span class="line"><span class="params">	_In_ LPCSTR lpProcName</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pIMAGE_DOS_HEADER = (PIMAGE_DOS_HEADER)hModule;</span><br><span class="line">	PIMAGE_NT_HEADERS pIMAGE_NT_HEADERS = (PIMAGE_NT_HEADERS)(pIMAGE_DOS_HEADER-&gt;e_lfanew + (DWORD)hModule);</span><br><span class="line">	PIMAGE_EXPORT_DIRECTORY pIMAGE_EXPORT_DIRECTORY = (PIMAGE_EXPORT_DIRECTORY)(pIMAGE_NT_HEADERS-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress + (DWORD)hModule);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 对比函数名称</span></span><br><span class="line">	DWORD* NameAddress = (DWORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfNames + (DWORD)hModule);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pIMAGE_EXPORT_DIRECTORY-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">		<span class="type">char</span> *FuncName = (<span class="type">char</span>*)(NameAddress[i] + (DWORD)hModule);</span><br><span class="line">		<span class="comment">// printf(&quot;%s\n&quot;, FuncName);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果对比成功</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(FuncName, lpProcName)) &#123;</span><br><span class="line">			<span class="comment">// 找到对应名称序号表中的内容</span></span><br><span class="line">			WORD* NameOrdinalAddress = (WORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfNameOrdinals + (DWORD)hModule);</span><br><span class="line">			WORD NameOrdinal = NameOrdinalAddress[i];</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 找到函数地址表中对应的内容</span></span><br><span class="line">			DWORD* FuncAddress = (DWORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfFunctions + (DWORD)hModule);</span><br><span class="line">			DWORD Func = FuncAddress[NameOrdinal] + (DWORD)hModule;</span><br><span class="line">			<span class="keyword">return</span> (FARPROC)Func;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// __declspec(dllimport)</span></span><br><span class="line">FARPROC</span><br><span class="line">WINAPI</span><br><span class="line"><span class="title function_">MyOrdinalGetProcAddress</span><span class="params">(</span></span><br><span class="line"><span class="params">	_In_ HMODULE hModule,</span></span><br><span class="line"><span class="params">	_In_ LPCSTR lpProcName</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pIMAGE_DOS_HEADER = (PIMAGE_DOS_HEADER)hModule;</span><br><span class="line">	PIMAGE_NT_HEADERS pIMAGE_NT_HEADERS = (PIMAGE_NT_HEADERS)(pIMAGE_DOS_HEADER-&gt;e_lfanew + (DWORD)hModule);</span><br><span class="line">	PIMAGE_EXPORT_DIRECTORY pIMAGE_EXPORT_DIRECTORY = (PIMAGE_EXPORT_DIRECTORY)(pIMAGE_NT_HEADERS-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress + (DWORD)hModule);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 找到函数地址表中对应的内容</span></span><br><span class="line">	DWORD* FuncAddress = (DWORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfFunctions + (DWORD)hModule);</span><br><span class="line">	DWORD FuncOrdinal = (DWORD)lpProcName - pIMAGE_EXPORT_DIRECTORY-&gt;Base;</span><br><span class="line">	DWORD Func = FuncAddress[FuncOrdinal] + (DWORD)hModule;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (FARPROC)Func;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// __declspec(dllimport)</span></span><br><span class="line">FARPROC</span><br><span class="line">WINAPI</span><br><span class="line"><span class="title function_">MyGetProcAddress</span><span class="params">(</span></span><br><span class="line"><span class="params">	_In_ HMODULE hModule,</span></span><br><span class="line"><span class="params">	_In_ LPCSTR lpProcName</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> ((DWORD)lpProcName &gt;&gt; <span class="number">16</span> == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> MyOrdinalGetProcAddress(hModule, lpProcName);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> MyNameGetProcAddress(hModule, lpProcName);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	HMODULE Hmodule = GetModuleHandleA(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* func1 = MyGetProcAddress(Hmodule, <span class="string">&quot;RtlLoadString&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;func1: 0x%x\n&quot;</span>, func1);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* func2 = MyGetProcAddress(Hmodule, (LPCSTR)<span class="number">1275</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;func2: 0x%x\n&quot;</span>, func2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><p>首先要清楚导入表的内存偏移地址（RVA）和大小是在PE扩展头的数据目录第二个项目中记录的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMAGE_OPTIONAL_HEADER32.DataDirectory[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>接下来看导入表的结构体，一共是三个：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   Characteristics;</span><br><span class="line">        DWORD   OriginalFirstThunk;         <span class="comment">// 标明指向 IMAGE_THUNK_DATA（表示函数名字）的 RVA</span></span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    DWORD   ForwarderChain;</span><br><span class="line">    DWORD   Name;                           <span class="comment">// 导入模块的名字</span></span><br><span class="line">    DWORD   FirstThunk;                     <span class="comment">// 标明指向 IMAGE_THUNK_DATA（启动后会修改成函数地址）的 RVA</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_THUNK_DATA32</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD ForwarderString;              <span class="comment">// PBYTE </span></span><br><span class="line">        DWORD Function;                     <span class="comment">// PDWORD</span></span><br><span class="line">        DWORD Ordinal;</span><br><span class="line">        DWORD AddressOfData;                <span class="comment">// PIMAGE_IMPORT_BY_NAME</span></span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_BY_NAME</span> &#123;</span></span><br><span class="line">    WORD    Hint;                           <span class="comment">// 如果不为0，则表示函数在导出序号表的序号</span></span><br><span class="line">    BYTE    Name[<span class="number">1</span>];                        <span class="comment">// 函数名字</span></span><br><span class="line">&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure>

<p>在这里引用 Apollon_krj 的流程图，方便理解导入函数的过程。</p>
<blockquote>
<p>原文：<a href="https://blog.csdn.net/Apollon_krj/article/details/77417063">https://blog.csdn.net/Apollon_krj/article/details/77417063</a></p>
</blockquote>
<p>程序加载前的情况：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/20170820114145821" alt="这里写图片描述"></p>
<p>程序加载后的情况：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/20170820114205491" alt="这里写图片描述"></p>
<p>也就是说在程序加载前，<strong>OriginalFirstThunk</strong>和<strong>FirstThunk</strong>都指向PIMAGE_IMPORT_BY_NAME共用体，并且该共用体使用的成员是<strong>IMAGE_IMPORT_BY_NAME结构体</strong>；在程序加载之后，<strong>FirstThunk</strong>中的内容发生了变化，指向了函数的实际地址。<strong>需要注意的是导入表会暴露程序所使用的函数。</strong></p>
<h2 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h2><p>在程序中往往存在一些地址写死的变量，那么当程序加载的基质变化，那么这些写死的值也需要做修正，重定位就是做的这件事。重定位表的内存偏移地址（RVA）和大小是在PE扩展头的数据目录第六个项目中记录的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMAGE_OPTIONAL_HEADER32.DataDirectory[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p>接下来看重定位表的结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   SizeOfBlock;</span><br><span class="line"><span class="comment">//  WORD    TypeOffset[1];</span></span><br><span class="line">&#125; IMAGE_BASE_RELOCATION;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_BASE_RELOCATION UNALIGNED * PIMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure>

<p>依然引用 Apollon_krj 的流程图，方便理解：</p>
<blockquote>
<p>原文：<a href="https://blog.csdn.net/Apollon_krj/article/details/77370452">https://blog.csdn.net/Apollon_krj/article/details/77370452</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/20170818164751341" alt="img"></p>
<p>这里还需要解释一下图中偏移地址记录的内容，也就是结构体中的<strong>TypeOffset</strong>字段。该字段的大小是两个字节，其中高位的4位表示重定位的类型，而低位的12位表示重定位的偏移。普通的重定位类型有下面的三类：</p>
<ul>
<li>IMAGE_REL_BASED_ABSOLUTE：表示不需要进行任何修正</li>
<li>IMAGE_REL_BASED_HIGHLOW：表示需要将地址中的低16位和高16位分别进行修正</li>
<li>IMAGE_REL_BASED_DIR64：表示需要对64位指针进行修正</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    WORD Offset:<span class="number">12</span>;</span><br><span class="line">    WORD Type  :<span class="number">4</span>;</span><br><span class="line">&#125; TypeOffset;</span><br></pre></td></tr></table></figure>

<p>理解了重定位的相关结构体，那么就需要理解重定位的过程。当程序加载到内存中，所分配的基质和PE扩展头中记录的<strong>ImageBase</strong>相同时，就不需要重定位；当不相同时，就需要修改结构体的<strong>VirtualAddress</strong>进行修正。最后变量修正后的地址就是<strong>VirtualAddress</strong>成员和<strong>TypeOffset</strong>低12位相加后的值。</p>
]]></content>
      <categories>
        <category>Re</category>
      </categories>
      <tags>
        <tag>PE</tag>
      </tags>
  </entry>
</search>
